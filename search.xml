<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringBoot 内置工具类</title>
      <link href="/2022/05/11/SpringBoot-%E5%86%85%E7%BD%AE%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2022/05/11/SpringBoot-%E5%86%85%E7%BD%AE%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一、断言"><a href="#一、断言" class="headerlink" title="一、断言"></a>一、断言</h2><ol><li>断言是一个逻辑判断，用于检查不应该发生的情况</li><li>Assert 关键字在 JDK1.4 中引入，可通过 JVM 参数-enableassertions 开启</li><li>SpringBoot 中提供了 Assert 断言工具类，通常用于数据合法性检查</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 要求参数 object 必须为非空（Not Null），否则抛出异常，不予放行</span></span><br><span class="line"><span class="comment">// 参数 message 参数用于定制异常信息。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">notNull</span><span class="params">(Object object, String message)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 要求参数必须空（Null），否则抛出异常，不予『放行』。</span></span></span><br><span class="line"><span class="function"><span class="comment">// 和 notNull() 方法断言规则相反</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">isNull</span><span class="params">(Object object, String message)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 要求参数必须为真（True），否则抛出异常，不予『放行』。</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">isTrue</span><span class="params">(<span class="keyword">boolean</span> expression, String message)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 要求参数（List/Set）必须非空（Not Empty），否则抛出异常，不予放行</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">notEmpty</span><span class="params">(Collection collection, String message)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 要求参数（String）必须有长度（即，Not Empty），否则抛出异常，不予放行</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hasLength</span><span class="params">(String text, String message)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 要求参数（String）必须有内容（即，Not Blank），否则抛出异常，不予放行</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hasText</span><span class="params">(String text, String message)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 要求参数是指定类型的实例，否则抛出异常，不予放行</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">isInstanceOf</span><span class="params">(Class type, Object obj, String message)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 要求参数 `subType` 必须是参数 superType 的子类或实现类，否则抛出异常，不予放行</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">isAssignable</span><span class="params">(Class superType, Class subType, String message)</span></span></span><br></pre></td></tr></table></figure><h2 id="二、对象、数组、集合"><a href="#二、对象、数组、集合" class="headerlink" title="二、对象、数组、集合"></a>二、对象、数组、集合</h2><h3 id="2-1、对象工具"><a href="#2-1、对象工具" class="headerlink" title="2.1、对象工具"></a>2.1、对象工具</h3><h4 id="2-1-1-获取对象的基本信息"><a href="#2-1-1-获取对象的基本信息" class="headerlink" title="2.1.1 获取对象的基本信息"></a>2.1.1 获取对象的基本信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取对象的类名。参数为 null 时，返回字符串：&quot;null&quot;</span></span><br><span class="line"><span class="function">String <span class="title">nullSafeClassName</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 参数为 null 时，返回 0</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nullSafeHashCode</span><span class="params">(Object object)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 参数为 null 时，返回字符串：&quot;null&quot;</span></span></span><br><span class="line"><span class="function">String <span class="title">nullSafeToString</span><span class="params">(<span class="keyword">boolean</span>[] array)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 获取对象 HashCode（十六进制形式字符串）。参数为 null 时，返回 0</span></span></span><br><span class="line"><span class="function">String <span class="title">getIdentityHexString</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 获取对象的类名和 HashCode。参数为 null 时，返回字符串：&quot;&quot;</span></span></span><br><span class="line"><span class="function">String <span class="title">identityToString</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 相当于 toString()方法，但参数为 null 时，返回字符串：&quot;&quot;</span></span></span><br><span class="line"><span class="function">String <span class="title">getDisplayString</span><span class="params">(Object obj)</span></span></span><br></pre></td></tr></table></figure><h4 id="2-1-2-判断工具"><a href="#2-1-2-判断工具" class="headerlink" title="2.1.2 判断工具"></a>2.1.2 判断工具</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断数组是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">(Object[] array)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 判断参数对象是否是数组</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isArray</span><span class="params">(Object obj)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 判断数组中是否包含指定元素</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">containsElement</span><span class="params">(Object[] array, Object element)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 相等，或同为 null时，返回 true</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">nullSafeEquals</span><span class="params">(Object o1, Object o2)</span></span></span><br><span class="line"><span class="function"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="function">判断参数对象是否为空，判断标准为：</span></span></span><br><span class="line"><span class="comment"><span class="function">    Optional: Optional.empty()</span></span></span><br><span class="line"><span class="comment"><span class="function">       Array: length == 0</span></span></span><br><span class="line"><span class="comment"><span class="function">CharSequence: length == 0</span></span></span><br><span class="line"><span class="comment"><span class="function">  Collection: Collection.isEmpty()</span></span></span><br><span class="line"><span class="comment"><span class="function">         Map: Map.isEmpty()</span></span></span><br><span class="line"><span class="comment"><span class="function"> */</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">(Object obj)</span></span></span><br></pre></td></tr></table></figure><h4 id="2-1-3-其他工具方法"><a href="#2-1-3-其他工具方法" class="headerlink" title="2.1.3 其他工具方法"></a>2.1.3 其他工具方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向参数数组的末尾追加新元素，并返回一个新数组</span></span><br><span class="line">&lt;A, O extends A&gt; A[] addObjectToArray(A[] array, O obj)</span><br><span class="line"><span class="comment">// 原生基础类型数组 --&gt; 包装类数组</span></span><br><span class="line">Object[] toObjectArray(Object source)</span><br></pre></td></tr></table></figure><h3 id="2-2、字符串工具"><a href="#2-2、字符串工具" class="headerlink" title="2.2、字符串工具"></a>2.2、字符串工具</h3><h4 id="2-2-1-字符串判断工具"><a href="#2-2-1-字符串判断工具" class="headerlink" title="2.2.1 字符串判断工具"></a>2.2.1 字符串判断工具</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断字符串是否为 null，或 &quot;&quot;。注意，包含空白符的字符串为非空</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">(Object str)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 判断字符串是否是以指定内容结束。忽略大小写</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">endsWithIgnoreCase</span><span class="params">(String str, String suffix)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 判断字符串是否已指定内容开头。忽略大小写</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">startsWithIgnoreCase</span><span class="params">(String str, String prefix)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 是否包含空白符</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">containsWhitespace</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 判断字符串非空且长度不为 0，即，Not Empty</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasLength</span><span class="params">(CharSequence str)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 判断字符串是否包含实际内容，即非仅包含空白符，也就是 Not Blank</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasText</span><span class="params">(CharSequence str)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 判断字符串指定索引处是否包含一个子串。</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">substringMatch</span><span class="params">(CharSequence str, <span class="keyword">int</span> index, CharSequence substring)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 计算一个字符串中指定子串的出现次数</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countOccurrencesOf</span><span class="params">(String str, String sub)</span></span></span><br></pre></td></tr></table></figure><h4 id="2-2-2-字符串操作工具"><a href="#2-2-2-字符串操作工具" class="headerlink" title="2.2.2 字符串操作工具"></a>2.2.2 字符串操作工具</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查找并替换指定子串</span></span><br><span class="line"><span class="function">String <span class="title">replace</span><span class="params">(String inString, String oldPattern, String newPattern)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 去除尾部的特定字符</span></span></span><br><span class="line"><span class="function">String <span class="title">trimTrailingCharacter</span><span class="params">(String str, <span class="keyword">char</span> trailingCharacter)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 去除头部的特定字符</span></span></span><br><span class="line"><span class="function">String <span class="title">trimLeadingCharacter</span><span class="params">(String str, <span class="keyword">char</span> leadingCharacter)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 去除头部的空白符</span></span></span><br><span class="line"><span class="function">String <span class="title">trimLeadingWhitespace</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 去除头部的空白符</span></span></span><br><span class="line"><span class="function">String <span class="title">trimTrailingWhitespace</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 去除头部和尾部的空白符</span></span></span><br><span class="line"><span class="function">String <span class="title">trimWhitespace</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 删除开头、结尾和中间的空白符</span></span></span><br><span class="line"><span class="function">String <span class="title">trimAllWhitespace</span><span class="params">(String str)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 删除指定子串</span></span></span><br><span class="line"><span class="function">String <span class="title">delete</span><span class="params">(String inString, String pattern)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 删除指定字符（可以是多个）</span></span></span><br><span class="line"><span class="function">String <span class="title">deleteAny</span><span class="params">(String inString, String charsToDelete)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 对数组的每一项执行 trim() 方法</span></span></span><br><span class="line"><span class="function">String[] <span class="title">trimArrayElements</span><span class="params">(String[] array)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 将 URL 字符串进行解码</span></span></span><br><span class="line"><span class="function">String <span class="title">uriDecode</span><span class="params">(String source, Charset charset)</span></span></span><br></pre></td></tr></table></figure><h4 id="2-2-3-路径相关工具"><a href="#2-2-3-路径相关工具" class="headerlink" title="2.2.3 路径相关工具"></a>2.2.3 路径相关工具</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解析路径字符串，优化其中的 “..”</span></span><br><span class="line"><span class="function">String <span class="title">cleanPath</span><span class="params">(String path)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 解析路径字符串，解析出文件名部分</span></span></span><br><span class="line"><span class="function">String <span class="title">getFilename</span><span class="params">(String path)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 解析路径字符串，解析出文件后缀名</span></span></span><br><span class="line"><span class="function">String <span class="title">getFilenameExtension</span><span class="params">(String path)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 比较两个两个字符串，判断是否是同一个路径。会自动处理路径中的 “..”</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">pathEquals</span><span class="params">(String path1, String path2)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 删除文件路径名中的后缀部分</span></span></span><br><span class="line"><span class="function">String <span class="title">stripFilenameExtension</span><span class="params">(String path)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 以 “. 作为分隔符，获取其最后一部分</span></span></span><br><span class="line"><span class="function">String <span class="title">unqualify</span><span class="params">(String qualifiedName)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 以指定字符作为分隔符，获取其最后一部分</span></span></span><br><span class="line"><span class="function">String <span class="title">unqualify</span><span class="params">(String qualifiedName, <span class="keyword">char</span> separator)</span></span></span><br></pre></td></tr></table></figure><h3 id="2-3、集合工具"><a href="#2-3、集合工具" class="headerlink" title="2.3、集合工具"></a>2.3、集合工具</h3><h4 id="2-3-1-集合判断工具"><a href="#2-3-1-集合判断工具" class="headerlink" title="2.3.1 集合判断工具"></a>2.3.1 集合判断工具</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断 List/Set 是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">(Collection&lt;?&gt; collection)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 判断 Map 是否为空</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">(Map&lt;?,?&gt; map)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 判断 List/Set 中是否包含某个对象</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">containsInstance</span><span class="params">(Collection&lt;?&gt; collection, Object element)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 以迭代器的方式，判断 List/Set 中是否包含某个对象</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Iterator&lt;?&gt; iterator, Object element)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 判断 List/Set 是否包含某些对象中的任意一个</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">containsAny</span><span class="params">(Collection&lt;?&gt; source, Collection&lt;?&gt; candidates)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 判断 List/Set 中的每个元素是否唯一。即 List/Set 中不存在重复元素</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasUniqueObject</span><span class="params">(Collection&lt;?&gt; collection)</span></span></span><br></pre></td></tr></table></figure><h4 id="2-3-2-集合操作工具"><a href="#2-3-2-集合操作工具" class="headerlink" title="2.3.2 集合操作工具"></a>2.3.2 集合操作工具</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 Array 中的元素都添加到 List/Set 中</span></span><br><span class="line">&lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">mergeArrayIntoCollection</span><span class="params">(Object array, Collection&lt;E&gt; collection)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 将 Properties 中的键值对都添加到 Map 中</span></span></span><br><span class="line"><span class="function">&lt;K,V&gt; <span class="keyword">void</span> <span class="title">mergePropertiesIntoMap</span><span class="params">(Properties props, Map&lt;K,V&gt; map)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 返回 List 中最后一个元素</span></span></span><br><span class="line"><span class="function">&lt;T&gt; T <span class="title">lastElement</span><span class="params">(List&lt;T&gt; list)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 返回 Set 中最后一个元素</span></span></span><br><span class="line"><span class="function">&lt;T&gt; T <span class="title">lastElement</span><span class="params">(Set&lt;T&gt; set)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 返回参数 candidates 中第一个存在于参数 source 中的元素</span></span></span><br><span class="line"><span class="function">&lt;E&gt; E <span class="title">findFirstMatch</span><span class="params">(Collection&lt;?&gt; source, Collection&lt;E&gt; candidates)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 返回 List/Set 中指定类型的元素。</span></span></span><br><span class="line"><span class="function">&lt;T&gt; T <span class="title">findValueOfType</span><span class="params">(Collection&lt;?&gt; collection, Class&lt;T&gt; type)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 返回 List/Set 中指定类型的元素。如果第一种类型未找到，则查找第二种类型，以此类推</span></span></span><br><span class="line"><span class="function">Object <span class="title">findValueOfType</span><span class="params">(Collection&lt;?&gt; collection, Class&lt;?&gt;[] types)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 返回 List/Set 中元素的类型</span></span></span><br><span class="line"><span class="function">Class&lt;?&gt; <span class="title">findCommonElementType</span><span class="params">(Collection&lt;?&gt; collection)</span></span></span><br></pre></td></tr></table></figure><h2 id="三、文件、资源、IO-流"><a href="#三、文件、资源、IO-流" class="headerlink" title="三、文件、资源、IO 流"></a>三、文件、资源、IO 流</h2><h3 id="3-1、文件工具"><a href="#3-1、文件工具" class="headerlink" title="3.1、文件工具"></a>3.1、文件工具</h3><h4 id="3-1-1-输入"><a href="#3-1-1-输入" class="headerlink" title="3.1.1 输入"></a>3.1.1 输入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从文件中读入到字节数组中</span></span><br><span class="line"><span class="keyword">byte</span>[] copyToByteArray(File in)</span><br><span class="line"><span class="comment">// 从输入流中读入到字节数组中</span></span><br><span class="line"><span class="keyword">byte</span>[] copyToByteArray(InputStream in)</span><br><span class="line"><span class="comment">// 从输入流中读入到字符串中</span></span><br><span class="line"><span class="function">String <span class="title">copyToString</span><span class="params">(Reader in)</span></span></span><br></pre></td></tr></table></figure><h4 id="3-1-2-输出"><a href="#3-1-2-输出" class="headerlink" title="3.1.2 输出"></a>3.1.2 输出</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从字节数组到文件</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy</span><span class="params">(<span class="keyword">byte</span>[] in, File out)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 从文件到文件</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">copy</span><span class="params">(File in, File out)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 从字节数组到输出流</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy</span><span class="params">(<span class="keyword">byte</span>[] in, OutputStream out)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 从输入流到输出流</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">copy</span><span class="params">(InputStream in, OutputStream out)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 从输入流到输出流</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">copy</span><span class="params">(Reader in, Writer out)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 从字符串到输出流</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy</span><span class="params">(String in, Writer out)</span></span></span><br></pre></td></tr></table></figure><h3 id="3-2、资源工具"><a href="#3-2、资源工具" class="headerlink" title="3.2、资源工具"></a>3.2、资源工具</h3><h4 id="3-2-1-从资源路径获取文件"><a href="#3-2-1-从资源路径获取文件" class="headerlink" title="3.2.1 从资源路径获取文件"></a>3.2.1 从资源路径获取文件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断字符串是否是一个合法的 URL 字符串。</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isUrl</span><span class="params">(String resourceLocation)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 获取 URL</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> URL <span class="title">getURL</span><span class="params">(String resourceLocation)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 获取文件（在 JAR 包内无法正常使用，需要是一个独立的文件）</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> File <span class="title">getFile</span><span class="params">(String resourceLocation)</span></span></span><br></pre></td></tr></table></figure><h4 id="3-2-2-Resource"><a href="#3-2-2-Resource" class="headerlink" title="3.2.2 Resource"></a>3.2.2 Resource</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件系统资源 D:\...</span></span><br><span class="line">FileSystemResource</span><br><span class="line"><span class="comment">// URL 资源，如 file://... http://...</span></span><br><span class="line">UrlResource</span><br><span class="line"><span class="comment">// 类路径下的资源，classpth:...</span></span><br><span class="line">ClassPathResource</span><br><span class="line"><span class="comment">// Web 容器上下文中的资源（jar 包、war 包）</span></span><br><span class="line">ServletContextResource</span><br><span class="line"><span class="comment">// 判断资源是否存在</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">exists</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 从资源中获得 File 对象</span></span></span><br><span class="line"><span class="function">File <span class="title">getFile</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 从资源中获得 URI 对象</span></span></span><br><span class="line"><span class="function">URI <span class="title">getURI</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 从资源中获得 URI 对象</span></span></span><br><span class="line"><span class="function">URL <span class="title">getURL</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 获得资源的 InputStream</span></span></span><br><span class="line"><span class="function">InputStream <span class="title">getInputStream</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 获得资源的描述信息</span></span></span><br><span class="line"><span class="function">String <span class="title">getDescription</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h3 id="3-2、StreamUtils"><a href="#3-2、StreamUtils" class="headerlink" title="3.2、StreamUtils"></a>3.2、StreamUtils</h3><h4 id="3-2-1-输入"><a href="#3-2-1-输入" class="headerlink" title="3.2.1 输入"></a>3.2.1 输入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy</span><span class="params">(<span class="keyword">byte</span>[] in, OutputStream out)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">copy</span><span class="params">(InputStream in, OutputStream out)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copy</span><span class="params">(String in, Charset charset, OutputStream out)</span></span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">copyRange</span><span class="params">(InputStream in, OutputStream out, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span></span></span><br></pre></td></tr></table></figure><h4 id="3-2-2-输出"><a href="#3-2-2-输出" class="headerlink" title="3.2.2 输出"></a>3.2.2 输出</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] copyToByteArray(InputStream in)</span><br><span class="line"><span class="function">String <span class="title">copyToString</span><span class="params">(InputStream in, Charset charset)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 舍弃输入流中的内容</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">drain</span><span class="params">(InputStream in)</span></span></span><br></pre></td></tr></table></figure><h2 id="四、反射、AOP"><a href="#四、反射、AOP" class="headerlink" title="四、反射、AOP"></a>四、反射、AOP</h2><h3 id="4-1、反射"><a href="#4-1、反射" class="headerlink" title="4.1、反射"></a>4.1、反射</h3><h4 id="4-1-1-获取方法"><a href="#4-1-1-获取方法" class="headerlink" title="4.1.1 获取方法"></a>4.1.1 获取方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在类中查找指定方法</span></span><br><span class="line"><span class="function">Method <span class="title">findMethod</span><span class="params">(Class&lt;?&gt; clazz, String name)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 同上，额外提供方法参数类型作查找条件</span></span></span><br><span class="line"><span class="function">Method <span class="title">findMethod</span><span class="params">(Class&lt;?&gt; clazz, String name, Class&lt;?&gt;... paramTypes)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 获得类中所有方法，包括继承而来的</span></span></span><br><span class="line"><span class="function">Method[] <span class="title">getAllDeclaredMethods</span><span class="params">(Class&lt;?&gt; leafClass)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 在类中查找指定构造方法</span></span></span><br><span class="line"><span class="function">Constructor&lt;T&gt; <span class="title">accessibleConstructor</span><span class="params">(Class&lt;T&gt; clazz, Class&lt;?&gt;... parameterTypes)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 是否是 equals() 方法</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEqualsMethod</span><span class="params">(Method method)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 是否是 hashCode() 方法</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isHashCodeMethod</span><span class="params">(Method method)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 是否是 toString() 方法</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isToStringMethod</span><span class="params">(Method method)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 是否是从 Object 类继承而来的方法</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isObjectMethod</span><span class="params">(Method method)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 检查一个方法是否声明抛出指定异常</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">declaresException</span><span class="params">(Method method, Class&lt;?&gt; exceptionType)</span></span></span><br></pre></td></tr></table></figure><h4 id="4-1-2-执行方法"><a href="#4-1-2-执行方法" class="headerlink" title="4.1.2 执行方法"></a>4.1.2 执行方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 执行方法</span></span><br><span class="line"><span class="function">Object <span class="title">invokeMethod</span><span class="params">(Method method, Object target)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 同上，提供方法参数</span></span></span><br><span class="line"><span class="function">Object <span class="title">invokeMethod</span><span class="params">(Method method, Object target, Object... args)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 取消 Java 权限检查。以便后续执行该私有方法</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeAccessible</span><span class="params">(Method method)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 取消 Java 权限检查。以便后续执行私有构造方法</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeAccessible</span><span class="params">(Constructor&lt;?&gt; ctor)</span></span></span><br></pre></td></tr></table></figure><h4 id="4-1-3-获取字段"><a href="#4-1-3-获取字段" class="headerlink" title="4.1.3 获取字段"></a>4.1.3 获取字段</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在类中查找指定属性</span></span><br><span class="line"><span class="function">Field <span class="title">findField</span><span class="params">(Class&lt;?&gt; clazz, String name)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 同上，多提供了属性的类型</span></span></span><br><span class="line"><span class="function">Field <span class="title">findField</span><span class="params">(Class&lt;?&gt; clazz, String name, Class&lt;?&gt; type)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 是否为一个 &quot;public static final&quot; 属性</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isPublicStaticFinal</span><span class="params">(Field field)</span></span></span><br></pre></td></tr></table></figure><h4 id="4-1-4-设置字段"><a href="#4-1-4-设置字段" class="headerlink" title="4.1.4 设置字段"></a>4.1.4 设置字段</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 target 对象的 field 属性值</span></span><br><span class="line"><span class="function">Object <span class="title">getField</span><span class="params">(Field field, Object target)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 设置 target 对象的 field 属性值，值为 value</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setField</span><span class="params">(Field field, Object target, Object value)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 同类对象属性对等赋值</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">shallowCopyFieldState</span><span class="params">(Object src, Object dest)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 取消 Java 的权限控制检查。以便后续读写该私有属性</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">makeAccessible</span><span class="params">(Field field)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 对类的每个属性执行 callback</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doWithFields</span><span class="params">(Class&lt;?&gt; clazz, ReflectionUtils.FieldCallback fc)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 同上，多了个属性过滤功能。</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doWithFields</span><span class="params">(Class&lt;?&gt; clazz, ReflectionUtils.FieldCallback fc,</span></span></span><br><span class="line"><span class="params"><span class="function">                  ReflectionUtils.FieldFilter ff)</span></span></span><br><span class="line"><span class="function"><span class="comment">// 同上，但不包括继承而来的属性</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doWithLocalFields</span><span class="params">(Class&lt;?&gt; clazz, ReflectionUtils.FieldCallback fc)</span></span></span><br></pre></td></tr></table></figure><h3 id="4-2、AOP"><a href="#4-2、AOP" class="headerlink" title="4.2、AOP"></a>4.2、AOP</h3><h4 id="4-2-1-判断代理类型"><a href="#4-2-1-判断代理类型" class="headerlink" title="4.2.1 判断代理类型"></a>4.2.1 判断代理类型</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是不是 Spring 代理对象</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isAopProxy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 判断是不是 jdk 动态代理对象</span></span></span><br><span class="line"><span class="function"><span class="title">isJdkDynamicProxy</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">// 判断是不是 CGLIB 代理对象</span></span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isCglibProxy</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure><h4 id="4-2-2-获取被代理对象的-class"><a href="#4-2-2-获取被代理对象的-class" class="headerlink" title="4.2.2 获取被代理对象的 class"></a>4.2.2 获取被代理对象的 class</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取被代理的目标 class</span></span><br><span class="line">Class&lt;?&gt; getTargetClass()</span><br></pre></td></tr></table></figure><h4 id="4-2-3-获取当前对象的代理对象"><a href="#4-2-3-获取当前对象的代理对象" class="headerlink" title="4.2.3 获取当前对象的代理对象"></a>4.2.3 获取当前对象的代理对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Object <span class="title">currentProxy</span><span class="params">()</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>领域驱动设计学习</title>
      <link href="/2021/11/04/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/11/04/%E9%A2%86%E5%9F%9F%E9%A9%B1%E5%8A%A8%E8%AE%BE%E8%AE%A1%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>小傅哥博客读后感：<a href="https://bugstack.cn/">https://bugstack.cn</a></p><h2 id="一、初识领域驱动设计"><a href="#一、初识领域驱动设计" class="headerlink" title="一、初识领域驱动设计"></a>一、初识领域驱动设计</h2><h3 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h3><blockquote><p><strong>DDD（Domain-Driven Design 领域驱动设计）</strong>是由 Eric Evans 最先提出，目的是对软件所涉及到的领域进行建模，以应对系统规模过大时引起的软件复杂性的问题。整个过程大概是这样的，开发团队和领域专家一起通过 通用语言(Ubiquitous Language)去理解和消化领域知识，从领域知识中提取和划分为一个一个的子领域（核心子域，通用子域，支撑子域），并在子领域上建立模型，再重复以上步骤，这样周而复始，构建出一套符合当前领域的模型。</p></blockquote><p><img src="https://file.buildworld.cn/img/20211104225640.png"></p><blockquote><p>依靠领域驱动设计的设计思想，通过事件风暴建立领域模型，合理划分领域逻辑和物理边界，建立领域对象及服务矩阵和服务架构图，定义符合 DDD 分层架构思想的代码结构模型，保证业务模型与代码模型的一致性。通过上述设计思想、方法和过程，指导团队按照 DDD 设计思想完成微服务设计和开发。</p><ol><li>拒绝泥球小单体、拒绝污染功能与服务、拒绝一加功能排期一个月</li><li>架构出高可用极易符合互联网高速迭代的应用服务</li><li>物料化、组装化、可编排的服务，提高人效</li></ol></blockquote><h3 id="2、服务架构"><a href="#2、服务架构" class="headerlink" title="2、服务架构"></a>2、服务架构</h3><p><img src="https://file.buildworld.cn/img/20211104225650.png" alt="四层架构"></p><h4 id="应用层-application"><a href="#应用层-application" class="headerlink" title="应用层{application}"></a>应用层{application}</h4><blockquote><ol><li>应用服务位于应用层。用来表述应用和用户行为，负责服务的组合、编排和转发，负责处理业务用例的执行顺序以及结果的拼装。</li><li>应用层的服务包括应用服务和领域事件相关服务。</li><li>应用服务可对微服务内的领域服务以及微服务外的应用服务进行组合和编排，或者对基础层如文件、缓存等数据直接操作形成应用服务，对外提供粗粒度的服务。</li><li>领域事件服务包括两类：领域事件的发布和订阅。通过事件总线和消息队列实现异步数据传输，实现微服务之间的解耦。</li></ol></blockquote><h4 id="领域层-domain"><a href="#领域层-domain" class="headerlink" title="领域层{domain}"></a>领域层{domain}</h4><blockquote><ol><li>领域服务位于领域层，为完成领域中跨实体或值对象的操作转换而封装的服务，领域服务以与实体和值对象相同的方式参与实施过程。</li><li>领域服务对同一个实体的一个或多个方法进行组合和封装，或对多个不同实体的操作进行组合或编排，对外暴露成领域服务。领域服务封装了核心的业务逻辑。实体自身的行为在实体类内部实现，向上封装成领域服务暴露。</li><li>为隐藏领域层的业务逻辑实现，所有领域方法和服务等均须通过领域服务对外暴露。</li><li>为实现微服务内聚合之间的解耦，原则上禁止跨聚合的领域服务调用和跨聚合的数据相互关联。</li></ol></blockquote><h4 id="基础层-infrastructrue"><a href="#基础层-infrastructrue" class="headerlink" title="基础层{infrastructrue}"></a>基础层{infrastructrue}</h4><ul><li><p>基础服务位于基础层。为各层提供资源服务（如数据库、缓存等），实现各层的解耦，降低外部资源变化对业务逻辑的影响。</p></li><li><p>基础服务主要为仓储服务，通过依赖反转的方式为各层提供基础资源服务，领域服务和应用服务调用仓储服务接口，利用仓储实现持久化数据对象或直接访问基础资源。</p></li><li><pre><code class="xml">向其他层提供 通用的 技术能力(比如工具类,第三方库类支持,常用基本配置,数据访问底层实现)基础实施层主要包含以下的内容:    * 为应用层 传递消息(比如通知)    * 为领域层 提供持久化机制(最底层的实现)    * 为用户界面层 提供组件配置    * 基础设施层还能够通过架构框架来支持四个层次间的交互模式。</code></pre></li></ul><h4 id="接口层-interfaces"><a href="#接口层-interfaces" class="headerlink" title="接口层{interfaces}"></a>接口层{interfaces}</h4><ul><li>接口服务位于用户接口层，用于处理用户发送的 Restful 请求和解析用户输入的配置文件等，并将信息传递给应用层。</li></ul><h3 id="3、DDD-代码落地"><a href="#3、DDD-代码落地" class="headerlink" title="3、DDD 代码落地"></a>3、DDD 代码落地</h3><p><img src="https://file.buildworld.cn/img/20211104232530.png"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 架构设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图数据库--Neo4j的介绍</title>
      <link href="/2021/09/22/%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%88%E4%B8%80%EF%BC%89-Neo4j%E7%9A%84%E4%BB%8B%E7%BB%8D/"/>
      <url>/2021/09/22/%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%88%E4%B8%80%EF%BC%89-Neo4j%E7%9A%84%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一、图数据库"><a href="#一、图数据库" class="headerlink" title="一、图数据库"></a>一、图数据库</h2><h3 id="1、什么是图数据库"><a href="#1、什么是图数据库" class="headerlink" title="1、什么是图数据库"></a>1、什么是图数据库</h3><blockquote><p>随着社交、电商、金融、零售、物联网等行业的快速发展，现实社会织起了了一张庞大而复杂的关系<br>网，传统数据库很难处理关系运算。大数据行业需要处理的数据之间的关系随数据量呈几何级数增长，<br>急需一种支持海量复杂数据关系运算的数据库，图数据库应运而生。</p></blockquote><ul><li>社交领域：Facebook, Twitter，Linkedin 用它来管理社交关系，实现好友推荐</li><li>零售领域：eBay，沃尔玛使用它实现商品实时推荐，给买家更好的购物体验</li><li>金融领域：摩根大通，花旗和瑞银等银行在用图数据库做风控处理</li><li>汽车制造领域：沃尔沃，戴姆勒和丰田等顶级汽车制造商依靠图数据库推动创新制造解决方案</li><li>电信领域：Verizon, Orange 和 AT&amp;T 等电信公司依靠图数据库来管理网络，控制访问并支持客户 360</li><li>酒店领域：万豪和雅高酒店等顶级酒店公司依使用图数据库来管理复杂且快速变化的库存图数据库并非指存储图片的数据库，而是以图数据结构存储和查询数据。</li></ul><blockquote><p><strong>图数据库是基于图论实现的一种 NoSQL 数据库，其数据存储结构和数据查询方式都是以图论为基础的，</strong> &gt;<strong>图数据库主要用于存储更多的连接数据。</strong></p></blockquote><blockquote><p><strong>图论〔Graph Theory〕</strong>是数学的一个分支。它以图为研究对象图论中的图是由若干给定的点及连<br>接两点的线所构成的图形，这种图形通常用来描述某些事物之间的某种特定关系，用点代表事物，<br>用连接两点的线表示相应两个事物间具有这种关系。</p><p><img src="https://file.buildworld.cn/img/20210918094152.png"></p></blockquote><h3 id="2、和关系型数据库的对比"><a href="#2、和关系型数据库的对比" class="headerlink" title="2、和关系型数据库的对比"></a>2、和关系型数据库的对比</h3><table><thead><tr><th align="left">关系型数据库（RDBMS）</th><th align="left">图数据库（GDB）</th></tr></thead><tbody><tr><td align="left">表</td><td align="left">图</td></tr><tr><td align="left">行</td><td align="left">节点</td></tr><tr><td align="left">列和数据</td><td align="left">属性和数据</td></tr><tr><td align="left">约束</td><td align="left">关系</td></tr></tbody></table><h3 id="3、Neo4j-数据库"><a href="#3、Neo4j-数据库" class="headerlink" title="3、Neo4j 数据库"></a>3、Neo4j 数据库</h3><blockquote><p>Neo4j 是一个开源的 NoSQL 图形数据库，2003 年开始开发，使用 scala 和 java 语言，2007 年开始发布。</p><ul><li>是世界上最先进的图数据库之一，提供原生的图数据存储，检索和处理；</li><li>采用<strong>属性图模型（Property graph model）</strong>，极大的完善和丰富图数据模型；</li><li>专属查询语言 Cypher，直观，高效；</li></ul><p>官网： <a href="https://neo4j.com/">https://neo4j.com/</a></p></blockquote><h4 id="3-1、Neo4j-的特性"><a href="#3-1、Neo4j-的特性" class="headerlink" title="3.1、Neo4j 的特性"></a>3.1、Neo4j 的特性</h4><ul><li>SQL 就像简单的查询语言 Neo4j CQL</li><li>它遵循属性图数据模型</li><li>它通过使用 Apache Lucence 支持索引</li><li>它支持 UNIQUE 约束</li><li>它包含一个用于执行 CQL 命令的 UI：Neo4j 数据浏览器</li><li>它支持完整的 ACID（原子性，一致性，隔离性和持久性）规则</li><li>它采用原生图形库与本地 GPE（图形处理引擎）</li><li>它支持查询的数据导出到 JSON 和 XLS 格式</li><li>它提供了 REST API，可以被任何编程语言（如 Java，Spring，Scala 等）访问</li><li>它提供了可以通过任何 UI MVC 框架（如 Node JS）访问的 Java 脚本</li><li>它支持两种 Java API：Cypher API 和 Native Java API 来开发 Java 应用程序</li></ul><h4 id="3-2、Neo4j-的优点"><a href="#3-2、Neo4j-的优点" class="headerlink" title="3.2、Neo4j 的优点"></a>3.2、Neo4j 的优点</h4><ul><li>它很容易表示连接的数据</li><li>检索/遍历/导航更多的连接数据是非常容易和快速的</li><li>它非常容易地表示半结构化数据</li><li>Neo4j CQL 查询语言命令是人性化的可读格式，非常容易学习</li><li>使用简单而强大的数据模型</li><li>它不需要复杂的连接来检索连接的/相关的数据，因为它很容易检索它的相邻节点或关系细节没有<br>连接或索引</li></ul><h2 id="二、Neo4j-数据模型"><a href="#二、Neo4j-数据模型" class="headerlink" title="二、Neo4j 数据模型"></a>二、Neo4j 数据模型</h2><h3 id="1、属性图模型"><a href="#1、属性图模型" class="headerlink" title="1、属性图模型"></a>1、属性图模型</h3><blockquote><p>Neo4j 图数据库遵循属性图模型来存储和管理其数据。</p><p>属性图模型规则</p><ul><li>表示节点，关系和属性中的数据</li><li>节点和关系都包含属性</li><li>关系连接节点</li><li>属性是键值对</li><li>节点用圆圈表示，关系用方向键表示。</li><li>关系具有方向：单向和双向。</li><li>每个关系包含“开始节点”或“从节点”和“到节点”或“结束节点”</li></ul></blockquote><blockquote><p><strong>Neo4j 图数据库将其所有数据存储在节点和关系中</strong>，我们不需要任何额外的 RDBMS 数据库或 NoSQL 数据<br>库来存储 Neo4j 数据库数据，它以图的形式存储数据。Neo4j 使用本机<strong>GPE（图形处理引擎）</strong>来使用它的<br>本机图存储格式。</p></blockquote><h3 id="2、Neo4j-的构建元素"><a href="#2、Neo4j-的构建元素" class="headerlink" title="2、Neo4j 的构建元素"></a>2、Neo4j 的构建元素</h3><blockquote><ul><li><p>节点</p></li><li><p>属性</p></li><li><p>关系</p></li><li><p>标签</p></li><li><p>数据浏览器</p><p><img src="https://file.buildworld.cn/img/20210922211025.png"></p></li></ul></blockquote><h4 id="2-1、节点"><a href="#2-1、节点" class="headerlink" title="2.1、节点"></a>2.1、节点</h4><blockquote><p>节点（Node)是图数据库中的一个基本元素，用来表示一个实体记录，就像关系数据库中的一条记录一<br>样。在 Neo4j 中节点可以包含多个属性(Property)和多个标签(Label)。</p><ul><li>节点是主要的数据元素</li><li>节点通过关系连接到其他节点</li><li>节点可以具有一个或多个属性（即，存储为键/值对的属性）</li><li>节点有一个或多个标签，用于描述其在图表中的作用</li></ul></blockquote><h4 id="2-2、属性"><a href="#2-2、属性" class="headerlink" title="2.2、属性"></a>2.2、属性</h4><blockquote><p>属性（Property）是用于描述图节点和关系的键值对。其中 Key 是一个字符串，值可以通过使用任何<br>Neo4j 数据类型来表示。</p><ul><li>属性是命名值，其中名称（或键）是字符串</li><li>属性可以被索引和约束</li><li>可以从多个属性创建复合索引</li></ul></blockquote><h4 id="2-3、关系"><a href="#2-3、关系" class="headerlink" title="2.3、关系"></a>2.3、关系</h4><blockquote><p>关系（Relationship）同样是图数据库的基本元素。当数据库中已经存在节点后，需要将节点连接起来<br>构成图。关系就是用来连接两个节点，关系也称为图论的边(Edge) ,其始端和末端都必须是节点，关系不<br>能指向空也不能从空发起。关系和节点一样可以包含多个属性，但关系只能有一个类型(Type) 。</p><ul><li>关系连接两个节点</li><li>关系是方向性的</li><li>节点可以有多个甚至递归的关系</li><li>关系可以有一个或多个属性（即存储为键/值对的属性）</li></ul></blockquote><h4 id="2-4、标签"><a href="#2-4、标签" class="headerlink" title="2.4、标签"></a>2.4、标签</h4><blockquote><p>标签（Label）将一个公共名称与一组节点或关系相关联， 节点或关系可以包含一个或多个标签。 我们<br>可以为现有节点或关系创建新标签， 我们可以从现有节点或关系中删除标签。</p><ul><li>标签用于将节点分组</li><li>一个节点可以具有多个标签</li><li>对标签进行索引以加速在图中查找节点</li><li>本机标签索引针对速度进行了优化</li></ul></blockquote><h3 id="3、Neo4j-CQL-简介"><a href="#3、Neo4j-CQL-简介" class="headerlink" title="3、Neo4j - CQL 简介"></a>3、Neo4j - CQL 简介</h3><blockquote><p>Neo4j 的 Cypher 语言是为处理图形数据而构建的，CQL 代表 Cypher 查询语言。像 Oracle 数据库具有查询<br>语言 SQL，Neo4j 具有 CQL 作为查询语言。</p><ul><li>它是 Neo4j 图形数据库的查询语言。</li><li>它是一种声明性模式匹配语言</li><li>它遵循 SQL 语法。</li><li>它的语法是非常简单且人性化、可读的格式。</li></ul></blockquote><p><img src="https://file.buildworld.cn/img/20210923094527.png"></p>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 图 </tag>
            
            <tag> Neo4j </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图与图学习</title>
      <link href="/2021/09/10/%E5%9B%BE%E4%B8%8E%E5%9B%BE%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/09/10/%E5%9B%BE%E4%B8%8E%E5%9B%BE%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="图与图学习"><a href="#图与图学习" class="headerlink" title="图与图学习"></a>图与图学习</h2><h3 id="一、图"><a href="#一、图" class="headerlink" title="一、图"></a>一、图</h3><h4 id="1-1、图的定义"><a href="#1-1、图的定义" class="headerlink" title="1.1、图的定义"></a>1.1、图的定义</h4><blockquote><p>图表示物 件与物件之间的关系的数学对象，是图论的基本研究对象。</p><p><strong>节点（node）</strong>用红色标出，通过黑色的<strong>边（edge）</strong>连接。</p><p><img src="https://file.buildworld.cn/img/20210907184428.png"></p><p>在图上执行怎样的分析：</p><ul><li>研究拓扑结构和连接性</li><li>群体检测</li><li>识别中心节点</li><li>预测缺失的节点</li><li>预测缺失的边</li></ul></blockquote><p><strong>空手道俱乐部图</strong></p><blockquote><p>这个「空手道」图表示什么？Wayne W. Zachary 在 1970 到 1972 年这三年中研究的一个空手道俱乐部的社交网络。该网络包含了这个空手道俱乐部的 34 个成员，成员对之间的连接表示他们在俱乐部之外也有联系。在研究期间，管理员 JohnA 与教练 Mr.Hi（化名）之间出现了冲突，导致俱乐部一分为二。一半成员围绕 Mr.Hi 形成了一个新的俱乐部，另一半则找了一个新教练或放弃了空手道。基于收集到的数据，除了其中一个成员，Zachary 正确分配了所有成员在分裂之后所进入的分组。</p></blockquote><h4 id="1-2、图的基本表示方法"><a href="#1-2、图的基本表示方法" class="headerlink" title="1.2、图的基本表示方法"></a>1.2、图的基本表示方法</h4><blockquote><ul><li><p>图 <strong>G=(V, E)</strong> 由下列要素构成：</p></li><li><p>一组<strong>节点</strong>（也称为 verticle）V=1,…,n</p></li><li><p>一组<strong>边</strong> E⊆V×V</p></li><li><p>边 <strong>(i,j) ∈ E</strong> 连接了节点 i 和 j</p></li><li><p><strong>i</strong> 和 <strong>j</strong> 被称为<strong>相邻节点</strong>（neighbor）</p></li><li><p>节点的<strong>度</strong>（degree）是指相邻节点的数量</p><p><img src="https://file.buildworld.cn/img/20210907190406.png"></p><ul><li>如果一个图的所有节点都有 n-1 个相邻节点，则该图是<strong>完备的</strong>（complete）。也就是说所有节点都具备所有可能的连接方式。</li><li>从 i 到 j 的路径（path）是指从 i 到达 j 的边的序列。该<strong>路径的长度</strong>（length）等于所经过的边的数量。</li><li><strong>图的直径</strong>（diameter）是指连接任意两个节点的所有最短路径中最长路径的长度。</li><li><strong>测地路径</strong>（geodesic path）是指两个节点之间的最短路径。</li><li>如果所有节点都可通过某个路径连接到彼此，则它们构成一个<strong>连通分支</strong>（connected component）。如果一个图仅有一个连通分支，则该图是<strong>连通</strong>的（connected）</li></ul></li></ul></blockquote><h5 id="有向图"><a href="#有向图" class="headerlink" title="有向图"></a>有向图</h5><ul><li>如果一个图的边是有顺序的配对，则该图是<strong>有向的</strong>（directed）。i 的<strong>入度</strong>（in-degree）是指向 i 的边的数量，<strong>出度</strong>（out-degree）是远离 i 的边的数量。</li></ul><p><img src="https://file.buildworld.cn/img/20210908140527.png"></p><blockquote><ul><li>如果可以回到一个给定节点，则该图是<strong>有环的</strong>（cyclic）。相对地，如果至少有一个节点无法回到，则该图就是<strong>无环的</strong>（acyclic）。</li><li>图可以被<strong>加权</strong>（weighted），即在节点或关系上施加权重。</li><li>如果一个图的边数量相比于节点数量较小，则该图是<strong>稀疏</strong>的（sparse）。相对地，如果节点之间的边非常多，则该图是<strong>密集</strong>的（dense）</li></ul></blockquote><h5 id="图的种类"><a href="#图的种类" class="headerlink" title="图的种类"></a>图的种类</h5><blockquote><p>分别是<strong>有向图</strong>、<strong>无向图</strong>、<strong>有环图</strong>、<strong>无环图</strong>、<strong>加权图</strong>、<strong>无加权图</strong>、<strong>稀疏图</strong>、<strong>密集图</strong></p></blockquote><p><img src="https://file.buildworld.cn/img/20210908140800.png"></p><h4 id="1-3、同构图与异构图"><a href="#1-3、同构图与异构图" class="headerlink" title="1.3、同构图与异构图"></a>1.3、同构图与异构图</h4><blockquote><p>两个图 G 和 H 是<strong>同构图（isomorphic graphs）</strong>，能够通过重新标记图 G 的顶点而产生图 H。</p><p>如果 G 和 H 同构，那么它们的阶是相同的，它们大小是相同的，它们个顶点的度数也对应相同。</p><p>异构图是一个与同构图相对应的新概念。</p><p>传统同构图（Homogeneous Graph）数据中只存在一种节点和边，因此在构建图神经网络时所有节点共享同样的模型参数并且拥有同样维度的特征空间。</p><p>而<strong>异构图（Heterogeneous Graph）</strong>中可以存在不只一种节点和边，因此允许不同类型的节点拥有不同维度的特征或属性。</p></blockquote><p><strong>异构图和同构图的区别</strong></p><blockquote><p>同构图中，node 的种类只有一种，一个 node 和另一个 node 的连接关系只有一种</p><ol><li>例如在社交网络中，可以想象 node 只有‘人’这一个种类，edge 只有‘认识’这一种连接。而人和人要么认识，要么不认识。</li><li>但是也可能细分有人，点赞，推文。则人和人可能通过认识连接，人和推文可能通过点赞连接，人和人也可能通过点赞同一篇推文连接(meta path）。这里节点、节点之间关系的多样性表达就需要引入异构图了。</li></ol><p>异构图中，有很多种 node。node 之间也有很多种连接关系(edge)，这些连接关系的组合则种类更多(meta-path), 而这些 node 之间的关系有轻重之分，不同连接关系也有轻重之分。比如在 IMDB 中，可以有三类 node 分别是 Movie，Director 和 Actor</p></blockquote><h4 id="1-4、主要的图算法"><a href="#1-4、主要的图算法" class="headerlink" title="1.4、主要的图算法"></a>1.4、主要的图算法</h4><blockquote><p>目前大多数框架（比如 Python 的 networkx 或 Neo4J）支持的图算法类别主要有三个：</p><ul><li><strong>Pathfinding（寻路）</strong>：根据可用性和质量等条件确定最优路径。我们也将搜索算法包含在这一类别中。这可用于确定最快路由或流量路由。</li><li><strong>Centrality（中心性）</strong>：确定网络中节点的重要性。这可用于识别社交网络中有影响力的人或识别网络中潜在的攻击目标。</li><li><strong>Community detection（社群检测）</strong>：评估群体聚类的方式。这可用于划分客户或检测欺诈等。</li></ul></blockquote><h5 id="寻路和图搜索算法"><a href="#寻路和图搜索算法" class="headerlink" title="寻路和图搜索算法"></a>寻路和图搜索算法</h5><ul><li>寻路算法是通过最小化跳（hop）的数量来寻找两个节点之间的最短路径。</li><li>搜索算法不是给出最短路径，而是根据图的相邻情况或深度来探索图。这可用于信息检索</li></ul><blockquote><p><strong>1). 搜索算法</strong></p><p>图搜索算法主要有两种：</p><ul><li><p><strong>宽度优先搜索（BFS）</strong>：首先探索每个节点的相邻节点，然后探索相邻节点的相邻节点；</p></li><li><p><strong>深度优先搜索（DFS）</strong>：会尝试尽可能地深入一条路径，如有可能便访问新的相邻节点。</p><p><strong>2). 寻路算法</strong></p><p><strong>a. 最短路径</strong></p></li></ul><blockquote><p>最短路径计算的是一对节点之间的最短的加权（如果图有加权的话）路径。</p></blockquote><p>这可用于确定最优的驾驶方向或社交网络上两个人之间的分离程度。</p><p><strong>b. 单源最短路径</strong></p><blockquote><p>单源最短路径（Single Source Shortest Path/SSSP）是找到给定节点与图中其它所有节点之间的最短路径。</p></blockquote><p><strong>c. 所有配对最短路径</strong></p><blockquote><p>所有配对最短路径（All Pairs Shortest Path / APSP）算法是找到所有节点对之间的<strong>最短路径</strong>。</p></blockquote><p><strong>d. 最小权重生成树</strong></p><blockquote><p>最小权重生成树（minimum spanning tree）是图（一个树）的一个子图，其用权重和最小的边连接了图中的所有节点。</p></blockquote></blockquote><h5 id="社群检测"><a href="#社群检测" class="headerlink" title="社群检测"></a>社群检测</h5><blockquote><p>社群检测是根据给定的质量指标将节点划分为多个分组。</p><p>这通常可用于识别<strong>社交社群</strong>、<strong>客户行为</strong>或<strong>网页主题</strong>。 社区是指一组相连节点的集合。但是，目前关于社群还没有广泛公认的定义，只是社群内的节点应该要密集地相连。</p><p><img src="https://file.buildworld.cn/img/20210909090814.png"></p></blockquote><blockquote><p><strong>Girvan Newman 算法</strong>是一个用于发现社群的常用算法。其通过逐步移除网络内的边来定义社区。我们将居间性称为「<strong>边居间性（edge betweenness）</strong>」。这是一个正比于穿过该边的节点对之间最短路径的数量的值。</p><p>该算法的步骤如下：</p><ol><li>计算网络中所有已有边的居间性。</li><li>移除居间性最高的边。</li><li>移除该边后，重新计算所有边的居间性。</li><li>重复步骤 2 和 3，直到不再剩余边。</li></ol></blockquote><h5 id="分层聚类"><a href="#分层聚类" class="headerlink" title="分层聚类"></a>分层聚类</h5><blockquote><p>在 <strong>分层聚类（hierarchical clustering）</strong> 中，我们构建聚类的层次结构。我们用树状图的形式表示聚类。</p><p><img src="https://file.buildworld.cn/img/20210909092544.jpg"></p><p>其思想是以不同的规模分析社群结构。我们通常自下而上构建树状图。我们从每个节点一个聚类开始，然后合并两个「最近」的节点。</p></blockquote><p><strong>相似度距离</strong></p><blockquote><p>衡量聚类是否相近。令 <strong>d(i,j)</strong> 为 <strong>i</strong> 和 <strong>j</strong> 之间的最短路径的长度。</p><p><img src="https://file.buildworld.cn/img/20210909103348.png"></p><p>要得到最大连接，在每个步骤，被最短距离分开的两个聚类被组合到一起。相似度距离可用以下示意图阐释：</p><p><img src="https://file.buildworld.cn/img/20210909103752.jpg" alt=" "></p></blockquote><h3 id="二、图学习"><a href="#二、图学习" class="headerlink" title="二、图学习"></a>二、图学习</h3><blockquote><p>图学习中包含三种主要的任务：</p><ul><li><strong>链接预测（Link prediction）</strong></li><li><strong>节点标记预测（Node labeling）</strong></li><li><strong>图嵌入（Graph Embedding）</strong></li></ul></blockquote><h4 id="2-1、链接预测（Link-prediction）"><a href="#2-1、链接预测（Link-prediction）" class="headerlink" title="2.1、链接预测（Link prediction）"></a>2.1、链接预测（Link prediction）</h4><blockquote><p>在链接预测中，给定图 G，我们的目标是预测新边。例如，当图未被完全观察时，或者当新客户加入平台（例如，新的 LinkedIn 用户）时，预测未来关系或缺失边是很有用的。</p><p><strong>在不同的 task 中，Link Prediction 被用于：</strong></p><ol><li><p>在社交网络中，进行用户/商品推荐</p></li><li><p>在生物学领域，进行相互作用发现</p></li><li><p>在知识图谱中，进行实体关系学习</p></li><li><p>在基础研究中，进行图结构捕捉</p></li></ol><p><strong>在不同的 work 中，Link Prediction 还会被称为（可以使用这些关键词检索哦）：</strong></p><ol><li><p>Edge Embedding/Classification</p></li><li><p>Relational Inference/Reasoning</p></li><li><p>Graph Generation（一种是从节点生成边，另一种是从噪声生成图，前者是 Link Prediction）</p></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写netty的springboot-starter组件</title>
      <link href="/2021/09/07/%E6%89%8B%E5%86%99netty%E7%9A%84springboot-starter%E7%BB%84%E4%BB%B6/"/>
      <url>/2021/09/07/%E6%89%8B%E5%86%99netty%E7%9A%84springboot-starter%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>本文的工作分为两个部分，一个是研究 Netty 框架的使用，实现服务端和客户之间的通信，另一个是将服务端和客户端的 Netty 打包成 springboot-starter 组件（两个组件：rpc-server-start,rpc-client-start），方便直接引入 starter 去实现 Netty 的相关功能。</p><p>项目地址：<a href="https://gitee.com/mi_chong/NettyDemo">https://gitee.com/mi_chong/NettyDemo</a></p></blockquote><h2 id="一、Netty"><a href="#一、Netty" class="headerlink" title="一、Netty"></a>一、Netty</h2><p><strong>1、NIO 是一种非阻塞 IO</strong></p><ul><li>单线程可以连接多个客户端。</li><li>选择器可以实现但线程管理多个 Channel，新建的通道都要向选择器注册。</li><li>一个 SelectionKey 键表示了一个特定的通道对象和一个特定的选择器对象之间的注册关系。</li><li>selector 进行 select()操作可能会产生阻塞，但是可以设置阻塞时间，并且可以用 wakeup()唤醒 selector，所以 NIO 是非阻塞 IO。</li></ul><h3 id="2、Netty-模型-selector-模式"><a href="#2、Netty-模型-selector-模式" class="headerlink" title="2、Netty 模型 selector 模式"></a>2、Netty 模型 selector 模式</h3><ul><li>NIO 采用多线程的方式可以同时使用多个 selector</li><li>通过绑定多个端口的方式，使得一个 selector 可以同时注册多个 ServerSocketServer</li><li>单个线程下只能有一个 selector，用来实现 Channel 的匹配及复用</li></ul><p><img src="https://file.buildworld.cn/img/20210827203719.png"></p><p><strong>半包问题</strong></p><blockquote><p>TCP/IP 在发送消息的时候，可能会拆包，这就导致接收端无法知道什么时候收到的数据是一个完整的数据。在传统的 BIO 中在读取不到数据时会发生阻塞，但是 NIO 不会。</p><p>为了解决 NIO 的半包问题，Netty 在 Selector 模型的基础上，提出了<strong>reactor 模式</strong>，从而解决客户端请求在服务端不完整的问题。</p></blockquote><h3 id="3、netty-模型-reactor-模式"><a href="#3、netty-模型-reactor-模式" class="headerlink" title="3、netty 模型 reactor 模式"></a>3、netty 模型 reactor 模式</h3><blockquote><p>在 selector 的基础上解决了半包问题。<br><img src="https://file.buildworld.cn/img/20210827205913.png"></p></blockquote><p>Netty 服务端代码：<a href="https://gitee.com/mi_chong/NettyDemo/tree/master/rpc-server-start">https://gitee.com/mi_chong/NettyDemo/tree/master/rpc-server-start</a></p><p>Netty 客户端代码：<a href="https://gitee.com/mi_chong/NettyDemo/tree/master/rpc-client-start">https://gitee.com/mi_chong/NettyDemo/tree/master/rpc-client-start</a></p><h2 id="二、自定义-springboot-starter-组件"><a href="#二、自定义-springboot-starter-组件" class="headerlink" title="二、自定义 springboot-starter 组件"></a>二、自定义 springboot-starter 组件</h2><h3 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h3><blockquote><p>SpringBoot 中的 starter 是一种非常重要的机制，能够抛弃以前繁杂的配置，将其统一集成进 starter，应用者只需要在 maven 中引入 starter 依赖，SpringBoot 就能自动扫描到要加载的信息并启 动相应的默认配置。starter 让我们摆脱了各种依赖库的处理，需要配置各种信息的困扰。</p></blockquote><blockquote><p>SpringBoot 会自动通过 classpath 路径下的类发现需要的 Bean，并注册进 IOC 容器。SpringBoot 提供 了针对日常企业应用研发各种场景的<strong>spring-boot-starter</strong>依赖模块。所有这些依赖模块都遵循着约定成俗的默认配置，并允许我们调整这些配置，即遵循“<strong>约定大于配置</strong>”的理念。</p></blockquote><blockquote><p>以 rpc-server-start 来看，如下图：<br><img src="https://file.buildworld.cn/img/20210906210553.png"></p><p>1、属性配置类</p><p>2、业务逻辑执行类</p><p>3、自动配置类</p><p>4、spring.factories 文件（里面指定了自动配置类 3 的位置）</p></blockquote><h3 id="2、NettyProperties-java——属性配置类"><a href="#2、NettyProperties-java——属性配置类" class="headerlink" title="2、NettyProperties.java——属性配置类"></a>2、NettyProperties.java——属性配置类</h3><blockquote><p>在使用 Spring 官方的 Starter 时通常可以在 application.properties 中来配置参数覆盖掉默认的值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;serial&quot;)</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;netty.server&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyProperties</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 地址</span></span><br><span class="line">    <span class="keyword">private</span> String hostname = <span class="string">&quot;127.0.0.1&quot;</span>;</span><br><span class="line">    <span class="comment">// 端口</span></span><br><span class="line">    <span class="keyword">private</span> Integer host = <span class="number">8082</span>;</span><br><span class="line">    <span class="comment">// 主线程数目</span></span><br><span class="line">    <span class="keyword">private</span> Integer bossGroupCounts = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 工作线程数目</span></span><br><span class="line">    <span class="keyword">private</span> Integer workGroupCounts = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NettyProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    get...</span><br><span class="line">    set...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、NettyServer-java——业务操作类"><a href="#3、NettyServer-java——业务操作类" class="headerlink" title="3、NettyServer.java——业务操作类"></a>3、NettyServer.java——业务操作类</h3><blockquote><p>在这里使用上面的属性配置类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 服务启动监听器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MiChong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-08-27 21:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> NettyProperties nettyProperties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NettyServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NettyServer</span><span class="params">(NettyProperties nettyProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nettyProperties = nettyProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        InetSocketAddress socketAddress = <span class="keyword">new</span> InetSocketAddress(nettyProperties.getHostname(), nettyProperties.getHost());</span><br><span class="line">        <span class="comment">//new 一个主线程组</span></span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(nettyProperties.getBossGroupCounts());</span><br><span class="line">        <span class="comment">//new 一个工作线程组</span></span><br><span class="line">        EventLoopGroup workGroup = <span class="keyword">new</span> NioEventLoopGroup(nettyProperties.getWorkGroupCounts());</span><br><span class="line">        ServerBootstrap bootstrap = <span class="keyword">new</span> ServerBootstrap()</span><br><span class="line">                .group(bossGroup, workGroup)</span><br><span class="line">                .channel(NioServerSocketChannel.class)</span><br><span class="line">                .childHandler(<span class="keyword">new</span> ServerChannelInitializer())</span><br><span class="line">                .localAddress(socketAddress)</span><br><span class="line">                <span class="comment">//设置队列大小</span></span><br><span class="line">                .option(ChannelOption.SO_BACKLOG, <span class="number">1024</span>)</span><br><span class="line">                <span class="comment">// 两小时内没有数据的通信时,TCP会自动发送一个活动探测数据报文</span></span><br><span class="line">                .childOption(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//绑定端口,开始接收进来的连接</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ChannelFuture future = bootstrap.bind(socketAddress).sync();</span><br><span class="line">            log.info(<span class="string">&quot;服务器启动开始监听端口: &#123;&#125;&quot;</span>, socketAddress.getPort());</span><br><span class="line">            future.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;服务器开启失败&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭主线程组</span></span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">            <span class="comment">//关闭工作线程组</span></span><br><span class="line">            workGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、NettyServerAutoConfiguration-java–自动配置-NettyServer-类"><a href="#4、NettyServerAutoConfiguration-java–自动配置-NettyServer-类" class="headerlink" title="4、NettyServerAutoConfiguration.java–自动配置 NettyServer 类"></a>4、NettyServerAutoConfiguration.java–自动配置 NettyServer 类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MiChong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-09-06 14:24</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(NettyProperties.class)</span></span><br><span class="line"><span class="comment">//当类路径下有指定的类为true</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(NettyServer.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;netty.server&quot;, value = &quot;enabled&quot;, matchIfMissing = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServerAutoConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> NettyProperties nettyProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(NettyServer.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> NettyServer <span class="title">nettyServer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        NettyServer nettyServer = <span class="keyword">new</span> NettyServer(nettyProperties);</span><br><span class="line">        <span class="keyword">return</span> nettyServer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5、spring-factories-文件"><a href="#5、spring-factories-文件" class="headerlink" title="5、spring.factories 文件"></a>5、spring.factories 文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/META-INF/spring.factories文件放在/src/main/resources目录下</span><br><span class="line">注意：META-INF是自己手动创建的目录，spring.factories也是自己手动创建的文件，在该文件中配置自己的自动配置类。</span><br><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=cn.buildworld.netty.server.start.config.NettyServerAutoConfiguration</span><br></pre></td></tr></table></figure><h3 id="6、项目打包"><a href="#6、项目打包" class="headerlink" title="6、项目打包"></a>6、项目打包</h3><p><strong>最后，将项目打包 mvn clean install</strong><br><strong>下面链接是引入组件的 springboot 项目</strong></p><p><a href="https://gitee.com/mi_chong/NettyDemo/tree/master/WebStart">https://gitee.com/mi_chong/NettyDemo/tree/master/WebStart</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在我们的springboot项目中引入打包好的starter组件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.buildworld<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rpc-server-start<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>在 springboot 中配置 applicaiton.yml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">netty:</span></span><br><span class="line">  <span class="attr">server:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">9000</span></span><br></pre></td></tr></table></figure><h3 id="7、如何使用-netty-server"><a href="#7、如何使用-netty-server" class="headerlink" title="7、如何使用 netty server"></a>7、如何使用 netty server</h3><blockquote><p>在我们的 springboot 项目中引入 netty-starter 组件，需要在我们项目启动的时候，启动 netty 服务器，需要做一些处理。</p><p>需求就是，启动 springboot 项目–&gt; 执行 netty 组件中的启动服务器方法，目前网上有 5 种方式在 springboot 启动时执行方法。在<a href="https://gitee.com/mi_chong/NettyDemo/tree/master/WebStart/src/main/java/cn/buildworld/netty/webstart/start%E7%9B%AE%E5%BD%95%E4%B8%8B%E3%80%82">https://gitee.com/mi_chong/NettyDemo/tree/master/WebStart/src/main/java/cn/buildworld/netty/webstart/start目录下。</a></p></blockquote><p><strong>推荐使用@PostConstruct 注解方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将要执行的方法所在的类交个spring容器扫描(<span class="doctag">@Component</span>),并且在要执行的方法上添加<span class="doctag">@PostConstruct</span>注解或者静态代码块执行</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MiChong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-09-06 15:38</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NettyServerStart</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> NettyServer nettyServer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot; 使用@PostConstruct注解 &quot;</span>);</span><br><span class="line">        <span class="comment">// 开启一个线程去启动Netty服务，防止阻塞springboot启动</span></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            nettyServer.start();</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8、如何使用-netty-client"><a href="#8、如何使用-netty-client" class="headerlink" title="8、如何使用 netty client"></a>8、如何使用 netty client</h3><h4 id="8-1-引入依赖"><a href="#8-1-引入依赖" class="headerlink" title="8.1 引入依赖"></a>8.1 引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.buildworld<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rpc-client-start<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="8-2-自动导入-Bean"><a href="#8-2-自动导入-Bean" class="headerlink" title="8.2 自动导入 Bean"></a>8.2 自动导入 Bean</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MiChong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021-09-06 10:01</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注入Bean</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> NettyClientUtil nettyClientUtil;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/helloNetty&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseResult <span class="title">helloNetty</span><span class="params">(<span class="meta">@RequestParam</span> String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nettyClientUtil.sendMessage(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9、测试"><a href="#9、测试" class="headerlink" title="9、测试"></a>9、测试</h3><h4 id="9-1、请求接口，发送数据"><a href="#9-1、请求接口，发送数据" class="headerlink" title="9.1、请求接口，发送数据"></a>9.1、请求接口，发送数据</h4><p><img src="https://file.buildworld.cn/img/20210907093445.png"></p><h4 id="9-2、客户端发送消息"><a href="#9-2、客户端发送消息" class="headerlink" title="9.2、客户端发送消息"></a>9.2、客户端发送消息</h4><p><img src="https://file.buildworld.cn/img/20210907093612.png"></p><h4 id="9-3、服务端接收消息并返回消息给客户端"><a href="#9-3、服务端接收消息并返回消息给客户端" class="headerlink" title="9.3、服务端接收消息并返回消息给客户端"></a>9.3、服务端接收消息并返回消息给客户端</h4><p><img src="https://file.buildworld.cn/img/20210907093657.png"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>秒杀那些事</title>
      <link href="/2021/09/06/%E7%A7%92%E6%9D%80%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
      <url>/2021/09/06/%E7%A7%92%E6%9D%80%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="1、九个细节"><a href="#1、九个细节" class="headerlink" title="1、九个细节"></a>1、九个细节</h4><p><img src="https://file.buildworld.cn/img/20210815163818.png"></p><h4 id="2、页面静态化"><a href="#2、页面静态化" class="headerlink" title="2、页面静态化"></a>2、页面静态化</h4><blockquote><p>活动页面绝大多数内容是固定的，比如：商品名称、商品描述、图片等。为了减少不必要的服务端请求，通常情况下，会对活动页面做静态化处理。用户浏览商品等常规操作，并不会请求到服务端。只有到了秒杀时间点，并且用户主动点了秒杀按钮才允许访问服务端。</p></blockquote><blockquote><p>针对不同地区访问使用 CDN，它的全称是 Content Delivery Network，即内容分发网络。<br><img src="https://file.buildworld.cn/img/20210815170351.png"></p></blockquote><h4 id="3、秒杀按钮"><a href="#3、秒杀按钮" class="headerlink" title="3、秒杀按钮"></a>3、秒杀按钮</h4><p>==CDN 上的 js 文件是如何更新的？==</p><blockquote><p>秒杀开始之前，js 标志为 false，还有另外一个随机参数。<br><img src="https://file.buildworld.cn/img/20210815171140.png"></p></blockquote><blockquote><p>当秒杀开始的时候系统会生成一个新的 js 文件，此时标志为 true，并且随机参数生成一个新值，然后同步给 CDN。由于有了这个随机参数，CDN 不会缓存数据，每次都能从 CDN 中获取最新的 js 代码。<br><img src="https://file.buildworld.cn/img/20210815171159.png"></p></blockquote><h4 id="4、读多写少"><a href="#4、读多写少" class="headerlink" title="4、读多写少"></a>4、读多写少</h4><blockquote><p>使用 Redis 抵抗大量的请求。</p></blockquote><p><img src="https://file.buildworld.cn/img/20210815200829.png"></p><h4 id="5、缓存问题"><a href="#5、缓存问题" class="headerlink" title="5、缓存问题"></a>5、缓存问题</h4><p>==秒杀之前查询商品是否存在==</p><p><img src="https://file.buildworld.cn/img/20210815201534.png"></p><blockquote><p>根据商品 id，先从缓存中查询商品，如果商品存在，则参与秒杀。如果不存在，则需要从数据库中查询商品，如果存在，则将商品信息放入缓存，然后参与秒杀。如果商品不存在，则直接提示失败。</p></blockquote><h5 id="5-1-缓存击穿"><a href="#5-1-缓存击穿" class="headerlink" title="5.1 缓存击穿"></a>5.1 缓存击穿</h5><blockquote><p>比如商品 A 第一次秒杀时，缓存中是没有数据的，但数据库中有。虽说上面有如果从数据库中查到数据，则放入缓存的逻辑。</p></blockquote><blockquote><p>然而，在高并发下，同一时刻会有大量的请求，都在秒杀同一件商品，这些请求同时去查缓存中没有数据，然后又同时访问数据库。结果悲剧了，数据库可能扛不住压力，直接挂掉。</p></blockquote><p>==使用分布式锁解决上面的问题==</p><p><img src="https://file.buildworld.cn/img/20210815204416.png"></p><p><strong>项目启动之前进行==缓存预热==。</strong></p><blockquote><p>表面上看起来，确实可以不需要。但如果缓存中设置的过期时间不对，缓存提前过期了，或者缓存被不小心删除了，如果不加速同样可能出现缓存击穿。</p></blockquote><h5 id="5-2-缓存穿透"><a href="#5-2-缓存穿透" class="headerlink" title="5.2 缓存穿透"></a>5.2 缓存穿透</h5><blockquote><p>如果有大量的请求传入的商品 id，在缓存中和数据库中都不存在，这些请求不就每次都会穿透过缓存，而直接访问数据库了。</p></blockquote><p><img src="https://file.buildworld.cn/img/20210815210140.png"></p><blockquote><p>系统根据商品 id，先从布隆过滤器中查询该 id 是否存在，如果存在则允许从缓存中查询数据，如果不存在，则直接返回失败。</p></blockquote><blockquote><p>虽说该方案可以解决缓存穿透问题，但是又会引出另外一个问题：布隆过滤器中的数据如何更缓存中的数据保持一致？</p></blockquote><blockquote><p>这就要求，如果缓存中数据有更新，则要及时同步到布隆过滤器中。如果数据同步失败了，还需要增加重试机制，而且跨数据源，能保证数据的实时一致性吗？</p></blockquote><p>==布隆过滤器绝大部分使用在缓存数据更新很少的场景中。==</p><p>==如果缓存数据更新非常频繁，把不存在的商品 id 也缓存起来。==<br><img src="https://file.buildworld.cn/img/20210815211010.png"></p><blockquote><p>下次，再有该商品 id 的请求过来，则也能从缓存中查到数据，只不过该数据比较特殊，表示商品不存在。需要特别注意的是，这种特殊缓存设置的超时时间应该尽量短一点。</p></blockquote><h4 id="6、库存问题"><a href="#6、库存问题" class="headerlink" title="6、库存问题"></a>6、库存问题</h4><h5 id="6-1、数据库扣减库存"><a href="#6-1、数据库扣减库存" class="headerlink" title="6.1、数据库扣减库存"></a>6.1、数据库扣减库存</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 基于数据库的乐观锁，这样会少一次数据库查询，而且能够天然的保证数据操作的原子性。</span><br><span class="line">update product set stock=stock-1 where id=product and stock &gt; 0;</span><br></pre></td></tr></table></figure><blockquote><p>但需要频繁访问数据库，我们都知道数据库连接是非常昂贵的资源。在高并发的场景下，可能会造成系统雪崩。而且，容易出现多个请求，同时竞争行锁的情况，造成相互等待，从而出现==死锁==的问题。</p></blockquote><h5 id="6-2、redis-扣减库存"><a href="#6-2、redis-扣减库存" class="headerlink" title="6.2、redis 扣减库存"></a>6.2、redis 扣减库存</h5><p>==lua 脚本扣减库存==</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">StringBuilder lua = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">  lua.append(<span class="string">&quot;if (redis.call(&#x27;exists&#x27;, KEYS[1]) == 1) then&quot;</span>);</span><br><span class="line">  lua.append(<span class="string">&quot;    local stock = tonumber(redis.call(&#x27;get&#x27;, KEYS[1]));&quot;</span>);</span><br><span class="line">  lua.append(<span class="string">&quot;    if (stock == -1) then&quot;</span>);</span><br><span class="line">  lua.append(<span class="string">&quot;        return 1;&quot;</span>);</span><br><span class="line">  lua.append(<span class="string">&quot;    end;&quot;</span>);</span><br><span class="line">  lua.append(<span class="string">&quot;    if (stock &gt; 0) then&quot;</span>);</span><br><span class="line">  lua.append(<span class="string">&quot;        redis.call(&#x27;incrby&#x27;, KEYS[1], -1);&quot;</span>);</span><br><span class="line">  lua.append(<span class="string">&quot;        return stock;&quot;</span>);</span><br><span class="line">  lua.append(<span class="string">&quot;    end;&quot;</span>);</span><br><span class="line">  lua.append(<span class="string">&quot;    return 0;&quot;</span>);</span><br><span class="line">  lua.append(<span class="string">&quot;end;&quot;</span>);</span><br><span class="line">  lua.append(<span class="string">&quot;return -1;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    先判断商品id是否存在，如果不存在则直接返回。</span><br><span class="line">    获取该商品id的库存，判断库存如果是-<span class="number">1</span>，则直接返回，表示不限制库存。</span><br><span class="line">    如果库存大于<span class="number">0</span>，则扣减库存。</span><br><span class="line">    如果库存等于<span class="number">0</span>，是直接返回，表示库存不足。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="7、分布式锁"><a href="#7、分布式锁" class="headerlink" title="7、分布式锁"></a>7、分布式锁</h4><blockquote><p>如果在高并发下，有大量的请求都去查一个缓存中不存在的商品，这些请求都会直接打到数据库。数据库由于承受不住压力，而直接挂掉。</p></blockquote><h5 id="7-1、setNx-加锁"><a href="#7-1、setNx-加锁" class="headerlink" title="7.1、setNx 加锁"></a>7.1、setNx 加锁</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (jedis.setnx(lockKey, val) == <span class="number">1</span>) &#123;</span><br><span class="line">   jedis.expire(lockKey, timeout);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用该命令其实可以加锁，但和后面的设置超时时间是分开的，并非原子操作。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 假如加锁成功了，但是设置超时时间失败了，该lockKey就变成永不失效的了。在高并发场景中，该问题会导致非常严重的后果。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="7-2、set-加锁"><a href="#7-2、set-加锁" class="headerlink" title="7.2、set 加锁"></a>7.2、set 加锁</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">String result = jedis.set(lockKey, requestId, <span class="string">&quot;NX&quot;</span>, <span class="string">&quot;PX&quot;</span>, expireTime);</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;OK&quot;</span>.equals(result)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">lockKey：锁的标识</span><br><span class="line">requestId：请求id</span><br><span class="line">NX：只在键不存在时，才对键进行设置操作。</span><br><span class="line">PX：设置键的过期时间为 millisecond 毫秒。</span><br><span class="line">expireTime：过期时间</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="7-3、释放锁"><a href="#7-3、释放锁" class="headerlink" title="7.3、释放锁"></a>7.3、释放锁</h5><blockquote><p>requestId 是在释放锁的时候用的。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if (jedis.get(lockKey).equals(requestId)) &#123;</span><br><span class="line">    jedis.del(lockKey);</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// lua脚本</span><br><span class="line">if redis.call(&#x27;get&#x27;, KEYS[1]) == ARGV[1] then</span><br><span class="line"> return redis.call(&#x27;del&#x27;, KEYS[1])</span><br><span class="line">else</span><br><span class="line">  return 0</span><br><span class="line">end</span><br></pre></td></tr></table></figure><h5 id="7-4、自旋锁"><a href="#7-4、自旋锁" class="headerlink" title="7.4、自旋锁"></a>7.4、自旋锁</h5><p>在秒杀场景下，会有什么问题？</p><p>答：每 1 万个请求，有 1 个成功。再 1 万个请求，有 1 个成功。如此下去，直到库存不足。这就变成均匀分布的秒杀了，跟我们想象中的不一样。</p><p>如何解决这个问题呢？</p><p>答：使用自旋锁。在规定的时间，比如 500 毫秒内，自旋不断尝试加锁，如果成功则直接返回。如果失败，则休眠 50 毫秒，再发起新一轮的尝试。如果到了超时时间，还未加锁成功，则直接返回失败。</p><h5 id="7-5、redisson"><a href="#7-5、redisson" class="headerlink" title="7.5、redisson"></a>7.5、redisson</h5><h4 id="8、-mq-异步处理"><a href="#8、-mq-异步处理" class="headerlink" title="8、 mq 异步处理"></a>8、 mq 异步处理</h4><p><img src="https://file.buildworld.cn/img/20210815221516.png"></p><h5 id="8-1-消息丢失问题"><a href="#8-1-消息丢失问题" class="headerlink" title="8.1 消息丢失问题"></a>8.1 消息丢失问题</h5><blockquote><p>秒杀成功了，往 mq 发送下单消息的时候，有可能会失败。原因有很多，比如：网络问题、broker 挂了、mq 服务端磁盘问题等。这些情况，都可能会造成消息丢失</p></blockquote><p>==加一张消息发送表==</p><p><img src="https://file.buildworld.cn/img/20210815221745.png"></p><blockquote><p>在生产者发送 mq 消息之前，先把该条消息写入消息发送表，初始状态是待处理，然后再发送 mq 消息。消费者消费消息时，处理完业务逻辑之后，再回调生产者的一个接口，修改消息状态为已处理。</p></blockquote><p><strong>发送 mq 消息到 mq 服务端的过程中失败了</strong></p><p>==使用 job，增加重试机制==。</p><blockquote><p>用 job 每隔一段时间去查询消息发送表中状态为待处理的数据，然后重新发送 mq 消息。<br><img src="https://file.buildworld.cn/img/20210815221953.png"></p></blockquote><h5 id="8-2、重复消费问题"><a href="#8-2、重复消费问题" class="headerlink" title="8.2、重复消费问题"></a>8.2、重复消费问题</h5><blockquote><p>本来消费者消费消息时，在 ack 应答的时候，如果网络超时，本身就可能会消费重复的消息。但由于消息发送者增加了重试机制，会导致消费者重复消息的概率增大。</p></blockquote><p>那么，如何解决重复消息问题呢？</p><p>==答：加一张消息处理表。==</p><blockquote><p>消费者读到消息之后，先判断一下消息处理表，是否存在该消息，如果存在，表示是重复消费，则直接返回。如果不存在，则进行下单操作，接着将该消息写入消息处理表中，再返回。<br><img src="https://file.buildworld.cn/img/20210815222133.png"></p></blockquote><p><strong>有个比较关键的点是：下单和写消息处理表，要放在同一个事务中，保证原子操作。</strong></p><h5 id="8-3、垃圾消息问题"><a href="#8-3、垃圾消息问题" class="headerlink" title="8.3、垃圾消息问题"></a>8.3、垃圾消息问题</h5><blockquote><p>这套方案表面上看起来没有问题，但如果出现了消息消费失败的情况。比如：由于某些原因，消息消费者下单一直失败，一直不能回调状态变更接口，这样 job 会不停的重试发消息。最后，会产生大量的垃圾消息。</p></blockquote><blockquote><p>每次在 job 重试时，需要先判断一下消息发送表中该消息的发送次数是否达到最大限制，如果达到了，则直接返回。如果没有达到，则将次数加 1，然后发送消息。<br><img src="https://file.buildworld.cn/img/20210815223449.png"></p></blockquote><h5 id="8-4、延迟消费问题"><a href="#8-4、延迟消费问题" class="headerlink" title="8.4、延迟消费问题"></a>8.4、延迟消费问题</h5><blockquote><p>下单时消息生产者会先生成订单，此时状态为待支付，然后会向延迟队列中发一条消息。达到了延迟时间，消息消费者读取消息之后，会查询该订单的状态是否为待支付。如果是待支付状态，则会更新订单状态为取消状态。如果不是待支付状态，说明该订单已经支付过了，则直接返回。<br><img src="https://file.buildworld.cn/img/20210815224026.png"></p></blockquote><h4 id="9、如何限流？"><a href="#9、如何限流？" class="headerlink" title="9、如何限流？"></a>9、如何限流？</h4><p><strong>三种常见的限流算法</strong></p><h5 id="9-1、计数器算法"><a href="#9-1、计数器算法" class="headerlink" title="9.1、计数器算法"></a>9.1、计数器算法</h5><blockquote><p>计数器算法是限流算法里最简单也是最容易实现的一种算法。比如我们规定，对于 A 接口来说，我们 1 分钟的访问次数不能超过 100 个。那么我们可以这么做：在一开 始的时候，我们可以设置一个计数器 counter，每当一个请求过来的时候，counter 就加 1，如果 counter 的值大于 100 并且该请求与第一个 请求的间隔时间还在 1 分钟之内，那么说明请求数过多；如果该请求与第一个请求的间隔时间大于 1 分钟，且 counter 的值还在限流范围内，那么就重置 counter，具体算法的示意图如下：</p></blockquote><p><img src="https://file.buildworld.cn/img/20210610083810.jpg"></p><p>==存在临界问题！！！==</p><h5 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h5><blockquote><p>滑动窗口，又称 rolling window。为了解决计数器算法带来的问题，我们引入了滑动窗口算法。如果学过 TCP 网络协议的话，那么一定对滑动窗口这个名词不会陌生。下面这张图，很好地解释了滑动窗口算法：</p></blockquote><p><img src="https://file.buildworld.cn/img/20210610085441.jpg"></p><p><strong>计数器算法其实就是滑动窗口算法，滑动窗口算法是它的细粒度表现</strong></p><p>==当滑动窗口的格子划分的越多，那么滑动窗口的滚动就越平滑，限流的统计就会越精确。==</p><h5 id="9-2、令牌桶算法"><a href="#9-2、令牌桶算法" class="headerlink" title="9.2、令牌桶算法"></a>9.2、令牌桶算法</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1）、所有的请求在处理之前都需要拿到一个可用的令牌才会被处理；</span><br><span class="line">2）、根据限流大小，设置按照一定的速率往桶里添加令牌；</span><br><span class="line">3）、桶设置最大的放置令牌限制，当桶满时、新添加的令牌就被丢弃或者拒绝；</span><br><span class="line">4）、请求达到后首先要获取令牌桶中的令牌，拿着令牌才可以进行其他的业务逻辑，处理完业务逻辑之后，将令牌直接删除；</span><br><span class="line">5）、令牌桶有最低限额，当桶中的令牌达到最低限额的时候，请求处理完之后将不会删除令牌，以此保证足够的限流</span><br></pre></td></tr></table></figure><p><img src="https://file.buildworld.cn/img/20210610090132.png"></p><h5 id="9-3、漏桶算法"><a href="#9-3、漏桶算法" class="headerlink" title="9.3、漏桶算法"></a>9.3、漏桶算法</h5><blockquote><p>漏桶算法其实很简单，可以粗略的认为就是注水漏水过程，往桶中以一定速率流出水，以任意速率流入水，当水超过桶流量则丢弃，因为桶容量是不变的，保证了整体的速率。</p></blockquote><p><img src="https://file.buildworld.cn/img/20210610090216.png"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Redis </tag>
            
            <tag> 架构设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法那些事</title>
      <link href="/2021/07/15/%E7%AE%97%E6%B3%95%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
      <url>/2021/07/15/%E7%AE%97%E6%B3%95%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="1、哈希表"><a href="#1、哈希表" class="headerlink" title="1、哈希表"></a>1、哈希表</h4><p><img src="https://file.buildworld.cn/img/20210715091717.png"></p><h5 id="1-1-构造规则"><a href="#1-1-构造规则" class="headerlink" title="1.1 构造规则"></a>1.1 构造规则</h5><ul><li>必须是一致的</li><li>计算简单</li><li>散列地址均匀分布</li></ul><h5 id="1-2-散列函数构造方法"><a href="#1-2-散列函数构造方法" class="headerlink" title="1.2 散列函数构造方法"></a>1.2 散列函数构造方法</h5><h6 id="1）直接定址法"><a href="#1）直接定址法" class="headerlink" title="1）直接定址法"></a>1）直接定址法</h6><blockquote><p>数组其实就是一张哈希表<br>f(key) = key<br><img src="https://file.buildworld.cn/img/20210715094229.png"></p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 通用公式</span><br><span class="line">f(key) = a * key + b a,b均为常数</span><br></pre></td></tr></table></figure><h6 id="2）数字分析法"><a href="#2）数字分析法" class="headerlink" title="2）数字分析法"></a>2）数字分析法</h6><blockquote><p>该方法也是十分简单的方法，就是分析我们的关键字，取其中一段，或对其位移，叠加，用作地址。比如我们的学号，前 6 位都是一样的，但是后面 3 位都不相同，我们则可以用学号作为键，后面的 3 位做为我们的散列地址。如果我们这样还是容易产生冲突，则可以对抽取数字再进行处理。我们的目的只有一个，提供一个散列函数将关键字合理的分配到散列表的各位置。这里我们提到了一种新的方式，抽取，这也是在散列函数中经常用到的手段。<br><img src="https://file.buildworld.cn/img/20210715100009.png"></p></blockquote><h6 id="3）折叠法"><a href="#3）折叠法" class="headerlink" title="3）折叠法"></a>3）折叠法</h6><blockquote><p>主要思路是将关键字从左到右分割成位数相等的几部分，然后叠加求和，并按散列表表长，取后几位作为散列地址。</p></blockquote><h6 id="4）除法散列法"><a href="#4）除法散列法" class="headerlink" title="4）除法散列法"></a>4）除法散列法</h6><p>在用来设计散列函数的除法散列法中，通过取 key 除以 p 的余数，将关键字映射到 p 个槽中的某一个上，对于散列表长度为 m 的散列函数公式为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 最经典的算法</span><br><span class="line">f(k) = k mod p (p &lt;= m)</span><br></pre></td></tr></table></figure><p><img src="https://file.buildworld.cn/img/20210715115210.png"></p><h6 id="5）乘法散列法"><a href="#5）乘法散列法" class="headerlink" title="5）乘法散列法"></a>5）乘法散列法</h6><p>构造散列函数的乘法散列法主要包含两个步骤</p><ul><li>用关键字 k 乘上常数 A(0 &lt; A &lt; 1)，并提取 k A 的小数部分</li><li>用 m 乘以这个值，再向下取整</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// kA mod 1 的含义是取 keyA 的小数部分，即 kA - ⌊kA⌋ 。</span><br><span class="line">f (k) = ⌊ m(kA mod 1) ⌋</span><br></pre></td></tr></table></figure><h6 id="6）平方取中法"><a href="#6）平方取中法" class="headerlink" title="6）平方取中法"></a>6）平方取中法</h6><blockquote><p>假设关键字是 321，那么他的平方就是 103041，再抽取中间的 3 位就是 030 或 304 用作散列地址。再比如关键字是 1234 那么它的平方就是 1522756 ，抽取中间 3 位就是 227 用作散列地址.</p></blockquote><h6 id="7）随机数法"><a href="#7）随机数法" class="headerlink" title="7）随机数法"></a>7）随机数法</h6><blockquote><p>取关键字的随机函数值为它的散列地址。也就是 f(key) = random(key)。这里的 random 是 随机函数。</p></blockquote><h5 id="1-2-处理散列冲突的方法"><a href="#1-2-处理散列冲突的方法" class="headerlink" title="1.2 处理散列冲突的方法"></a>1.2 处理散列冲突的方法</h5><h6 id="1）开放地址法"><a href="#1）开放地址法" class="headerlink" title="1）开放地址法"></a>1）开放地址法</h6><blockquote><p><strong>开放地址法</strong>就是一旦发生冲突，就去寻找下一个空的散列地址，只要列表足够大，空的散列地址总能找到，并将记录存入，为了使用开放寻址法插入一个元素，需要连续地检查散列表，或称为探查，我们常用的有<strong>线性探测</strong>，<strong>二次探测</strong>，<strong>随机探测</strong>。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">线性探测： f,(key) = ( f(key) + di ) MOD m（di = 1,2,3,4,5,6....m-1）</span><br><span class="line"></span><br><span class="line">二次探测： f,(key) = ( f(key) + di ) MOD m（di =1^2 , -1^2 , 2^2 , -2^2 .... q^2, -q^2, q&lt;=m/2）</span><br></pre></td></tr></table></figure><h6 id="2）再哈希法"><a href="#2）再哈希法" class="headerlink" title="2）再哈希法"></a>2）再哈希法</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 利用不同的哈希函数再求得一个哈希地址，直到不出现冲突为止</span><br><span class="line">f,(key) = RH,( key ) (i = 1,2,3,4.....k)</span><br></pre></td></tr></table></figure><blockquote><p>这里的 RH,就是不同的散列函数，你可以把我们之前说过的那些散列函数都用上，每当发生冲突时就换一个散列函数，相信总有一个能够解决冲突的。这种方法能使关键字不产生聚集，但是代价就是增加了计算时间。是不是很简单啊。</p></blockquote><h6 id="3）链地址法"><a href="#3）链地址法" class="headerlink" title="3）链地址法"></a>3）链地址法</h6><p><img src="https://file.buildworld.cn/img/20210715122020.png"></p><h6 id="4）公共溢出区法"><a href="#4）公共溢出区法" class="headerlink" title="4）公共溢出区法"></a>4）公共溢出区法</h6><p><img src="https://file.buildworld.cn/img/20210715130811.png"></p><h5 id="1-3）散列表性能分析"><a href="#1-3）散列表性能分析" class="headerlink" title="1.3）散列表性能分析"></a>1.3）散列表性能分析</h5><p>1.散列函数是否均匀</p><p>2.处理冲突的方法</p><p>3.散列表的装填因子</p><h4 id="2、栈"><a href="#2、栈" class="headerlink" title="2、栈"></a>2、栈</h4><blockquote><p><strong>栈（stack）是限制插入和删除只能在一个位置上进行的表</strong>，该位置是表的末端叫做栈的顶（top），对栈的基本操作有 push(进栈)和 pop(出栈),前者相当于插入，后者则是删除最后插入的元素。</p></blockquote><h5 id="Java-中栈的实现"><a href="#Java-中栈的实现" class="headerlink" title="Java 中栈的实现"></a>Java 中栈的实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Deque&lt;TreeNode&gt; stack = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();<span class="comment">//类型为TreeNode</span></span><br><span class="line">Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;TreeNode&gt;();</span><br></pre></td></tr></table></figure><h4 id="3、队列"><a href="#3、队列" class="headerlink" title="3、队列"></a>3、队列</h4><blockquote><p>像栈一样，队列（queue）也是表。然而使用队列时插入在一端进行而删除在另一端进行，遵守先进先出的规则。所以队列的另一个名字是（FIFO）。</p></blockquote><blockquote><p>队列的基本操作是入队（enqueue）:它是在表的末端(队尾(rear)插入一个元素。出队（dequeue）:出队他是删除在表的开头（队头(front)）的元素。</p></blockquote><h5 id="Java-中队列的实现"><a href="#Java-中队列的实现" class="headerlink" title="Java 中队列的实现"></a>Java 中队列的实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br></pre></td></tr></table></figure><h4 id="4、链表"><a href="#4、链表" class="headerlink" title="4、链表"></a>4、链表</h4><blockquote><p>链表是一种递归的数据结构，他或者为空（null），或者是指向一个结点（node）的引用，该结点含有一个泛型的元素和一个指向另一条链表的引用。</p></blockquote><h5 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h5><p><img src="https://file.buildworld.cn/img/20210715140633.png"></p><h5 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h5><p><img src="https://file.buildworld.cn/img/20210715140701.png"></p><h4 id="5、树"><a href="#5、树" class="headerlink" title="5、树"></a>5、树</h4><p><img src="https://file.buildworld.cn/img/20210715141553.png"></p><h5 id="5-1-相关概念"><a href="#5-1-相关概念" class="headerlink" title="5.1 相关概念"></a>5.1 相关概念</h5><p><img src="https://file.buildworld.cn/img/20210715142011.png"><br><img src="https://file.buildworld.cn/img/20210715142048.png"></p>]]></content>
      
      
      <categories>
          
          <category> 提高 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14种常见的算法模式</title>
      <link href="/2021/07/09/14%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E7%AE%97%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
      <url>/2021/07/09/14%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84%E7%AE%97%E6%B3%95%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>微信公众号<br><a href="https://mp.weixin.qq.com/s/FbMCAiRN_rO9a_GV4pCGoA">https://mp.weixin.qq.com/s/FbMCAiRN_rO9a_GV4pCGoA</a></p><p>代码仓库<br><a href="https://github.com/TangBean/grokking-the-coding-interview/">https://github.com/TangBean/grokking-the-coding-interview/</a></p><h4 id="1．滑动窗口"><a href="#1．滑动窗口" class="headerlink" title="1．滑动窗口"></a>1．滑动窗口</h4><p><img src="https://file.buildworld.cn/img/20210706090931.webp"></p><h5 id="1-1-给定问题可能需要滑动窗口的方法"><a href="#1-1-给定问题可能需要滑动窗口的方法" class="headerlink" title="1.1 给定问题可能需要滑动窗口的方法"></a>1.1 给定问题可能需要滑动窗口的方法</h5><ul><li>问题的输入是一种线性数据结构，比如链表、数组或字符串</li><li>你被要求查找最长/最短的子字符串、子数组或所需的值</li></ul><h5 id="1-2-可以使用滑动窗口模式处理的常见问题"><a href="#1-2-可以使用滑动窗口模式处理的常见问题" class="headerlink" title="1.2 可以使用滑动窗口模式处理的常见问题"></a>1.2 可以使用滑动窗口模式处理的常见问题</h5><ul><li>大小为 K 的子数组的最大和（简单）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Given an array of positive numbers and a positive number ‘k’,</span></span><br><span class="line"><span class="comment">     * find the maximum sum of any contiguous subarray of size ‘k’.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Example 1:</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Input: [2, 1, 5, 1, 3, 2], k=3</span></span><br><span class="line"><span class="comment">     * Output: 9</span></span><br><span class="line"><span class="comment">     * Explanation: Subarray with maximum sum is [5, 1, 3].</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Example 2:</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Input: [2, 3, 4, 1, 5], k=2</span></span><br><span class="line"><span class="comment">     * Output: 7</span></span><br><span class="line"><span class="comment">     * Explanation: Subarray with maximum sum is [3, 4].</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findMaxSumSubArray</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 过滤不符合条件的输入变量</span></span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">0</span> || arr == <span class="keyword">null</span> || arr.length == <span class="number">0</span> || arr.length &lt; k) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> res = Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">int</span> sum = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 累加</span></span><br><span class="line">            sum += arr[i];</span><br><span class="line">            <span class="comment">// 当窗口超过k</span></span><br><span class="line">            <span class="keyword">if</span> (i &gt;= k) &#123;</span><br><span class="line">                sum -= arr[i - k];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 比较当前窗口和上一个窗口的大小</span></span><br><span class="line">            <span class="comment">// 如果当前窗口大，则就选择当前窗口</span></span><br><span class="line">            <span class="keyword">if</span> (sum &gt; res) &#123;</span><br><span class="line">                res = sum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>带有 K 个不同字符的最长子字符串（中等）</li><li>寻找字符相同但排序不一样的字符串（困难）</li></ul><h4 id="2．二指针或迭代器"><a href="#2．二指针或迭代器" class="headerlink" title="2．二指针或迭代器"></a>2．二指针或迭代器</h4><blockquote><p>两个指针以一前一后的模式在数据结构中迭代，直到一个或两个指针达到某种特定条件。<br>二指针通常在排序数组或链表中搜索配对时很有用：比如当你必须将一个数组的每个元素与其它元素做比较时。</p></blockquote><p><img src="https://file.buildworld.cn/img/20210706095414.webp"></p><h5 id="2-1、识别使用二指针的时机的方法"><a href="#2-1、识别使用二指针的时机的方法" class="headerlink" title="2.1、识别使用二指针的时机的方法"></a>2.1、识别使用二指针的时机的方法</h5><ul><li>可用于你要处理排序数组（或链接列表）并需要查找满足某些约束的一组元素的问题。</li><li>数组中的元素集是配对、三元组甚至子数组。</li></ul><h5 id="2-2-满足二指针模式的问题"><a href="#2-2-满足二指针模式的问题" class="headerlink" title="2.2 满足二指针模式的问题"></a>2.2 满足二指针模式的问题</h5><ul><li>求一个排序数组的平方（简单）</li><li>求总和为零的三元组（中等）</li><li>比较包含回退（backspace）的字符串（中等）</li></ul><h4 id="3．快速和慢速指针或迭代器"><a href="#3．快速和慢速指针或迭代器" class="headerlink" title="3．快速和慢速指针或迭代器"></a>3．快速和慢速指针或迭代器</h4><blockquote><p>快速和慢速指针方法也被称为 Hare &amp; Tortoise 算法，该算法会使用两个在数组（或序列/链表）中以不同速度移动的指针。该方法在处理循环链表或数组时非常有用。通过以不同的速度进行移动（比如在一个循环链表中），该算法证明这两个指针注定会相遇。只要这两个指针在同一个循环中，快速指针就会追赶上慢速指针。</p></blockquote><p><img src="https://file.buildworld.cn/img/20210706101049.webp"></p><h5 id="3-1-、使用快速和慢速模式的时机"><a href="#3-1-、使用快速和慢速模式的时机" class="headerlink" title="3.1 、使用快速和慢速模式的时机"></a>3.1 、使用快速和慢速模式的时机</h5><ul><li>处理链表或数组中的循环的问题</li><li>当你需要知道特定元素的位置或链表的总长度时</li></ul><h5 id="3-2-、满足快速和慢速指针模式的问题"><a href="#3-2-、满足快速和慢速指针模式的问题" class="headerlink" title="3.2 、满足快速和慢速指针模式的问题"></a>3.2 、满足快速和慢速指针模式的问题</h5><ul><li>链表循环（简单）</li><li>回文链表（中等）</li><li>环形数组中的循环（困难）</li></ul><h4 id="4．合并区间"><a href="#4．合并区间" class="headerlink" title="4．合并区间"></a>4．合并区间</h4><p><strong>合并区间模式是一种处理重叠区间的有效技术。</strong></p><blockquote><p>在很多涉及区间的问题中，你既需要找到重叠的区间，也需要在这些区间重叠时合并它们。该模式的工作方式为：给定两个区间（a 和 b），这两个区间有 6 种不同的互相关联的方式：<br><img src="https://file.buildworld.cn/img/20210706101941.webp"></p></blockquote><h5 id="4-1-使用合并区间的时机"><a href="#4-1-使用合并区间的时机" class="headerlink" title="4.1 使用合并区间的时机"></a>4.1 使用合并区间的时机</h5><ul><li>如果你被要求得到一个仅含互斥区间的列表</li><li>如果你听到了术语「重叠区间（overlapping intervals）</li></ul><h5 id="4-2-使用合并区间方法解决的问题"><a href="#4-2-使用合并区间方法解决的问题" class="headerlink" title="4.2 使用合并区间方法解决的问题"></a>4.2 使用合并区间方法解决的问题</h5><ul><li>区间交叉（中等）</li><li>最大 CPU 负载（困难）</li></ul><h4 id="5．循环排序"><a href="#5．循环排序" class="headerlink" title="5．循环排序"></a>5．循环排序</h4><blockquote><p>循环排序模式一次会在数组上迭代一个数值，如果所迭代的当前数值不在正确的索引处，就将其与其正确索引处的数值交换。<br><img src="https://file.buildworld.cn/img/20210706102937.webp"></p></blockquote><h5 id="5-1-使用循环排序的时机"><a href="#5-1-使用循环排序的时机" class="headerlink" title="5.1 使用循环排序的时机"></a>5.1 使用循环排序的时机</h5><ul><li>涉及数值在给定范围内的排序数组的问题</li><li>如果问题要求你在一个排序/旋转的数组中找到缺失值/重复值/最小值</li></ul><h5 id="5-2-使用循环排序解决的问题"><a href="#5-2-使用循环排序解决的问题" class="headerlink" title="5.2 使用循环排序解决的问题"></a>5.2 使用循环排序解决的问题</h5><ul><li>找到缺失值（简单）</li><li>找到最小的缺失的正数值（中等）</li></ul><h4 id="6．原地反转链表"><a href="#6．原地反转链表" class="headerlink" title="6．原地反转链表"></a>6．原地反转链表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在很多问题中，你可能会被要求反转一个链表中一组节点之间的链接。</span><br><span class="line"></span><br><span class="line">通常而言，你需要原地完成这一任务，即使用已有的节点对象且不占用额外的内存。这就是这个模式的用武之地。</span><br><span class="line"></span><br><span class="line">该模式会从一个指向链表头的变量（current）开始一次反转一个节点，然后一个变量（previous）将指向已经处理过的前一个节点。</span><br></pre></td></tr></table></figure><p><img src="https://file.buildworld.cn/img/20210706111707.webp"></p><h5 id="6-1、使用反转链表的时机"><a href="#6-1、使用反转链表的时机" class="headerlink" title="6.1、使用反转链表的时机"></a>6.1、使用反转链表的时机</h5><ul><li>如果你被要求在不使用额外内存的前提下反转一个链表</li></ul><h5 id="6-2、使用反转链表的问题"><a href="#6-2、使用反转链表的问题" class="headerlink" title="6.2、使用反转链表的问题"></a>6.2、使用反转链表的问题</h5><ul><li>反转一个子列表（中等）</li><li>反转每个 K 个元素的子列表（中等）</li></ul><h4 id="7．树的宽度优先搜索（Tree-BFS）"><a href="#7．树的宽度优先搜索（Tree-BFS）" class="headerlink" title="7．树的宽度优先搜索（Tree BFS）"></a>7．树的宽度优先搜索（Tree BFS）</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">该模式基于宽度优先搜索（BFS）技术，可遍历一个树并使用一个队列来跟踪一个层级的所有节点，之后再跳转到下一个层级。</span><br><span class="line"></span><br><span class="line">任何涉及到以逐层级方式遍历树的问题都可以使用这种方法有效解决。</span><br><span class="line"></span><br><span class="line">Tree BFS 模式的工作方式是：将根节点推至队列，然后连续迭代知道队列为空。在每次迭代中，我们移除队列头部的节点并「访问」该节点。</span><br><span class="line">在移除了队列中的每个节点之后，我们还将其所有子节点插入到队列中。</span><br></pre></td></tr></table></figure><h5 id="7-1-、使用时机"><a href="#7-1-、使用时机" class="headerlink" title="7.1 、使用时机"></a>7.1 、使用时机</h5><ul><li>如果你被要求以逐层级方式遍历（或按层级顺序遍历）一个树</li></ul><h5 id="7-2、解决的问题"><a href="#7-2、解决的问题" class="headerlink" title="7.2、解决的问题"></a>7.2、解决的问题</h5><ul><li>二叉树层级顺序遍历（简单）</li><li>之字型遍历（Zigzag Traversal）（中等）</li></ul><h4 id="8．树的深度优先搜索（Tree-DFS）"><a href="#8．树的深度优先搜索（Tree-DFS）" class="headerlink" title="8．树的深度优先搜索（Tree DFS）"></a>8．树的深度优先搜索（Tree DFS）</h4><blockquote><p>Tree DFS 是基于深度优先搜索（DFS）技术来遍历树。你可以使用递归（或该迭代方法的技术栈）来在遍历期间保持对所有之前的（父）节点的跟踪。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Tree DFS 模式的工作方式是从树的根部开始，如果这个节点不是一个叶节点，则需要做两件事：</span><br><span class="line"></span><br><span class="line">    1．决定现在是处理当前的节点（pre-order），或是在处理两个子节点之间（in-order），还是在处理两个子节点之后（post-order）</span><br><span class="line">    2．为当前节点的两个子节点执行两次递归调用以处理它们</span><br></pre></td></tr></table></figure><h5 id="8-1、使用时机"><a href="#8-1、使用时机" class="headerlink" title="8.1、使用时机"></a>8.1、使用时机</h5><ul><li>如果你被要求用 in-order、pre-order 或 post-order DFS 来遍历一个树</li><li>如果问题需要搜索其中节点更接近叶节点的东西</li></ul><h5 id="8-2、解决问题"><a href="#8-2、解决问题" class="headerlink" title="8.2、解决问题"></a>8.2、解决问题</h5><ul><li>路径数量之和（中等）</li><li>一个和的所有路径（中等）</li></ul><h4 id="9．Two-Heaps"><a href="#9．Two-Heaps" class="headerlink" title="9．Two Heaps"></a>9．Two Heaps</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在很多问题中，我们要将给定的一组元素分为两部分。</span><br><span class="line"></span><br><span class="line">为了求解这个问题，我们感兴趣的是了解一部分的最小元素以及另一部分的最大元素。这一模式是求解这类问题的一种有效方法。</span><br><span class="line"></span><br><span class="line">该模式要使用两个堆（heap）：一个用于寻找最小元素的 Min Heap 和一个用于寻找最大元素的 Max Heap。</span><br></pre></td></tr></table></figure><h5 id="9-1、使用时机"><a href="#9-1、使用时机" class="headerlink" title="9.1、使用时机"></a>9.1、使用时机</h5><ul><li>在优先级队列、调度等场景中有用</li><li>如果问题说你需要找到一个集合的最小/最大/中间元素</li><li>有时候可用于具有二叉树数据结构的问题</li></ul><h5 id="9-2、解决问题"><a href="#9-2、解决问题" class="headerlink" title="9.2、解决问题"></a>9.2、解决问题</h5><ul><li>查找一个数值流的中间值（中等）</li></ul><h4 id="10．子集"><a href="#10．子集" class="headerlink" title="10．子集"></a>10．子集</h4><blockquote><p>子集（Subsets）模式描述了一种用于有效处理所有这些问题的宽度优先搜索（BFS）方法<br><img src="https://file.buildworld.cn/img/20210706133238.webp"></p></blockquote><h5 id="10-1、使用时机"><a href="#10-1、使用时机" class="headerlink" title="10.1、使用时机"></a>10.1、使用时机</h5><ul><li>你需要找到给定集合的组合或排列的问题</li></ul><h5 id="10-2、解决问题"><a href="#10-2、解决问题" class="headerlink" title="10.2、解决问题"></a>10.2、解决问题</h5><ul><li>带有重复项的子集（简单）</li><li>通过改变大小写的字符串排列（中等）</li></ul><h4 id="11．经过修改的二叉搜索"><a href="#11．经过修改的二叉搜索" class="headerlink" title="11．经过修改的二叉搜索"></a>11．经过修改的二叉搜索</h4><blockquote><p>只要给定了排序数组、链表或矩阵，并要求寻找一个特定元素，你可以使用的最佳算法就是二叉搜索。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">对于一个升序的集合，该模式看起来是这样的：</span><br><span class="line"></span><br><span class="line">    1．首先，找到起点和终点的中间位置。</span><br><span class="line">    寻找中间位置的一种简单方法是：middle = (start + end) / 2。</span><br><span class="line">    但这很有可能造成整数溢出，所以推荐你这样表示中间位置：middle = start + (end—start) / 2。</span><br><span class="line">    2．如果键值（key）等于中间索引处的值，那么返回这个中间位置。</span><br><span class="line">    3．如果键值不等于中间索引处的值：</span><br><span class="line">    4．检查 key &lt; arr[middle] 是否成立。如果成立，将搜索约简到 end = middle—1【换行】5．检查 key &gt; arr[middle] 是否成立。如果成立，将搜索约简到 end = middle + 1</span><br></pre></td></tr></table></figure><p><img src="https://file.buildworld.cn/img/20210706133627.webp"></p><h5 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h5><ul><li>与顺序无关的二叉搜索（简单）</li><li>在经过排序的无限数组中搜索（中等）</li></ul><h4 id="12．前-K-个元素"><a href="#12．前-K-个元素" class="headerlink" title="12．前 K 个元素"></a>12．前 K 个元素</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">任何要求我们找到一个给定集合中前面的/最小的/最常出现的 K 的元素的问题都在这一模式的范围内。</span><br><span class="line">跟踪 K 个元素的最佳的数据结构是 Heap。</span><br><span class="line">这一模式会使用 Heap 来求解多个一次性处理一个给定元素集中 K 个元素的问题。</span><br></pre></td></tr></table></figure><ul><li>1．根据问题的不同，将 K 个元素插入到 min-heap 或 max-heap 中</li><li>2．迭代处理剩余的数，如果你找到一个比 heap 中数更大的数，那么就移除那个数并插入这个更大的数<br><img src="https://file.buildworld.cn/img/20210706133855.webp"></li></ul><h5 id="12-1、使用时机"><a href="#12-1、使用时机" class="headerlink" title="12.1、使用时机"></a>12.1、使用时机</h5><ul><li>如果你被要求寻找一个给定集合中前面的/最小的/最常出现的 K 的元素</li><li>如果你被要求对一个数值进行排序以找到一个确定元素</li></ul><h5 id="12-2、解决问题"><a href="#12-2、解决问题" class="headerlink" title="12.2、解决问题"></a>12.2、解决问题</h5><ul><li>前面的 K 个数（简单）</li><li>最常出现的 K 个数（中等）</li></ul><h4 id="13．K-路合并"><a href="#13．K-路合并" class="headerlink" title="13．K 路合并"></a>13．K 路合并</h4><blockquote><p>K 路合并能帮助你求解涉及一组经过排序的数组的问题。当你被给出了 K 个经过排序的数组时，你可以使用 Heap 来有效地执行所有数组的所有元素的排序遍历。你可以将每个数组的最小元素推送至 Min Heap 以获得整体最小值。在获得了整体最小值后，将来自同一个数组的下一个元素推送至 heap。然后，重复这一过程以得到所有元素的排序遍历结果。</p></blockquote><p><img src="https://file.buildworld.cn/img/20210706134355.webp"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1．将每个数组的第一个元素插入 Min Heap</span><br><span class="line">2．之后，从该 Heap 取出最小（顶部的）元素，将其加入到合并的列表。</span><br><span class="line">3．在从 Heap 移除了最小的元素之后，将同一列表的下一个元素插入该 Heap</span><br><span class="line">4．重复步骤 2 和 3，以排序的顺序填充合并的列表</span><br></pre></td></tr></table></figure><h5 id="13-1、使用时机"><a href="#13-1、使用时机" class="headerlink" title="13.1、使用时机"></a>13.1、使用时机</h5><ul><li>具有排序数组、列表或矩阵的问题</li><li>如果问题要求你合并排序的列表，找到一个排序列表中的最小元素</li></ul><h5 id="13-2、解决问题"><a href="#13-2、解决问题" class="headerlink" title="13.2、解决问题"></a>13.2、解决问题</h5><ul><li>合并 K 个排序的列表（中等）</li><li>找到和最大的 K 个配对（困难）</li></ul><h4 id="14．拓扑排序"><a href="#14．拓扑排序" class="headerlink" title="14．拓扑排序"></a>14．拓扑排序</h4><blockquote><p>拓扑排序可用于寻找互相依赖的元素的线性顺序。比如，如果事件 B 依赖于事件 A，那么 A 在拓扑排序时位于 B 之前。这个模式定义了一种简单方法来理解执行一组元素的拓扑排序的技术。该模式看起来是这样的：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1．初始化。</span><br><span class="line">    a）使用 HashMap 将图（graph）存储到邻接的列表中；</span><br><span class="line">    b）为了查找所有源，使用 HashMap 记录 in-degree 的数量</span><br><span class="line"></span><br><span class="line">2．构建图并找到所有顶点的 in-degree。</span><br><span class="line">    a）根据输入构建图并填充 in-degree HashMap</span><br><span class="line"></span><br><span class="line">3．寻找所有的源。</span><br><span class="line">    a）所有 in-degree 为 0 的顶点都是源，并会被存入一个队列</span><br><span class="line"></span><br><span class="line">4．排序。</span><br><span class="line">    a）对于每个源，执行以下操作：</span><br><span class="line">        i）将其加入到排序的列表；</span><br><span class="line">        ii）根据图获取其所有子节点；</span><br><span class="line">        iii）将每个子节点的 in-degree 减少 1；</span><br><span class="line">        iv）如果一个子节点的 in-degree 变为 0，将其加入到源队列。</span><br><span class="line"></span><br><span class="line">    b）重复 (a)，直到源队列为空。</span><br></pre></td></tr></table></figure><p><img src="https://file.buildworld.cn/img/20210706150056.webp"></p><h5 id="使用时机"><a href="#使用时机" class="headerlink" title="使用时机"></a>使用时机</h5><ul><li>处理无向有环图的问题</li><li>如果你被要求以排序顺序更新所有对象</li><li>如果你有一类遵循特定顺序的对象</li></ul>]]></content>
      
      
      <categories>
          
          <category> 提高 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode数据库题目集合</title>
      <link href="/2021/02/09/LeetCode%E6%95%B0%E6%8D%AE%E5%BA%93%E9%A2%98%E7%9B%AE%E9%9B%86%E5%90%88/"/>
      <url>/2021/02/09/LeetCode%E6%95%B0%E6%8D%AE%E5%BA%93%E9%A2%98%E7%9B%AE%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p><a href="https://leetcode-cn.com/problemset/database/">https://leetcode-cn.com/problemset/database/</a></p><p>题目都是leetcode 上了可以点击题目会有相应的链接</p><p>由于个人比较喜欢用开窗函数，所以都优先用了开窗 ，当然这些并不一定都是最优解，答案仅供参考</p><p>每道题后面都应相应的难度等级，如果没时间做的话 可以在leetcode 按出题频率刷题</p><p>我是安顺序刷的题，后续还会继续更新</p><p>祝大家面试取得好的成绩</p></blockquote><h4 id="175-组合两个表"><a href="#175-组合两个表" class="headerlink" title="175. 组合两个表"></a><a href="https://leetcode-cn.com/problems/combine-two-tables/">175. 组合两个表</a></h4><p>难度简单</p><p>SQL架构</p><p>表1: <code>Person</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| 列名         | 类型     |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| PersonId    | int     |</span><br><span class="line">| FirstName   | varchar |</span><br><span class="line">| LastName    | varchar |</span><br><span class="line">+-------------+---------+</span><br><span class="line">PersonId 是上表主键</span><br></pre></td></tr></table></figure><p>表2: <code>Address</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| 列名         | 类型    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| AddressId   | int     |</span><br><span class="line">| PersonId    | int     |</span><br><span class="line">| City        | varchar |</span><br><span class="line">| State       | varchar |</span><br><span class="line">+-------------+---------+</span><br><span class="line">AddressId 是上表主键</span><br></pre></td></tr></table></figure><p>编写一个 SQL 查询，满足条件：无论 person 是否有地址信息，都需要基于上述两表提供 person 的以下信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FirstName, LastName, City, State</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> FirstName,LastName,City,State</span><br><span class="line"><span class="keyword">from</span> Person  p</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span>  Address a </span><br><span class="line"><span class="keyword">on</span> a.PersonId <span class="operator">=</span> p.PersonId</span><br></pre></td></tr></table></figure><h4 id="176-第二高的薪水"><a href="#176-第二高的薪水" class="headerlink" title="176. 第二高的薪水"></a><a href="https://leetcode-cn.com/problems/second-highest-salary/">176. 第二高的薪水</a></h4><p>难度简单</p><p>SQL架构</p><p>编写一个 SQL 查询，获取 <code>Employee</code> 表中第二高的薪水（Salary） 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+----+--------+</span><br><span class="line">| Id | Salary |</span><br><span class="line">+----+--------+</span><br><span class="line">| 1  | 100    |</span><br><span class="line">| 2  | 200    |</span><br><span class="line">| 3  | 300    |</span><br><span class="line">+----+--------+</span><br></pre></td></tr></table></figure><p>例如上述 <code>Employee</code> 表，SQL查询应该返回 <code>200</code> 作为第二高的薪水。如果不存在第二高的薪水，那么查询应返回 <code>null</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+---------------------+</span><br><span class="line">| SecondHighestSalary |</span><br><span class="line">+---------------------+</span><br><span class="line">| 200                 |</span><br><span class="line">+---------------------+</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    IFNULL(</span><br><span class="line">      (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> Salary</span><br><span class="line">       <span class="keyword">FROM</span> Employee</span><br><span class="line">       <span class="keyword">ORDER</span> <span class="keyword">BY</span> Salary <span class="keyword">DESC</span></span><br><span class="line">        LIMIT <span class="number">1</span> <span class="keyword">OFFSET</span> <span class="number">1</span>),</span><br><span class="line">    <span class="keyword">NULL</span>) <span class="keyword">AS</span> SecondHighestSalary</span><br></pre></td></tr></table></figure><h4 id="177-第N高的薪水"><a href="#177-第N高的薪水" class="headerlink" title="177. 第N高的薪水"></a><a href="https://leetcode-cn.com/problems/nth-highest-salary/">177. 第N高的薪水</a></h4><p>难度中等</p><p>编写一个 SQL 查询，获取 <code>Employee</code> 表中第 <em>n</em> 高的薪水（Salary）。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+----+--------+</span><br><span class="line">| Id | Salary |</span><br><span class="line">+----+--------+</span><br><span class="line">| 1  | 100    |</span><br><span class="line">| 2  | 200    |</span><br><span class="line">| 3  | 300    |</span><br><span class="line">+----+--------+</span><br></pre></td></tr></table></figure><p>例如上述 <code>Employee</code> 表，<em>n = 2</em> 时，应返回第二高的薪水 <code>200</code>。如果不存在第 <em>n</em> 高的薪水，那么查询应返回 <code>null</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+------------------------+</span><br><span class="line">| getNthHighestSalary(2) |</span><br><span class="line">+------------------------+</span><br><span class="line">| 200                    |</span><br><span class="line">+------------------------+</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> getNthHighestSalary(N <span class="type">INT</span>) <span class="keyword">RETURNS</span> <span class="type">INT</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">SET</span> N <span class="operator">=</span> N<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">RETURN</span> (</span><br><span class="line">        <span class="keyword">select</span> ifnull((</span><br><span class="line">                          <span class="keyword">select</span> <span class="keyword">distinct</span> Salary</span><br><span class="line">                          <span class="keyword">from</span> Employee <span class="keyword">order</span> <span class="keyword">by</span> Salary <span class="keyword">desc</span> limit N,<span class="number">1</span>),</span><br><span class="line">                      <span class="keyword">NULL</span>)</span><br><span class="line">    );</span><br><span class="line"><span class="keyword">END</span></span><br></pre></td></tr></table></figure><h4 id="178-分数排名"><a href="#178-分数排名" class="headerlink" title="178. 分数排名"></a><a href="https://leetcode-cn.com/problems/rank-scores/">178. 分数排名</a></h4><p>难度中等</p><p>SQL架构</p><p>编写一个 SQL 查询来实现分数排名。</p><p>如果两个分数相同，则两个分数排名（Rank）相同。请注意，平分后的下一个名次应该是下一个连续的整数值。换句话说，名次之间不应该有“间隔”。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+----+-------+</span><br><span class="line">| Id | Score |</span><br><span class="line">+----+-------+</span><br><span class="line">| 1  | 3.50  |</span><br><span class="line">| 2  | 3.65  |</span><br><span class="line">| 3  | 4.00  |</span><br><span class="line">| 4  | 3.85  |</span><br><span class="line">| 5  | 4.00  |</span><br><span class="line">| 6  | 3.65  |</span><br><span class="line">+----+-------+</span><br></pre></td></tr></table></figure><p>例如，根据上述给定的 <code>Scores</code> 表，你的查询应该返回（按分数从高到低排列）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+-------+------+</span><br><span class="line">| Score | Rank |</span><br><span class="line">+-------+------+</span><br><span class="line">| 4.00  | 1    |</span><br><span class="line">| 4.00  | 1    |</span><br><span class="line">| 3.85  | 2    |</span><br><span class="line">| 3.65  | 3    |</span><br><span class="line">| 3.65  | 3    |</span><br><span class="line">| 3.50  | 4    |</span><br><span class="line">+-------+------+</span><br></pre></td></tr></table></figure><p><strong>重要提示：</strong>对于 MySQL 解决方案，如果要转义用作列名的保留字，可以在关键字之前和之后使用撇号。例如 <strong><code>Rank</code></strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> Score,</span><br><span class="line"><span class="built_in">dense_rank</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> Score <span class="keyword">desc</span>) `rank`</span><br><span class="line"><span class="keyword">from</span> Scores</span><br></pre></td></tr></table></figure><h4 id="180-连续出现的数字"><a href="#180-连续出现的数字" class="headerlink" title="180. 连续出现的数字"></a><a href="https://leetcode-cn.com/problems/consecutive-numbers/">180. 连续出现的数字</a></h4><p>难度中等</p><p>SQL架构</p><p>编写一个 SQL 查询，查找所有至少连续出现三次的数字。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+----+-----+</span><br><span class="line">| Id | Num |</span><br><span class="line">+----+-----+</span><br><span class="line">| 1  |  1  |</span><br><span class="line">| 2  |  1  |</span><br><span class="line">| 3  |  1  |</span><br><span class="line">| 4  |  2  |</span><br><span class="line">| 5  |  1  |</span><br><span class="line">| 6  |  2  |</span><br><span class="line">| 7  |  2  |</span><br><span class="line">+----+-----+</span><br></pre></td></tr></table></figure><p>例如，给定上面的 <code>Logs</code> 表， <code>1</code> 是唯一连续出现至少三次的数字。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="operator">|</span> ConsecutiveNums <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">1</span>               <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------------+</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> Num ConsecutiveNums</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span></span><br><span class="line">Num,</span><br><span class="line"><span class="built_in">lead</span>(Num,<span class="number">1</span>,<span class="keyword">null</span>) <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> id) n2,</span><br><span class="line"><span class="built_in">lead</span>(Num,<span class="number">2</span>,<span class="keyword">null</span>) <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> id) n3</span><br><span class="line"><span class="keyword">from</span> Logs</span><br><span class="line">)t1</span><br><span class="line"><span class="keyword">where</span> Num <span class="operator">=</span> n2 <span class="keyword">and</span> Num <span class="operator">=</span> n3</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> l1.num <span class="keyword">as</span> ConsecutiveNums</span><br><span class="line"><span class="keyword">from</span> logs l1</span><br><span class="line">         <span class="keyword">join</span> logs l2 <span class="keyword">on</span> l1.num <span class="operator">=</span> l2.num</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> l1.Id</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">sum</span>(l1.Id <span class="operator">-</span> l2.Id <span class="keyword">between</span> <span class="number">0</span> <span class="keyword">and</span> <span class="number">2</span>) <span class="operator">&gt;</span> <span class="number">2</span>;</span><br></pre></td></tr></table></figure><h4 id="181-超过经理收入的员工"><a href="#181-超过经理收入的员工" class="headerlink" title="181. 超过经理收入的员工"></a><a href="https://leetcode-cn.com/problems/employees-earning-more-than-their-managers/">181. 超过经理收入的员工</a></h4><p>难度简单</p><p>SQL架构</p><p><code>Employee</code> 表包含所有员工，他们的经理也属于员工。每个员工都有一个 Id，此外还有一列对应员工的经理的 Id。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+----+-------+--------+-----------+</span><br><span class="line">| Id | Name  | Salary | ManagerId |</span><br><span class="line">+----+-------+--------+-----------+</span><br><span class="line">| 1  | Joe   | 70000  | 3         |</span><br><span class="line">| 2  | Henry | 80000  | 4         |</span><br><span class="line">| 3  | Sam   | 60000  | NULL      |</span><br><span class="line">| 4  | Max   | 90000  | NULL      |</span><br><span class="line">+----+-------+--------+-----------+</span><br></pre></td></tr></table></figure><p>给定 <code>Employee</code> 表，编写一个 SQL 查询，该查询可以获取收入超过他们经理的员工的姓名。在上面的表格中，Joe 是唯一一个收入超过他的经理的员工。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> Employee <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> Joe      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.Name  Employee </span><br><span class="line"><span class="keyword">from</span> Employee a </span><br><span class="line"><span class="keyword">join</span> Employee b</span><br><span class="line"><span class="keyword">on</span> a.ManagerId <span class="operator">=</span> b.id</span><br><span class="line"><span class="keyword">where</span> a.Salary<span class="operator">&gt;</span>b.Salary</span><br></pre></td></tr></table></figure><h4 id="182-查找重复的电子邮箱"><a href="#182-查找重复的电子邮箱" class="headerlink" title="182. 查找重复的电子邮箱"></a><a href="https://leetcode-cn.com/problems/duplicate-emails/">182. 查找重复的电子邮箱</a></h4><p>难度简单</p><p>SQL架构</p><p>编写一个 SQL 查询，查找 <code>Person</code> 表中所有重复的电子邮箱。</p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+----+---------+</span><br><span class="line">| Id | Email   |</span><br><span class="line">+----+---------+</span><br><span class="line">| 1  | a@b.com |</span><br><span class="line">| 2  | c@d.com |</span><br><span class="line">| 3  | a@b.com |</span><br><span class="line">+----+---------+</span><br></pre></td></tr></table></figure><p>根据以上输入，你的查询应返回以下结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+---------+</span><br><span class="line">| Email   |</span><br><span class="line">+---------+</span><br><span class="line">| a@b.com |</span><br><span class="line">+---------+</span><br></pre></td></tr></table></figure><p><strong>说明：</strong>所有电子邮箱都是小写字母。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> Email</span><br><span class="line"><span class="keyword">from</span> Person</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> Email</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>)<span class="operator">&gt;</span><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="183-从不订购的客户"><a href="#183-从不订购的客户" class="headerlink" title="183. 从不订购的客户"></a><a href="https://leetcode-cn.com/problems/customers-who-never-order/">183. 从不订购的客户</a></h4><p>难度简单</p><p>SQL架构</p><p>某网站包含两个表，<code>Customers</code> 表和 <code>Orders</code> 表。编写一个 SQL 查询，找出所有从不订购任何东西的客户。</p><p><code>Customers</code> 表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+----+-------+</span><br><span class="line">| Id | Name  |</span><br><span class="line">+----+-------+</span><br><span class="line">| 1  | Joe   |</span><br><span class="line">| 2  | Henry |</span><br><span class="line">| 3  | Sam   |</span><br><span class="line">| 4  | Max   |</span><br><span class="line">+----+-------+</span><br></pre></td></tr></table></figure><p><code>Orders</code> 表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+----+------------+</span><br><span class="line">| Id | CustomerId |</span><br><span class="line">+----+------------+</span><br><span class="line">| 1  | 3          |</span><br><span class="line">| 2  | 1          |</span><br><span class="line">+----+------------+</span><br></pre></td></tr></table></figure><p>例如给定上述表格，你的查询应返回：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span> Customers <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br><span class="line"><span class="operator">|</span> Henry     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Max       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-----------+</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  c.Name Customers</span><br><span class="line"><span class="keyword">from</span> Customers  c <span class="keyword">left</span> <span class="keyword">join</span> Orders  o</span><br><span class="line"><span class="keyword">on</span> c.id <span class="operator">=</span> o.CustomerId</span><br><span class="line"><span class="keyword">where</span> o.id <span class="keyword">is</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure><h4 id="184-部门工资最高的员工"><a href="#184-部门工资最高的员工" class="headerlink" title="184. 部门工资最高的员工"></a><a href="https://leetcode-cn.com/problems/department-highest-salary/">184. 部门工资最高的员工</a></h4><p>难度中等</p><p>SQL架构</p><p><code>Employee</code> 表包含所有员工信息，每个员工有其对应的 Id, salary 和 department Id。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+----+-------+--------+--------------+</span><br><span class="line">| Id | Name  | Salary | DepartmentId |</span><br><span class="line">+----+-------+--------+--------------+</span><br><span class="line">| 1  | Joe   | 70000  | 1            |</span><br><span class="line">| 2  | Henry | 80000  | 2            |</span><br><span class="line">| 3  | Sam   | 60000  | 2            |</span><br><span class="line">| 4  | Max   | 90000  | 1            |</span><br><span class="line">+----+-------+--------+--------------+</span><br></pre></td></tr></table></figure><p><code>Department</code> 表包含公司所有部门的信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+----+----------+</span><br><span class="line">| Id | Name     |</span><br><span class="line">+----+----------+</span><br><span class="line">| 1  | IT       |</span><br><span class="line">| 2  | Sales    |</span><br><span class="line">+----+----------+</span><br></pre></td></tr></table></figure><p>编写一个 SQL 查询，找出每个部门工资最高的员工。例如，根据上述给定的表格，Max 在 IT 部门有最高工资，Henry 在 Sales 部门有最高工资。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">------------+----------+--------+</span></span><br><span class="line"><span class="operator">|</span> Department <span class="operator">|</span> Employee <span class="operator">|</span> Salary <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+----------+--------+</span></span><br><span class="line"><span class="operator">|</span> IT         <span class="operator">|</span> Max      <span class="operator">|</span> <span class="number">90000</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> Sales      <span class="operator">|</span> Henry    <span class="operator">|</span> <span class="number">80000</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+----------+--------+</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> Department,Employee,Salary</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line"><span class="keyword">select</span> d.Name  Department,e.Name Employee, e.Salary,</span><br><span class="line"><span class="built_in">rank</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> d.id <span class="keyword">order</span> <span class="keyword">by</span> Salary <span class="keyword">desc</span>) rk</span><br><span class="line"><span class="keyword">from</span> Employee e <span class="keyword">join</span> Department d</span><br><span class="line"><span class="keyword">on</span> e.DepartmentId<span class="operator">=</span>d.id</span><br><span class="line">)tmp</span><br><span class="line"><span class="keyword">where</span> rk <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="185-部门工资前三高的所有员工"><a href="#185-部门工资前三高的所有员工" class="headerlink" title="185. 部门工资前三高的所有员工"></a><a href="https://leetcode-cn.com/problems/department-top-three-salaries/">185. 部门工资前三高的所有员工</a></h4><p>难度困难</p><p>SQL架构</p><p><code>Employee</code> 表包含所有员工信息，每个员工有其对应的工号 <code>Id</code>，姓名 <code>Name</code>，工资 <code>Salary</code> 和部门编号 <code>DepartmentId</code> 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+----+-------+--------+--------------+</span><br><span class="line">| Id | Name  | Salary | DepartmentId |</span><br><span class="line">+----+-------+--------+--------------+</span><br><span class="line">| 1  | Joe   | 85000  | 1            |</span><br><span class="line">| 2  | Henry | 80000  | 2            |</span><br><span class="line">| 3  | Sam   | 60000  | 2            |</span><br><span class="line">| 4  | Max   | 90000  | 1            |</span><br><span class="line">| 5  | Janet | 69000  | 1            |</span><br><span class="line">| 6  | Randy | 85000  | 1            |</span><br><span class="line">| 7  | Will  | 70000  | 1            |</span><br><span class="line">+----+-------+--------+--------------+</span><br></pre></td></tr></table></figure><p><code>Department</code> 表包含公司所有部门的信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+----+----------+</span><br><span class="line">| Id | Name     |</span><br><span class="line">+----+----------+</span><br><span class="line">| 1  | IT       |</span><br><span class="line">| 2  | Sales    |</span><br><span class="line">+----+----------+</span><br></pre></td></tr></table></figure><p>编写一个 SQL 查询，找出每个部门获得前三高工资的所有员工。例如，根据上述给定的表，查询结果应返回：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+------------+----------+--------+</span><br><span class="line">| Department | Employee | Salary |</span><br><span class="line">+------------+----------+--------+</span><br><span class="line">| IT         | Max      | 90000  |</span><br><span class="line">| IT         | Randy    | 85000  |</span><br><span class="line">| IT         | Joe      | 85000  |</span><br><span class="line">| IT         | Will     | 70000  |</span><br><span class="line">| Sales      | Henry    | 80000  |</span><br><span class="line">| Sales      | Sam      | 60000  |</span><br><span class="line">+------------+----------+--------+</span><br></pre></td></tr></table></figure><p><strong>解释：</strong></p><p>IT 部门中，Max 获得了最高的工资，Randy 和 Joe 都拿到了第二高的工资，Will 的工资排第三。销售部门（Sales）只有两名员工，Henry 的工资最高，Sam 的工资排第二。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> Department,Employee,Salary</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line"><span class="keyword">select</span> d.Name  Department,e.Name Employee, e.Salary,</span><br><span class="line"><span class="built_in">dense_rank</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> d.id <span class="keyword">order</span> <span class="keyword">by</span> Salary <span class="keyword">desc</span>) rk</span><br><span class="line"><span class="keyword">from</span> Employee e <span class="keyword">join</span> Department d</span><br><span class="line"><span class="keyword">on</span> e.DepartmentId<span class="operator">=</span>d.id</span><br><span class="line">)tmp</span><br><span class="line"><span class="keyword">where</span> rk <span class="operator">&lt;=</span><span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="196-删除重复的电子邮箱"><a href="#196-删除重复的电子邮箱" class="headerlink" title="196. 删除重复的电子邮箱"></a><a href="https://leetcode-cn.com/problems/delete-duplicate-emails/">196. 删除重复的电子邮箱</a></h4><p>难度简单</p><p>编写一个 SQL 查询，来删除 <code>Person</code> 表中所有重复的电子邮箱，重复的邮箱里只保留 <strong>Id</strong> <em>最小</em> 的那个。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+----+------------------+</span><br><span class="line">| Id | Email            |</span><br><span class="line">+----+------------------+</span><br><span class="line">| 1  | john@example.com |</span><br><span class="line">| 2  | bob@example.com  |</span><br><span class="line">| 3  | john@example.com |</span><br><span class="line">+----+------------------+</span><br><span class="line">Id 是这个表的主键。</span><br></pre></td></tr></table></figure><p>例如，在运行你的查询语句之后，上面的 <code>Person</code> 表应返回以下几行:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+----+------------------+</span><br><span class="line">| Id | Email            |</span><br><span class="line">+----+------------------+</span><br><span class="line">| 1  | john@example.com |</span><br><span class="line">| 2  | bob@example.com  |</span><br><span class="line">+----+------------------+</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><p>执行 SQL 之后，输出是整个 <code>Person</code> 表。</p></li><li><p>使用 <code>delete</code> 语句。</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> p1 <span class="keyword">FROM</span> Person p1,</span><br><span class="line">    Person p2</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    p1.Email <span class="operator">=</span> p2.Email <span class="keyword">AND</span> p1.Id <span class="operator">&gt;</span> p2.Id</span><br></pre></td></tr></table></figure><blockquote><p>注意是删除 ，不是查询</p></blockquote><h4 id="197-上升的温度"><a href="#197-上升的温度" class="headerlink" title="197. 上升的温度"></a><a href="https://leetcode-cn.com/problems/rising-temperature/">197. 上升的温度</a></h4><p>难度简单</p><p>SQL架构</p><p>给定一个 <code>Weather</code> 表，编写一个 SQL 查询，来查找与之前（昨天的）日期相比温度更高的所有日期的 Id。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+---------+------------------+------------------+</span><br><span class="line">| Id(INT) | RecordDate(DATE) | Temperature(INT) |</span><br><span class="line">+---------+------------------+------------------+</span><br><span class="line">|       1 |       2015-01-01 |               10 |</span><br><span class="line">|       2 |       2015-01-02 |               25 |</span><br><span class="line">|       3 |       2015-01-03 |               20 |</span><br><span class="line">|       4 |       2015-01-04 |               30 |</span><br><span class="line">+---------+------------------+------------------+</span><br></pre></td></tr></table></figure><p>例如，根据上述给定的 <code>Weather</code> 表格，返回如下 Id:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br><span class="line"><span class="operator">|</span> Id <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">Id</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span> Id,RecordDate,Temperature,</span><br><span class="line"><span class="built_in">lag</span>(RecordDate,<span class="number">1</span>,<span class="number">9999</span><span class="number">-99</span><span class="number">-99</span>) <span class="keyword">over</span> (<span class="keyword">order</span> <span class="keyword">by</span> RecordDate) yd,</span><br><span class="line"><span class="built_in">lag</span>(Temperature,<span class="number">1</span>,<span class="number">999</span>) <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> RecordDate ) yt</span><br><span class="line"><span class="keyword">from</span> Weather </span><br><span class="line">)tmp</span><br><span class="line"><span class="keyword">where</span> Temperature <span class="operator">&gt;</span>yt</span><br><span class="line"><span class="keyword">and</span> datediff(RecordDate,yd)<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.Id <span class="keyword">from</span> Weather a ,Weather b </span><br><span class="line">    <span class="keyword">where</span> a.Temperature <span class="operator">&gt;</span> b.Temperature </span><br><span class="line">    <span class="keyword">and</span> datediff(a.RecordDate,b.RecordDate) <span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><h4 id="262-行程和用户"><a href="#262-行程和用户" class="headerlink" title="262. 行程和用户"></a><a href="https://leetcode-cn.com/problems/trips-and-users/">262. 行程和用户</a></h4><p>难度困难</p><p>SQL架构</p><p><code>Trips</code> 表中存所有出租车的行程信息。每段行程有唯一键 Id，Client_Id 和 Driver_Id 是 <code>Users</code> 表中 Users_Id 的外键。Status 是枚举类型，枚举成员为 (‘completed’, ‘cancelled_by_driver’, ‘cancelled_by_client’)。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">+----+-----------+-----------+---------+--------------------+----------+</span><br><span class="line">| Id | Client_Id | Driver_Id | City_Id |        Status      |Request_at|</span><br><span class="line">+----+-----------+-----------+---------+--------------------+----------+</span><br><span class="line">| 1  |     1     |    10     |    1    |     completed      |2013-10-01|</span><br><span class="line">| 2  |     2     |    11     |    1    | cancelled_by_driver|2013-10-01|</span><br><span class="line">| 3  |     3     |    12     |    6    |     completed      |2013-10-01|</span><br><span class="line">| 4  |     4     |    13     |    6    | cancelled_by_client|2013-10-01|</span><br><span class="line">| 5  |     1     |    10     |    1    |     completed      |2013-10-02|</span><br><span class="line">| 6  |     2     |    11     |    6    |     completed      |2013-10-02|</span><br><span class="line">| 7  |     3     |    12     |    6    |     completed      |2013-10-02|</span><br><span class="line">| 8  |     2     |    12     |    12   |     completed      |2013-10-03|</span><br><span class="line">| 9  |     3     |    10     |    12   |     completed      |2013-10-03| </span><br><span class="line">| 10 |     4     |    13     |    12   | cancelled_by_driver|2013-10-03|</span><br><span class="line">+----+-----------+-----------+---------+--------------------+----------+</span><br></pre></td></tr></table></figure><p><code>Users</code> 表存所有用户。每个用户有唯一键 Users_Id。Banned 表示这个用户是否被禁止，Role 则是一个表示（‘client’, ‘driver’, ‘partner’）的枚举类型。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+----------+--------+--------+</span><br><span class="line">| Users_Id | Banned |  Role  |</span><br><span class="line">+----------+--------+--------+</span><br><span class="line">|    1     |   No   | client |</span><br><span class="line">|    2     |   Yes  | client |</span><br><span class="line">|    3     |   No   | client |</span><br><span class="line">|    4     |   No   | client |</span><br><span class="line">|    10    |   No   | driver |</span><br><span class="line">|    11    |   No   | driver |</span><br><span class="line">|    12    |   No   | driver |</span><br><span class="line">|    13    |   No   | driver |</span><br><span class="line">+----------+--------+--------+</span><br></pre></td></tr></table></figure><p>写一段 SQL 语句查出 <strong>2013年10月1日</strong> 至 <strong>2013年10月3日</strong> 期间非禁止用户的取消率。基于上表，你的 SQL 语句应返回如下结果，取消率（Cancellation Rate）保留两位小数。</p><p>取消率的计算方式如下：(被司机或乘客取消的非禁止用户生成的订单数量) / (非禁止用户生成的订单总数)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">+</span><span class="comment">------------+-------------------+</span></span><br><span class="line"><span class="operator">|</span>     <span class="keyword">Day</span>    <span class="operator">|</span> Cancellation Rate <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2013</span><span class="number">-10</span><span class="number">-01</span> <span class="operator">|</span>       <span class="number">0.33</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2013</span><span class="number">-10</span><span class="number">-02</span> <span class="operator">|</span>       <span class="number">0.00</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2013</span><span class="number">-10</span><span class="number">-03</span> <span class="operator">|</span>       <span class="number">0.50</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------------+-------------------+</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> T.request_at <span class="keyword">AS</span> `<span class="keyword">Day</span>`, </span><br><span class="line">ROUND(</span><br><span class="line"><span class="built_in">SUM</span>(</span><br><span class="line">IF(T.STATUS <span class="operator">=</span> <span class="string">&#x27;completed&#x27;</span>,<span class="number">0</span>,<span class="number">1</span>)</span><br><span class="line">)</span><br><span class="line"><span class="operator">/</span> </span><br><span class="line"><span class="built_in">COUNT</span>(T.STATUS),</span><br><span class="line"><span class="number">2</span></span><br><span class="line">) <span class="keyword">AS</span> `Cancellation Rate`</span><br><span class="line"><span class="keyword">FROM</span> trips <span class="keyword">AS</span> T</span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">T.Client_Id <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line"><span class="keyword">SELECT</span> users_id</span><br><span class="line"><span class="keyword">FROM</span> users</span><br><span class="line"><span class="keyword">WHERE</span> banned <span class="operator">=</span> <span class="string">&#x27;Yes&#x27;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">AND</span></span><br><span class="line">T.Driver_Id <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line"><span class="keyword">SELECT</span> users_id</span><br><span class="line"><span class="keyword">FROM</span> users</span><br><span class="line"><span class="keyword">WHERE</span> banned <span class="operator">=</span> <span class="string">&#x27;Yes&#x27;</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">AND</span> T.request_at <span class="keyword">BETWEEN</span> <span class="string">&#x27;2013-10-01&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;2013-10-03&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> T.request_at</span><br></pre></td></tr></table></figure><h4 id="511-游戏玩法分析-I"><a href="#511-游戏玩法分析-I" class="headerlink" title="511. 游戏玩法分析 I"></a><a href="https://leetcode-cn.com/problems/game-play-analysis-i/">511. 游戏玩法分析 I</a></h4><p>难度简单</p><p>SQL架构</p><p>活动表 <code>Activity</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+--------------+---------+</span><br><span class="line">| Column Name  | Type    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">| player_id    | int     |</span><br><span class="line">| device_id    | int     |</span><br><span class="line">| event_date   | date    |</span><br><span class="line">| games_played | int     |</span><br><span class="line">+--------------+---------+</span><br><span class="line">表的主键是 (player_id, event_date)。</span><br><span class="line">这张表展示了一些游戏玩家在游戏平台上的行为活动。</span><br><span class="line">每行数据记录了一名玩家在退出平台之前，当天使用同一台设备登录平台后打开的游戏的数目（可能是 0 个）。</span><br></pre></td></tr></table></figure><p>写一条 SQL 查询语句获取每位玩家 <strong>第一次登陆平台的日期</strong>。</p><p>查询结果的格式如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Activity 表：</span><br><span class="line">+-----------+-----------+------------+--------------+</span><br><span class="line">| player_id | device_id | event_date | games_played |</span><br><span class="line">+-----------+-----------+------------+--------------+</span><br><span class="line">| 1         | 2         | 2016-03-01 | 5            |</span><br><span class="line">| 1         | 2         | 2016-05-02 | 6            |</span><br><span class="line">| 2         | 3         | 2017-06-25 | 1            |</span><br><span class="line">| 3         | 1         | 2016-03-02 | 0            |</span><br><span class="line">| 3         | 4         | 2018-07-03 | 5            |</span><br><span class="line">+-----------+-----------+------------+--------------+</span><br><span class="line"></span><br><span class="line">Result 表：</span><br><span class="line">+-----------+-------------+</span><br><span class="line">| player_id | first_login |</span><br><span class="line">+-----------+-------------+</span><br><span class="line">| 1         | 2016-03-01  |</span><br><span class="line">| 2         | 2017-06-25  |</span><br><span class="line">| 3         | 2016-03-02  |</span><br><span class="line">+-----------+-------------+</span><br></pre></td></tr></table></figure><p>1.</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> player_id ,event_date first_login</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line"><span class="keyword">select</span> player_id ,event_date,</span><br><span class="line"><span class="built_in">rank</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> player_id <span class="keyword">order</span> <span class="keyword">by</span> event_date) rk</span><br><span class="line"><span class="keyword">from</span> Activity</span><br><span class="line">) tmp</span><br><span class="line"><span class="keyword">where</span> rk <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>2.最优 （选最小日期）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> player_id ,<span class="built_in">min</span>(event_date) first_login</span><br><span class="line"><span class="keyword">from</span> Activity</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> player_id </span><br></pre></td></tr></table></figure><h4 id="512-游戏玩法分析-II"><a href="#512-游戏玩法分析-II" class="headerlink" title="512. 游戏玩法分析 II"></a><a href="https://leetcode-cn.com/problems/game-play-analysis-ii/">512. 游戏玩法分析 II</a></h4><p>难度简单</p><p>SQL架构</p><p>Table: <code>Activity</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+--------------+---------+</span><br><span class="line">| Column Name  | Type    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">| player_id    | int     |</span><br><span class="line">| device_id    | int     |</span><br><span class="line">| event_date   | date    |</span><br><span class="line">| games_played | int     |</span><br><span class="line">+--------------+---------+</span><br><span class="line">(player_id, event_date) 是这个表的两个主键</span><br><span class="line">这个表显示的是某些游戏玩家的游戏活动情况</span><br><span class="line">每一行是在某天使用某个设备登出之前登录并玩多个游戏（可能为0）的玩家的记录</span><br></pre></td></tr></table></figure><p>请编写一个 SQL 查询，描述每一个玩家首次登陆的设备名称</p><p>查询结果格式在以下示例中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Activity table:</span><br><span class="line">+-----------+-----------+------------+--------------+</span><br><span class="line">| player_id | device_id | event_date | games_played |</span><br><span class="line">+-----------+-----------+------------+--------------+</span><br><span class="line">| 1         | 2         | 2016-03-01 | 5            |</span><br><span class="line">| 1         | 2         | 2016-05-02 | 6            |</span><br><span class="line">| 2         | 3         | 2017-06-25 | 1            |</span><br><span class="line">| 3         | 1         | 2016-03-02 | 0            |</span><br><span class="line">| 3         | 4         | 2018-07-03 | 5            |</span><br><span class="line">+-----------+-----------+------------+--------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+-----------+-----------+</span><br><span class="line">| player_id | device_id |</span><br><span class="line">+-----------+-----------+</span><br><span class="line">| 1         | 2         |</span><br><span class="line">| 2         | 3         |</span><br><span class="line">| 3         | 1         |</span><br><span class="line">+-----------+-----------+</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> player_id ,device_id</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line"><span class="keyword">select</span> player_id ,event_date,device_id,</span><br><span class="line"><span class="built_in">rank</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> player_id <span class="keyword">order</span> <span class="keyword">by</span> event_date) rk</span><br><span class="line"><span class="keyword">from</span> Activity</span><br><span class="line">) tmp</span><br><span class="line"><span class="keyword">where</span> rk <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="534-游戏玩法分析-III"><a href="#534-游戏玩法分析-III" class="headerlink" title="534. 游戏玩法分析 III"></a><a href="https://leetcode-cn.com/problems/game-play-analysis-iii/">534. 游戏玩法分析 III</a></h4><p>难度中等20收藏分享切换为英文关注反馈</p><p>SQL架构</p><p>Table: <code>Activity</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+--------------+---------+</span><br><span class="line">| Column Name  | Type    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">| player_id    | int     |</span><br><span class="line">| device_id    | int     |</span><br><span class="line">| event_date   | date    |</span><br><span class="line">| games_played | int     |</span><br><span class="line">+--------------+---------+</span><br><span class="line">（player_id，event_date）是此表的主键。</span><br><span class="line">这张表显示了某些游戏的玩家的活动情况。</span><br><span class="line">每一行是一个玩家的记录，他在某一天使用某个设备注销之前登录并玩了很多游戏（可能是 0 ）。</span><br></pre></td></tr></table></figure><p>编写一个 SQL 查询，同时报告每组玩家和日期，以及玩家到目前为止玩了多少游戏。也就是说，在此日期之前玩家所玩的游戏总数。详细情况请查看示例。</p><p>查询结果格式如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Activity table:</span><br><span class="line">+-----------+-----------+------------+--------------+</span><br><span class="line">| player_id | device_id | event_date | games_played |</span><br><span class="line">+-----------+-----------+------------+--------------+</span><br><span class="line">| 1         | 2         | 2016-03-01 | 5            |</span><br><span class="line">| 1         | 2         | 2016-05-02 | 6            |</span><br><span class="line">| 1         | 3         | 2017-06-25 | 1            |</span><br><span class="line">| 3         | 1         | 2016-03-02 | 0            |</span><br><span class="line">| 3         | 4         | 2018-07-03 | 5            |</span><br><span class="line">+-----------+-----------+------------+--------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+-----------+------------+---------------------+</span><br><span class="line">| player_id | event_date | games_played_so_far |</span><br><span class="line">+-----------+------------+---------------------+</span><br><span class="line">| 1         | 2016-03-01 | 5                   |</span><br><span class="line">| 1         | 2016-05-02 | 11                  |</span><br><span class="line">| 1         | 2017-06-25 | 12                  |</span><br><span class="line">| 3         | 2016-03-02 | 0                   |</span><br><span class="line">| 3         | 2018-07-03 | 5                   |</span><br><span class="line">+-----------+------------+---------------------+</span><br><span class="line">对于 ID 为 1 的玩家，2016-05-02 共玩了 5+6=11 个游戏，2017-06-25 共玩了 5+6+1=12 个游戏。</span><br><span class="line">对于 ID 为 3 的玩家，2018-07-03 共玩了 0+5=5 个游戏。</span><br><span class="line">请注意，对于每个玩家，我们只关心玩家的登录日期。</span><br></pre></td></tr></table></figure><p>开窗</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> player_id,event_date ,</span><br><span class="line"><span class="built_in">sum</span>(games_played) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> player_id <span class="keyword">order</span> <span class="keyword">by</span>  event_date )games_played_so_far</span><br><span class="line"><span class="keyword">from</span> Activity</span><br></pre></td></tr></table></figure><p>自连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    a1.player_id,</span><br><span class="line">    a1.event_date,</span><br><span class="line">    <span class="built_in">sum</span>(a2.games_played) games_played_so_far</span><br><span class="line"><span class="keyword">from</span> Activity a1,Activity a2</span><br><span class="line"><span class="keyword">where</span> a1.player_id<span class="operator">=</span>a2.player_id <span class="keyword">and</span> </span><br><span class="line">      a1.event_date<span class="operator">&gt;=</span>a2.event_date</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="number">1</span>,<span class="number">2</span>;</span><br></pre></td></tr></table></figure><h4 id="550-游戏玩法分析-IV"><a href="#550-游戏玩法分析-IV" class="headerlink" title="550. 游戏玩法分析 IV"></a><a href="https://leetcode-cn.com/problems/game-play-analysis-iv/">550. 游戏玩法分析 IV</a></h4><p>难度中等17收藏分享切换为英文关注反馈</p><p>SQL架构</p><p>Table: <code>Activity</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+--------------+---------+</span><br><span class="line">| Column Name  | Type    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">| player_id    | int     |</span><br><span class="line">| device_id    | int     |</span><br><span class="line">| event_date   | date    |</span><br><span class="line">| games_played | int     |</span><br><span class="line">+--------------+---------+</span><br><span class="line">（player_id，event_date）是此表的主键。</span><br><span class="line">这张表显示了某些游戏的玩家的活动情况。</span><br><span class="line">每一行是一个玩家的记录，他在某一天使用某个设备注销之前登录并玩了很多游戏（可能是 0）。</span><br></pre></td></tr></table></figure><p>编写一个 SQL 查询，报告在首次登录的第二天再次登录的玩家的分数，四舍五入到小数点后两位。换句话说，您需要计算从首次登录日期开始至少连续两天登录的玩家的数量，然后除以玩家总数。</p><p>查询结果格式如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Activity table:</span><br><span class="line">+-----------+-----------+------------+--------------+</span><br><span class="line">| player_id | device_id | event_date | games_played |</span><br><span class="line">+-----------+-----------+------------+--------------+</span><br><span class="line">| 1         | 2         | 2016-03-01 | 5            |</span><br><span class="line">| 1         | 2         | 2016-03-02 | 6            |</span><br><span class="line">| 2         | 3         | 2017-06-25 | 1            |</span><br><span class="line">| 3         | 1         | 2016-03-02 | 0            |</span><br><span class="line">| 3         | 4         | 2018-07-03 | 5            |</span><br><span class="line">+-----------+-----------+------------+--------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+-----------+</span><br><span class="line">| fraction  |</span><br><span class="line">+-----------+</span><br><span class="line">| 0.33      |</span><br><span class="line">+-----------+</span><br><span class="line">只有 ID 为 1 的玩家在第一天登录后才重新登录，所以答案是 1/3 = 0.33</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> round(<span class="built_in">avg</span>(a.event_date <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>), <span class="number">2</span>) fraction</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    (<span class="keyword">select</span> player_id, <span class="built_in">min</span>(event_date) <span class="keyword">as</span> login</span><br><span class="line">    <span class="keyword">from</span> activity</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> player_id) p </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> activity a </span><br><span class="line"><span class="keyword">on</span> p.player_id<span class="operator">=</span>a.player_id <span class="keyword">and</span> datediff(a.event_date, p.login)<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>这个avg用的妙</p><p>is not null判断后，有eventdate值的返回1，null的返回0，avg相当于求和后(即符合条件的id个数)除以总id数即所求比例</p></blockquote><h4 id="569-员工薪水中位数"><a href="#569-员工薪水中位数" class="headerlink" title="569. 员工薪水中位数"></a><a href="https://leetcode-cn.com/problems/median-employee-salary/">569. 员工薪水中位数</a></h4><p>难度困难</p><p>SQL架构</p><p><code>Employee</code> 表包含所有员工。<code>Employee</code> 表有三列：员工Id，公司名和薪水。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">+-----+------------+--------+</span><br><span class="line">|Id   | Company    | Salary |</span><br><span class="line">+-----+------------+--------+</span><br><span class="line">|1    | A          | 2341   |</span><br><span class="line">|2    | A          | 341    |</span><br><span class="line">|3    | A          | 15     |</span><br><span class="line">|4    | A          | 15314  |</span><br><span class="line">|5    | A          | 451    |</span><br><span class="line">|6    | A          | 513    |</span><br><span class="line">|7    | B          | 15     |</span><br><span class="line">|8    | B          | 13     |</span><br><span class="line">|9    | B          | 1154   |</span><br><span class="line">|10   | B          | 1345   |</span><br><span class="line">|11   | B          | 1221   |</span><br><span class="line">|12   | B          | 234    |</span><br><span class="line">|13   | C          | 2345   |</span><br><span class="line">|14   | C          | 2645   |</span><br><span class="line">|15   | C          | 2645   |</span><br><span class="line">|16   | C          | 2652   |</span><br><span class="line">|17   | C          | 65     |</span><br><span class="line">+-----+------------+--------+</span><br></pre></td></tr></table></figure><p>请编写SQL查询来查找每个公司的薪水中位数。挑战点：你是否可以在不使用任何内置的SQL函数的情况下解决此问题。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+-----+------------+--------+</span><br><span class="line">|Id   | Company    | Salary |</span><br><span class="line">+-----+------------+--------+</span><br><span class="line">|5    | A          | 451    |</span><br><span class="line">|6    | A          | 513    |</span><br><span class="line">|12   | B          | 234    |</span><br><span class="line">|9    | B          | 1154   |</span><br><span class="line">|14   | C          | 2645   |</span><br><span class="line">+-----+------------+--------+</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> Id,Company,Salary</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line"><span class="keyword">select</span> Id,Company,Salary,</span><br><span class="line"><span class="built_in">ROW_NUMBER</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> Company <span class="keyword">order</span> <span class="keyword">by</span> Salary) rk,</span><br><span class="line"><span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> Company) cnt</span><br><span class="line"><span class="keyword">from</span> Employee</span><br><span class="line">)t1</span><br><span class="line"><span class="keyword">where</span> rk <span class="keyword">IN</span> (<span class="built_in">FLOOR</span>((cnt <span class="operator">+</span> <span class="number">1</span>)<span class="operator">/</span><span class="number">2</span>), <span class="built_in">FLOOR</span>((cnt <span class="operator">+</span> <span class="number">2</span>)<span class="operator">/</span><span class="number">2</span>))</span><br></pre></td></tr></table></figure><blockquote><p>中位数：</p><p>+1向下取整 +2 向下取整数</p></blockquote><h4 id="570-至少有5名直接下属的经理"><a href="#570-至少有5名直接下属的经理" class="headerlink" title="570. 至少有5名直接下属的经理"></a><a href="https://leetcode-cn.com/problems/managers-with-at-least-5-direct-reports/">570. 至少有5名直接下属的经理</a></h4><p>难度中等</p><p>SQL架构</p><p><code>Employee</code> 表包含所有员工和他们的经理。每个员工都有一个 Id，并且还有一列是经理的 Id。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+------+----------+-----------+----------+</span><br><span class="line">|Id    |Name   |Department |ManagerId |</span><br><span class="line">+------+----------+-----------+----------+</span><br><span class="line">|101   |John   |A       |null      |</span><br><span class="line">|102   |Dan   |A       |101       |</span><br><span class="line">|103   |James   |A       |101       |</span><br><span class="line">|104   |Amy   |A       |101       |</span><br><span class="line">|105   |Anne   |A       |101       |</span><br><span class="line">|106   |Ron   |B       |101       |</span><br><span class="line">+------+----------+-----------+----------+</span><br></pre></td></tr></table></figure><p>给定 <code>Employee</code> 表，请编写一个SQL查询来查找至少有5名直接下属的经理。对于上表，您的SQL查询应该返回：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+-------+</span><br><span class="line">| Name  |</span><br><span class="line">+-------+</span><br><span class="line">| John  |</span><br><span class="line">+-------+</span><br></pre></td></tr></table></figure><p><strong>注意:</strong><br>没有人是自己的下属。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> Name</span><br><span class="line"><span class="keyword">from</span> Employee</span><br><span class="line"><span class="keyword">where</span> Id <span class="keyword">in</span> (</span><br><span class="line"><span class="keyword">select</span> ManagerId</span><br><span class="line"><span class="keyword">from</span> Employee</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> ManagerId</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>)<span class="operator">&gt;=</span><span class="number">5</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="571-给定数字的频率查询中位数"><a href="#571-给定数字的频率查询中位数" class="headerlink" title="571. 给定数字的频率查询中位数"></a><a href="https://leetcode-cn.com/problems/find-median-given-frequency-of-numbers/">571. 给定数字的频率查询中位数</a></h4><p>难度困难</p><p>SQL架构</p><p><code>Numbers</code> 表保存数字的值及其频率。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+----------+-------------+</span><br><span class="line">|  Number  |  Frequency  |</span><br><span class="line">+----------+-------------|</span><br><span class="line">|  0       |  7          |</span><br><span class="line">|  1       |  1          |</span><br><span class="line">|  2       |  3          |</span><br><span class="line">|  3       |  1          |</span><br><span class="line">+----------+-------------+</span><br></pre></td></tr></table></figure><p>在此表中，数字为 <code>0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3</code>，所以中位数是 <code>(0 + 0) / 2 = 0</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+--------+</span><br><span class="line">| median |</span><br><span class="line">+--------|</span><br><span class="line">| 0.0000 |</span><br><span class="line">+--------+</span><br></pre></td></tr></table></figure><p>请编写一个查询来查找所有数字的中位数并将结果命名为 <code>median</code> 。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    <span class="built_in">avg</span>(<span class="built_in">cast</span>(number <span class="keyword">as</span> <span class="type">float</span>)) median</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">select</span> </span><br><span class="line">            Number,</span><br><span class="line">            Frequency,</span><br><span class="line">            <span class="built_in">sum</span>(Frequency) <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> Number) <span class="operator">-</span> Frequency prev_sum,</span><br><span class="line">            <span class="built_in">sum</span>(Frequency) <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> Number) curr_sum</span><br><span class="line">        <span class="keyword">from</span> Numbers</span><br><span class="line">    ) t1,</span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">select</span> </span><br><span class="line">            <span class="built_in">sum</span>(Frequency) total_sum</span><br><span class="line">        <span class="keyword">from</span> Numbers</span><br><span class="line">    ) t2</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    t1.prev_sum <span class="operator">&lt;=</span> (<span class="built_in">cast</span>(t2.total_sum <span class="keyword">as</span> <span class="type">float</span>) <span class="operator">/</span> <span class="number">2</span>) <span class="keyword">and</span> </span><br><span class="line">    t1.curr_sum <span class="operator">&gt;=</span> (<span class="built_in">cast</span>(t2.total_sum <span class="keyword">as</span> <span class="type">float</span>) <span class="operator">/</span> <span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>如果 n1.Number 为中位数，n1.Number（包含本身）前累计的数字应大于等于总数/2 同时n1.Number（不包含本身）前累计数字应小于等于总数/2</p><p>例如：0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3 共12个数</p><p> 中位数0（包含本身）前累计的数字 7 &gt;=6  0（不包含本身）前累计数字 0 &lt;=6<br>例如：0，0，0，3，3，3 共6个数</p><p> 中位数0（包含本身）前累计的数字 3 &gt;=3  0（不包含本身）前累计数字 0 &lt;=3</p><p> 中位数3（包含本身）前累计的数字 6 &gt;=3  3（不包含本身）前累计数字 3 &lt;=3</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line"><span class="built_in">AVG</span>(Number)median </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(<span class="keyword">SELECT</span> n1.Number <span class="keyword">FROM</span> Numbers n1 <span class="keyword">JOIN</span> Numbers n2 <span class="keyword">ON</span> n1.Number<span class="operator">&gt;=</span>n2.Number </span><br><span class="line"> <span class="keyword">GROUP</span> <span class="keyword">BY</span> </span><br><span class="line"> n1.Number </span><br><span class="line"> <span class="keyword">HAVING</span> </span><br><span class="line"> <span class="built_in">SUM</span>(n2.Frequency)<span class="operator">&gt;=</span>(<span class="keyword">SELECT</span> <span class="built_in">SUM</span>(Frequency) <span class="keyword">FROM</span> Numbers)<span class="operator">/</span><span class="number">2</span> </span><br><span class="line"> <span class="keyword">AND</span> </span><br><span class="line"> <span class="built_in">SUM</span>(n2.Frequency)<span class="operator">-</span><span class="built_in">AVG</span>(n1.Frequency)<span class="operator">&lt;=</span>(<span class="keyword">SELECT</span> <span class="built_in">SUM</span>(Frequency) <span class="keyword">FROM</span> Numbers)<span class="operator">/</span><span class="number">2</span></span><br><span class="line">)s</span><br></pre></td></tr></table></figure><h4 id="574-当选者"><a href="#574-当选者" class="headerlink" title="574. 当选者"></a><a href="https://leetcode-cn.com/problems/winning-candidate/">574. 当选者</a></h4><p>难度中等</p><p>SQL架构</p><p>表: <code>Candidate</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+-----+---------+</span><br><span class="line">| id  | Name    |</span><br><span class="line">+-----+---------+</span><br><span class="line">| 1   | A       |</span><br><span class="line">| 2   | B       |</span><br><span class="line">| 3   | C       |</span><br><span class="line">| 4   | D       |</span><br><span class="line">| 5   | E       |</span><br><span class="line">+-----+---------+  </span><br></pre></td></tr></table></figure><p>表: <code>Vote</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+-----+--------------+</span><br><span class="line">| id  | CandidateId  |</span><br><span class="line">+-----+--------------+</span><br><span class="line">| 1   |     2        |</span><br><span class="line">| 2   |     4        |</span><br><span class="line">| 3   |     3        |</span><br><span class="line">| 4   |     2        |</span><br><span class="line">| 5   |     5        |</span><br><span class="line">+-----+--------------+</span><br><span class="line">id 是自动递增的主键，</span><br><span class="line">CandidateId 是 Candidate 表中的 id.</span><br></pre></td></tr></table></figure><p>请编写 sql 语句来找到当选者的名字，上面的例子将返回当选者 <code>B</code>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+------+</span><br><span class="line">| Name |</span><br><span class="line">+------+</span><br><span class="line">| B    |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure><p>用了order by 全局排序 不够好</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    Name</span><br><span class="line"><span class="keyword">from</span> Candidate c</span><br><span class="line">    <span class="keyword">left</span> <span class="keyword">join</span> Vote v</span><br><span class="line">    <span class="keyword">on</span> c.id <span class="operator">=</span> v.CandidateId</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> Name</span><br><span class="line">    <span class="keyword">order</span> <span class="keyword">by</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">desc</span></span><br><span class="line">    limit <span class="number">1</span>   </span><br></pre></td></tr></table></figure><p>先过滤再  效率高很多</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> Name</span><br><span class="line"><span class="keyword">from</span> Candidate</span><br><span class="line"><span class="keyword">where</span> id <span class="operator">=</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span> CandidateId</span><br><span class="line">    <span class="keyword">from</span>    </span><br><span class="line">        (</span><br><span class="line">        <span class="keyword">select</span> CandidateId, </span><br><span class="line">        <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> CandidateId ) cnt</span><br><span class="line">        <span class="keyword">from</span> Vote</span><br><span class="line">        <span class="keyword">order</span> <span class="keyword">by</span> cnt <span class="keyword">desc</span> </span><br><span class="line">        limit <span class="number">1</span></span><br><span class="line">        )t1</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="577-员工奖金"><a href="#577-员工奖金" class="headerlink" title="577. 员工奖金"></a><a href="https://leetcode-cn.com/problems/employee-bonus/">577. 员工奖金</a></h4><p>难度简单</p><p>SQL架构</p><p>选出所有 bonus &lt; 1000 的员工的 name 及其 bonus。</p><p><code>Employee</code> 表单</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+-------+--------+-----------+--------+</span><br><span class="line">| empId |  name  | supervisor| salary |</span><br><span class="line">+-------+--------+-----------+--------+</span><br><span class="line">|   1   | John   |  3        | 1000   |</span><br><span class="line">|   2   | Dan    |  3        | 2000   |</span><br><span class="line">|   3   | Brad   |  null     | 4000   |</span><br><span class="line">|   4   | Thomas |  3        | 4000   |</span><br><span class="line">+-------+--------+-----------+--------+</span><br><span class="line">empId 是这张表单的主关键字</span><br></pre></td></tr></table></figure><p><code>Bonus</code> 表单</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+-------+-------+</span><br><span class="line">| empId | bonus |</span><br><span class="line">+-------+-------+</span><br><span class="line">| 2     | 500   |</span><br><span class="line">| 4     | 2000  |</span><br><span class="line">+-------+-------+</span><br><span class="line">empId 是这张表单的主关键字</span><br></pre></td></tr></table></figure><p>输出示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+-------+-------+</span><br><span class="line">| name  | bonus |</span><br><span class="line">+-------+-------+</span><br><span class="line">| John  | null  |</span><br><span class="line">| Dan   | 500   |</span><br><span class="line">| Brad  | null  |</span><br><span class="line">+-------+-------+</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name,bonus</span><br><span class="line"><span class="keyword">from</span> Employee e</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> Bonus b <span class="keyword">on</span>  e.empId<span class="operator">=</span>b.empId</span><br><span class="line"><span class="keyword">where</span> bonus<span class="operator">&lt;</span><span class="number">1000</span> <span class="keyword">or</span> bonus <span class="keyword">is</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure><h4 id="578-查询回答率最高的问题"><a href="#578-查询回答率最高的问题" class="headerlink" title="578. 查询回答率最高的问题"></a><a href="https://leetcode-cn.com/problems/get-highest-answer-rate-question/">578. 查询回答率最高的问题</a></h4><p>难度中等3收藏分享切换为英文关注反馈</p><p>SQL架构</p><p>从 <code>survey_log</code> 表中获得回答率最高的问题，<code>survey_log</code> 表包含这些列<strong>：id</strong>, <strong>action</strong>, <strong>question_id</strong>, <strong>answer_id</strong>, <strong>q_num</strong>, <strong>timestamp</strong>。</p><p>id 表示用户 id；action 有以下几种值：”show”，”answer”，”skip”；当 action 值为 “answer” 时 answer_id 非空，而 action 值为 “show” 或者 “skip” 时 answer_id 为空；q_num 表示当前会话中问题的编号。</p><p>请编写 SQL 查询来找到具有最高回答率的问题。</p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">输入：</span><br><span class="line">+------+-----------+--------------+------------+-----------+------------+</span><br><span class="line">| id   | action    | question_id  | answer_id  | q_num     | timestamp  |</span><br><span class="line">+------+-----------+--------------+------------+-----------+------------+</span><br><span class="line">| 5    | show      | 285          | null       | 1         | 123        |</span><br><span class="line">| 5    | answer    | 285          | 124124     | 1         | 124        |</span><br><span class="line">| 5    | show      | 369          | null       | 2         | 125        |</span><br><span class="line">| 5    | skip      | 369          | null       | 2         | 126        |</span><br><span class="line">+------+-----------+--------------+------------+-----------+------------+</span><br><span class="line">输出：</span><br><span class="line">+-------------+</span><br><span class="line">| survey_log  |</span><br><span class="line">+-------------+</span><br><span class="line">|    285      |</span><br><span class="line">+-------------+</span><br><span class="line">解释：</span><br><span class="line">问题 285 的回答率为 1/1，而问题 369 回答率为 0/1，因此输出 285 。</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> question_id  survey_log</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">  <span class="keyword">select</span></span><br><span class="line">      question_id,</span><br><span class="line">      <span class="built_in">sum</span>(if(action <span class="operator">=</span> <span class="string">&#x27;answer&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) <span class="keyword">as</span> AnswerCnt,</span><br><span class="line">      <span class="built_in">sum</span>(if(action <span class="operator">=</span> <span class="string">&#x27;show&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) <span class="keyword">as</span> ShowCnt</span><br><span class="line">  <span class="keyword">from</span></span><br><span class="line">      survey_log</span><br><span class="line">  <span class="keyword">group</span> <span class="keyword">by</span> question_id</span><br><span class="line">) <span class="keyword">as</span> tbl</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> (AnswerCnt <span class="operator">/</span> ShowCnt) <span class="keyword">desc</span></span><br><span class="line">limit <span class="number">1</span></span><br></pre></td></tr></table></figure><p>直接不嵌套</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> question_id  survey_log</span><br><span class="line"><span class="keyword">from</span> survey_log</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> question_id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="built_in">sum</span>(if(action <span class="operator">=</span> <span class="string">&#x27;answer&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) <span class="operator">/</span> <span class="built_in">sum</span>(if(action <span class="operator">=</span> <span class="string">&#x27;show&#x27;</span>, <span class="number">1</span>, <span class="number">0</span>)) <span class="keyword">desc</span></span><br><span class="line">limit <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="579-查询员工的累计薪水"><a href="#579-查询员工的累计薪水" class="headerlink" title="579. 查询员工的累计薪水"></a><a href="https://leetcode-cn.com/problems/find-cumulative-salary-of-an-employee/">579. 查询员工的累计薪水</a></h4><p>难度困难</p><p>SQL架构</p><p><strong>Employee</strong> 表保存了一年内的薪水信息。</p><p>请你编写 SQL 语句，对于每个员工，查询他除最近一个月（即最大月）之外，剩下每个月的近三个月的累计薪水（不足三个月也要计算）。</p><p>结果请按 <code>Id</code> 升序，然后按 <code>Month</code> 降序显示。</p><p><strong>示例：</strong><br><strong>输入：</strong></p><table><thead><tr><th>Id</th><th>Month</th><th>Salary</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>20</td></tr><tr><td>2</td><td>1</td><td>20</td></tr><tr><td>1</td><td>2</td><td>30</td></tr><tr><td>2</td><td>2</td><td>30</td></tr><tr><td>3</td><td>2</td><td>40</td></tr><tr><td>1</td><td>3</td><td>40</td></tr><tr><td>3</td><td>3</td><td>60</td></tr><tr><td>1</td><td>4</td><td>60</td></tr><tr><td>3</td><td>4</td><td>70</td></tr></tbody></table><p><strong>输出：</strong></p><table><thead><tr><th>Id</th><th>Month</th><th>Salary</th></tr></thead><tbody><tr><td>1</td><td>3</td><td>90</td></tr><tr><td>1</td><td>2</td><td>50</td></tr><tr><td>1</td><td>1</td><td>20</td></tr><tr><td>2</td><td>1</td><td>20</td></tr><tr><td>3</td><td>3</td><td>100</td></tr><tr><td>3</td><td>2</td><td>40</td></tr></tbody></table><p><strong>解释：</strong></p><p>员工 ‘1’ 除去最近一个月（月份 ‘4’），有三个月的薪水记录：月份 ‘3’ 薪水为 40，月份 ‘2’ 薪水为 30，月份 ‘1’ 薪水为 20。</p><p>所以近 3 个月的薪水累计分别为 (40 + 30 + 20) = 90，(30 + 20) = 50 和 20。</p><table><thead><tr><th>Id</th><th>Month</th><th>Salary</th></tr></thead><tbody><tr><td>1</td><td>3</td><td>90</td></tr><tr><td>1</td><td>2</td><td>50</td></tr><tr><td>1</td><td>1</td><td>20</td></tr></tbody></table><p>员工 ‘2’ 除去最近的一个月（月份 ‘2’）的话，只有月份 ‘1’ 这一个月的薪水记录。</p><table><thead><tr><th>Id</th><th>Month</th><th>Salary</th></tr></thead><tbody><tr><td>2</td><td>1</td><td>20</td></tr></tbody></table><p>员工 ‘3’ 除去最近一个月（月份 ‘4’）后有两个月，分别为：月份 ‘4’ 薪水为 60 和 月份 ‘2’ 薪水为 40。所以各月的累计情况如下：</p><table><thead><tr><th>Id</th><th>Month</th><th>Salary</th></tr></thead><tbody><tr><td>3</td><td>3</td><td>100</td></tr><tr><td>3</td><td>2</td><td>40</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> Id,<span class="keyword">Month</span>,</span><br><span class="line"><span class="built_in">sum</span>(Salary) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> Id <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">Month</span> <span class="keyword">ROWS</span> <span class="keyword">BETWEEN</span> <span class="number">2</span> PRECEDING <span class="keyword">AND</span> <span class="keyword">CURRENT</span> <span class="type">ROW</span>) Salary</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> Id,<span class="keyword">Month</span>,Salary,</span><br><span class="line">    <span class="built_in">lead</span>(<span class="keyword">Month</span>,<span class="number">1</span>,<span class="number">0</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> Id <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">Month</span>) lm</span><br><span class="line">    <span class="keyword">from</span> Employee </span><br><span class="line">)t1</span><br><span class="line"><span class="keyword">where</span> lm <span class="operator">!=</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span>  Id,<span class="keyword">Month</span> <span class="keyword">desc</span></span><br></pre></td></tr></table></figure><h4 id="580-统计各专业学生人数"><a href="#580-统计各专业学生人数" class="headerlink" title="580. 统计各专业学生人数"></a><a href="https://leetcode-cn.com/problems/count-student-number-in-departments/">580. 统计各专业学生人数</a></h4><p>难度中等</p><p>SQL架构</p><p>一所大学有 2 个数据表，分别是 <em><strong>student</strong></em> 和 <em><strong>department</strong></em> ，这两个表保存着每个专业的学生数据和院系数据。</p><p>写一个查询语句，查询 <em><strong>department</strong></em> 表中每个专业的学生人数 （即使没有学生的专业也需列出）。</p><p>将你的查询结果按照学生人数降序排列。 如果有两个或两个以上专业有相同的学生数目，将这些部门按照部门名字的字典序从小到大排列。</p><p>*<strong>student*</strong> 表格如下：</p><table><thead><tr><th>Column Name</th><th>Type</th></tr></thead><tbody><tr><td>student_id</td><td>Integer</td></tr><tr><td>student_name</td><td>String</td></tr><tr><td>gender</td><td>Character</td></tr><tr><td>dept_id</td><td>Integer</td></tr></tbody></table><p>其中， student_id 是学生的学号， student_name 是学生的姓名， gender 是学生的性别， dept_id 是学生所属专业的专业编号。</p><p>*<strong>department*</strong> 表格如下：</p><table><thead><tr><th>Column Name</th><th>Type</th></tr></thead><tbody><tr><td>dept_id</td><td>Integer</td></tr><tr><td>dept_name</td><td>String</td></tr></tbody></table><p>dept_id 是专业编号， dept_name 是专业名字。</p><p>这里是一个示例输入：<br>*<strong>student*</strong> 表格：</p><table><thead><tr><th>student_id</th><th>student_name</th><th>gender</th><th>dept_id</th></tr></thead><tbody><tr><td>1</td><td>Jack</td><td>M</td><td>1</td></tr><tr><td>2</td><td>Jane</td><td>F</td><td>1</td></tr><tr><td>3</td><td>Mark</td><td>M</td><td>2</td></tr></tbody></table><p>*<strong>department*</strong> 表格：</p><table><thead><tr><th>dept_id</th><th>dept_name</th></tr></thead><tbody><tr><td>1</td><td>Engineering</td></tr><tr><td>2</td><td>Science</td></tr><tr><td>3</td><td>Law</td></tr></tbody></table><p>示例输出为：</p><table><thead><tr><th>dept_name</th><th>student_number</th></tr></thead><tbody><tr><td>Engineering</td><td>2</td></tr><tr><td>Science</td><td>1</td></tr><tr><td>Law</td><td>0</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  dept_name ,<span class="built_in">count</span>(student_id) student_number</span><br><span class="line"><span class="keyword">from</span> department d <span class="keyword">left</span> <span class="keyword">join</span> student s</span><br><span class="line"><span class="keyword">on</span> d.dept_id<span class="operator">=</span>s.dept_id </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> dept_name</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> student_number <span class="keyword">desc</span></span><br></pre></td></tr></table></figure><h4 id="584-寻找用户推荐人"><a href="#584-寻找用户推荐人" class="headerlink" title="584. 寻找用户推荐人"></a><a href="https://leetcode-cn.com/problems/find-customer-referee/">584. 寻找用户推荐人</a></h4><p>难度简单9收藏分享切换为英文关注反馈</p><p>SQL架构</p><p>给定表 <code>customer</code> ，里面保存了所有客户信息和他们的推荐人。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+------+------+-----------+</span><br><span class="line">| id   | name | referee_id|</span><br><span class="line">+------+------+-----------+</span><br><span class="line">|    1 | Will |      NULL |</span><br><span class="line">|    2 | Jane |      NULL |</span><br><span class="line">|    3 | Alex |         2 |</span><br><span class="line">|    4 | Bill |      NULL |</span><br><span class="line">|    5 | Zack |         1 |</span><br><span class="line">|    6 | Mark |         2 |</span><br><span class="line">+------+------+-----------+</span><br></pre></td></tr></table></figure><p>写一个查询语句，返回一个编号列表，列表中编号的推荐人的编号都 <strong>不是</strong> 2。</p><p>对于上面的示例数据，结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+------+</span><br><span class="line">| name |</span><br><span class="line">+------+</span><br><span class="line">| Will |</span><br><span class="line">| Jane |</span><br><span class="line">| Bill |</span><br><span class="line">| Zack |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name <span class="keyword">FROM</span> customer <span class="keyword">WHERE</span> referee_id <span class="operator">!=</span> <span class="number">2</span> <span class="keyword">OR</span> referee_id <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></table></figure><blockquote><p>MySQL 使用三值逻辑 —— TRUE, FALSE 和 UNKNOWN。任何与 NULL 值进行的比较都会与第三种值 UNKNOWN 做比较。这个“任何值”包括 NULL 本身！这就是为什么 MySQL 提供 IS NULL 和 IS NOT NULL 两种操作来对 NULL 特殊判断。</p><p>因此，在 WHERE 语句中我们需要做一个额外的条件判断 `referee_id IS NULL’。</p></blockquote><h4 id="585-2016年的投资"><a href="#585-2016年的投资" class="headerlink" title="585. 2016年的投资"></a><a href="https://leetcode-cn.com/problems/investments-in-2016/">585. 2016年的投资</a></h4><p>难度中等14收藏分享切换为英文关注反馈</p><p>SQL架构</p><p>写一个查询语句，将 2016 年 (<strong>TIV_2016</strong>) 所有成功投资的金额加起来，保留 2 位小数。</p><p>对于一个投保人，他在 2016 年成功投资的条件是：</p><ol><li>他在 2015 年的投保额 (<strong>TIV_2015</strong>) 至少跟一个其他投保人在 2015 年的投保额相同。</li><li>他所在的城市必须与其他投保人都不同（也就是说维度和经度不能跟其他任何一个投保人完全相同）。</li></ol><p><strong>输入格式:</strong><br>表 *<strong>insurance*</strong> 格式如下：</p><table><thead><tr><th>Column Name</th><th>Type</th></tr></thead><tbody><tr><td>PID</td><td>INTEGER(11)</td></tr><tr><td>TIV_2015</td><td>NUMERIC(15,2)</td></tr><tr><td>TIV_2016</td><td>NUMERIC(15,2)</td></tr><tr><td>LAT</td><td>NUMERIC(5,2)</td></tr><tr><td>LON</td><td>NUMERIC(5,2)</td></tr></tbody></table><p><strong>PID</strong> 字段是投保人的投保编号， <strong>TIV_2015</strong> 是该投保人在2015年的总投保金额， <strong>TIV_2016</strong> 是该投保人在2016年的投保金额， <strong>LAT</strong> 是投保人所在城市的维度， <strong>LON</strong> 是投保人所在城市的经度。</p><p><strong>样例输入</strong></p><table><thead><tr><th>PID</th><th>TIV_2015</th><th>TIV_2016</th><th>LAT</th><th>LON</th></tr></thead><tbody><tr><td>1</td><td>10</td><td>5</td><td>10</td><td>10</td></tr><tr><td>2</td><td>20</td><td>20</td><td>20</td><td>20</td></tr><tr><td>3</td><td>10</td><td>30</td><td>20</td><td>20</td></tr><tr><td>4</td><td>10</td><td>40</td><td>40</td><td>40</td></tr></tbody></table><p><strong>样例输出</strong></p><table><thead><tr><th>TIV_2016</th></tr></thead><tbody><tr><td>45.00</td></tr></tbody></table><p><strong>解释</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">就如最后一个投保人，第一个投保人同时满足两个条件：</span><br><span class="line">1. 他在 2015 年的投保金额 TIV_2015 为 &#x27;10&#x27; ，与第三个和第四个投保人在 2015 年的投保金额相同。</span><br><span class="line">2. 他所在城市的经纬度是独一无二的。</span><br><span class="line"></span><br><span class="line">第二个投保人两个条件都不满足。他在 2015 年的投资 TIV_2015 与其他任何投保人都不相同。</span><br><span class="line">且他所在城市的经纬度与第三个投保人相同。基于同样的原因，第三个投保人投资失败。</span><br><span class="line"></span><br><span class="line">所以返回的结果是第一个投保人和最后一个投保人的 TIV_2016 之和，结果是 45 。</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(TIV_2016) TIV_2016</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> PID,TIV_2016,cnt,</span><br><span class="line">    <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> loc ) lcnt</span><br><span class="line">    <span class="keyword">from</span> (</span><br><span class="line">        <span class="keyword">select</span> PID,TIV_2016,</span><br><span class="line">        <span class="built_in">count</span>(TIV_2015) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> TIV_2015 ) cnt,</span><br><span class="line">        concat_ws(&quot;,&quot;,LAT,LON) loc</span><br><span class="line">        <span class="keyword">from</span> insurance </span><br><span class="line">    )t1</span><br><span class="line">)t2</span><br><span class="line"><span class="keyword">where</span> lcnt<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> cnt<span class="operator">!=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>注意去重顺序 不要先对TIV_2015去重  不然 local去重时会丢失数据</p></blockquote><p>优化 窗口</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    ROUND(<span class="built_in">SUM</span>(TIV_2016), <span class="number">2</span>) <span class="keyword">as</span> TIV_2016</span><br><span class="line"><span class="keyword">FROM</span>(</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        <span class="operator">*</span>,</span><br><span class="line">        <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> TIV_2015) <span class="keyword">as</span> cnt_1,</span><br><span class="line">        <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> LAT, LON) <span class="keyword">as</span> cnt_2</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        insurance</span><br><span class="line">) a </span><br><span class="line"><span class="keyword">WHERE</span> a.cnt_1 <span class="operator">&gt;</span> <span class="number">1</span> <span class="keyword">AND</span> a.cnt_2 <span class="operator">&lt;</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="586-订单最多的客户"><a href="#586-订单最多的客户" class="headerlink" title="586. 订单最多的客户"></a><a href="https://leetcode-cn.com/problems/customer-placing-the-largest-number-of-orders/">586. 订单最多的客户</a></h4><p>难度简单</p><p>SQL架构</p><p>在表 <strong>orders</strong> 中找到订单数最多客户对应的 <strong>customer_number</strong> 。</p><p>数据保证订单数最多的顾客恰好只有一位。</p><p>表 *<strong>orders*</strong> 定义如下：</p><table><thead><tr><th>Column</th><th>Type</th></tr></thead><tbody><tr><td>order_number (PK)</td><td>int</td></tr><tr><td>customer_number</td><td>int</td></tr><tr><td>order_date</td><td>date</td></tr><tr><td>required_date</td><td>date</td></tr><tr><td>shipped_date</td><td>date</td></tr><tr><td>status</td><td>char(15)</td></tr><tr><td>comment</td><td>char(200)</td></tr></tbody></table><p><strong>样例输入</strong></p><table><thead><tr><th>order_number</th><th>customer_number</th><th>order_date</th><th>required_date</th><th>shipped_date</th><th>status</th><th>comment</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>2017-04-09</td><td>2017-04-13</td><td>2017-04-12</td><td>Closed</td><td></td></tr><tr><td>2</td><td>2</td><td>2017-04-15</td><td>2017-04-20</td><td>2017-04-18</td><td>Closed</td><td></td></tr><tr><td>3</td><td>3</td><td>2017-04-16</td><td>2017-04-25</td><td>2017-04-20</td><td>Closed</td><td></td></tr><tr><td>4</td><td>3</td><td>2017-04-18</td><td>2017-04-28</td><td>2017-04-25</td><td>Closed</td><td></td></tr></tbody></table><p><strong>样例输出</strong></p><table><thead><tr><th>customer_number</th></tr></thead><tbody><tr><td>3</td></tr></tbody></table><p><strong>解释</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">customer_number 为 &#x27;3&#x27; 的顾客有两个订单，比顾客 &#x27;1&#x27; 或者 &#x27;2&#x27; 都要多，因为他们只有一个订单</span><br><span class="line">所以结果是该顾客的 customer_number ，也就是 3 。</span><br></pre></td></tr></table></figure><p><strong>进阶：</strong> 如果有多位顾客订单数并列最多，你能找到他们所有的 customer_number 吗？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> customer_number</span><br><span class="line"><span class="keyword">from</span> orders</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> customer_number </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="built_in">count</span>(<span class="operator">*</span>)  <span class="keyword">desc</span></span><br><span class="line">limit <span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>如果 数据量很大 order by 不太好</p></blockquote><h4 id="595-大的国家"><a href="#595-大的国家" class="headerlink" title="595. 大的国家"></a><a href="https://leetcode-cn.com/problems/big-countries/">595. 大的国家</a></h4><p>难度简单</p><p>SQL架构</p><p>这里有张 <code>World</code> 表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+-----------------+------------+------------+--------------+---------------+</span><br><span class="line">| name            | continent  | area       | population   | gdp           |</span><br><span class="line">+-----------------+------------+------------+--------------+---------------+</span><br><span class="line">| Afghanistan     | Asia       | 652230     | 25500100     | 20343000      |</span><br><span class="line">| Albania         | Europe     | 28748      | 2831741      | 12960000      |</span><br><span class="line">| Algeria         | Africa     | 2381741    | 37100000     | 188681000     |</span><br><span class="line">| Andorra         | Europe     | 468        | 78115        | 3712000       |</span><br><span class="line">| Angola          | Africa     | 1246700    | 20609294     | 100990000     |</span><br><span class="line">+-----------------+------------+------------+--------------+---------------+</span><br></pre></td></tr></table></figure><p>如果一个国家的面积超过300万平方公里，或者人口超过2500万，那么这个国家就是大国家。</p><p>编写一个SQL查询，输出表中所有大国家的名称、人口和面积。</p><p>例如，根据上表，我们应该输出:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+--------------+-------------+--------------+</span><br><span class="line">| name         | population  | area         |</span><br><span class="line">+--------------+-------------+--------------+</span><br><span class="line">| Afghanistan  | 25500100    | 652230       |</span><br><span class="line">| Algeria      | 37100000    | 2381741      |</span><br><span class="line">+--------------+-------------+--------------+</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  name ,population,area  </span><br><span class="line"><span class="keyword">from</span> World</span><br><span class="line"><span class="keyword">where</span> area  <span class="operator">&gt;</span><span class="number">3000000</span> <span class="keyword">or</span> population <span class="operator">&gt;</span><span class="number">25000000</span></span><br></pre></td></tr></table></figure><h4 id="596-超过5名学生的课"><a href="#596-超过5名学生的课" class="headerlink" title="596. 超过5名学生的课"></a><a href="https://leetcode-cn.com/problems/classes-more-than-5-students/">596. 超过5名学生的课</a></h4><p>难度简单</p><p>SQL架构</p><p>有一个<code>courses</code> 表 ，有: <strong>student (学生)</strong> 和 **class (课程)**。</p><p>请列出所有超过或等于5名学生的课。</p><p>例如,表:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">+---------+------------+</span><br><span class="line">| student | class      |</span><br><span class="line">+---------+------------+</span><br><span class="line">| A       | Math       |</span><br><span class="line">| B       | English    |</span><br><span class="line">| C       | Math       |</span><br><span class="line">| D       | Biology    |</span><br><span class="line">| E       | Math       |</span><br><span class="line">| F       | Computer   |</span><br><span class="line">| G       | Math       |</span><br><span class="line">| H       | Math       |</span><br><span class="line">| I       | Math       |</span><br><span class="line">+---------+------------+</span><br></pre></td></tr></table></figure><p>应该输出:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+---------+</span><br><span class="line">| class   |</span><br><span class="line">+---------+</span><br><span class="line">| Math    |</span><br><span class="line">+---------+</span><br></pre></td></tr></table></figure><p><strong>Note:</strong><br>学生在每个课中不应被重复计算。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  class </span><br><span class="line"><span class="keyword">from</span> courses</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> class </span><br><span class="line"><span class="keyword">having</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> student)<span class="operator">&gt;=</span><span class="number">5</span></span><br></pre></td></tr></table></figure><blockquote><p>一个学生可能多次选课。。记得distinct</p></blockquote><h4 id="597-好友申请-I-：总体通过率"><a href="#597-好友申请-I-：总体通过率" class="headerlink" title="597. 好友申请 I ：总体通过率"></a><a href="https://leetcode-cn.com/problems/friend-requests-i-overall-acceptance-rate/">597. 好友申请 I ：总体通过率</a></h4><p>难度简单21收藏分享切换为英文关注反馈</p><p>SQL架构</p><p>在 Facebook 或者 Twitter 这样的社交应用中，人们经常会发好友申请也会收到其他人的好友申请。现在给如下两个表：</p><p>表： friend_request</p><table><thead><tr><th>sender_id</th><th>send_to_id</th><th>request_date</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>2016_06-01</td></tr><tr><td>1</td><td>3</td><td>2016_06-01</td></tr><tr><td>1</td><td>4</td><td>2016_06-01</td></tr><tr><td>2</td><td>3</td><td>2016_06-02</td></tr><tr><td>3</td><td>4</td><td>2016-06-09</td></tr></tbody></table><p>表： request_accepted</p><table><thead><tr><th>requester_id</th><th>accepter_id</th><th>accept_date</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>2016_06-03</td></tr><tr><td>1</td><td>3</td><td>2016-06-08</td></tr><tr><td>2</td><td>3</td><td>2016-06-08</td></tr><tr><td>3</td><td>4</td><td>2016-06-09</td></tr><tr><td>3</td><td>4</td><td>2016-06-10</td></tr></tbody></table><p>写一个查询语句，求出好友申请的通过率，用 2 位小数表示。通过率由接受好友申请的数目除以申请总数。</p><p>对于上面的样例数据，你的查询语句应该返回如下结果。</p><table><thead><tr><th>accept_rate</th></tr></thead><tbody><tr><td>0.80</td></tr></tbody></table><p>注意:</p><p>通过的好友申请不一定都在表 friend_request 中。在这种情况下，你只需要统计总的被通过的申请数（不管它们在不在原来的申请中），并将它除以申请总数，得到通过率<br>一个好友申请发送者有可能会给接受者发几条好友申请，也有可能一个好友申请会被通过好几次。这种情况下，重复的好友申请只统计一次。<br>如果一个好友申请都没有，通过率为 0.00 。</p><p>解释： 总共有 5 个申请，其中 4 个是不重复且被通过的好友申请，所以成功率是 0.80 。</p><p>进阶:</p><p>你能写一个查询语句得到每个月的通过率吗？<br>你能求出每一天的累计通过率吗？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">round(</span><br><span class="line">    ifnull(</span><br><span class="line">    (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">distinct</span> requester_id, accepter_id <span class="keyword">from</span> request_accepted) <span class="keyword">as</span> A)</span><br><span class="line">    <span class="operator">/</span></span><br><span class="line">    (<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> (<span class="keyword">select</span> <span class="keyword">distinct</span> sender_id, send_to_id <span class="keyword">from</span> friend_request) <span class="keyword">as</span> B),</span><br><span class="line">    <span class="number">0</span>)</span><br><span class="line">, <span class="number">2</span>) <span class="keyword">as</span> accept_rate;</span><br></pre></td></tr></table></figure><h4 id="601-体育馆的人流量"><a href="#601-体育馆的人流量" class="headerlink" title="601. 体育馆的人流量"></a><a href="https://leetcode-cn.com/problems/human-traffic-of-stadium/">601. 体育馆的人流量</a></h4><p>难度困难113收藏分享切换为英文关注反馈</p><p>SQL架构</p><p>X 市建了一个新的体育馆，每日人流量信息被记录在这三列信息中：<strong>序号</strong> (id)、<strong>日期</strong> (visit_date)、 <strong>人流量</strong> (people)。</p><p>请编写一个查询语句，找出人流量的高峰期。高峰期时，至少连续三行记录中的人流量不少于100。</p><p>例如，表 <code>stadium</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+------+------------+-----------+</span><br><span class="line">| id   | visit_date | people    |</span><br><span class="line">+------+------------+-----------+</span><br><span class="line">| 1    | 2017-01-01 | 10        |</span><br><span class="line">| 2    | 2017-01-02 | 109       |</span><br><span class="line">| 3    | 2017-01-03 | 150       |</span><br><span class="line">| 4    | 2017-01-04 | 99        |</span><br><span class="line">| 5    | 2017-01-05 | 145       |</span><br><span class="line">| 6    | 2017-01-06 | 1455      |</span><br><span class="line">| 7    | 2017-01-07 | 199       |</span><br><span class="line">| 8    | 2017-01-08 | 188       |</span><br><span class="line">+------+------------+-----------+</span><br></pre></td></tr></table></figure><p>对于上面的示例数据，输出为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+------+------------+-----------+</span><br><span class="line">| id   | visit_date | people    |</span><br><span class="line">+------+------------+-----------+</span><br><span class="line">| 5    | 2017-01-05 | 145       |</span><br><span class="line">| 6    | 2017-01-06 | 1455      |</span><br><span class="line">| 7    | 2017-01-07 | 199       |</span><br><span class="line">| 8    | 2017-01-08 | 188       |</span><br><span class="line">+------+------------+-----------+ </span><br></pre></td></tr></table></figure><p><strong>提示：</strong><br>每天只有一行记录，日期随着 id 的增加而增加。</p><p>3表相连(244 ms)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> t1.<span class="operator">*</span></span><br><span class="line"><span class="keyword">from</span> stadium t1, stadium t2, stadium t3</span><br><span class="line"><span class="keyword">where</span> t1.people <span class="operator">&gt;=</span> <span class="number">100</span> <span class="keyword">and</span> t2.people <span class="operator">&gt;=</span> <span class="number">100</span> <span class="keyword">and</span> t3.people <span class="operator">&gt;=</span> <span class="number">100</span></span><br><span class="line"><span class="keyword">and</span></span><br><span class="line">(</span><br><span class="line">(t1.id <span class="operator">-</span> t2.id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> t1.id <span class="operator">-</span> t3.id <span class="operator">=</span> <span class="number">2</span> <span class="keyword">and</span> t2.id <span class="operator">-</span> t3.id <span class="operator">=</span><span class="number">1</span>)  <span class="comment">-- t1, t2, t3</span></span><br><span class="line">    <span class="keyword">or</span></span><br><span class="line">    (t2.id <span class="operator">-</span> t1.id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> t2.id <span class="operator">-</span> t3.id <span class="operator">=</span> <span class="number">2</span> <span class="keyword">and</span> t1.id <span class="operator">-</span> t3.id <span class="operator">=</span><span class="number">1</span>) <span class="comment">-- t2, t1, t3</span></span><br><span class="line">    <span class="keyword">or</span></span><br><span class="line">    (t3.id <span class="operator">-</span> t2.id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> t2.id <span class="operator">-</span> t1.id <span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> t3.id <span class="operator">-</span> t1.id <span class="operator">=</span> <span class="number">2</span>) <span class="comment">-- t3, t2, t1</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> t1.id</span><br></pre></td></tr></table></figure><p>窗口函数(272 ms)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,visit_date,people <span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> id</span><br><span class="line">    ,<span class="built_in">lead</span>(people,<span class="number">1</span>) <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> id) ld</span><br><span class="line">    ,<span class="built_in">lead</span>(people,<span class="number">2</span>) <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> id) ld2</span><br><span class="line">    ,visit_date</span><br><span class="line">    ,<span class="built_in">lag</span>(people,<span class="number">1</span>) <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> id) lg</span><br><span class="line">    ,<span class="built_in">lag</span>(people,<span class="number">2</span>) <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> id) lg2</span><br><span class="line">    ,people</span><br><span class="line">    <span class="keyword">from</span> stadium</span><br><span class="line">    ) a</span><br><span class="line"><span class="keyword">where</span> (a.ld<span class="operator">&gt;=</span><span class="number">100</span> <span class="keyword">and</span> a.lg<span class="operator">&gt;=</span><span class="number">100</span> <span class="keyword">and</span> a.people<span class="operator">&gt;=</span><span class="number">100</span>)</span><br><span class="line"><span class="keyword">or</span> (a.ld<span class="operator">&gt;=</span><span class="number">100</span> <span class="keyword">and</span> a.ld2<span class="operator">&gt;=</span><span class="number">100</span> <span class="keyword">and</span> a.people<span class="operator">&gt;=</span><span class="number">100</span>)</span><br><span class="line"><span class="keyword">or</span> (a.lg<span class="operator">&gt;=</span><span class="number">100</span> <span class="keyword">and</span> a.lg2<span class="operator">&gt;=</span><span class="number">100</span> <span class="keyword">and</span> a.people<span class="operator">&gt;=</span><span class="number">100</span>)</span><br></pre></td></tr></table></figure><h4 id="602-好友申请-II-：谁有最多的好友"><a href="#602-好友申请-II-：谁有最多的好友" class="headerlink" title="602. 好友申请 II ：谁有最多的好友"></a><a href="https://leetcode-cn.com/problems/friend-requests-ii-who-has-the-most-friends/">602. 好友申请 II ：谁有最多的好友</a></h4><p>难度中等</p><p>SQL架构</p><p>在 Facebook 或者 Twitter 这样的社交应用中，人们经常会发好友申请也会收到其他人的好友申请。</p><p>表 <code>request_accepted</code> 存储了所有好友申请通过的数据记录，其中， <strong>requester_id</strong> 和 <strong>accepter_id</strong> 都是用户的编号。</p><table><thead><tr><th>requester_id</th><th>accepter_id</th><th>accept_date</th></tr></thead><tbody><tr><td>1</td><td>2</td><td>2016_06-03</td></tr><tr><td>1</td><td>3</td><td>2016-06-08</td></tr><tr><td>2</td><td>3</td><td>2016-06-08</td></tr><tr><td>3</td><td>4</td><td>2016-06-09</td></tr></tbody></table><p>写一个查询语句，求出谁拥有最多的好友和他拥有的好友数目。对于上面的样例数据，结果为：</p><table><thead><tr><th>id</th><th>num</th></tr></thead><tbody><tr><td>3</td><td>3</td></tr></tbody></table><p><strong>注意：</strong></p><ul><li>保证拥有最多好友数目的只有 1 个人。</li><li>好友申请只会被接受一次，所以不会有 <strong>requester_id</strong> 和 <strong>accepter_id</strong> 值都相同的重复记录。</li></ul><p><strong>解释：</strong></p><p>编号为 ‘3’ 的人是编号为 ‘1’，’2’ 和 ‘4’ 的好友，所以他总共有 3 个好友，比其他人都多。</p><p><strong>进阶：</strong></p><p>在真实世界里，可能会有多个人拥有好友数相同且最多，你能找到所有这些人吗？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> rid <span class="keyword">as</span> `id`,<span class="built_in">count</span>(aid) <span class="keyword">as</span> `num`</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> R1.requester_id <span class="keyword">as</span> rid,R1.accepter_id <span class="keyword">as</span> aid</span><br><span class="line">    <span class="keyword">from</span> request_accepted <span class="keyword">as</span> R1</span><br><span class="line">    <span class="keyword">UNION</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> R2.accepter_id <span class="keyword">as</span> rid,R2.requester_id <span class="keyword">as</span> aid</span><br><span class="line">    <span class="keyword">from</span> request_accepted <span class="keyword">as</span> R2</span><br><span class="line">) <span class="keyword">as</span> A</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> rid</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> num <span class="keyword">desc</span></span><br><span class="line">limit <span class="number">0</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="603-连续空余座位"><a href="#603-连续空余座位" class="headerlink" title="603. 连续空余座位"></a><a href="https://leetcode-cn.com/problems/consecutive-available-seats/">603. 连续空余座位</a></h4><p>难度简单</p><p>SQL架构</p><p>几个朋友来到电影院的售票处，准备预约连续空余座位。</p><p>你能利用表 <code>cinema</code> ，帮他们写一个查询语句，获取所有空余座位，并将它们按照 seat_id 排序后返回吗？</p><table><thead><tr><th>seat_id</th><th>free</th></tr></thead><tbody><tr><td>1</td><td>1</td></tr><tr><td>2</td><td>0</td></tr><tr><td>3</td><td>1</td></tr><tr><td>4</td><td>1</td></tr><tr><td>5</td><td>1</td></tr></tbody></table><p>对于如上样例，你的查询语句应该返回如下结果。</p><table><thead><tr><th>seat_id</th></tr></thead><tbody><tr><td>3</td></tr><tr><td>4</td></tr><tr><td>5</td></tr></tbody></table><p><strong>注意：</strong></p><ul><li>seat_id 字段是一个自增的整数，free 字段是布尔类型（’1’ 表示空余， ‘0’ 表示已被占据）。</li><li>连续空余座位的定义是大于等于 2 个连续空余的座位。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> seat_id</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line"><span class="keyword">select</span> seat_id,</span><br><span class="line"><span class="built_in">lag</span>(seat_id,<span class="number">1</span>,<span class="number">-99</span>) <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> seat_id) ls,</span><br><span class="line"><span class="built_in">lead</span>(seat_id,<span class="number">1</span>,<span class="number">-99</span>) <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> seat_id) rs</span><br><span class="line"><span class="keyword">from</span> cinema</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">free</span><span class="operator">=</span><span class="number">1</span></span><br><span class="line">)t1</span><br><span class="line"><span class="keyword">where</span>  seat_id<span class="operator">-</span>ls <span class="operator">=</span> <span class="number">1</span> <span class="keyword">or</span> rs<span class="operator">-</span>seat_id <span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="607-销售员"><a href="#607-销售员" class="headerlink" title="607. 销售员"></a><a href="https://leetcode-cn.com/problems/sales-person/">607. 销售员</a></h4><p>难度简单</p><p>SQL架构</p><p><strong>描述</strong></p><p>给定 3 个表： <code>salesperson</code>， <code>company</code>， <code>orders</code>。<br>输出所有表 <code>salesperson</code> 中，没有向公司 ‘RED’ 销售任何东西的销售员。</p><p><strong>示例：</strong><br><strong>输入</strong></p><p>表： <code>salesperson</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+----------+------+--------+-----------------+-----------+</span><br><span class="line">| sales_id | name | salary | commission_rate | hire_date |</span><br><span class="line">+----------+------+--------+-----------------+-----------+</span><br><span class="line">|   1      | John | 100000 |     6           | 4/1/2006  |</span><br><span class="line">|   2      | Amy  | 120000 |     5           | 5/1/2010  |</span><br><span class="line">|   3      | Mark | 65000  |     12          | 12/25/2008|</span><br><span class="line">|   4      | Pam  | 25000  |     25          | 1/1/2005  |</span><br><span class="line">|   5      | Alex | 50000  |     10          | 2/3/2007  |</span><br><span class="line">+----------+------+--------+-----------------+-----------+</span><br></pre></td></tr></table></figure><p>表 <code>salesperson</code> 存储了所有销售员的信息。每个销售员都有一个销售员编号 <strong>sales_id</strong> 和他的名字 <strong>name</strong> 。</p><p>表： <code>company</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+---------+--------+------------+</span><br><span class="line">| com_id  |  name  |    city    |</span><br><span class="line">+---------+--------+------------+</span><br><span class="line">|   1     |  RED   |   Boston   |</span><br><span class="line">|   2     | ORANGE |   New York |</span><br><span class="line">|   3     | YELLOW |   Boston   |</span><br><span class="line">|   4     | GREEN  |   Austin   |</span><br><span class="line">+---------+--------+------------+</span><br></pre></td></tr></table></figure><p>表 <code>company</code> 存储了所有公司的信息。每个公司都有一个公司编号 <strong>com_id</strong> 和它的名字 <strong>name</strong> 。</p><p>表： <code>orders</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+----------+------------+---------+----------+--------+</span><br><span class="line">| order_id | order_date | com_id  | sales_id | amount |</span><br><span class="line">+----------+------------+---------+----------+--------+</span><br><span class="line">| 1        |   1/1/2014 |    3    |    4     | 100000 |</span><br><span class="line">| 2        |   2/1/2014 |    4    |    5     | 5000   |</span><br><span class="line">| 3        |   3/1/2014 |    1    |    1     | 50000  |</span><br><span class="line">| 4        |   4/1/2014 |    1    |    4     | 25000  |</span><br><span class="line">+----------+----------+---------+----------+--------+</span><br></pre></td></tr></table></figure><p>表 <code>orders</code> 存储了所有的销售数据，包括销售员编号 <strong>sales_id</strong> 和公司编号 <strong>com_id</strong> 。</p><p><strong>输出</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+------+</span><br><span class="line">| name | </span><br><span class="line">+------+</span><br><span class="line">| Amy  | </span><br><span class="line">| Mark | </span><br><span class="line">| Alex |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure><p><strong>解释</strong></p><p>根据表 <code>orders</code> 中的订单 ‘3’ 和 ‘4’ ，容易看出只有 ‘John’ 和 ‘Pam’ 两个销售员曾经向公司 ‘RED’ 销售过。</p><p>所以我们需要输出表 <code>salesperson</code> 中所有其他人的名字。\</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name</span><br><span class="line"><span class="keyword">from</span> salesperson</span><br><span class="line"><span class="keyword">where</span> sales_id <span class="keyword">not</span> <span class="keyword">in</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> sales_id</span><br><span class="line">    <span class="keyword">from</span> orders</span><br><span class="line">    <span class="keyword">where</span> com_id <span class="operator">=</span></span><br><span class="line">            (</span><br><span class="line">            <span class="keyword">select</span> com_id </span><br><span class="line">            <span class="keyword">from</span> company</span><br><span class="line">            <span class="keyword">where</span> name <span class="operator">=</span><span class="string">&#x27;RED&#x27;</span></span><br><span class="line">            )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="608-树节点"><a href="#608-树节点" class="headerlink" title="608. 树节点"></a><a href="https://leetcode-cn.com/problems/tree-node/">608. 树节点</a></h4><p>难度中等</p><p>SQL架构</p><p>给定一个表 <code>tree</code>，<strong>id</strong> 是树节点的编号， <strong>p_id</strong> 是它父节点的 <strong>id 。</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+----+------+</span><br><span class="line">| id | p_id |</span><br><span class="line">+----+------+</span><br><span class="line">| 1  | null |</span><br><span class="line">| 2  | 1    |</span><br><span class="line">| 3  | 1    |</span><br><span class="line">| 4  | 2    |</span><br><span class="line">| 5  | 2    |</span><br><span class="line">+----+------+</span><br></pre></td></tr></table></figure><p>树中每个节点属于以下三种类型之一：</p><ul><li>叶子：如果这个节点没有任何孩子节点。</li><li>根：如果这个节点是整棵树的根，即没有父节点。</li><li>内部节点：如果这个节点既不是叶子节点也不是根节点。</li></ul><p>写一个查询语句，输出所有节点的编号和节点的类型，并将结果按照节点编号排序。上面样例的结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+----+------+</span><br><span class="line">| id | Type |</span><br><span class="line">+----+------+</span><br><span class="line">| 1  | Root |</span><br><span class="line">| 2  | Inner|</span><br><span class="line">| 3  | Leaf |</span><br><span class="line">| 4  | Leaf |</span><br><span class="line">| 5  | Leaf |</span><br><span class="line">+----+------+</span><br></pre></td></tr></table></figure><p><strong>解释</strong></p><ul><li><p>节点 ‘1’ 是根节点，因为它的父节点是 NULL ，同时它有孩子节点 ‘2’ 和 ‘3’ 。</p></li><li><p>节点 ‘2’ 是内部节点，因为它有父节点 ‘1’ ，也有孩子节点 ‘4’ 和 ‘5’ 。</p></li><li><p>节点 ‘3’, ‘4’ 和 ‘5’ 都是叶子节点，因为它们都有父节点同时没有孩子节点。</p></li><li><p>样例中树的形态如下： </p><p>​              1<br>​            /   <br>​          2       3<br>​        /   <br>​     4       5</p></li></ul><p><strong>注意</strong></p><p>如果树中只有一个节点，你只需要输出它的根属性。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,</span><br><span class="line">    (<span class="keyword">case</span> <span class="keyword">when</span> p_id <span class="keyword">is</span> <span class="keyword">null</span> <span class="keyword">then</span> &quot;Root&quot;</span><br><span class="line">    <span class="keyword">when</span> id <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> ifnull(p_id,<span class="number">0</span>) <span class="keyword">from</span> tree) <span class="keyword">then</span> &quot;Leaf&quot;</span><br><span class="line">    <span class="keyword">else</span> &quot;Inner&quot; <span class="keyword">end</span>)  Type</span><br><span class="line"><span class="keyword">from</span> tree</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="610-判断三角形"><a href="#610-判断三角形" class="headerlink" title="610. 判断三角形"></a><a href="https://leetcode-cn.com/problems/triangle-judgement/">610. 判断三角形</a></h4><p>难度简单</p><p>SQL架构</p><p>一个小学生 Tim 的作业是判断三条线段是否能形成一个三角形。</p><p>然而，这个作业非常繁重，因为有几百组线段需要判断。</p><p>假设表 <code>triangle</code> 保存了所有三条线段的三元组 x, y, z ，你能帮 Tim 写一个查询语句，来判断每个三元组是否可以组成一个三角形吗？</p><table><thead><tr><th>x</th><th>y</th><th>z</th></tr></thead><tbody><tr><td>13</td><td>15</td><td>30</td></tr><tr><td>10</td><td>20</td><td>15</td></tr></tbody></table><p>对于如上样例数据，你的查询语句应该返回如下结果：</p><table><thead><tr><th>x</th><th>y</th><th>z</th><th>triangle</th></tr></thead><tbody><tr><td>13</td><td>15</td><td>30</td><td>No</td></tr><tr><td>10</td><td>20</td><td>15</td><td>Yes</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> x,y,z, </span><br><span class="line">if(x<span class="operator">+</span>y<span class="operator">&gt;</span>z <span class="operator">&amp;&amp;</span> x<span class="operator">+</span>z<span class="operator">&gt;</span>y <span class="operator">&amp;&amp;</span> y<span class="operator">+</span>z<span class="operator">&gt;</span>x,<span class="string">&#x27;Yes&#x27;</span>,<span class="string">&#x27;No&#x27;</span>) triangle</span><br><span class="line"><span class="keyword">from</span> triangle</span><br></pre></td></tr></table></figure><h4 id="612-平面上的最近距离"><a href="#612-平面上的最近距离" class="headerlink" title="612. 平面上的最近距离"></a><a href="https://leetcode-cn.com/problems/shortest-distance-in-a-plane/">612. 平面上的最近距离</a></h4><p>难度中等</p><p>SQL架构</p><p>表 <code>point_2d</code> 保存了所有点（多于 2 个点）的坐标 (x,y) ，这些点在平面上两两不重合。</p><p>写一个查询语句找到两点之间的最近距离，保留 2 位小数。</p><table><thead><tr><th>x</th><th>y</th></tr></thead><tbody><tr><td>-1</td><td>-1</td></tr><tr><td>0</td><td>0</td></tr><tr><td>-1</td><td>-2</td></tr></tbody></table><p>最近距离在点 (-1,-1) 和(-1,2) 之间，距离为 1.00 。所以输出应该为： </p><table><thead><tr><th>shortest</th></tr></thead><tbody><tr><td>1.00</td></tr></tbody></table><p><strong>注意：</strong>任意点之间的最远距离小于 10000 。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    ROUND(<span class="built_in">SQRT</span>(<span class="built_in">MIN</span>((POW(p1.x <span class="operator">-</span> p2.x, <span class="number">2</span>) <span class="operator">+</span> POW(p1.y <span class="operator">-</span> p2.y, <span class="number">2</span>)))), <span class="number">2</span>) <span class="keyword">AS</span> shortest</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    point_2d p1</span><br><span class="line">        <span class="keyword">JOIN</span></span><br><span class="line">    point_2d p2 <span class="keyword">ON</span> p1.x <span class="operator">!=</span> p2.x <span class="keyword">OR</span> p1.y <span class="operator">!=</span> p2.y</span><br></pre></td></tr></table></figure><p>优化 ：减少重复计算</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    ROUND(<span class="built_in">SQRT</span>(<span class="built_in">MIN</span>((POW(p1.x <span class="operator">-</span> p2.x, <span class="number">2</span>) <span class="operator">+</span> POW(p1.y <span class="operator">-</span> p2.y, <span class="number">2</span>)))),<span class="number">2</span>) <span class="keyword">AS</span> shortest</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    point_2d p1</span><br><span class="line">        <span class="keyword">JOIN</span></span><br><span class="line">    point_2d p2 <span class="keyword">ON</span> (p1.x <span class="operator">&lt;=</span> p2.x <span class="keyword">AND</span> p1.y <span class="operator">&lt;</span> p2.y)</span><br><span class="line">        <span class="keyword">OR</span> (p1.x <span class="operator">&lt;=</span> p2.x <span class="keyword">AND</span> p1.y <span class="operator">&gt;</span> p2.y)</span><br><span class="line">        <span class="keyword">OR</span> (p1.x <span class="operator">&lt;</span> p2.x <span class="keyword">AND</span> p1.y <span class="operator">=</span> p2.y)</span><br></pre></td></tr></table></figure><h4 id="613-直线上的最近距离"><a href="#613-直线上的最近距离" class="headerlink" title="613. 直线上的最近距离"></a><a href="https://leetcode-cn.com/problems/shortest-distance-in-a-line/">613. 直线上的最近距离</a></h4><p>难度简单</p><p>SQL架构</p><p>表 <code>point</code> 保存了一些点在 x 轴上的坐标，这些坐标都是整数。</p><p>写一个查询语句，找到这些点中最近两个点之间的距离。</p><table><thead><tr><th>x</th></tr></thead><tbody><tr><td>-1</td></tr><tr><td>0</td></tr><tr><td>2</td></tr></tbody></table><p>最近距离显然是 ‘1’ ，是点 ‘-1’ 和 ‘0’ 之间的距离。所以输出应该如下：</p><table><thead><tr><th>shortest</th></tr></thead><tbody><tr><td>1</td></tr></tbody></table><p><strong>注意：</strong>每个点都与其他点坐标不同，表 <code>table</code> 不会有重复坐标出现。</p><p><strong>进阶：</strong>如果这些点在 x 轴上从左到右都有一个编号，输出结果时需要输出最近点对的编号呢？</p><p> 开窗方法 178m</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">min</span>(l<span class="operator">-</span>x) shortest</span><br><span class="line"><span class="keyword">from</span>( </span><br><span class="line"><span class="keyword">select</span> x,<span class="built_in">lead</span>(x,<span class="number">1</span>,<span class="keyword">null</span>) <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> x) l</span><br><span class="line"><span class="keyword">from</span> point</span><br><span class="line">)t1</span><br></pre></td></tr></table></figure><p>join方法 268m</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="built_in">MIN</span>(<span class="built_in">ABS</span>(p1.x <span class="operator">-</span> p2.x)) <span class="keyword">AS</span> shortest</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    point p1</span><br><span class="line">        <span class="keyword">JOIN</span></span><br><span class="line">    point p2 <span class="keyword">ON</span> p1.x <span class="operator">!=</span> p2.x</span><br><span class="line">;</span><br></pre></td></tr></table></figure><h4 id="614-二级关注者"><a href="#614-二级关注者" class="headerlink" title="614. 二级关注者"></a><a href="https://leetcode-cn.com/problems/second-degree-follower/">614. 二级关注者</a></h4><p>难度中等</p><p>SQL架构</p><p>在 facebook 中，表 <code>follow</code> 会有 2 个字段： <strong>followee</strong>, <strong>follower</strong> ，分别表示被关注者和关注者。</p><p>请写一个 sql 查询语句，对每一个关注者，查询关注他的关注者的数目。</p><p>比方说：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+-------------+------------+</span><br><span class="line">| followee    | follower   |</span><br><span class="line">+-------------+------------+</span><br><span class="line">|     A       |     B      |</span><br><span class="line">|     B       |     C      |</span><br><span class="line">|     B       |     D      |</span><br><span class="line">|     D       |     E      |</span><br><span class="line">+-------------+------------+</span><br></pre></td></tr></table></figure><p>应该输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+-------------+------------+</span><br><span class="line">| follower    | num        |</span><br><span class="line">+-------------+------------+</span><br><span class="line">|     B       |  2         |</span><br><span class="line">|     D       |  1         |</span><br><span class="line">+-------------+------------+</span><br></pre></td></tr></table></figure><p><strong>解释：</strong></p><p>B 和 D 都在在 <strong>follower</strong> 字段中出现，作为被关注者，B 被 C 和 D 关注，D 被 E 关注。A 不在 <strong>follower</strong> 字段内，所以A不在输出列表中。</p><p><strong>注意：</strong></p><ul><li>被关注者永远不会被他 / 她自己关注。</li><li>将结果按照字典序返回。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> followee follower,<span class="built_in">count</span>(<span class="keyword">distinct</span> follower) num</span><br><span class="line"><span class="keyword">from</span> follow</span><br><span class="line"><span class="keyword">where</span> followee  <span class="keyword">in</span> (</span><br><span class="line">    <span class="keyword">select</span> follower</span><br><span class="line">    <span class="keyword">from</span> follow</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> follower</span><br><span class="line">)</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> followee</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> follower </span><br></pre></td></tr></table></figure><blockquote><p>这里出现了重复关注 ，需要去重</p></blockquote><h4 id="615-平均工资：部门与公司比较"><a href="#615-平均工资：部门与公司比较" class="headerlink" title="615. 平均工资：部门与公司比较"></a><a href="https://leetcode-cn.com/problems/average-salary-departments-vs-company/">615. 平均工资：部门与公司比较</a></h4><p>难度困难</p><p>SQL架构</p><p>给如下两个表，写一个查询语句，求出在每一个工资发放日，每个部门的平均工资与公司的平均工资的比较结果 （高 / 低 / 相同）。</p><p>表： <code>salary</code></p><table><thead><tr><th>id</th><th>employee_id</th><th>amount</th><th>pay_date</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>9000</td><td>2017-03-31</td></tr><tr><td>2</td><td>2</td><td>6000</td><td>2017-03-31</td></tr><tr><td>3</td><td>3</td><td>10000</td><td>2017-03-31</td></tr><tr><td>4</td><td>1</td><td>7000</td><td>2017-02-28</td></tr><tr><td>5</td><td>2</td><td>6000</td><td>2017-02-28</td></tr><tr><td>6</td><td>3</td><td>8000</td><td>2017-02-28</td></tr></tbody></table><p><strong>employee_id</strong> 字段是表 <code>employee</code> 中 <strong>employee_id</strong> 字段的外键。</p><table><thead><tr><th>employee_id</th><th>department_id</th></tr></thead><tbody><tr><td>1</td><td>1</td></tr><tr><td>2</td><td>2</td></tr><tr><td>3</td><td>2</td></tr></tbody></table><p>对于如上样例数据，结果为：</p><table><thead><tr><th>pay_month</th><th>department_id</th><th>comparison</th></tr></thead><tbody><tr><td>2017-03</td><td>1</td><td>higher</td></tr><tr><td>2017-03</td><td>2</td><td>lower</td></tr><tr><td>2017-02</td><td>1</td><td>same</td></tr><tr><td>2017-02</td><td>2</td><td>same</td></tr></tbody></table><p><strong>解释</strong></p><p>在三月，公司的平均工资是 (9000+6000+10000)/3 = 8333.33…</p><p>由于部门 ‘1’ 里只有一个 <strong>employee_id</strong> 为 ‘1’ 的员工，所以部门 ‘1’ 的平均工资就是此人的工资 9000 。因为 9000 &gt; 8333.33 ，所以比较结果是 ‘higher’。</p><p>第二个部门的平均工资为 <strong>employee_id</strong> 为 ‘2’ 和 ‘3’ 两个人的平均工资，为 (6000+10000)/2=8000 。因为 8000 &lt; 8333.33 ，所以比较结果是 ‘lower’ 。</p><p>在二月用同样的公式求平均工资并比较，比较结果为 ‘same’ ，因为部门 ‘1’ 和部门 ‘2’ 的平均工资与公司的平均工资相同，都是 7000 。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    pay_month,</span><br><span class="line">    department_id,</span><br><span class="line">     (<span class="keyword">case</span> <span class="keyword">when</span> avgs<span class="operator">&gt;</span>ts <span class="keyword">then</span> <span class="string">&#x27;higher&#x27;</span></span><br><span class="line">            <span class="keyword">when</span> avgs<span class="operator">&lt;</span>ts <span class="keyword">then</span> <span class="string">&#x27;lower&#x27;</span></span><br><span class="line">            <span class="keyword">else</span> <span class="string">&#x27;same&#x27;</span> <span class="keyword">end</span>) <span class="keyword">as</span> comparison</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> </span><br><span class="line">        date_format(pay_date,<span class="string">&#x27;%Y-%m&#x27;</span>)pay_month,</span><br><span class="line">        department_id,</span><br><span class="line">        <span class="built_in">avg</span>(amount) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> date_format(pay_date,<span class="string">&#x27;%Y-%m&#x27;</span>) )ts,</span><br><span class="line">        <span class="built_in">avg</span>(amount) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> date_format(pay_date,<span class="string">&#x27;%Y-%m&#x27;</span>),department_id) avgs</span><br><span class="line">    <span class="keyword">from</span> salary s</span><br><span class="line">    <span class="keyword">left</span> <span class="keyword">join</span> employee e</span><br><span class="line">    <span class="keyword">on</span> s.employee_id <span class="operator">=</span> e.employee_id</span><br><span class="line">   </span><br><span class="line">)t1</span><br><span class="line"> <span class="keyword">group</span> <span class="keyword">by</span> pay_month, department_id</span><br></pre></td></tr></table></figure><blockquote><p>也可以用if</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IF(avgs<span class="operator">&gt;</span>ts,<span class="string">&#x27;higher&#x27;</span>,IF(avgs<span class="operator">=</span>ts,<span class="string">&#x27;same&#x27;</span>,<span class="string">&#x27;lower&#x27;</span>)) <span class="keyword">AS</span> comparison</span><br></pre></td></tr></table></figure><h4 id="618-学生地理信息报告"><a href="#618-学生地理信息报告" class="headerlink" title="618. 学生地理信息报告"></a><a href="https://leetcode-cn.com/problems/students-report-by-geography/">618. 学生地理信息报告</a></h4><p>难度困难</p><p>SQL架构</p><p>一所美国大学有来自亚洲、欧洲和美洲的学生，他们的地理信息存放在如下 <code>student</code> 表中。</p><table><thead><tr><th>name</th><th>continent</th></tr></thead><tbody><tr><td>Jack</td><td>America</td></tr><tr><td>Pascal</td><td>Europe</td></tr><tr><td>Xi</td><td>Asia</td></tr><tr><td>Jane</td><td>America</td></tr></tbody></table><p>写一个查询语句实现对大洲（continent）列的 <a href="https://zh.wikipedia.org/wiki/%E9%80%8F%E8%A7%86%E8%A1%A8">透视表</a> 操作，使得每个学生按照姓名的字母顺序依次排列在对应的大洲下面。输出的标题应依次为美洲（America）、亚洲（Asia）和欧洲（Europe）。数据保证来自美洲的学生不少于来自亚洲或者欧洲的学生。</p><p>对于样例输入，它的对应输出是：</p><table><thead><tr><th>America</th><th>Asia</th><th>Europe</th></tr></thead><tbody><tr><td>Jack</td><td>Xi</td><td>Pascal</td></tr><tr><td>Jane</td><td></td><td></td></tr></tbody></table><p><strong>进阶：</strong>如果不能确定哪个大洲的学生数最多，你可以写出一个查询去生成上述学生报告吗？</p><p>开窗</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line"><span class="built_in">max</span>(if(continent<span class="operator">=</span><span class="string">&#x27;America&#x27;</span>,name,<span class="keyword">null</span>)) America,</span><br><span class="line"><span class="built_in">max</span>(if(continent<span class="operator">=</span><span class="string">&#x27;Asia&#x27;</span>,name,<span class="keyword">null</span>)) Asia,</span><br><span class="line"><span class="built_in">max</span>(if(continent<span class="operator">=</span><span class="string">&#x27;Europe&#x27;</span>,name,<span class="keyword">null</span>)) Europe</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    (<span class="keyword">select</span> <span class="operator">*</span>, <span class="built_in">row_number</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> continent <span class="keyword">order</span> <span class="keyword">by</span> name) rk</span><br><span class="line">    <span class="keyword">from</span> student) t</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> rk</span><br></pre></td></tr></table></figure><p>变量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    America, Asia, Europe</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="variable">@as</span>:<span class="operator">=</span><span class="number">0</span>, <span class="variable">@am</span>:<span class="operator">=</span><span class="number">0</span>, <span class="variable">@eu</span>:<span class="operator">=</span><span class="number">0</span>) t,</span><br><span class="line">    (<span class="keyword">SELECT</span> </span><br><span class="line">        <span class="variable">@as</span>:<span class="operator">=</span><span class="variable">@as</span> <span class="operator">+</span> <span class="number">1</span> <span class="keyword">AS</span> asid, name <span class="keyword">AS</span> Asia</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        student</span><br><span class="line">    <span class="keyword">WHERE</span></span><br><span class="line">        continent <span class="operator">=</span> <span class="string">&#x27;Asia&#x27;</span></span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> Asia) <span class="keyword">AS</span> t1</span><br><span class="line">        <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span></span><br><span class="line">    (<span class="keyword">SELECT</span> </span><br><span class="line">        <span class="variable">@am</span>:<span class="operator">=</span><span class="variable">@am</span> <span class="operator">+</span> <span class="number">1</span> <span class="keyword">AS</span> amid, name <span class="keyword">AS</span> America</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        student</span><br><span class="line">    <span class="keyword">WHERE</span></span><br><span class="line">        continent <span class="operator">=</span> <span class="string">&#x27;America&#x27;</span></span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> America) <span class="keyword">AS</span> t2 <span class="keyword">ON</span> asid <span class="operator">=</span> amid</span><br><span class="line">        <span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">    (<span class="keyword">SELECT</span> </span><br><span class="line">        <span class="variable">@eu</span>:<span class="operator">=</span><span class="variable">@eu</span> <span class="operator">+</span> <span class="number">1</span> <span class="keyword">AS</span> euid, name <span class="keyword">AS</span> Europe</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        student</span><br><span class="line">    <span class="keyword">WHERE</span></span><br><span class="line">        continent <span class="operator">=</span> <span class="string">&#x27;Europe&#x27;</span></span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> Europe) <span class="keyword">AS</span> t3 <span class="keyword">ON</span> amid <span class="operator">=</span> euid</span><br></pre></td></tr></table></figure><blockquote><p>官方给出的。。同下方开窗</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> America,Asia,Europe </span><br><span class="line"><span class="keyword">from</span>(</span><br><span class="line">    <span class="keyword">select</span> <span class="built_in">row_number</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> name) <span class="keyword">as</span> rn,name <span class="keyword">as</span> America <span class="keyword">from</span> student</span><br><span class="line">    <span class="keyword">where</span> continent<span class="operator">=</span><span class="string">&#x27;America&#x27;</span></span><br><span class="line">) a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span>(</span><br><span class="line">    <span class="keyword">select</span> <span class="built_in">row_number</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> name) <span class="keyword">as</span> rn,name <span class="keyword">as</span> Asia <span class="keyword">from</span> student</span><br><span class="line">    <span class="keyword">where</span> continent<span class="operator">=</span><span class="string">&#x27;Asia&#x27;</span></span><br><span class="line">) b <span class="keyword">on</span> a.rn<span class="operator">=</span>b.rn</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span>(</span><br><span class="line">    <span class="keyword">select</span> <span class="built_in">row_number</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> name) <span class="keyword">as</span> rn,name <span class="keyword">as</span> Europe <span class="keyword">from</span> student</span><br><span class="line">    <span class="keyword">where</span> continent<span class="operator">=</span><span class="string">&#x27;Europe&#x27;</span></span><br><span class="line">) c <span class="keyword">on</span> a.rn<span class="operator">=</span>c.rn</span><br></pre></td></tr></table></figure><h4 id="619-只出现一次的最大数字"><a href="#619-只出现一次的最大数字" class="headerlink" title="619. 只出现一次的最大数字"></a><a href="https://leetcode-cn.com/problems/biggest-single-number/">619. 只出现一次的最大数字</a></h4><p>难度简单</p><p>SQL架构</p><p>表 <code>my_numbers</code> 的 <strong>num</strong> 字段包含很多数字，其中包括很多重复的数字。</p><p>你能写一个 SQL 查询语句，找到只出现过一次的数字中，最大的一个数字吗？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+---+</span><br><span class="line">|num|</span><br><span class="line">+---+</span><br><span class="line">| 8 |</span><br><span class="line">| 8 |</span><br><span class="line">| 3 |</span><br><span class="line">| 3 |</span><br><span class="line">| 1 |</span><br><span class="line">| 4 |</span><br><span class="line">| 5 |</span><br><span class="line">| 6 | </span><br></pre></td></tr></table></figure><p>对于上面给出的样例数据，你的查询语句应该返回如下结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">+---+</span><br><span class="line">|num|</span><br><span class="line">+---+</span><br><span class="line">| 6 |</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>如果没有只出现一次的数字，输出 <strong>null</strong> 。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="built_in">MAX</span>(num) <span class="keyword">AS</span> num</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    (<span class="keyword">SELECT</span></span><br><span class="line">        num</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">        my_numbers</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> num</span><br><span class="line">    <span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(num) <span class="operator">=</span> <span class="number">1</span>) t1</span><br></pre></td></tr></table></figure><h4 id="620-有趣的电影"><a href="#620-有趣的电影" class="headerlink" title="620. 有趣的电影"></a><a href="https://leetcode-cn.com/problems/not-boring-movies/">620. 有趣的电影</a></h4><p>难度简单86收藏分享切换为英文关注反馈</p><p>SQL架构</p><p>某城市开了一家新的电影院，吸引了很多人过来看电影。该电影院特别注意用户体验，专门有个 LED显示板做电影推荐，上面公布着影评和相关电影描述。</p><p>作为该电影院的信息部主管，您需要编写一个 SQL查询，找出所有影片描述为<strong>非</strong> <code>boring</code> (不无聊) 的并且 <strong>id 为奇数</strong> 的影片，结果请按等级 <code>rating</code> 排列。</p><p>例如，下表 <code>cinema</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+---------+-----------+--------------+-----------+</span><br><span class="line">|   id    | movie     |  description |  rating   |</span><br><span class="line">+---------+-----------+--------------+-----------+</span><br><span class="line">|   1     | War       |   great 3D   |   8.9     |</span><br><span class="line">|   2     | Science   |   fiction    |   8.5     |</span><br><span class="line">|   3     | irish     |   boring     |   6.2     |</span><br><span class="line">|   4     | Ice song  |   Fantacy    |   8.6     |</span><br><span class="line">|   5     | House card|   Interesting|   9.1     |</span><br><span class="line">+---------+-----------+--------------+-----------+</span><br></pre></td></tr></table></figure><p>对于上面的例子，则正确的输出是为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+---------+-----------+--------------+-----------+</span><br><span class="line">|   id    | movie     |  description |  rating   |</span><br><span class="line">+---------+-----------+--------------+-----------+</span><br><span class="line">|   5     | House card|   Interesting|   9.1     |</span><br><span class="line">|   1     | War       |   great 3D   |   8.9     |</span><br><span class="line">+---------+-----------+--------------+-----------+</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  id,movie,description,rating </span><br><span class="line"><span class="keyword">from</span> cinema</span><br><span class="line"><span class="keyword">where</span> id<span class="operator">%</span><span class="number">2</span><span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> description <span class="operator">!=</span><span class="string">&#x27;boring&#x27;</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> rating <span class="keyword">desc</span>,id,movie,description</span><br></pre></td></tr></table></figure><h4 id="626-换座位"><a href="#626-换座位" class="headerlink" title="626. 换座位"></a><a href="https://leetcode-cn.com/problems/exchange-seats/">626. 换座位</a></h4><p>难度中等</p><p>SQL架构</p><p>小美是一所中学的信息科技老师，她有一张 <code>seat</code> 座位表，平时用来储存学生名字和与他们相对应的座位 id。</p><p>其中纵列的 <strong>id</strong> 是连续递增的</p><p>小美想改变相邻俩学生的座位。</p><p>你能不能帮她写一个 SQL query 来输出小美想要的结果呢？ </p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+---------+---------+</span><br><span class="line">|    id   | student |</span><br><span class="line">+---------+---------+</span><br><span class="line">|    1    | Abbot   |</span><br><span class="line">|    2    | Doris   |</span><br><span class="line">|    3    | Emerson |</span><br><span class="line">|    4    | Green   |</span><br><span class="line">|    5    | Jeames  |</span><br><span class="line">+---------+---------+</span><br></pre></td></tr></table></figure><p>假如数据输入的是上表，则输出结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+---------+---------+</span><br><span class="line">|    id   | student |</span><br><span class="line">+---------+---------+</span><br><span class="line">|    1    | Doris   |</span><br><span class="line">|    2    | Abbot   |</span><br><span class="line">|    3    | Green   |</span><br><span class="line">|    4    | Emerson |</span><br><span class="line">|    5    | Jeames  |</span><br><span class="line">+---------+---------+</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>如果学生人数是奇数，则不需要改变最后一个同学的座位。</p><p>开窗</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,</span><br><span class="line">(<span class="keyword">case</span> <span class="keyword">when</span> id<span class="operator">%</span><span class="number">2</span><span class="operator">=</span><span class="number">0</span> <span class="keyword">then</span> f</span><br><span class="line">      <span class="keyword">when</span> id<span class="operator">%</span><span class="number">2</span><span class="operator">=</span><span class="number">1</span> <span class="operator">&amp;&amp;</span> b <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">then</span> b</span><br><span class="line">      <span class="keyword">else</span> student <span class="keyword">end</span>) student</span><br><span class="line"><span class="keyword">from</span>(</span><br><span class="line">    <span class="keyword">select</span> id,student,</span><br><span class="line">    <span class="built_in">lag</span>(student,<span class="number">1</span>,<span class="keyword">null</span>) <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> id) f,</span><br><span class="line">    <span class="built_in">lead</span>(student,<span class="number">1</span>,<span class="keyword">null</span>) <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> id) b</span><br><span class="line">    <span class="keyword">from</span> seat</span><br><span class="line">)t1</span><br></pre></td></tr></table></figure><p>非嵌套</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    if(id<span class="operator">%</span><span class="number">2</span><span class="operator">=</span><span class="number">0</span>,</span><br><span class="line">        id<span class="number">-1</span>,</span><br><span class="line">        if(id<span class="operator">=</span>(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> id) <span class="keyword">from</span> seat),</span><br><span class="line">            id,</span><br><span class="line">            id<span class="operator">+</span><span class="number">1</span>)) </span><br><span class="line">    <span class="keyword">as</span> id,student </span><br><span class="line"><span class="keyword">from</span> seat </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> id;</span><br></pre></td></tr></table></figure><p>用异或</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> b.id,a.student <span class="keyword">from</span> </span><br><span class="line">seat <span class="keyword">as</span> a,seat <span class="keyword">as</span> b,(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> cnt <span class="keyword">from</span> seat) <span class="keyword">as</span> c </span><br><span class="line"><span class="keyword">where</span> b.id<span class="operator">=</span><span class="number">1</span><span class="operator">^</span>(a.id<span class="number">-1</span>)<span class="operator">+</span><span class="number">1</span></span><br><span class="line"><span class="comment">-- where a.id=1^(b.id-1)+1; 也可以这样写，更容易理解</span></span><br><span class="line"> <span class="operator">||</span> (c.cnt<span class="operator">%</span><span class="number">2</span> <span class="operator">&amp;&amp;</span> b.id<span class="operator">=</span>c.cnt <span class="operator">&amp;&amp;</span> a.id<span class="operator">=</span>c.cnt);</span><br></pre></td></tr></table></figure><h4 id="627-交换工资"><a href="#627-交换工资" class="headerlink" title="627. 交换工资"></a><a href="https://leetcode-cn.com/problems/swap-salary/">627. 交换工资</a></h4><p>难度简单</p><p>SQL架构</p><p>给定一个 <code>salary</code> 表，如下所示，有 m = 男性 和 f = 女性 的值。交换所有的 f 和 m 值（例如，将所有 f 值更改为 m，反之亦然）。要求只使用一个更新（Update）语句，并且没有中间的临时表。</p><p>注意，您必只能写一个 Update 语句，请不要编写任何 Select 语句。</p><p><strong>例如：</strong></p><table><thead><tr><th>id</th><th>name</th><th>sex</th><th>salary</th></tr></thead><tbody><tr><td>1</td><td>A</td><td>m</td><td>2500</td></tr><tr><td>2</td><td>B</td><td>f</td><td>1500</td></tr><tr><td>3</td><td>C</td><td>m</td><td>5500</td></tr><tr><td>4</td><td>D</td><td>f</td><td>500</td></tr></tbody></table><p>运行你所编写的更新语句之后，将会得到以下表:</p><table><thead><tr><th>id</th><th>name</th><th>sex</th><th>salary</th></tr></thead><tbody><tr><td>1</td><td>A</td><td>f</td><td>2500</td></tr><tr><td>2</td><td>B</td><td>m</td><td>1500</td></tr><tr><td>3</td><td>C</td><td>f</td><td>5500</td></tr><tr><td>4</td><td>D</td><td>m</td><td>500</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">UPDATE salary</span><br><span class="line"><span class="keyword">SET</span></span><br><span class="line">    sex <span class="operator">=</span> <span class="keyword">CASE</span> sex</span><br><span class="line">        <span class="keyword">WHEN</span> <span class="string">&#x27;m&#x27;</span> <span class="keyword">THEN</span> <span class="string">&#x27;f&#x27;</span></span><br><span class="line">        <span class="keyword">ELSE</span> <span class="string">&#x27;m&#x27;</span></span><br><span class="line">    <span class="keyword">END</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>Update 和set的使用</p></blockquote><h4 id="1045-买下所有产品的客户"><a href="#1045-买下所有产品的客户" class="headerlink" title="1045. 买下所有产品的客户"></a><a href="https://leetcode-cn.com/problems/customers-who-bought-all-products/">1045. 买下所有产品的客户</a></h4><p>难度中等</p><p>SQL架构</p><p><code>Customer</code> 表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| customer_id | int     |</span><br><span class="line">| product_key | int     |</span><br><span class="line">+-------------+---------+</span><br><span class="line">product_key 是 Customer 表的外键。</span><br></pre></td></tr></table></figure><p><code>Product</code> 表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| product_key | int     |</span><br><span class="line">+-------------+---------+</span><br><span class="line">product_key 是这张表的主键。</span><br></pre></td></tr></table></figure><p>写一条 SQL 查询语句，从 <code>Customer</code> 表中查询购买了 <code>Product</code> 表中所有产品的客户的 id。</p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Customer 表：</span><br><span class="line">+-------------+-------------+</span><br><span class="line">| customer_id | product_key |</span><br><span class="line">+-------------+-------------+</span><br><span class="line">| 1           | 5           |</span><br><span class="line">| 2           | 6           |</span><br><span class="line">| 3           | 5           |</span><br><span class="line">| 3           | 6           |</span><br><span class="line">| 1           | 6           |</span><br><span class="line">+-------------+-------------+</span><br><span class="line"></span><br><span class="line">Product 表：</span><br><span class="line">+-------------+</span><br><span class="line">| product_key |</span><br><span class="line">+-------------+</span><br><span class="line">| 5           |</span><br><span class="line">| 6           |</span><br><span class="line">+-------------+</span><br><span class="line"></span><br><span class="line">Result 表：</span><br><span class="line">+-------------+</span><br><span class="line">| customer_id |</span><br><span class="line">+-------------+</span><br><span class="line">| 1           |</span><br><span class="line">| 3           |</span><br><span class="line">+-------------+</span><br><span class="line">购买了所有产品（5 和 6）的客户的 id 是 1 和 3 。</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> customer_id</span><br><span class="line"><span class="keyword">from</span> Customer</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> customer_id</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> product_key)<span class="operator">=</span>(</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) cnt</span><br><span class="line"><span class="keyword">from</span> Product)</span><br></pre></td></tr></table></figure><h4 id="1050-合作过至少三次的演员和导演"><a href="#1050-合作过至少三次的演员和导演" class="headerlink" title="1050. 合作过至少三次的演员和导演"></a><a href="https://leetcode-cn.com/problems/actors-and-directors-who-cooperated-at-least-three-times/">1050. 合作过至少三次的演员和导演</a></h4><p>难度简单</p><p>SQL架构</p><p><code>ActorDirector</code> 表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| actor_id    | int     |</span><br><span class="line">| director_id | int     |</span><br><span class="line">| timestamp   | int     |</span><br><span class="line">+-------------+---------+</span><br><span class="line">timestamp 是这张表的主键.</span><br></pre></td></tr></table></figure><p>写一条SQL查询语句获取合作过至少三次的演员和导演的 id 对 <code>(actor_id, director_id)</code></p><p><strong>示例：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ActorDirector 表：</span><br><span class="line">+-------------+-------------+-------------+</span><br><span class="line">| actor_id    | director_id | timestamp   |</span><br><span class="line">+-------------+-------------+-------------+</span><br><span class="line">| 1           | 1           | 0           |</span><br><span class="line">| 1           | 1           | 1           |</span><br><span class="line">| 1           | 1           | 2           |</span><br><span class="line">| 1           | 2           | 3           |</span><br><span class="line">| 1           | 2           | 4           |</span><br><span class="line">| 2           | 1           | 5           |</span><br><span class="line">| 2           | 1           | 6           |</span><br><span class="line">+-------------+-------------+-------------+</span><br><span class="line"></span><br><span class="line">Result 表：</span><br><span class="line">+-------------+-------------+</span><br><span class="line">| actor_id    | director_id |</span><br><span class="line">+-------------+-------------+</span><br><span class="line">| 1           | 1           |</span><br><span class="line">+-------------+-------------+</span><br><span class="line">唯一的 id 对是 (1, 1)，他们恰好合作了 3 次。</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> actor_id,director_id</span><br><span class="line"><span class="keyword">from</span> ActorDirector</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> actor_id,director_id</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>)<span class="operator">&gt;=</span><span class="number">3</span></span><br></pre></td></tr></table></figure><h4 id="1068-产品销售分析-I"><a href="#1068-产品销售分析-I" class="headerlink" title="1068. 产品销售分析 I"></a><a href="https://leetcode-cn.com/problems/product-sales-analysis-i/">1068. 产品销售分析 I</a></h4><p>难度简单</p><p>SQL架构</p><p>销售表 <code>Sales</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+-------------+-------+</span><br><span class="line">| Column Name | Type  |</span><br><span class="line">+-------------+-------+</span><br><span class="line">| sale_id     | int   |</span><br><span class="line">| product_id  | int   |</span><br><span class="line">| year        | int   |</span><br><span class="line">| quantity    | int   |</span><br><span class="line">| price       | int   |</span><br><span class="line">+-------------+-------+</span><br><span class="line">(sale_id, year) 是销售表 Sales 的主键.</span><br><span class="line">product_id 是产品表 Product 的外键.</span><br><span class="line">注意: price 表示每单位价格</span><br></pre></td></tr></table></figure><p>产品表 <code>Product</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+--------------+---------+</span><br><span class="line">| Column Name  | Type    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">| product_id   | int     |</span><br><span class="line">| product_name | varchar |</span><br><span class="line">+--------------+---------+</span><br><span class="line">product_id 是表的主键.</span><br></pre></td></tr></table></figure><p>写一条SQL 查询语句获取产品表 <code>Product</code> 中所有的 <strong>产品名称 product name</strong> 以及 该产品在 <code>Sales</code> 表中相对应的 <strong>上市年份 year</strong> 和 <strong>价格 price</strong>。</p><p>示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Sales 表：</span><br><span class="line">+---------+------------+------+----------+-------+</span><br><span class="line">| sale_id | product_id | year | quantity | price |</span><br><span class="line">+---------+------------+------+----------+-------+ </span><br><span class="line">| 1       | 100        | 2008 | 10       | 5000  |</span><br><span class="line">| 2       | 100        | 2009 | 12       | 5000  |</span><br><span class="line">| 7       | 200        | 2011 | 15       | 9000  |</span><br><span class="line">+---------+------------+------+----------+-------+</span><br><span class="line"></span><br><span class="line">Product 表：</span><br><span class="line">+------------+--------------+</span><br><span class="line">| product_id | product_name |</span><br><span class="line">+------------+--------------+</span><br><span class="line">| 100        | Nokia        |</span><br><span class="line">| 200        | Apple        |</span><br><span class="line">| 300        | Samsung      |</span><br><span class="line">+------------+--------------+</span><br><span class="line"></span><br><span class="line">Result 表：</span><br><span class="line">+--------------+-------+-------+</span><br><span class="line">| product_name | year  | price |</span><br><span class="line">+--------------+-------+-------+</span><br><span class="line">| Nokia        | 2008  | 5000  |</span><br><span class="line">| Nokia        | 2009  | 5000  |</span><br><span class="line">| Apple        | 2011  | 9000  |</span><br><span class="line">+--------------+-------+-------+</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> product_name,<span class="keyword">year</span>,price</span><br><span class="line"><span class="keyword">from</span> Sales s <span class="keyword">left</span> <span class="keyword">join</span> Product p</span><br><span class="line"><span class="keyword">on</span> s.product_id  <span class="operator">=</span> p.product_id </span><br></pre></td></tr></table></figure><h4 id="1069-产品销售分析-II"><a href="#1069-产品销售分析-II" class="headerlink" title="1069. 产品销售分析 II"></a><a href="https://leetcode-cn.com/problems/product-sales-analysis-ii/">1069. 产品销售分析 II</a></h4><p>难度简单</p><p>SQL架构</p><p>销售表：<code>Sales</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+-------------+-------+</span><br><span class="line">| Column Name | Type  |</span><br><span class="line">+-------------+-------+</span><br><span class="line">| sale_id     | int   |</span><br><span class="line">| product_id  | int   |</span><br><span class="line">| year        | int   |</span><br><span class="line">| quantity    | int   |</span><br><span class="line">| price       | int   |</span><br><span class="line">+-------------+-------+</span><br><span class="line">sale_id 是这个表的主键。</span><br><span class="line">product_id 是 Product 表的外键。</span><br><span class="line">请注意价格是每单位的。</span><br></pre></td></tr></table></figure><p>产品表：<code>Product</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+--------------+---------+</span><br><span class="line">| Column Name  | Type    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">| product_id   | int     |</span><br><span class="line">| product_name | varchar |</span><br><span class="line">+--------------+---------+</span><br><span class="line">product_id 是这个表的主键。</span><br></pre></td></tr></table></figure><p>编写一个 SQL 查询，按产品 id <code>product_id</code> 来统计每个产品的销售总量。</p><p>查询结果格式如下面例子所示:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Sales 表：</span><br><span class="line">+---------+------------+------+----------+-------+</span><br><span class="line">| sale_id | product_id | year | quantity | price |</span><br><span class="line">+---------+------------+------+----------+-------+ </span><br><span class="line">| 1       | 100        | 2008 | 10       | 5000  |</span><br><span class="line">| 2       | 100        | 2009 | 12       | 5000  |</span><br><span class="line">| 7       | 200        | 2011 | 15       | 9000  |</span><br><span class="line">+---------+------------+------+----------+-------+</span><br><span class="line"></span><br><span class="line">Product 表：</span><br><span class="line">+------------+--------------+</span><br><span class="line">| product_id | product_name |</span><br><span class="line">+------------+--------------+</span><br><span class="line">| 100        | Nokia        |</span><br><span class="line">| 200        | Apple        |</span><br><span class="line">| 300        | Samsung      |</span><br><span class="line">+------------+--------------+</span><br><span class="line"></span><br><span class="line">Result 表：</span><br><span class="line">+--------------+----------------+</span><br><span class="line">| product_id   | total_quantity |</span><br><span class="line">+--------------+----------------+</span><br><span class="line">| 100          | 22             |</span><br><span class="line">| 200          | 15             |</span><br><span class="line">+--------------+----------------+</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> s.product_id,<span class="built_in">sum</span>(quantity) total_quantity</span><br><span class="line"><span class="keyword">from</span> Sales s <span class="keyword">left</span> <span class="keyword">join</span> Product p</span><br><span class="line"><span class="keyword">on</span> s.product_id  <span class="operator">=</span> p.product_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> s.product_id</span><br></pre></td></tr></table></figure><h4 id="1070-产品销售分析-III"><a href="#1070-产品销售分析-III" class="headerlink" title="1070. 产品销售分析 III"></a><a href="https://leetcode-cn.com/problems/product-sales-analysis-iii/">1070. 产品销售分析 III</a></h4><p>难度中等</p><p>SQL架构</p><p>销售表 <code>Sales</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+-------------+-------+</span><br><span class="line">| Column Name | Type  |</span><br><span class="line">+-------------+-------+</span><br><span class="line">| sale_id     | int   |</span><br><span class="line">| product_id  | int   |</span><br><span class="line">| year        | int   |</span><br><span class="line">| quantity    | int   |</span><br><span class="line">| price       | int   |</span><br><span class="line">+-------------+-------+</span><br><span class="line">sale_id 是此表的主键。</span><br><span class="line">product_id 是产品表的外键。</span><br><span class="line">请注意，价格是按每单位计的。</span><br></pre></td></tr></table></figure><p>产品表 <code>Product</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+--------------+---------+</span><br><span class="line">| Column Name  | Type    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">| product_id   | int     |</span><br><span class="line">| product_name | varchar |</span><br><span class="line">+--------------+---------+</span><br><span class="line">product_id 是此表的主键。</span><br></pre></td></tr></table></figure><p>编写一个 SQL 查询，选出每个销售产品的 <strong>第一年</strong> 的 <strong>产品 id</strong>、<strong>年份</strong>、<strong>数量</strong> 和 <strong>价格</strong>。</p><p>查询结果格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Sales table:</span><br><span class="line">+---------+------------+------+----------+-------+</span><br><span class="line">| sale_id | product_id | year | quantity | price |</span><br><span class="line">+---------+------------+------+----------+-------+ </span><br><span class="line">| 1       | 100        | 2008 | 10       | 5000  |</span><br><span class="line">| 2       | 100        | 2009 | 12       | 5000  |</span><br><span class="line">| 7       | 200        | 2011 | 15       | 9000  |</span><br><span class="line">+---------+------------+------+----------+-------+</span><br><span class="line"></span><br><span class="line">Product table:</span><br><span class="line">+------------+--------------+</span><br><span class="line">| product_id | product_name |</span><br><span class="line">+------------+--------------+</span><br><span class="line">| 100        | Nokia        |</span><br><span class="line">| 200        | Apple        |</span><br><span class="line">| 300        | Samsung      |</span><br><span class="line">+------------+--------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+------------+------------+----------+-------+</span><br><span class="line">| product_id | first_year | quantity | price |</span><br><span class="line">+------------+------------+----------+-------+ </span><br><span class="line">| 100        | 2008       | 10       | 5000  |</span><br><span class="line">| 200        | 2011       | 15       | 9000  |</span><br><span class="line">+------------+------------+----------+-------+</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> product_id,<span class="keyword">year</span> first_year,quantity,price</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line"><span class="keyword">select</span> s.product_id,<span class="keyword">year</span>,quantity,price,</span><br><span class="line"><span class="built_in">rank</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> product_id <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">year</span>) rk</span><br><span class="line"><span class="keyword">from</span> Sales s <span class="keyword">left</span> <span class="keyword">join</span> Product p</span><br><span class="line"><span class="keyword">on</span> s.product_id  <span class="operator">=</span> p.product_id</span><br><span class="line">)t1</span><br><span class="line"><span class="keyword">where</span> rk <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="1075-项目员工-I"><a href="#1075-项目员工-I" class="headerlink" title="1075. 项目员工 I"></a><a href="https://leetcode-cn.com/problems/project-employees-i/">1075. 项目员工 I</a></h4><p>难度简单</p><p>SQL架构</p><p>项目表 <code>Project</code>： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| project_id  | int     |</span><br><span class="line">| employee_id | int     |</span><br><span class="line">+-------------+---------+</span><br><span class="line">主键为 (project_id, employee_id)。</span><br><span class="line">employee_id 是员工表 Employee 表的外键。</span><br></pre></td></tr></table></figure><p>员工表 <code>Employee</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+------------------+---------+</span><br><span class="line">| Column Name      | Type    |</span><br><span class="line">+------------------+---------+</span><br><span class="line">| employee_id      | int     |</span><br><span class="line">| name             | varchar |</span><br><span class="line">| experience_years | int     |</span><br><span class="line">+------------------+---------+</span><br><span class="line">主键是 employee_id。</span><br></pre></td></tr></table></figure><p>请写一个 SQL 语句，查询每一个项目中员工的 <strong>平均</strong> 工作年限，<strong>精确到小数点后两位</strong>。</p><p>查询结果的格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Project 表：</span><br><span class="line">+-------------+-------------+</span><br><span class="line">| project_id  | employee_id |</span><br><span class="line">+-------------+-------------+</span><br><span class="line">| 1           | 1           |</span><br><span class="line">| 1           | 2           |</span><br><span class="line">| 1           | 3           |</span><br><span class="line">| 2           | 1           |</span><br><span class="line">| 2           | 4           |</span><br><span class="line">+-------------+-------------+</span><br><span class="line"></span><br><span class="line">Employee 表：</span><br><span class="line">+-------------+--------+------------------+</span><br><span class="line">| employee_id | name   | experience_years |</span><br><span class="line">+-------------+--------+------------------+</span><br><span class="line">| 1           | Khaled | 3                |</span><br><span class="line">| 2           | Ali    | 2                |</span><br><span class="line">| 3           | John   | 1                |</span><br><span class="line">| 4           | Doe    | 2                |</span><br><span class="line">+-------------+--------+------------------+</span><br><span class="line"></span><br><span class="line">Result 表：</span><br><span class="line">+-------------+---------------+</span><br><span class="line">| project_id  | average_years |</span><br><span class="line">+-------------+---------------+</span><br><span class="line">| 1           | 2.00          |</span><br><span class="line">| 2           | 2.50          |</span><br><span class="line">+-------------+---------------+</span><br><span class="line">第一个项目中，员工的平均工作年限是 (3 + 2 + 1) / 3 = 2.00；第二个项目中，员工的平均工作年限是 (3 + 2) / 2 = 2.50</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> project_id,round(<span class="built_in">avg</span>(experience_years),<span class="number">2</span>) average_years</span><br><span class="line"><span class="keyword">from</span> Project p <span class="keyword">join</span> Employee e</span><br><span class="line"><span class="keyword">on</span> p.employee_id<span class="operator">=</span>e.employee_id </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> project_id</span><br></pre></td></tr></table></figure><h4 id="1076-项目员工II"><a href="#1076-项目员工II" class="headerlink" title="1076. 项目员工II"></a><a href="https://leetcode-cn.com/problems/project-employees-ii/">1076. 项目员工II</a></h4><p>难度简单</p><p>SQL架构</p><p>Table: <code>Project</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| project_id  | int     |</span><br><span class="line">| employee_id | int     |</span><br><span class="line">+-------------+---------+</span><br><span class="line">主键为 (project_id, employee_id)。</span><br><span class="line">employee_id 是员工表 Employee 表的外键。</span><br></pre></td></tr></table></figure><p>Table: <code>Employee</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+------------------+---------+</span><br><span class="line">| Column Name      | Type    |</span><br><span class="line">+------------------+---------+</span><br><span class="line">| employee_id      | int     |</span><br><span class="line">| name             | varchar |</span><br><span class="line">| experience_years | int     |</span><br><span class="line">+------------------+---------+</span><br><span class="line">主键是 employee_id。</span><br></pre></td></tr></table></figure><p>编写一个SQL查询，报告所有雇员最多的项目。</p><p>查询结果格式如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Project table:</span><br><span class="line">+-------------+-------------+</span><br><span class="line">| project_id  | employee_id |</span><br><span class="line">+-------------+-------------+</span><br><span class="line">| 1           | 1           |</span><br><span class="line">| 1           | 2           |</span><br><span class="line">| 1           | 3           |</span><br><span class="line">| 2           | 1           |</span><br><span class="line">| 2           | 4           |</span><br><span class="line">+-------------+-------------+</span><br><span class="line"></span><br><span class="line">Employee table:</span><br><span class="line">+-------------+--------+------------------+</span><br><span class="line">| employee_id | name   | experience_years |</span><br><span class="line">+-------------+--------+------------------+</span><br><span class="line">| 1           | Khaled | 3                |</span><br><span class="line">| 2           | Ali    | 2                |</span><br><span class="line">| 3           | John   | 1                |</span><br><span class="line">| 4           | Doe    | 2                |</span><br><span class="line">+-------------+--------+------------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+-------------+</span><br><span class="line">| project_id  |</span><br><span class="line">+-------------+</span><br><span class="line">| 1           |</span><br><span class="line">+-------------+</span><br><span class="line">第一个项目有3名员工，第二个项目有2名员工。</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> project_id </span><br><span class="line"><span class="keyword">from</span> Project </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> project_id </span><br><span class="line"><span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">=</span> </span><br><span class="line">(<span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) `num` <span class="keyword">from</span> Project <span class="keyword">group</span> <span class="keyword">by</span> project_id <span class="keyword">order</span> <span class="keyword">by</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">desc</span> limit <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>开窗</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> project_id <span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> project_id,<span class="built_in">rank</span>()<span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> <span class="built_in">count</span>(employee_id) <span class="keyword">desc</span>) ranking <span class="keyword">from</span> Project <span class="keyword">group</span> <span class="keyword">by</span> project_id) temp <span class="keyword">where</span> ranking<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="1077-项目员工-III"><a href="#1077-项目员工-III" class="headerlink" title="1077. 项目员工 III"></a><a href="https://leetcode-cn.com/problems/project-employees-iii/">1077. 项目员工 III</a></h4><p>难度中等</p><p>SQL架构</p><p>项目表 <code>Project</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| project_id  | int     |</span><br><span class="line">| employee_id | int     |</span><br><span class="line">+-------------+---------+</span><br><span class="line">(project_id, employee_id) 是这个表的主键</span><br><span class="line">employee_id 是员工表 Employee 的外键</span><br></pre></td></tr></table></figure><p>员工表 <code>Employee</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+------------------+---------+</span><br><span class="line">| Column Name      | Type    |</span><br><span class="line">+------------------+---------+</span><br><span class="line">| employee_id      | int     |</span><br><span class="line">| name             | varchar |</span><br><span class="line">| experience_years | int     |</span><br><span class="line">+------------------+---------+</span><br><span class="line">employee_id 是这个表的主键</span><br></pre></td></tr></table></figure><p>写 一个 SQL 查询语句，报告在每一个项目中经验最丰富的雇员是谁。如果出现经验年数相同的情况，请报告所有具有最大经验年数的员工。</p><p>查询结果格式在以下示例中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Project 表：</span><br><span class="line">+-------------+-------------+</span><br><span class="line">| project_id  | employee_id |</span><br><span class="line">+-------------+-------------+</span><br><span class="line">| 1           | 1           |</span><br><span class="line">| 1           | 2           |</span><br><span class="line">| 1           | 3           |</span><br><span class="line">| 2           | 1           |</span><br><span class="line">| 2           | 4           |</span><br><span class="line">+-------------+-------------+</span><br><span class="line"></span><br><span class="line">Employee 表：</span><br><span class="line">+-------------+--------+------------------+</span><br><span class="line">| employee_id | name   | experience_years |</span><br><span class="line">+-------------+--------+------------------+</span><br><span class="line">| 1           | Khaled | 3                |</span><br><span class="line">| 2           | Ali    | 2                |</span><br><span class="line">| 3           | John   | 3                |</span><br><span class="line">| 4           | Doe    | 2                |</span><br><span class="line">+-------------+--------+------------------+</span><br><span class="line"></span><br><span class="line">Result 表：</span><br><span class="line">+-------------+---------------+</span><br><span class="line">| project_id  | employee_id   |</span><br><span class="line">+-------------+---------------+</span><br><span class="line">| 1           | 1             |</span><br><span class="line">| 1           | 3             |</span><br><span class="line">| 2           | 1             |</span><br><span class="line">+-------------+---------------+</span><br><span class="line">employee_id 为 1 和 3 的员工在 project_id 为 1 的项目中拥有最丰富的经验。在 project_id 为 2 的项目中，employee_id 为 1 的员工拥有最丰富的经验。</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> project_id ,employee_id</span><br><span class="line"><span class="keyword">from</span>(</span><br><span class="line"><span class="keyword">select</span> project_id,e.employee_id,</span><br><span class="line"><span class="built_in">rank</span>()<span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> project_id <span class="keyword">order</span> <span class="keyword">by</span> experience_years <span class="keyword">desc</span>) rk</span><br><span class="line"><span class="keyword">from</span> Project p <span class="keyword">join</span> Employee e</span><br><span class="line"><span class="keyword">on</span> p.employee_id<span class="operator">=</span>e.employee_id </span><br><span class="line">)t1</span><br><span class="line"><span class="keyword">where</span> rk<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="1082-销售分析-I"><a href="#1082-销售分析-I" class="headerlink" title="1082. 销售分析 I "></a><a href="https://leetcode-cn.com/problems/sales-analysis-i/">1082. 销售分析 I </a></h4><p>难度简单22</p><p>SQL架构</p><p>产品表：<code>Product</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+--------------+---------+</span><br><span class="line">| Column Name  | Type    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">| product_id   | int     |</span><br><span class="line">| product_name | varchar |</span><br><span class="line">| unit_price   | int     |</span><br><span class="line">+--------------+---------+</span><br><span class="line">product_id 是这个表的主键.</span><br></pre></td></tr></table></figure><p>销售表：<code>Sales</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| seller_id   | int     |</span><br><span class="line">| product_id  | int     |</span><br><span class="line">| buyer_id    | int     |</span><br><span class="line">| sale_date   | date    |</span><br><span class="line">| quantity    | int     |</span><br><span class="line">| price       | int     |</span><br><span class="line">+------ ------+---------+</span><br><span class="line">这个表没有主键，它可以有重复的行.</span><br><span class="line">product_id 是 Product 表的外键.</span><br></pre></td></tr></table></figure><p>编写一个 SQL 查询，查询总销售额最高的销售者，如果有并列的，就都展示出来。</p><p>查询结果格式如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Product 表：</span><br><span class="line">+------------+--------------+------------+</span><br><span class="line">| product_id | product_name | unit_price |</span><br><span class="line">+------------+--------------+------------+</span><br><span class="line">| 1          | S8           | 1000       |</span><br><span class="line">| 2          | G4           | 800        |</span><br><span class="line">| 3          | iPhone       | 1400       |</span><br><span class="line">+------------+--------------+------------+</span><br><span class="line"></span><br><span class="line">Sales 表：</span><br><span class="line">+-----------+------------+----------+------------+----------+-------+</span><br><span class="line">| seller_id | product_id | buyer_id | sale_date  | quantity | price |</span><br><span class="line">+-----------+------------+----------+------------+----------+-------+</span><br><span class="line">| 1         | 1          | 1        | 2019-01-21 | 2        | 2000  |</span><br><span class="line">| 1         | 2          | 2        | 2019-02-17 | 1        | 800   |</span><br><span class="line">| 2         | 2          | 3        | 2019-06-02 | 1        | 800   |</span><br><span class="line">| 3         | 3          | 4        | 2019-05-13 | 2        | 2800  |</span><br><span class="line">+-----------+------------+----------+------------+----------+-------+</span><br><span class="line"></span><br><span class="line">Result 表：</span><br><span class="line">+-------------+</span><br><span class="line">| seller_id   |</span><br><span class="line">+-------------+</span><br><span class="line">| 1           |</span><br><span class="line">| 3           |</span><br><span class="line">+-------------+</span><br><span class="line">Id 为 1 和 3 的销售者，销售总金额都为最高的 2800。</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> seller_id</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line"><span class="keyword">select</span> seller_id ,<span class="built_in">sum</span>(price) tp,<span class="built_in">rank</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> <span class="built_in">sum</span>(price) <span class="keyword">desc</span>) rk</span><br><span class="line"><span class="keyword">from</span> Sales</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> seller_id</span><br><span class="line">)t1</span><br><span class="line"><span class="keyword">where</span> rk <span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="1083-销售分析-II"><a href="#1083-销售分析-II" class="headerlink" title="1083. 销售分析 II"></a><a href="https://leetcode-cn.com/problems/sales-analysis-ii/">1083. 销售分析 II</a></h4><p>难度简单13</p><p>SQL架构</p><p>Table: <code>Product</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+--------------+---------+</span><br><span class="line">| Column Name  | Type    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">| product_id   | int     |</span><br><span class="line">| product_name | varchar |</span><br><span class="line">| unit_price   | int     |</span><br><span class="line">+--------------+---------+</span><br><span class="line">product_id 是这张表的主键</span><br></pre></td></tr></table></figure><p>Table: <code>Sales</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| seller_id   | int     |</span><br><span class="line">| product_id  | int     |</span><br><span class="line">| buyer_id    | int     |</span><br><span class="line">| sale_date   | date    |</span><br><span class="line">| quantity    | int     |</span><br><span class="line">| price       | int     |</span><br><span class="line">+------ ------+---------+</span><br><span class="line">这个表没有主键，它可以有重复的行.</span><br><span class="line">product_id 是 Product 表的外键.</span><br></pre></td></tr></table></figure><p>编写一个 SQL 查询，查询购买了 S8 手机却没有购买 iPhone 的买家。注意这里 S8 和 iPhone 是 Product 表中的产品。</p><p>查询结果格式如下图表示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Product table:</span><br><span class="line">+------------+--------------+------------+</span><br><span class="line">| product_id | product_name | unit_price |</span><br><span class="line">+------------+--------------+------------+</span><br><span class="line">| 1          | S8           | 1000       |</span><br><span class="line">| 2          | G4           | 800        |</span><br><span class="line">| 3          | iPhone       | 1400       |</span><br><span class="line">+------------+--------------+------------+</span><br><span class="line"></span><br><span class="line">Sales table:</span><br><span class="line">+-----------+------------+----------+------------+----------+-------+</span><br><span class="line">| seller_id | product_id | buyer_id | sale_date  | quantity | price |</span><br><span class="line">+-----------+------------+----------+------------+----------+-------+</span><br><span class="line">| 1         | 1          | 1        | 2019-01-21 | 2        | 2000  |</span><br><span class="line">| 1         | 2          | 2        | 2019-02-17 | 1        | 800   |</span><br><span class="line">| 2         | 1          | 3        | 2019-06-02 | 1        | 800   |</span><br><span class="line">| 3         | 3          | 3        | 2019-05-13 | 2        | 2800  |</span><br><span class="line">+-----------+------------+----------+------------+----------+-------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+-------------+</span><br><span class="line">| buyer_id    |</span><br><span class="line">+-------------+</span><br><span class="line">| 1           |</span><br><span class="line">+-------------+</span><br><span class="line">id 为 1 的买家购买了一部 S8，但是却没有购买 iPhone，而 id 为 3 的买家却同时购买了这 2 部手机。</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> t.buyer_id <span class="keyword">from</span>(</span><br><span class="line"><span class="keyword">select</span> s.buyer_id, p.product_name</span><br><span class="line"><span class="keyword">from</span> sales s</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">product p</span><br><span class="line"><span class="keyword">on</span> s.product_id<span class="operator">=</span>p.product_id <span class="keyword">and</span> (p.product_name<span class="operator">=</span><span class="string">&#x27;S8&#x27;</span> <span class="keyword">or</span> p.product_name<span class="operator">=</span><span class="string">&#x27;iPhone&#x27;</span>)</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> s.buyer_id</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> p.product_name) <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">) t</span><br><span class="line"><span class="keyword">where</span> t.product_name<span class="operator">=</span><span class="string">&#x27;S8&#x27;</span></span><br></pre></td></tr></table></figure><p>效率低</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> s.buyer_id </span><br><span class="line"><span class="keyword">from</span> sales <span class="keyword">as</span> s <span class="keyword">left</span> <span class="keyword">join</span> product <span class="keyword">as</span> p </span><br><span class="line"><span class="keyword">on</span> s.product_id<span class="operator">=</span>p.product_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> buyer_id</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">sum</span>(p.product_name<span class="operator">=</span><span class="string">&#x27;S8&#x27;</span>)<span class="operator">&gt;</span><span class="number">0</span> <span class="keyword">and</span> <span class="built_in">sum</span>(p.product_name<span class="operator">=</span><span class="string">&#x27;iPhone&#x27;</span>)<span class="operator">=</span><span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="1084-销售分析III"><a href="#1084-销售分析III" class="headerlink" title="1084. 销售分析III"></a><a href="https://leetcode-cn.com/problems/sales-analysis-iii/">1084. 销售分析III</a></h4><p>难度简单13</p><p>SQL架构</p><p>Table: <code>Product</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+--------------+---------+</span><br><span class="line">| Column Name  | Type    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">| product_id   | int     |</span><br><span class="line">| product_name | varchar |</span><br><span class="line">| unit_price   | int     |</span><br><span class="line">+--------------+---------+</span><br><span class="line">product_id 是这个表的主键</span><br></pre></td></tr></table></figure><p>Table: <code>Sales</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| seller_id   | int     |</span><br><span class="line">| product_id  | int     |</span><br><span class="line">| buyer_id    | int     |</span><br><span class="line">| sale_date   | date    |</span><br><span class="line">| quantity    | int     |</span><br><span class="line">| price       | int     |</span><br><span class="line">+------ ------+---------+</span><br><span class="line">这个表没有主键，它可以有重复的行.</span><br><span class="line">product_id 是 Product 表的外键.</span><br></pre></td></tr></table></figure><p>编写一个SQL查询，报告2019年春季才售出的产品。即<strong>仅</strong>在<strong>2019-01-01</strong>至<strong>2019-03-31</strong>（含）之间出售的商品。</p><p>查询结果格式如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Product table:</span><br><span class="line">+------------+--------------+------------+</span><br><span class="line">| product_id | product_name | unit_price |</span><br><span class="line">+------------+--------------+------------+</span><br><span class="line">| 1          | S8           | 1000       |</span><br><span class="line">| 2          | G4           | 800        |</span><br><span class="line">| 3          | iPhone       | 1400       |</span><br><span class="line">+------------+--------------+------------+</span><br><span class="line"></span><br><span class="line">Sales table:</span><br><span class="line">+-----------+------------+----------+------------+----------+-------+</span><br><span class="line">| seller_id | product_id | buyer_id | sale_date  | quantity | price |</span><br><span class="line">+-----------+------------+----------+------------+----------+-------+</span><br><span class="line">| 1         | 1          | 1        | 2019-01-21 | 2        | 2000  |</span><br><span class="line">| 1         | 2          | 2        | 2019-02-17 | 1        | 800   |</span><br><span class="line">| 2         | 2          | 3        | 2019-06-02 | 1        | 800   |</span><br><span class="line">| 3         | 3          | 4        | 2019-05-13 | 2        | 2800  |</span><br><span class="line">+-----------+------------+----------+------------+----------+-------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+-------------+--------------+</span><br><span class="line">| product_id  | product_name |</span><br><span class="line">+-------------+--------------+</span><br><span class="line">| 1           | S8           |</span><br><span class="line">+-------------+--------------+</span><br><span class="line">id为1的产品仅在2019年春季销售，其他两个产品在之后销售。</span><br></pre></td></tr></table></figure><p>876ms</p><p>正常解法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> product_id, product_name  </span><br><span class="line"><span class="keyword">from</span> product </span><br><span class="line"><span class="keyword">where</span> product_id <span class="keyword">not</span> <span class="keyword">in</span> (</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> product_id <span class="keyword">from</span> sales </span><br><span class="line"><span class="keyword">where</span> sale_date <span class="operator">&gt;</span> <span class="string">&#x27;2019-03-31&#x27;</span> <span class="keyword">or</span> sale_date <span class="operator">&lt;</span> <span class="string">&#x27;2019-01-01&#x27;</span>)</span><br></pre></td></tr></table></figure><p>867ms</p><p>sum = count</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> product_id, product_name</span><br><span class="line"><span class="keyword">from</span> Sales <span class="keyword">join</span> Product</span><br><span class="line"><span class="keyword">using</span>(product_id)</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> product_id</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">sum</span>(sale_date <span class="keyword">between</span> &quot;2019-01-01&quot; <span class="keyword">and</span> &quot;2019-03-31&quot;) <span class="operator">=</span> <span class="built_in">count</span>(sale_date)</span><br></pre></td></tr></table></figure><p>987ms</p><p>sum 为0 类似于第一种解法，计算了sum效率就低了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> p.product_id, p.product_name</span><br><span class="line"><span class="keyword">from</span> sales s, product p</span><br><span class="line"><span class="keyword">where</span> s.product_id <span class="operator">=</span> p.product_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> s.product_id</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">sum</span>(s.sale_date<span class="operator">&gt;</span> <span class="string">&#x27;2019-03-31&#x27;</span>)<span class="operator">=</span><span class="number">0</span> <span class="keyword">and</span> <span class="built_in">sum</span>(s.sale_date <span class="operator">&lt;</span> <span class="string">&#x27;2019-01-01&#x27;</span>) <span class="operator">=</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>上一解法sum换成max</p><p>859ms</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> p.product_id, p.product_name</span><br><span class="line"><span class="keyword">from</span> sales s, product p</span><br><span class="line"><span class="keyword">where</span> s.product_id <span class="operator">=</span> p.product_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> s.product_id</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">min</span>(s.sale_date)<span class="operator">&gt;=</span><span class="string">&#x27;2019-01-01&#x27;</span> <span class="keyword">and</span> <span class="built_in">max</span>(s.sale_date) <span class="operator">&lt;=</span> <span class="string">&#x27;2019-03-31&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="1097-游戏玩法分析-V"><a href="#1097-游戏玩法分析-V" class="headerlink" title="1097. 游戏玩法分析 V"></a><a href="https://leetcode-cn.com/problems/game-play-analysis-v/">1097. 游戏玩法分析 V</a></h4><p>难度困难</p><p>SQL架构</p><p><code>Activity</code> 活动记录表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+--------------+---------+</span><br><span class="line">| Column Name  | Type    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">| player_id    | int     |</span><br><span class="line">| device_id    | int     |</span><br><span class="line">| event_date   | date    |</span><br><span class="line">| games_played | int     |</span><br><span class="line">+--------------+---------+</span><br><span class="line">（player_id，event_date）是此表的主键</span><br><span class="line">这张表显示了某些游戏的玩家的活动情况</span><br><span class="line">每一行是一个玩家的记录，他在某一天使用某个设备注销之前登录并玩了很多游戏（可能是 0）</span><br></pre></td></tr></table></figure><p>我们将玩家的安装日期定义为该玩家的第一个登录日。</p><p>我们还将某个日期 <code>X</code> 的第 1 天留存时间定义为安装日期为 <code>X</code> 的玩家的数量，他们在 <code>X</code> 之后的一天重新登录，除以安装日期为 <code>X</code> 的玩家的数量，四舍五入到小数点后两位。</p><p>编写一个 SQL 查询，报告每个安装日期、当天安装游戏的玩家数量和第一天的留存时间。</p><p>查询结果格式如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Activity 表：</span><br><span class="line">+-----------+-----------+------------+--------------+</span><br><span class="line">| player_id | device_id | event_date | games_played |</span><br><span class="line">+-----------+-----------+------------+--------------+</span><br><span class="line">| 1         | 2         | 2016-03-01 | 5            |</span><br><span class="line">| 1         | 2         | 2016-03-02 | 6            |</span><br><span class="line">| 2         | 3         | 2017-06-25 | 1            |</span><br><span class="line">| 3         | 1         | 2016-03-01 | 0            |</span><br><span class="line">| 3         | 4         | 2016-07-03 | 5            |</span><br><span class="line">+-----------+-----------+------------+--------------+</span><br><span class="line"></span><br><span class="line">Result 表：</span><br><span class="line">+------------+----------+----------------+</span><br><span class="line">| install_dt | installs | Day1_retention |</span><br><span class="line">+------------+----------+----------------+</span><br><span class="line">| 2016-03-01 | 2        | 0.50           |</span><br><span class="line">| 2017-06-25 | 1        | 0.00           |</span><br><span class="line">+------------+----------+----------------+</span><br><span class="line">玩家 1 和 3 在 2016-03-01 安装了游戏，但只有玩家 1 在 2016-03-02 重新登录，所以 2016-03-01 的第一天留存时间是 1/2=0.50</span><br><span class="line">玩家 2 在 2017-06-25 安装了游戏，但在 2017-06-26 没有重新登录，因此 2017-06-25 的第一天留存时间为 0/1=0.00</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> install_dt,<span class="built_in">count</span>(<span class="keyword">distinct</span> player_id)installs,</span><br><span class="line">       round(<span class="built_in">sum</span>(if(datediff(event_date,install_dt)<span class="operator">=</span><span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>))<span class="operator">/</span><span class="built_in">count</span>(<span class="keyword">distinct</span> player_id),<span class="number">2</span>) Day1_retention </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> <span class="operator">*</span>,<span class="built_in">min</span>(event_date) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> player_id) install_dt</span><br><span class="line">    <span class="keyword">from</span> Activity</span><br><span class="line">)t1   </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> install_dt</span><br></pre></td></tr></table></figure><h4 id="1098-小众书籍"><a href="#1098-小众书籍" class="headerlink" title="1098. 小众书籍"></a><a href="https://leetcode-cn.com/problems/unpopular-books/">1098. 小众书籍</a></h4><p>难度中等</p><p>SQL架构</p><p>书籍表 <code>Books</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+----------------+---------+</span><br><span class="line">| Column Name    | Type    |</span><br><span class="line">+----------------+---------+</span><br><span class="line">| book_id        | int     |</span><br><span class="line">| name           | varchar |</span><br><span class="line">| available_from | date    |</span><br><span class="line">+----------------+---------+</span><br><span class="line">book_id 是这个表的主键。</span><br></pre></td></tr></table></figure><p>订单表 <code>Orders</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+----------------+---------+</span><br><span class="line">| Column Name    | Type    |</span><br><span class="line">+----------------+---------+</span><br><span class="line">| order_id       | int     |</span><br><span class="line">| book_id        | int     |</span><br><span class="line">| quantity       | int     |</span><br><span class="line">| dispatch_date  | date    |</span><br><span class="line">+----------------+---------+</span><br><span class="line">order_id 是这个表的主键。</span><br><span class="line">book_id  是 Books 表的外键。</span><br></pre></td></tr></table></figure><p>你需要写一段 SQL 命令，筛选出过去一年中订单总量 <strong>少于10本</strong> 的 <strong>书籍</strong> 。</p><p>注意：<strong>不考虑</strong> 上架（available from）距今 <strong>不满一个月</strong> 的书籍。并且 <strong>假设今天是</strong> <strong>2019-06-23</strong> 。</p><p> Write an SQL query that reports the books that have sold less than 10 copies in the last year, excluding books that have been available for less than 1 month from today. Assume today is 2019-06-23.</p><p>下面是样例输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Books 表：</span><br><span class="line">+---------+--------------------+----------------+</span><br><span class="line">| book_id | name               | available_from |</span><br><span class="line">+---------+--------------------+----------------+</span><br><span class="line">| 1       | &quot;Kalila And Demna&quot; | 2010-01-01     |</span><br><span class="line">| 2       | &quot;28 Letters&quot;       | 2012-05-12     |</span><br><span class="line">| 3       | &quot;The Hobbit&quot;       | 2019-06-10     |</span><br><span class="line">| 4       | &quot;13 Reasons Why&quot;   | 2019-06-01     |</span><br><span class="line">| 5       | &quot;The Hunger Games&quot; | 2008-09-21     |</span><br><span class="line">+---------+--------------------+----------------+</span><br><span class="line"></span><br><span class="line">Orders 表：</span><br><span class="line">+----------+---------+----------+---------------+</span><br><span class="line">| order_id | book_id | quantity | dispatch_date |</span><br><span class="line">+----------+---------+----------+---------------+</span><br><span class="line">| 1        | 1       | 2        | 2018-07-26    |</span><br><span class="line">| 2        | 1       | 1        | 2018-11-05    |</span><br><span class="line">| 3        | 3       | 8        | 2019-06-11    |</span><br><span class="line">| 4        | 4       | 6        | 2019-06-05    |</span><br><span class="line">| 5        | 4       | 5        | 2019-06-20    |</span><br><span class="line">| 6        | 5       | 9        | 2009-02-02    |</span><br><span class="line">| 7        | 5       | 8        | 2010-04-13    |</span><br><span class="line">+----------+---------+----------+---------------+</span><br><span class="line"></span><br><span class="line">Result 表：</span><br><span class="line">+-----------+--------------------+</span><br><span class="line">| book_id   | name               |</span><br><span class="line">+-----------+--------------------+</span><br><span class="line">| 1         | &quot;Kalila And Demna&quot; |</span><br><span class="line">| 2         | &quot;28 Letters&quot;       |</span><br><span class="line">| 5         | &quot;The Hunger Games&quot; |</span><br><span class="line">+-----------+--------------------+</span><br></pre></td></tr></table></figure><blockquote><p>这题中英文 都有歧义，看结果进行分析</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.book_id, a.name </span><br><span class="line"><span class="keyword">FROM</span> books a <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> orders b <span class="keyword">ON</span> a.book_id<span class="operator">=</span>b.book_id </span><br><span class="line"><span class="keyword">AND</span> dispatch_date <span class="keyword">BETWEEN</span> DATE_ADD(<span class="string">&#x27;2019-06-23&#x27;</span>, <span class="type">INTERVAL</span> <span class="number">-1</span> <span class="keyword">YEAR</span>) <span class="keyword">AND</span> <span class="string">&#x27;2019-06-23&#x27;</span> </span><br><span class="line"><span class="keyword">WHERE</span> a.available_from <span class="operator">&lt;=</span> DATE_ADD(<span class="string">&#x27;2019-06-23&#x27;</span>,<span class="type">INTERVAL</span> <span class="number">-1</span> <span class="keyword">MONTH</span>) </span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> a.book_id, a.name </span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">SUM</span>(IFNULL(b.quantity,<span class="number">0</span>)) <span class="operator">&lt;</span> <span class="number">10</span> </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> a.book_id;</span><br></pre></td></tr></table></figure><blockquote><p>此题有坑，首先订单近一年，再者quantity为null，还有近一月出版，sum不是订单是本数</p><p>还有就是date_add这个函数在hive里和mysql语法上有点小区别</p></blockquote><h4 id="1107-每日新用户统计"><a href="#1107-每日新用户统计" class="headerlink" title="1107. 每日新用户统计"></a><a href="https://leetcode-cn.com/problems/new-users-daily-count/">1107. 每日新用户统计</a></h4><p>难度中等</p><p>SQL架构</p><p><code>Traffic</code> 表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| user_id       | int     |</span><br><span class="line">| activity      | enum    |</span><br><span class="line">| activity_date | date    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">该表没有主键，它可能有重复的行。</span><br><span class="line">activity 列是 ENUM 类型，可能取 (&#x27;login&#x27;, &#x27;logout&#x27;, &#x27;jobs&#x27;, &#x27;groups&#x27;, &#x27;homepage&#x27;) 几个值之一。</span><br></pre></td></tr></table></figure><p>编写一个 SQL 查询，以查询从今天起最多 90 天内，每个日期该日期首次登录的用户数。假设今天是 <strong>2019-06-30</strong>.</p><p>查询结果格式如下例所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Traffic 表：</span><br><span class="line">+---------+----------+---------------+</span><br><span class="line">| user_id | activity | activity_date |</span><br><span class="line">+---------+----------+---------------+</span><br><span class="line">| 1       | login    | 2019-05-01    |</span><br><span class="line">| 1       | homepage | 2019-05-01    |</span><br><span class="line">| 1       | logout   | 2019-05-01    |</span><br><span class="line">| 2       | login    | 2019-06-21    |</span><br><span class="line">| 2       | logout   | 2019-06-21    |</span><br><span class="line">| 3       | login    | 2019-01-01    |</span><br><span class="line">| 3       | jobs     | 2019-01-01    |</span><br><span class="line">| 3       | logout   | 2019-01-01    |</span><br><span class="line">| 4       | login    | 2019-06-21    |</span><br><span class="line">| 4       | groups   | 2019-06-21    |</span><br><span class="line">| 4       | logout   | 2019-06-21    |</span><br><span class="line">| 5       | login    | 2019-03-01    |</span><br><span class="line">| 5       | logout   | 2019-03-01    |</span><br><span class="line">| 5       | login    | 2019-06-21    |</span><br><span class="line">| 5       | logout   | 2019-06-21    |</span><br><span class="line">+---------+----------+---------------+</span><br><span class="line"></span><br><span class="line">Result 表：</span><br><span class="line">+------------+-------------+</span><br><span class="line">| login_date | user_count  |</span><br><span class="line">+------------+-------------+</span><br><span class="line">| 2019-05-01 | 1           |</span><br><span class="line">| 2019-06-21 | 2           |</span><br><span class="line">+------------+-------------+</span><br><span class="line">请注意，我们只关心用户数非零的日期.</span><br><span class="line">ID 为 5 的用户第一次登陆于 2019-03-01，因此他不算在 2019-06-21 的的统计内。</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> login_date,<span class="built_in">count</span>(<span class="operator">*</span>) user_count</span><br><span class="line"><span class="keyword">from</span>(</span><br><span class="line">    <span class="keyword">select</span> user_id,<span class="built_in">min</span>(activity_date) login_date</span><br><span class="line">    <span class="keyword">from</span> Traffic</span><br><span class="line">    <span class="keyword">where</span> activity <span class="operator">=</span> <span class="string">&#x27;login&#x27;</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> user_id</span><br><span class="line">    <span class="keyword">having</span> login_date<span class="operator">&gt;=</span> DATE_ADD(<span class="string">&#x27;2019-06-30&#x27;</span>,<span class="type">INTERVAL</span> <span class="number">-90</span> <span class="keyword">DAY</span>) </span><br><span class="line">)t1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> login_date</span><br></pre></td></tr></table></figure><h4 id="1112-每位学生的最高成绩"><a href="#1112-每位学生的最高成绩" class="headerlink" title="1112. 每位学生的最高成绩"></a><a href="https://leetcode-cn.com/problems/highest-grade-for-each-student/">1112. 每位学生的最高成绩</a></h4><p>难度中等</p><p>SQL架构</p><p>表：<code>Enrollments</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| student_id    | int     |</span><br><span class="line">| course_id     | int     |</span><br><span class="line">| grade         | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">(student_id, course_id) 是该表的主键。</span><br></pre></td></tr></table></figure><p>编写一个 SQL 查询，查询每位学生获得的最高成绩和它所对应的科目，若科目成绩并列，取 <code>course_id</code> 最小的一门。查询结果需按 <code>student_id</code> 增序进行排序。</p><p>查询结果格式如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Enrollments 表：</span><br><span class="line">+------------+-------------------+</span><br><span class="line">| student_id | course_id | grade |</span><br><span class="line">+------------+-----------+-------+</span><br><span class="line">| 2          | 2         | 95    |</span><br><span class="line">| 2          | 3         | 95    |</span><br><span class="line">| 1          | 1         | 90    |</span><br><span class="line">| 1          | 2         | 99    |</span><br><span class="line">| 3          | 1         | 80    |</span><br><span class="line">| 3          | 2         | 75    |</span><br><span class="line">| 3          | 3         | 82    |</span><br><span class="line">+------------+-----------+-------+</span><br><span class="line"></span><br><span class="line">Result 表：</span><br><span class="line">+------------+-------------------+</span><br><span class="line">| student_id | course_id | grade |</span><br><span class="line">+------------+-----------+-------+</span><br><span class="line">| 1          | 2         | 99    |</span><br><span class="line">| 2          | 2         | 95    |</span><br><span class="line">| 3          | 3         | 82    |</span><br><span class="line">+------------+-----------+-------+</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> student_id,course_id ,grade</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line"><span class="keyword">select</span> student_id,course_id ,grade,</span><br><span class="line"><span class="built_in">rank</span>()<span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> student_id <span class="keyword">order</span> <span class="keyword">by</span> grade <span class="keyword">desc</span>,course_id) rK</span><br><span class="line"><span class="keyword">from</span> Enrollments</span><br><span class="line">)t1</span><br><span class="line"><span class="keyword">where</span> rk <span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="1113-报告的记录"><a href="#1113-报告的记录" class="headerlink" title="1113. 报告的记录"></a><a href="https://leetcode-cn.com/problems/reported-posts/">1113. 报告的记录</a></h4><p>难度简单</p><p>SQL架构</p><p>动作表：<code>Actions</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| user_id       | int     |</span><br><span class="line">| post_id       | int     |</span><br><span class="line">| action_date   | date    | </span><br><span class="line">| action        | enum    |</span><br><span class="line">| extra         | varchar |</span><br><span class="line">+---------------+---------+</span><br><span class="line">此表没有主键，所以可能会有重复的行。</span><br><span class="line">action 字段是 ENUM 类型的，包含:(&#x27;view&#x27;, &#x27;like&#x27;, &#x27;reaction&#x27;, &#x27;comment&#x27;, &#x27;report&#x27;, &#x27;share&#x27;)</span><br><span class="line">extra 字段是可选的信息（可能为 null），其中的信息例如有：1.报告理由(a reason for report) 2.反应类型(a type of reaction)</span><br></pre></td></tr></table></figure><p>编写一条SQL，查询每种 <em><strong>报告理由</strong></em>（report reason）在昨天的报告数量。假设今天是 <strong>2019-07-05</strong>。</p><p>查询及结果的格式示例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Actions table:</span><br><span class="line">+---------+---------+-------------+--------+--------+</span><br><span class="line">| user_id | post_id | action_date | action | extra  |</span><br><span class="line">+---------+---------+-------------+--------+--------+</span><br><span class="line">| 1       | 1       | 2019-07-01  | view   | null   |</span><br><span class="line">| 1       | 1       | 2019-07-01  | like   | null   |</span><br><span class="line">| 1       | 1       | 2019-07-01  | share  | null   |</span><br><span class="line">| 2       | 4       | 2019-07-04  | view   | null   |</span><br><span class="line">| 2       | 4       | 2019-07-04  | report | spam   |</span><br><span class="line">| 3       | 4       | 2019-07-04  | view   | null   |</span><br><span class="line">| 3       | 4       | 2019-07-04  | report | spam   |</span><br><span class="line">| 4       | 3       | 2019-07-02  | view   | null   |</span><br><span class="line">| 4       | 3       | 2019-07-02  | report | spam   |</span><br><span class="line">| 5       | 2       | 2019-07-04  | view   | null   |</span><br><span class="line">| 5       | 2       | 2019-07-04  | report | racism |</span><br><span class="line">| 5       | 5       | 2019-07-04  | view   | null   |</span><br><span class="line">| 5       | 5       | 2019-07-04  | report | racism |</span><br><span class="line">+---------+---------+-------------+--------+--------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+---------------+--------------+</span><br><span class="line">| report_reason | report_count |</span><br><span class="line">+---------------+--------------+</span><br><span class="line">| spam          | 1            |</span><br><span class="line">| racism        | 2            |</span><br><span class="line">+---------------+--------------+ </span><br><span class="line">注意，我们只关心报告数量非零的结果。</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">extra <span class="keyword">AS</span> report_reason,</span><br><span class="line"><span class="built_in">COUNT</span>(<span class="keyword">distinct</span> post_id) <span class="keyword">AS</span> report_count</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">Actions</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">`action` <span class="operator">=</span> <span class="string">&#x27;report&#x27;</span> <span class="keyword">AND</span> action_date <span class="operator">=</span> date_add(<span class="string">&#x27;2019-07-05&#x27;</span>,<span class="type">Interval</span> <span class="number">-1</span> <span class="keyword">day</span>)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span></span><br><span class="line">extra;</span><br></pre></td></tr></table></figure><h4 id="1132-报告的记录-II"><a href="#1132-报告的记录-II" class="headerlink" title="1132. 报告的记录 II"></a><a href="https://leetcode-cn.com/problems/reported-posts-ii/">1132. 报告的记录 II</a></h4><p>难度中等</p><p>SQL架构</p><p>动作表： <code>Actions</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| user_id       | int     |</span><br><span class="line">| post_id       | int     |</span><br><span class="line">| action_date   | date    |</span><br><span class="line">| action        | enum    |</span><br><span class="line">| extra         | varchar |</span><br><span class="line">+---------------+---------+</span><br><span class="line">这张表没有主键，并有可能存在重复的行。</span><br><span class="line">action 列的类型是 ENUM，可能的值为 (&#x27;view&#x27;, &#x27;like&#x27;, &#x27;reaction&#x27;, &#x27;comment&#x27;, &#x27;report&#x27;, &#x27;share&#x27;)。</span><br><span class="line">extra 列拥有一些可选信息，例如：报告理由（a reason for report）或反应类型（a type of reaction）等。</span><br></pre></td></tr></table></figure><p>移除表： <code>Removals</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| post_id       | int     |</span><br><span class="line">| remove_date   | date    | </span><br><span class="line">+---------------+---------+</span><br><span class="line">这张表的主键是 post_id。</span><br><span class="line">这张表的每一行表示一个被移除的帖子，原因可能是由于被举报或被管理员审查。</span><br></pre></td></tr></table></figure><p>编写一段 SQL 来查找：在被报告为垃圾广告的帖子中，被移除的帖子的每日平均占比，<strong>四舍五入到小数点后 2 位</strong>。</p><p>查询结果的格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">Actions table:</span><br><span class="line">+---------+---------+-------------+--------+--------+</span><br><span class="line">| user_id | post_id | action_date | action | extra  |</span><br><span class="line">+---------+---------+-------------+--------+--------+</span><br><span class="line">| 1       | 1       | 2019-07-01  | view   | null   |</span><br><span class="line">| 1       | 1       | 2019-07-01  | like   | null   |</span><br><span class="line">| 1       | 1       | 2019-07-01  | share  | null   |</span><br><span class="line">| 2       | 2       | 2019-07-04  | view   | null   |</span><br><span class="line">| 2       | 2       | 2019-07-04  | report | spam   |</span><br><span class="line">| 3       | 4       | 2019-07-04  | view   | null   |</span><br><span class="line">| 3       | 4       | 2019-07-04  | report | spam   |</span><br><span class="line">| 4       | 3       | 2019-07-02  | view   | null   |</span><br><span class="line">| 4       | 3       | 2019-07-02  | report | spam   |</span><br><span class="line">| 5       | 2       | 2019-07-03  | view   | null   |</span><br><span class="line">| 5       | 2       | 2019-07-03  | report | racism |</span><br><span class="line">| 5       | 5       | 2019-07-03  | view   | null   |</span><br><span class="line">| 5       | 5       | 2019-07-03  | report | racism |</span><br><span class="line">+---------+---------+-------------+--------+--------+</span><br><span class="line"></span><br><span class="line">Removals table:</span><br><span class="line">+---------+-------------+</span><br><span class="line">| post_id | remove_date |</span><br><span class="line">+---------+-------------+</span><br><span class="line">| 2       | 2019-07-20  |</span><br><span class="line">| 3       | 2019-07-18  |</span><br><span class="line">+---------+-------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+-----------------------+</span><br><span class="line">| average_daily_percent |</span><br><span class="line">+-----------------------+</span><br><span class="line">| 75.00                 |</span><br><span class="line">+-----------------------+</span><br><span class="line">2019-07-04 的垃圾广告移除率是 50%，因为有两张帖子被报告为垃圾广告，但只有一个得到移除。</span><br><span class="line">2019-07-02 的垃圾广告移除率是 100%，因为有一张帖子被举报为垃圾广告并得到移除。</span><br><span class="line">其余几天没有收到垃圾广告的举报，因此平均值为：(50 + 100) / 2 = 75%</span><br><span class="line">注意，输出仅需要一个平均值即可，我们并不关注移除操作的日期。</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ROUND(<span class="built_in">AVG</span>(proportion) <span class="operator">*</span> <span class="number">100</span>, <span class="number">2</span>) <span class="keyword">AS</span> average_daily_percent  </span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> actions.action_date, <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> removals.post_id)<span class="operator">/</span><span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> actions.post_id) <span class="keyword">AS</span> proportion</span><br><span class="line">    <span class="keyword">FROM</span> actions</span><br><span class="line">    <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> removals</span><br><span class="line">    <span class="keyword">ON</span> actions.post_id <span class="operator">=</span> removals.post_id</span><br><span class="line">    <span class="keyword">WHERE</span> extra <span class="operator">=</span> <span class="string">&#x27;spam&#x27;</span> </span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> actions.action_date</span><br><span class="line">) a</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>要理解spam的含义</p></blockquote><h4 id="1126-查询活跃业务"><a href="#1126-查询活跃业务" class="headerlink" title="1126. 查询活跃业务"></a><a href="https://leetcode-cn.com/problems/active-businesses/">1126. 查询活跃业务</a></h4><p>难度中等</p><p>SQL架构</p><p>事件表：<code>Events</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| business_id   | int     |</span><br><span class="line">| event_type    | varchar |</span><br><span class="line">| occurences    | int     | </span><br><span class="line">+---------------+---------+</span><br><span class="line">此表的主键是 (business_id, event_type)。</span><br><span class="line">表中的每一行记录了某种类型的事件在某些业务中多次发生的信息。</span><br></pre></td></tr></table></figure><p>写一段 SQL 来查询所有活跃的业务。</p><p>如果一个业务的某个事件类型的发生次数大于此事件类型在所有业务中的平均发生次数，并且该业务至少有两个这样的事件类型，那么该业务就可被看做是活跃业务。</p><p>查询结果格式如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Events table:</span><br><span class="line">+-------------+------------+------------+</span><br><span class="line">| business_id | event_type | occurences |</span><br><span class="line">+-------------+------------+------------+</span><br><span class="line">| 1           | reviews    | 7          |</span><br><span class="line">| 3           | reviews    | 3          |</span><br><span class="line">| 1           | ads        | 11         |</span><br><span class="line">| 2           | ads        | 7          |</span><br><span class="line">| 3           | ads        | 6          |</span><br><span class="line">| 1           | page views | 3          |</span><br><span class="line">| 2           | page views | 12         |</span><br><span class="line">+-------------+------------+------------+</span><br><span class="line"></span><br><span class="line">结果表</span><br><span class="line">+-------------+</span><br><span class="line">| business_id |</span><br><span class="line">+-------------+</span><br><span class="line">| 1           |</span><br><span class="line">+-------------+ </span><br><span class="line">&#x27;reviews&#x27;、 &#x27;ads&#x27; 和 &#x27;page views&#x27; 的总平均发生次数分别是 (7+3)/2=5, (11+7+6)/3=8, (3+12)/2=7.5。</span><br><span class="line">id 为 1 的业务有 7 个 &#x27;reviews&#x27; 事件（大于 5）和 11 个 &#x27;ads&#x27; 事件（大于 8），所以它是活跃业务。</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> business_id</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> business_id,occurences,</span><br><span class="line">    <span class="built_in">avg</span>(occurences) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> event_type) avo</span><br><span class="line">    <span class="keyword">from</span> Events</span><br><span class="line">)t1</span><br><span class="line"><span class="keyword">where</span>  occurences <span class="operator">&gt;</span> avo</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> business_id</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>)<span class="operator">&gt;=</span><span class="number">2</span></span><br></pre></td></tr></table></figure><h4 id="1127-用户购买平台"><a href="#1127-用户购买平台" class="headerlink" title="1127. 用户购买平台"></a><a href="https://leetcode-cn.com/problems/user-purchase-platform/">1127. 用户购买平台</a></h4><p>难度困难</p><p>SQL架构</p><p>支出表: <code>Spending</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| user_id     | int     |</span><br><span class="line">| spend_date  | date    |</span><br><span class="line">| platform    | enum    | </span><br><span class="line">| amount      | int     |</span><br><span class="line">+-------------+---------+</span><br><span class="line">这张表记录了用户在一个在线购物网站的支出历史，该在线购物平台同时拥有桌面端（&#x27;desktop&#x27;）和手机端（&#x27;mobile&#x27;）的应用程序。</span><br><span class="line">这张表的主键是 (user_id, spend_date, platform)。</span><br><span class="line">平台列 platform 是一种 ENUM ，类型为（&#x27;desktop&#x27;, &#x27;mobile&#x27;）。</span><br></pre></td></tr></table></figure><p>写一段 SQL 来查找每天 <strong>仅</strong> 使用手机端用户、<strong>仅</strong> 使用桌面端用户和 <strong>同时</strong> 使用桌面端和手机端的用户人数和总支出金额。</p><p>查询结果格式如下例所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Spending table:</span><br><span class="line">+---------+------------+----------+--------+</span><br><span class="line">| user_id | spend_date | platform | amount |</span><br><span class="line">+---------+------------+----------+--------+</span><br><span class="line">| 1       | 2019-07-01 | mobile   | 100    |</span><br><span class="line">| 1       | 2019-07-01 | desktop  | 100    |</span><br><span class="line">| 2       | 2019-07-01 | mobile   | 100    |</span><br><span class="line">| 2       | 2019-07-02 | mobile   | 100    |</span><br><span class="line">| 3       | 2019-07-01 | desktop  | 100    |</span><br><span class="line">| 3       | 2019-07-02 | desktop  | 100    |</span><br><span class="line">+---------+------------+----------+--------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+------------+----------+--------------+-------------+</span><br><span class="line">| spend_date | platform | total_amount | total_users |</span><br><span class="line">+------------+----------+--------------+-------------+</span><br><span class="line">| 2019-07-01 | desktop  | 100          | 1           |</span><br><span class="line">| 2019-07-01 | mobile   | 100          | 1           |</span><br><span class="line">| 2019-07-01 | both     | 200          | 1           |</span><br><span class="line">| 2019-07-02 | desktop  | 100          | 1           |</span><br><span class="line">| 2019-07-02 | mobile   | 100          | 1           |</span><br><span class="line">| 2019-07-02 | both     | 0            | 0           |</span><br><span class="line">+------------+----------+--------------+-------------+ </span><br><span class="line">在 2019-07-01, 用户1 同时 使用桌面端和手机端购买, 用户2 仅 使用了手机端购买，而用户3 仅 使用了桌面端购买。</span><br><span class="line">在 2019-07-02, 用户2 仅 使用了手机端购买, 用户3 仅 使用了桌面端购买，且没有用户 同时 使用桌面端和手机端购买。</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    spend_date, platform,</span><br><span class="line">    ifnull(<span class="built_in">sum</span>(total_am),<span class="number">0</span>) total_amount,</span><br><span class="line">    ifnull(<span class="built_in">sum</span>(total_u),<span class="number">0</span>) total_users</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> p.spend_date, p.platform, t.total_am, t.total_u</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">distinct</span> spend_date, &quot;desktop&quot; platform <span class="keyword">from</span> Spending</span><br><span class="line">        <span class="keyword">union</span></span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">distinct</span> spend_date, &quot;mobile&quot; platform <span class="keyword">from</span> Spending</span><br><span class="line">        <span class="keyword">union</span></span><br><span class="line">        <span class="keyword">select</span> <span class="keyword">distinct</span> spend_date, &quot;both&quot; platform <span class="keyword">from</span> Spending</span><br><span class="line">    ) p</span><br><span class="line">    <span class="keyword">left</span> <span class="keyword">join</span></span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">select</span> spend_date, </span><br><span class="line">            if(<span class="built_in">count</span>(<span class="keyword">distinct</span> platform)<span class="operator">=</span><span class="number">1</span>, platform, <span class="string">&#x27;both&#x27;</span>) plat,</span><br><span class="line">            <span class="built_in">sum</span>(amount) total_am,</span><br><span class="line">            <span class="built_in">count</span>(<span class="keyword">distinct</span> user_id) total_u</span><br><span class="line">        <span class="keyword">from</span> Spending</span><br><span class="line">        <span class="keyword">group</span> <span class="keyword">by</span> spend_date, user_id</span><br><span class="line">    ) t</span><br><span class="line">    <span class="keyword">on</span> p.platform <span class="operator">=</span> t.plat <span class="keyword">and</span> p.spend_date <span class="operator">=</span> t.spend_date</span><br><span class="line">) temp</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> spend_date, platform</span><br></pre></td></tr></table></figure><blockquote><p>必须保证 desktop mobile both的顺序 ，所以 先列出三个字段</p></blockquote><h4 id="1141-查询近30天活跃用户数"><a href="#1141-查询近30天活跃用户数" class="headerlink" title="1141. 查询近30天活跃用户数"></a><a href="https://leetcode-cn.com/problems/user-activity-for-the-past-30-days-i/">1141. 查询近30天活跃用户数</a></h4><p>难度简单</p><p>SQL架构</p><p>活动记录表：<code>Activity</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| user_id       | int     |</span><br><span class="line">| session_id    | int     |</span><br><span class="line">| activity_date | date    |</span><br><span class="line">| activity_type | enum    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">该表是用户在社交网站的活动记录。</span><br><span class="line">该表没有主键，可能包含重复数据。</span><br><span class="line">activity_type 字段为以下四种值 (&#x27;open_session&#x27;, &#x27;end_session&#x27;, &#x27;scroll_down&#x27;, &#x27;send_message&#x27;)。</span><br><span class="line">每个 session_id 只属于一个用户。</span><br></pre></td></tr></table></figure><p>请写SQL查询出截至 <strong>2019-07-27</strong>（包含2019-07-27）<strong>，近</strong> 30天的每日活跃用户数（当天只要有一条活动记录，即为活跃用户）。</p><p>查询结果示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Activity table:</span><br><span class="line">+---------+------------+---------------+---------------+</span><br><span class="line">| user_id | session_id | activity_date | activity_type |</span><br><span class="line">+---------+------------+---------------+---------------+</span><br><span class="line">| 1       | 1          | 2019-07-20    | open_session  |</span><br><span class="line">| 1       | 1          | 2019-07-20    | scroll_down   |</span><br><span class="line">| 1       | 1          | 2019-07-20    | end_session   |</span><br><span class="line">| 2       | 4          | 2019-07-20    | open_session  |</span><br><span class="line">| 2       | 4          | 2019-07-21    | send_message  |</span><br><span class="line">| 2       | 4          | 2019-07-21    | end_session   |</span><br><span class="line">| 3       | 2          | 2019-07-21    | open_session  |</span><br><span class="line">| 3       | 2          | 2019-07-21    | send_message  |</span><br><span class="line">| 3       | 2          | 2019-07-21    | end_session   |</span><br><span class="line">| 4       | 3          | 2019-06-25    | open_session  |</span><br><span class="line">| 4       | 3          | 2019-06-25    | end_session   |</span><br><span class="line">+---------+------------+---------------+---------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+------------+--------------+ </span><br><span class="line">| day        | active_users |</span><br><span class="line">+------------+--------------+ </span><br><span class="line">| 2019-07-20 | 2            |</span><br><span class="line">| 2019-07-21 | 2            |</span><br><span class="line">+------------+--------------+ </span><br><span class="line">非活跃用户的记录不需要展示。</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> activity_date <span class="keyword">day</span>,<span class="built_in">count</span>(<span class="keyword">distinct</span> user_id) active_users</span><br><span class="line"><span class="keyword">from</span> Activity</span><br><span class="line"><span class="keyword">where</span> activity_date <span class="operator">&gt;</span> date_add(<span class="string">&#x27;2019-07-27&#x27;</span>,<span class="type">INTERVAL</span> <span class="number">-1</span> <span class="keyword">MONTH</span>)</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> activity_date</span><br></pre></td></tr></table></figure><h4 id="1142-过去30天的用户活动-II"><a href="#1142-过去30天的用户活动-II" class="headerlink" title="1142. 过去30天的用户活动 II"></a><a href="https://leetcode-cn.com/problems/user-activity-for-the-past-30-days-ii/">1142. 过去30天的用户活动 II</a></h4><p>难度简单7收藏分享切换为英文关注反馈</p><p>SQL架构</p><p>Table: <code>Activity</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| user_id       | int     |</span><br><span class="line">| session_id    | int     |</span><br><span class="line">| activity_date | date    |</span><br><span class="line">| activity_type | enum    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">该表没有主键，它可能有重复的行。</span><br><span class="line">activity_type列是一种类型的ENUM（“ open_session”，“ end_session”，“ scroll_down”，“ send_message”）。</span><br><span class="line">该表显示了社交媒体网站的用户活动。</span><br><span class="line">请注意，每个会话完全属于一个用户。</span><br></pre></td></tr></table></figure><p>编写SQL查询以查找截至2019年7月27日（含）的30天内每个用户的平均会话数，四舍五入到小数点后两位。我们只统计那些会话期间用户至少进行一项活动的有效会话。 </p><p>查询结果格式如下例所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Activity table:</span><br><span class="line">+---------+------------+---------------+---------------+</span><br><span class="line">| user_id | session_id | activity_date | activity_type |</span><br><span class="line">+---------+------------+---------------+---------------+</span><br><span class="line">| 1       | 1          | 2019-07-20    | open_session  |</span><br><span class="line">| 1       | 1          | 2019-07-20    | scroll_down   |</span><br><span class="line">| 1       | 1          | 2019-07-20    | end_session   |</span><br><span class="line">| 2       | 4          | 2019-07-20    | open_session  |</span><br><span class="line">| 2       | 4          | 2019-07-21    | send_message  |</span><br><span class="line">| 2       | 4          | 2019-07-21    | end_session   |</span><br><span class="line">| 3       | 2          | 2019-07-21    | open_session  |</span><br><span class="line">| 3       | 2          | 2019-07-21    | send_message  |</span><br><span class="line">| 3       | 2          | 2019-07-21    | end_session   |</span><br><span class="line">| 3       | 5          | 2019-07-21    | open_session  |</span><br><span class="line">| 3       | 5          | 2019-07-21    | scroll_down   |</span><br><span class="line">| 3       | 5          | 2019-07-21    | end_session   |</span><br><span class="line">| 4       | 3          | 2019-06-25    | open_session  |</span><br><span class="line">| 4       | 3          | 2019-06-25    | end_session   |</span><br><span class="line">+---------+------------+---------------+---------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+---------------------------+ </span><br><span class="line">| average_sessions_per_user |</span><br><span class="line">+---------------------------+ </span><br><span class="line">| 1.33                      |</span><br><span class="line">+---------------------------+ </span><br><span class="line">User 1 和 2 在过去30天内各自进行了1次会话，而用户3进行了2次会话，因此平均值为（1 +1 + 2）/ 3 = 1.33。</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> IFNULL(ROUND(<span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> session_id) <span class="operator">/</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> user_id), <span class="number">2</span>), <span class="number">0</span>) <span class="keyword">AS</span> average_sessions_per_user</span><br><span class="line"><span class="keyword">from</span> Activity</span><br><span class="line"><span class="keyword">where</span> activity_date <span class="operator">&gt;</span> date_add(<span class="string">&#x27;2019-07-27&#x27;</span>,<span class="type">INTERVAL</span> <span class="number">-1</span> <span class="keyword">MONTH</span>)</span><br></pre></td></tr></table></figure><blockquote><p>1个session id 代表一次会话</p></blockquote><h4 id="1148-文章浏览-I"><a href="#1148-文章浏览-I" class="headerlink" title="1148. 文章浏览 I"></a><a href="https://leetcode-cn.com/problems/article-views-i/">1148. 文章浏览 I</a></h4><p>难度简单3收藏分享切换为英文关注反馈</p><p>SQL架构</p><p><code>Views</code> 表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| article_id    | int     |</span><br><span class="line">| author_id     | int     |</span><br><span class="line">| viewer_id     | int     |</span><br><span class="line">| view_date     | date    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">此表无主键，因此可能会存在重复行。</span><br><span class="line">此表的每一行都表示某人在某天浏览了某位作者的某篇文章。</span><br><span class="line">请注意，同一人的 author_id 和 viewer_id 是相同的。</span><br></pre></td></tr></table></figure><p>请编写一条 SQL 查询以找出所有浏览过自己文章的作者，结果按照 id 升序排列。</p><p>查询结果的格式如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Views 表：</span><br><span class="line">+------------+-----------+-----------+------------+</span><br><span class="line">| article_id | author_id | viewer_id | view_date  |</span><br><span class="line">+------------+-----------+-----------+------------+</span><br><span class="line">| 1          | 3         | 5         | 2019-08-01 |</span><br><span class="line">| 1          | 3         | 6         | 2019-08-02 |</span><br><span class="line">| 2          | 7         | 7         | 2019-08-01 |</span><br><span class="line">| 2          | 7         | 6         | 2019-08-02 |</span><br><span class="line">| 4          | 7         | 1         | 2019-07-22 |</span><br><span class="line">| 3          | 4         | 4         | 2019-07-21 |</span><br><span class="line">| 3          | 4         | 4         | 2019-07-21 |</span><br><span class="line">+------------+-----------+-----------+------------+</span><br><span class="line"></span><br><span class="line">结果表：</span><br><span class="line">+------+</span><br><span class="line">| id   |</span><br><span class="line">+------+</span><br><span class="line">| 4    |</span><br><span class="line">| 7    |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> author_id id</span><br><span class="line"><span class="keyword">from</span> Views</span><br><span class="line"><span class="keyword">where</span> author_id<span class="operator">=</span>  viewer_id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> id</span><br></pre></td></tr></table></figure><h4 id="1149-文章浏览-II"><a href="#1149-文章浏览-II" class="headerlink" title="1149. 文章浏览 II"></a><a href="https://leetcode-cn.com/problems/article-views-ii/">1149. 文章浏览 II</a></h4><p>难度中等4收藏分享切换为英文关注反馈</p><p>SQL架构</p><p>Table: <code>Views</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| article_id    | int     |</span><br><span class="line">| author_id     | int     |</span><br><span class="line">| viewer_id     | int     |</span><br><span class="line">| view_date     | date    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">此表无主键，因此可能会存在重复行。此表的每一行都表示某人在某天浏览了某位作者的某篇文章。 请注意，同一人的 author_id 和 viewer_id 是相同的。</span><br></pre></td></tr></table></figure><p>编写一条 SQL 查询来找出在同一天阅读至少两篇文章的人，结果按照 id 升序排序。</p><p>查询结果的格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Views table:</span><br><span class="line">+------------+-----------+-----------+------------+</span><br><span class="line">| article_id | author_id | viewer_id | view_date  |</span><br><span class="line">+------------+-----------+-----------+------------+</span><br><span class="line">| 1          | 3         | 5         | 2019-08-01 |</span><br><span class="line">| 3          | 4         | 5         | 2019-08-01 |</span><br><span class="line">| 1          | 3         | 6         | 2019-08-02 |</span><br><span class="line">| 2          | 7         | 7         | 2019-08-01 |</span><br><span class="line">| 2          | 7         | 6         | 2019-08-02 |</span><br><span class="line">| 4          | 7         | 1         | 2019-07-22 |</span><br><span class="line">| 3          | 4         | 4         | 2019-07-21 |</span><br><span class="line">| 3          | 4         | 4         | 2019-07-21 |</span><br><span class="line">+------------+-----------+-----------+------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+------+</span><br><span class="line">| id   |</span><br><span class="line">+------+</span><br><span class="line">| 5    |</span><br><span class="line">| 6    |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> viewer_id <span class="keyword">AS</span> id</span><br><span class="line"><span class="keyword">FROM</span> Views</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> view_date, viewer_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> article_id) <span class="operator">&gt;=</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> viewer_id</span><br></pre></td></tr></table></figure><h4 id="1158-市场分析-I"><a href="#1158-市场分析-I" class="headerlink" title="1158. 市场分析 I"></a><a href="https://leetcode-cn.com/problems/market-analysis-i/">1158. 市场分析 I</a></h4><p>难度中等</p><p>SQL架构</p><p>Table: <code>Users</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+----------------+---------+</span><br><span class="line">| Column Name    | Type    |</span><br><span class="line">+----------------+---------+</span><br><span class="line">| user_id        | int     |</span><br><span class="line">| join_date      | date    |</span><br><span class="line">| favorite_brand | varchar |</span><br><span class="line">+----------------+---------+</span><br><span class="line">此表主键是 user_id，表中描述了购物网站的用户信息，用户可以在此网站上进行商品买卖。</span><br></pre></td></tr></table></figure><p>Table: <code>Orders</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| order_id      | int     |</span><br><span class="line">| order_date    | date    |</span><br><span class="line">| item_id       | int     |</span><br><span class="line">| buyer_id      | int     |</span><br><span class="line">| seller_id     | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">此表主键是 order_id，外键是 item_id 和（buyer_id，seller_id）。</span><br></pre></td></tr></table></figure><p>Table: <code>Item</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| item_id       | int     |</span><br><span class="line">| item_brand    | varchar |</span><br><span class="line">+---------------+---------+</span><br><span class="line">此表主键是 item_id。</span><br></pre></td></tr></table></figure><p>请写出一条SQL语句以查询每个用户的注册日期和在 <strong>2019</strong> 年作为买家的订单总数。</p><p>查询结果格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">Users table:</span><br><span class="line">+---------+------------+----------------+</span><br><span class="line">| user_id | join_date  | favorite_brand |</span><br><span class="line">+---------+------------+----------------+</span><br><span class="line">| 1       | 2018-01-01 | Lenovo         |</span><br><span class="line">| 2       | 2018-02-09 | Samsung        |</span><br><span class="line">| 3       | 2018-01-19 | LG             |</span><br><span class="line">| 4       | 2018-05-21 | HP             |</span><br><span class="line">+---------+------------+----------------+</span><br><span class="line"></span><br><span class="line">Orders table:</span><br><span class="line">+----------+------------+---------+----------+-----------+</span><br><span class="line">| order_id | order_date | item_id | buyer_id | seller_id |</span><br><span class="line">+----------+------------+---------+----------+-----------+</span><br><span class="line">| 1        | 2019-08-01 | 4       | 1        | 2         |</span><br><span class="line">| 2        | 2018-08-02 | 2       | 1        | 3         |</span><br><span class="line">| 3        | 2019-08-03 | 3       | 2        | 3         |</span><br><span class="line">| 4        | 2018-08-04 | 1       | 4        | 2         |</span><br><span class="line">| 5        | 2018-08-04 | 1       | 3        | 4         |</span><br><span class="line">| 6        | 2019-08-05 | 2       | 2        | 4         |</span><br><span class="line">+----------+------------+---------+----------+-----------+</span><br><span class="line"></span><br><span class="line">Items table:</span><br><span class="line">+---------+------------+</span><br><span class="line">| item_id | item_brand |</span><br><span class="line">+---------+------------+</span><br><span class="line">| 1       | Samsung    |</span><br><span class="line">| 2       | Lenovo     |</span><br><span class="line">| 3       | LG         |</span><br><span class="line">| 4       | HP         |</span><br><span class="line">+---------+------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+-----------+------------+----------------+</span><br><span class="line">| buyer_id  | join_date  | orders_in_2019 |</span><br><span class="line">+-----------+------------+----------------+</span><br><span class="line">| 1         | 2018-01-01 | 1              |</span><br><span class="line">| 2         | 2018-02-09 | 2              |</span><br><span class="line">| 3         | 2018-01-19 | 0              |</span><br><span class="line">| 4         | 2018-05-21 | 0              |</span><br><span class="line">+-----------+------------+----------------+</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> user_id buyer_id,join_date, ifnull(cnt,<span class="number">0</span>)orders_in_2019</span><br><span class="line"><span class="keyword">from</span> Users u <span class="keyword">left</span> <span class="keyword">join</span> </span><br><span class="line">(<span class="keyword">select</span> buyer_id,<span class="built_in">count</span>(<span class="operator">*</span>) cnt</span><br><span class="line"><span class="keyword">from</span> Orders</span><br><span class="line"><span class="keyword">where</span> <span class="keyword">year</span>(order_date) <span class="operator">=</span> <span class="number">2019</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span>  buyer_id</span><br><span class="line">)t1</span><br><span class="line"><span class="keyword">on</span> u.user_id <span class="operator">=</span>t1.buyer_id</span><br></pre></td></tr></table></figure><h4 id="1159-市场分析-II"><a href="#1159-市场分析-II" class="headerlink" title="1159. 市场分析 II"></a><a href="https://leetcode-cn.com/problems/market-analysis-ii/">1159. 市场分析 II</a></h4><p>难度困难</p><p>SQL架构</p><p>表: <code>Users</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+----------------+---------+</span><br><span class="line">| Column Name    | Type    |</span><br><span class="line">+----------------+---------+</span><br><span class="line">| user_id        | int     |</span><br><span class="line">| join_date      | date    |</span><br><span class="line">| favorite_brand | varchar |</span><br><span class="line">+----------------+---------+</span><br><span class="line">user_id 是该表的主键</span><br><span class="line">表中包含一位在线购物网站用户的个人信息，用户可以在该网站出售和购买商品。</span><br></pre></td></tr></table></figure><p>表: <code>Orders</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| order_id      | int     |</span><br><span class="line">| order_date    | date    |</span><br><span class="line">| item_id       | int     |</span><br><span class="line">| buyer_id      | int     |</span><br><span class="line">| seller_id     | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">order_id 是该表的主键</span><br><span class="line">item_id 是 Items 表的外键</span><br><span class="line">buyer_id 和 seller_id 是 Users 表的外键</span><br></pre></td></tr></table></figure><p>表: <code>Items</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| item_id       | int     |</span><br><span class="line">| item_brand    | varchar |</span><br><span class="line">+---------------+---------+</span><br><span class="line">item_id 是该表的主键</span><br></pre></td></tr></table></figure><p>写一个 SQL 查询确定每一个用户按日期顺序卖出的第二件商品的品牌是否是他们最喜爱的品牌。如果一个用户卖出少于两件商品，查询的结果是 <code>no</code> 。</p><p>题目保证没有一个用户在一天中卖出超过一件商品</p><p>下面是查询结果格式的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">Users table:</span><br><span class="line">+---------+------------+----------------+</span><br><span class="line">| user_id | join_date  | favorite_brand |</span><br><span class="line">+---------+------------+----------------+</span><br><span class="line">| 1       | 2019-01-01 | Lenovo         |</span><br><span class="line">| 2       | 2019-02-09 | Samsung        |</span><br><span class="line">| 3       | 2019-01-19 | LG             |</span><br><span class="line">| 4       | 2019-05-21 | HP             |</span><br><span class="line">+---------+------------+----------------+</span><br><span class="line"></span><br><span class="line">Orders table:</span><br><span class="line">+----------+------------+---------+----------+-----------+</span><br><span class="line">| order_id | order_date | item_id | buyer_id | seller_id |</span><br><span class="line">+----------+------------+---------+----------+-----------+</span><br><span class="line">| 1        | 2019-08-01 | 4       | 1        | 2         |</span><br><span class="line">| 2        | 2019-08-02 | 2       | 1        | 3         |</span><br><span class="line">| 3        | 2019-08-03 | 3       | 2        | 3         |</span><br><span class="line">| 4        | 2019-08-04 | 1       | 4        | 2         |</span><br><span class="line">| 5        | 2019-08-04 | 1       | 3        | 4         |</span><br><span class="line">| 6        | 2019-08-05 | 2       | 2        | 4         |</span><br><span class="line">+----------+------------+---------+----------+-----------+</span><br><span class="line"></span><br><span class="line">Items table:</span><br><span class="line">+---------+------------+</span><br><span class="line">| item_id | item_brand |</span><br><span class="line">+---------+------------+</span><br><span class="line">| 1       | Samsung    |</span><br><span class="line">| 2       | Lenovo     |</span><br><span class="line">| 3       | LG         |</span><br><span class="line">| 4       | HP         |</span><br><span class="line">+---------+------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+-----------+--------------------+</span><br><span class="line">| seller_id | 2nd_item_fav_brand |</span><br><span class="line">+-----------+--------------------+</span><br><span class="line">| 1         | no                 |</span><br><span class="line">| 2         | yes                |</span><br><span class="line">| 3         | yes                |</span><br><span class="line">| 4         | no                 |</span><br><span class="line">+-----------+--------------------+</span><br><span class="line"></span><br><span class="line">id 为 1 的用户的查询结果是 no，因为他什么也没有卖出</span><br><span class="line">id为 2 和 3 的用户的查询结果是 yes，因为他们卖出的第二件商品的品牌是他们自己最喜爱的品牌</span><br><span class="line">id为 4 的用户的查询结果是 no，因为他卖出的第二件商品的品牌不是他最喜爱的品牌</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> user_id seller_id, if(item_brand<span class="operator">=</span>favorite_brand,<span class="string">&#x27;yes&#x27;</span>,<span class="string">&#x27;no&#x27;</span>) <span class="number">2</span>nd_item_fav_brand </span><br><span class="line"><span class="keyword">from</span> Users u</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> </span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> i.item_id,seller_id,item_brand</span><br><span class="line">    <span class="keyword">from</span> Items i</span><br><span class="line">    <span class="keyword">join</span> </span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">select</span> seller_id,item_id,<span class="built_in">rank</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> seller_id  <span class="keyword">order</span> <span class="keyword">by</span> order_date ) rk</span><br><span class="line">        <span class="keyword">from</span> Orders </span><br><span class="line">    )t1 </span><br><span class="line">    <span class="keyword">on</span> i.item_id <span class="operator">=</span> t1.item_id </span><br><span class="line">    <span class="keyword">where</span> rk  <span class="operator">=</span><span class="number">2</span></span><br><span class="line">)t2</span><br><span class="line"><span class="keyword">on</span> u.user_id <span class="operator">=</span> t2.seller_id</span><br></pre></td></tr></table></figure><h4 id="1164-指定日期的产品价格"><a href="#1164-指定日期的产品价格" class="headerlink" title="1164. 指定日期的产品价格"></a><a href="https://leetcode-cn.com/problems/product-price-at-a-given-date/">1164. 指定日期的产品价格</a></h4><p>难度中等</p><p>SQL架构</p><p>产品数据表: <code>Products</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| product_id    | int     |</span><br><span class="line">| new_price     | int     |</span><br><span class="line">| change_date   | date    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">这张表的主键是 (product_id, change_date)。</span><br><span class="line">这张表的每一行分别记录了 某产品 在某个日期 更改后 的新价格。</span><br></pre></td></tr></table></figure><p>写一段 SQL来查找在 <strong>2019-08-16</strong> 时全部产品的价格，假设所有产品在修改前的价格都是 <strong>10。</strong></p><p>查询结果格式如下例所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Products table:</span><br><span class="line">+------------+-----------+-------------+</span><br><span class="line">| product_id | new_price | change_date |</span><br><span class="line">+------------+-----------+-------------+</span><br><span class="line">| 1          | 20        | 2019-08-14  |</span><br><span class="line">| 2          | 50        | 2019-08-14  |</span><br><span class="line">| 1          | 30        | 2019-08-15  |</span><br><span class="line">| 1          | 35        | 2019-08-16  |</span><br><span class="line">| 2          | 65        | 2019-08-17  |</span><br><span class="line">| 3          | 20        | 2019-08-18  |</span><br><span class="line">+------------+-----------+-------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+------------+-------+</span><br><span class="line">| product_id | price |</span><br><span class="line">+------------+-------+</span><br><span class="line">| 2          | 50    |</span><br><span class="line">| 1          | 35    |</span><br><span class="line">| 3          | 10    |</span><br><span class="line">+------------+-------+</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> p.product_id,ifnull(t1.new_price,<span class="number">10</span>) price</span><br><span class="line"><span class="keyword">from</span> Products p</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> </span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> product_id,new_price</span><br><span class="line">    <span class="keyword">from</span> (</span><br><span class="line">        <span class="keyword">select</span> product_id,new_price,change_date,<span class="built_in">Max</span>(change_date) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> product_id  ) md</span><br><span class="line">        <span class="keyword">from</span>  Products</span><br><span class="line">        <span class="keyword">where</span> change_date<span class="operator">&lt;=</span><span class="string">&#x27;2019-08-16&#x27;</span></span><br><span class="line">    )tmp</span><br><span class="line">    <span class="keyword">where</span> change_date <span class="operator">=</span> md</span><br><span class="line">)t1</span><br><span class="line"><span class="keyword">on</span> p. product_id <span class="operator">=</span> t1.product_id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> price <span class="keyword">desc</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1173-即时食物配送-I"><a href="#1173-即时食物配送-I" class="headerlink" title="1173. 即时食物配送 I"></a><a href="https://leetcode-cn.com/problems/immediate-food-delivery-i/">1173. 即时食物配送 I</a></h4><p>难度简单</p><p>SQL架构</p><p>配送表: <code>Delivery</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+-----------------------------+---------+</span><br><span class="line">| Column Name                 | Type    |</span><br><span class="line">+-----------------------------+---------+</span><br><span class="line">| delivery_id                 | int     |</span><br><span class="line">| customer_id                 | int     |</span><br><span class="line">| order_date                  | date    |</span><br><span class="line">| customer_pref_delivery_date | date    |</span><br><span class="line">+-----------------------------+---------+</span><br><span class="line">delivery_id 是表的主键。</span><br><span class="line">该表保存着顾客的食物配送信息，顾客在某个日期下了订单，并指定了一个期望的配送日期（和下单日期相同或者在那之后）。</span><br></pre></td></tr></table></figure><p>如果顾客期望的配送日期和下单日期相同，则该订单称为 「即时订单」，否则称为「计划订单」。</p><p>写一条 SQL 查询语句获取即时订单所占的百分比， <strong>保留两位小数。</strong></p><p>查询结果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Delivery 表:</span><br><span class="line">+-------------+-------------+------------+-----------------------------+</span><br><span class="line">| delivery_id | customer_id | order_date | customer_pref_delivery_date |</span><br><span class="line">+-------------+-------------+------------+-----------------------------+</span><br><span class="line">| 1           | 1           | 2019-08-01 | 2019-08-02                  |</span><br><span class="line">| 2           | 5           | 2019-08-02 | 2019-08-02                  |</span><br><span class="line">| 3           | 1           | 2019-08-11 | 2019-08-11                  |</span><br><span class="line">| 4           | 3           | 2019-08-24 | 2019-08-26                  |</span><br><span class="line">| 5           | 4           | 2019-08-21 | 2019-08-22                  |</span><br><span class="line">| 6           | 2           | 2019-08-11 | 2019-08-13                  |</span><br><span class="line">+-------------+-------------+------------+-----------------------------+</span><br><span class="line"></span><br><span class="line">Result 表:</span><br><span class="line">+----------------------+</span><br><span class="line">| immediate_percentage |</span><br><span class="line">+----------------------+</span><br><span class="line">| 33.33                |</span><br><span class="line">+----------------------+</span><br><span class="line">2 和 3 号订单为即时订单，其他的为计划订单。</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> round(<span class="built_in">sum</span>(if(order_date<span class="operator">=</span>customer_pref_delivery_date,<span class="number">1</span>,<span class="number">0</span>))<span class="operator">/</span><span class="built_in">count</span>(<span class="operator">*</span>)<span class="operator">*</span><span class="number">100</span>,<span class="number">2</span>) immediate_percentage</span><br><span class="line"><span class="keyword">from</span> Delivery</span><br></pre></td></tr></table></figure><h4 id="1174-即时食物配送-II"><a href="#1174-即时食物配送-II" class="headerlink" title="1174. 即时食物配送 II"></a><a href="https://leetcode-cn.com/problems/immediate-food-delivery-ii/">1174. 即时食物配送 II</a></h4><p>难度中等</p><p>SQL架构</p><p>配送表: <code>Delivery</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+-----------------------------+---------+</span><br><span class="line">| Column Name                 | Type    |</span><br><span class="line">+-----------------------------+---------+</span><br><span class="line">| delivery_id                 | int     |</span><br><span class="line">| customer_id                 | int     |</span><br><span class="line">| order_date                  | date    |</span><br><span class="line">| customer_pref_delivery_date | date    |</span><br><span class="line">+-----------------------------+---------+</span><br><span class="line">delivery_id 是表的主键。</span><br><span class="line">该表保存着顾客的食物配送信息，顾客在某个日期下了订单，并指定了一个期望的配送日期（和下单日期相同或者在那之后）。</span><br></pre></td></tr></table></figure><p>如果顾客期望的配送日期和下单日期相同，则该订单称为 「即时订单」，否则称为「计划订单」。</p><p>「首次订单」是顾客最早创建的订单。我们保证一个顾客只会有一个「首次订单」。</p><p>写一条 SQL 查询语句获取即时订单在所有用户的首次订单中的比例。<strong>保留两位小数。</strong></p><p>查询结果如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Delivery 表：</span><br><span class="line">+-------------+-------------+------------+-----------------------------+</span><br><span class="line">| delivery_id | customer_id | order_date | customer_pref_delivery_date |</span><br><span class="line">+-------------+-------------+------------+-----------------------------+</span><br><span class="line">| 1           | 1           | 2019-08-01 | 2019-08-02                  |</span><br><span class="line">| 2           | 2           | 2019-08-02 | 2019-08-02                  |</span><br><span class="line">| 3           | 1           | 2019-08-11 | 2019-08-12                  |</span><br><span class="line">| 4           | 3           | 2019-08-24 | 2019-08-24                  |</span><br><span class="line">| 5           | 3           | 2019-08-21 | 2019-08-22                  |</span><br><span class="line">| 6           | 2           | 2019-08-11 | 2019-08-13                  |</span><br><span class="line">| 7           | 4           | 2019-08-09 | 2019-08-09                  |</span><br><span class="line">+-------------+-------------+------------+-----------------------------+</span><br><span class="line"></span><br><span class="line">Result 表：</span><br><span class="line">+----------------------+</span><br><span class="line">| immediate_percentage |</span><br><span class="line">+----------------------+</span><br><span class="line">| 50.00                |</span><br><span class="line">+----------------------+</span><br><span class="line">1 号顾客的 1 号订单是首次订单，并且是计划订单。</span><br><span class="line">2 号顾客的 2 号订单是首次订单，并且是即时订单。</span><br><span class="line">3 号顾客的 5 号订单是首次订单，并且是计划订单。</span><br><span class="line">4 号顾客的 7 号订单是首次订单，并且是即时订单。</span><br><span class="line">因此，一半顾客的首次订单是即时的。</span><br></pre></td></tr></table></figure><p>开窗</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> round(<span class="built_in">sum</span>(if(order_date <span class="operator">=</span> fo <span class="operator">&amp;&amp;</span> fo<span class="operator">=</span>d,<span class="number">1</span>,<span class="number">0</span>))<span class="operator">/</span><span class="built_in">count</span>(<span class="keyword">distinct</span> customer_id)<span class="operator">*</span><span class="number">100</span>,<span class="number">2</span>) immediate_percentage </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span> customer_id,order_date,<span class="built_in">min</span>(order_date)<span class="keyword">over</span> ( <span class="keyword">partition</span> <span class="keyword">by</span> customer_id) fo,</span><br><span class="line">    if(order_date<span class="operator">=</span>customer_pref_delivery_date,order_date ,<span class="keyword">null</span>) d</span><br><span class="line"><span class="keyword">from</span> Delivery</span><br><span class="line">)t1</span><br></pre></td></tr></table></figure><p>另一种思路</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> round (</span><br><span class="line">    <span class="built_in">sum</span>(order_date <span class="operator">=</span> customer_pref_delivery_date) <span class="operator">*</span> <span class="number">100</span> <span class="operator">/</span></span><br><span class="line">    <span class="built_in">count</span>(<span class="operator">*</span>),</span><br><span class="line">    <span class="number">2</span></span><br><span class="line">) <span class="keyword">as</span> immediate_percentage</span><br><span class="line"><span class="keyword">from</span> Delivery</span><br><span class="line"><span class="keyword">where</span> (customer_id, order_date) <span class="keyword">in</span> (</span><br><span class="line">    <span class="keyword">select</span> customer_id, <span class="built_in">min</span>(order_date)</span><br><span class="line">    <span class="keyword">from</span> delivery</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> customer_id</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="1179-重新格式化部门表"><a href="#1179-重新格式化部门表" class="headerlink" title="1179. 重新格式化部门表"></a><a href="https://leetcode-cn.com/problems/reformat-department-table/">1179. 重新格式化部门表</a></h4><p>难度</p><p>SQL架构</p><p>部门表 <code>Department</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| id            | int     |</span><br><span class="line">| revenue       | int     |</span><br><span class="line">| month         | varchar |</span><br><span class="line">+---------------+---------+</span><br><span class="line">(id, month) 是表的联合主键。</span><br><span class="line">这个表格有关于每个部门每月收入的信息。</span><br><span class="line">月份（month）可以取下列值 [&quot;Jan&quot;,&quot;Feb&quot;,&quot;Mar&quot;,&quot;Apr&quot;,&quot;May&quot;,&quot;Jun&quot;,&quot;Jul&quot;,&quot;Aug&quot;,&quot;Sep&quot;,&quot;Oct&quot;,&quot;Nov&quot;,&quot;Dec&quot;]。</span><br></pre></td></tr></table></figure><p>编写一个 SQL 查询来重新格式化表，使得新的表中有一个部门 id 列和一些对应 <strong>每个月</strong> 的收入（revenue）列。</p><p>查询结果格式如下面的示例所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Department 表：</span><br><span class="line">+------+---------+-------+</span><br><span class="line">| id   | revenue | month |</span><br><span class="line">+------+---------+-------+</span><br><span class="line">| 1    | 8000    | Jan   |</span><br><span class="line">| 2    | 9000    | Jan   |</span><br><span class="line">| 3    | 10000   | Feb   |</span><br><span class="line">| 1    | 7000    | Feb   |</span><br><span class="line">| 1    | 6000    | Mar   |</span><br><span class="line">+------+---------+-------+</span><br><span class="line"></span><br><span class="line">查询得到的结果表：</span><br><span class="line">+------+-------------+-------------+-------------+-----+-------------+</span><br><span class="line">| id   | Jan_Revenue | Feb_Revenue | Mar_Revenue | ... | Dec_Revenue |</span><br><span class="line">+------+-------------+-------------+-------------+-----+-------------+</span><br><span class="line">| 1    | 8000        | 7000        | 6000        | ... | null        |</span><br><span class="line">| 2    | 9000        | null        | null        | ... | null        |</span><br><span class="line">| 3    | null        | 10000       | null        | ... | null        |</span><br><span class="line">+------+-------------+-------------+-------------+-----+-------------+</span><br><span class="line"></span><br><span class="line">注意，结果表有 13 列 (1个部门 id 列 + 12个月份的收入列)。</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id,</span><br><span class="line"><span class="built_in">SUM</span>(<span class="keyword">CASE</span> `<span class="keyword">month</span>` <span class="keyword">WHEN</span> <span class="string">&#x27;Jan&#x27;</span> <span class="keyword">THEN</span> revenue <span class="keyword">END</span>) Jan_Revenue,</span><br><span class="line"><span class="built_in">SUM</span>(<span class="keyword">CASE</span> `<span class="keyword">month</span>` <span class="keyword">WHEN</span> <span class="string">&#x27;Feb&#x27;</span> <span class="keyword">THEN</span> revenue <span class="keyword">END</span>) Feb_Revenue,</span><br><span class="line"><span class="built_in">SUM</span>(<span class="keyword">CASE</span> `<span class="keyword">month</span>` <span class="keyword">WHEN</span> <span class="string">&#x27;Mar&#x27;</span> <span class="keyword">THEN</span> revenue <span class="keyword">END</span>) Mar_Revenue,</span><br><span class="line"><span class="built_in">SUM</span>(<span class="keyword">CASE</span> `<span class="keyword">month</span>` <span class="keyword">WHEN</span> <span class="string">&#x27;Apr&#x27;</span> <span class="keyword">THEN</span> revenue <span class="keyword">END</span>) Apr_Revenue,</span><br><span class="line"><span class="built_in">SUM</span>(<span class="keyword">CASE</span> `<span class="keyword">month</span>` <span class="keyword">WHEN</span> <span class="string">&#x27;May&#x27;</span> <span class="keyword">THEN</span> revenue <span class="keyword">END</span>) May_Revenue,</span><br><span class="line"><span class="built_in">SUM</span>(<span class="keyword">CASE</span> `<span class="keyword">month</span>` <span class="keyword">WHEN</span> <span class="string">&#x27;Jun&#x27;</span> <span class="keyword">THEN</span> revenue <span class="keyword">END</span>) Jun_Revenue,</span><br><span class="line"><span class="built_in">SUM</span>(<span class="keyword">CASE</span> `<span class="keyword">month</span>` <span class="keyword">WHEN</span> <span class="string">&#x27;Jul&#x27;</span> <span class="keyword">THEN</span> revenue <span class="keyword">END</span>) Jul_Revenue,</span><br><span class="line"><span class="built_in">SUM</span>(<span class="keyword">CASE</span> `<span class="keyword">month</span>` <span class="keyword">WHEN</span> <span class="string">&#x27;Aug&#x27;</span> <span class="keyword">THEN</span> revenue <span class="keyword">END</span>) Aug_Revenue,</span><br><span class="line"><span class="built_in">SUM</span>(<span class="keyword">CASE</span> `<span class="keyword">month</span>` <span class="keyword">WHEN</span> <span class="string">&#x27;Sep&#x27;</span> <span class="keyword">THEN</span> revenue <span class="keyword">END</span>) Sep_Revenue,</span><br><span class="line"><span class="built_in">SUM</span>(<span class="keyword">CASE</span> `<span class="keyword">month</span>` <span class="keyword">WHEN</span> <span class="string">&#x27;Oct&#x27;</span> <span class="keyword">THEN</span> revenue <span class="keyword">END</span>) Oct_Revenue,</span><br><span class="line"><span class="built_in">SUM</span>(<span class="keyword">CASE</span> `<span class="keyword">month</span>` <span class="keyword">WHEN</span> <span class="string">&#x27;Nov&#x27;</span> <span class="keyword">THEN</span> revenue <span class="keyword">END</span>) Nov_Revenue,</span><br><span class="line"><span class="built_in">SUM</span>(<span class="keyword">CASE</span> `<span class="keyword">month</span>` <span class="keyword">WHEN</span> <span class="string">&#x27;Dec&#x27;</span> <span class="keyword">THEN</span> revenue <span class="keyword">END</span>) Dec_Revenue</span><br><span class="line"><span class="keyword">FROM</span> Department</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> id;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1193.</span> 每月交易 I</span><br><span class="line"><span class="keyword">SQL</span>架构</span><br><span class="line"><span class="keyword">Table</span>: Transactions</span><br><span class="line"></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+---------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">Column</span> Name   <span class="operator">|</span> Type    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+---------+</span></span><br><span class="line"><span class="operator">|</span> id            <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> country       <span class="operator">|</span> <span class="type">varchar</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> state         <span class="operator">|</span> enum    <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> amount        <span class="operator">|</span> <span class="type">int</span>     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> trans_date    <span class="operator">|</span> <span class="type">date</span>    <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------------+---------+</span></span><br><span class="line">id 是这个表的主键。</span><br><span class="line">该表包含有关传入事务的信息。</span><br><span class="line">state 列类型为 “[”批准“，”拒绝“] 之一。</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">编写一个 <span class="keyword">sql</span> 查询来查找每个月和每个国家<span class="operator">/</span>地区的事务数及其总金额、已批准的事务数及其总金额。</span><br><span class="line"></span><br><span class="line">查询结果格式如下所示：</span><br><span class="line"></span><br><span class="line">Transactions <span class="keyword">table</span>:</span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+----------+--------+------------+</span></span><br><span class="line"><span class="operator">|</span> id   <span class="operator">|</span> country <span class="operator">|</span> state    <span class="operator">|</span> amount <span class="operator">|</span> trans_date <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+----------+--------+------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">121</span>  <span class="operator">|</span> US      <span class="operator">|</span> approved <span class="operator">|</span> <span class="number">1000</span>   <span class="operator">|</span> <span class="number">2018</span><span class="number">-12</span><span class="number">-18</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">122</span>  <span class="operator">|</span> US      <span class="operator">|</span> declined <span class="operator">|</span> <span class="number">2000</span>   <span class="operator">|</span> <span class="number">2018</span><span class="number">-12</span><span class="number">-19</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">123</span>  <span class="operator">|</span> US      <span class="operator">|</span> approved <span class="operator">|</span> <span class="number">2000</span>   <span class="operator">|</span> <span class="number">2019</span><span class="number">-01</span><span class="number">-01</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">124</span>  <span class="operator">|</span> DE      <span class="operator">|</span> approved <span class="operator">|</span> <span class="number">2000</span>   <span class="operator">|</span> <span class="number">2019</span><span class="number">-01</span><span class="number">-07</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">------+---------+----------+--------+------------+</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">Result</span> <span class="keyword">table</span>:</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+---------+-------------+----------------+--------------------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="keyword">month</span>    <span class="operator">|</span> country <span class="operator">|</span> trans_count <span class="operator">|</span> approved_count <span class="operator">|</span> trans_total_amount <span class="operator">|</span> approved_total_amount <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+---------+-------------+----------------+--------------------+-----------------------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2018</span><span class="number">-12</span>  <span class="operator">|</span> US      <span class="operator">|</span> <span class="number">2</span>           <span class="operator">|</span> <span class="number">1</span>              <span class="operator">|</span> <span class="number">3000</span>               <span class="operator">|</span> <span class="number">1000</span>                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2019</span><span class="number">-01</span>  <span class="operator">|</span> US      <span class="operator">|</span> <span class="number">1</span>           <span class="operator">|</span> <span class="number">1</span>              <span class="operator">|</span> <span class="number">2000</span>               <span class="operator">|</span> <span class="number">2000</span>                  <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">2019</span><span class="number">-01</span>  <span class="operator">|</span> DE      <span class="operator">|</span> <span class="number">1</span>           <span class="operator">|</span> <span class="number">1</span>              <span class="operator">|</span> <span class="number">2000</span>               <span class="operator">|</span> <span class="number">2000</span>                  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+---------+-------------+----------------+--------------------+-----------------------+</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(trans_date, <span class="string">&#x27;%Y-%m&#x27;</span>) <span class="keyword">AS</span> <span class="keyword">month</span>,</span><br><span class="line">    country,</span><br><span class="line">    <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> trans_count,</span><br><span class="line">    <span class="built_in">COUNT</span>(IF(state <span class="operator">=</span> <span class="string">&#x27;approved&#x27;</span>, <span class="number">1</span>, <span class="keyword">NULL</span>)) <span class="keyword">AS</span> approved_count,</span><br><span class="line">    <span class="built_in">SUM</span>(amount) <span class="keyword">AS</span> trans_total_amount,</span><br><span class="line">    <span class="built_in">SUM</span>(IF(state <span class="operator">=</span> <span class="string">&#x27;approved&#x27;</span>, amount, <span class="number">0</span>)) <span class="keyword">AS</span> approved_total_amount</span><br><span class="line"><span class="keyword">FROM</span> Transactions</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">month</span>, country</span><br></pre></td></tr></table></figure><h4 id="1193-每月交易-I"><a href="#1193-每月交易-I" class="headerlink" title="1193. 每月交易 I"></a><a href="https://leetcode-cn.com/problems/monthly-transactions-i/">1193. 每月交易 I</a></h4><p>难度中等</p><p>SQL架构</p><p>Table: <code>Transactions</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| id            | int     |</span><br><span class="line">| country       | varchar |</span><br><span class="line">| state         | enum    |</span><br><span class="line">| amount        | int     |</span><br><span class="line">| trans_date    | date    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">id 是这个表的主键。</span><br><span class="line">该表包含有关传入事务的信息。</span><br><span class="line">state 列类型为 “[”批准“，”拒绝“] 之一。</span><br></pre></td></tr></table></figure><p>编写一个 sql 查询来查找每个月和每个国家/地区的事务数及其总金额、已批准的事务数及其总金额。</p><p>查询结果格式如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Transactions table:</span><br><span class="line">+------+---------+----------+--------+------------+</span><br><span class="line">| id   | country | state    | amount | trans_date |</span><br><span class="line">+------+---------+----------+--------+------------+</span><br><span class="line">| 121  | US      | approved | 1000   | 2018-12-18 |</span><br><span class="line">| 122  | US      | declined | 2000   | 2018-12-19 |</span><br><span class="line">| 123  | US      | approved | 2000   | 2019-01-01 |</span><br><span class="line">| 124  | DE      | approved | 2000   | 2019-01-07 |</span><br><span class="line">+------+---------+----------+--------+------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+----------+---------+-------------+----------------+--------------------+-----------------------+</span><br><span class="line">| month    | country | trans_count | approved_count | trans_total_amount | approved_total_amount |</span><br><span class="line">+----------+---------+-------------+----------------+--------------------+-----------------------+</span><br><span class="line">| 2018-12  | US      | 2           | 1              | 3000               | 1000                  |</span><br><span class="line">| 2019-01  | US      | 1           | 1              | 2000               | 2000                  |</span><br><span class="line">| 2019-01  | DE      | 1           | 1              | 2000               | 2000                  |</span><br><span class="line">+----------+---------+-------------+----------------+--------------------+-----------------------+</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> DATE_FORMAT(trans_date, <span class="string">&#x27;%Y-%m&#x27;</span>) <span class="keyword">AS</span> <span class="keyword">month</span>,</span><br><span class="line">    country,</span><br><span class="line">    <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> trans_count,</span><br><span class="line">    <span class="built_in">COUNT</span>(IF(state <span class="operator">=</span> <span class="string">&#x27;approved&#x27;</span>, <span class="number">1</span>, <span class="keyword">NULL</span>)) <span class="keyword">AS</span> approved_count,</span><br><span class="line">    <span class="built_in">SUM</span>(amount) <span class="keyword">AS</span> trans_total_amount,</span><br><span class="line">    <span class="built_in">SUM</span>(IF(state <span class="operator">=</span> <span class="string">&#x27;approved&#x27;</span>, amount, <span class="number">0</span>)) <span class="keyword">AS</span> approved_total_amount</span><br><span class="line"><span class="keyword">FROM</span> Transactions</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">month</span>, country</span><br></pre></td></tr></table></figure><h4 id="1205-每月交易II"><a href="#1205-每月交易II" class="headerlink" title="1205. 每月交易II"></a><a href="https://leetcode-cn.com/problems/monthly-transactions-ii/">1205. 每月交易II</a></h4><p>难度中等</p><p>SQL架构</p><p><code>Transactions</code> 记录表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+----------------+---------+</span><br><span class="line">| Column Name    | Type    |</span><br><span class="line">+----------------+---------+</span><br><span class="line">| id             | int     |</span><br><span class="line">| country        | varchar |</span><br><span class="line">| state          | enum    |</span><br><span class="line">| amount         | int     |</span><br><span class="line">| trans_date     | date    |</span><br><span class="line">+----------------+---------+</span><br><span class="line">id 是这个表的主键。</span><br><span class="line">该表包含有关传入事务的信息。</span><br><span class="line">状态列是类型为 [approved（已批准）、declined（已拒绝）] 的枚举。</span><br></pre></td></tr></table></figure><p><code>Chargebacks</code> 表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+----------------+---------+</span><br><span class="line">| Column Name    | Type    |</span><br><span class="line">+----------------+---------+</span><br><span class="line">| trans_id       | int     |</span><br><span class="line">| charge_date    | date    |</span><br><span class="line">+----------------+---------+</span><br><span class="line">退单包含有关放置在事务表中的某些事务的传入退单的基本信息。</span><br><span class="line">trans_id 是 transactions 表的 id 列的外键。</span><br><span class="line">每项退单都对应于之前进行的交易，即使未经批准。</span><br></pre></td></tr></table></figure><p>编写一个 SQL 查询，以查找每个月和每个国家/地区的已批准交易的数量及其总金额、退单的数量及其总金额。</p><p>注意：在您的查询中，给定月份和国家，忽略所有为零的行。</p><p>查询结果格式如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Transactions 表：</span><br><span class="line">+------+---------+----------+--------+------------+</span><br><span class="line">| id   | country | state    | amount | trans_date |</span><br><span class="line">+------+---------+----------+--------+------------+</span><br><span class="line">| 101  | US      | approved | 1000   | 2019-05-18 |</span><br><span class="line">| 102  | US      | declined | 2000   | 2019-05-19 |</span><br><span class="line">| 103  | US      | approved | 3000   | 2019-06-10 |</span><br><span class="line">| 104  | US      | declined | 4000   | 2019-06-13 |</span><br><span class="line">| 105  | US      | approved | 5000   | 2019-06-15 |</span><br><span class="line">+------+---------+----------+--------+------------+</span><br><span class="line"></span><br><span class="line">Chargebacks 表：</span><br><span class="line">+------------+------------+</span><br><span class="line">| trans_id   | trans_date |</span><br><span class="line">+------------+------------+</span><br><span class="line">| 102        | 2019-05-29 |</span><br><span class="line">| 101        | 2019-06-30 |</span><br><span class="line">| 105        | 2019-09-18 |</span><br><span class="line">+------------+------------+</span><br><span class="line"></span><br><span class="line">Result 表：</span><br><span class="line">+----------+---------+----------------+-----------------+-------------------+--------------------+</span><br><span class="line">| month    | country | approved_count | approved_amount | chargeback_count  | chargeback_amount  |</span><br><span class="line">+----------+---------+----------------+-----------------+-------------------+--------------------+</span><br><span class="line">| 2019-05  | US      | 1              | 1000            | 1                 | 2000               |</span><br><span class="line">| 2019-06  | US      | 2              | 8000            | 1                 | 1000               |</span><br><span class="line">| 2019-09  | US      | 0              | 0               | 1                 | 5000               |</span><br><span class="line">+----------+---------+----------------+-----------------+-------------------+--------------------+</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    date_format(trans_date, <span class="string">&#x27;%Y-%m&#x27;</span>) <span class="keyword">month</span>, </span><br><span class="line">    country,</span><br><span class="line">    <span class="built_in">sum</span>(state <span class="operator">=</span> <span class="string">&#x27;approved&#x27;</span>) approved_count,</span><br><span class="line">    <span class="built_in">sum</span>(if(state <span class="operator">=</span> <span class="string">&#x27;approved&#x27;</span>, amount, <span class="number">0</span>)) approved_amount,</span><br><span class="line">    <span class="built_in">sum</span>(state <span class="operator">=</span> <span class="string">&#x27;chargeback&#x27;</span>) chargeback_count,</span><br><span class="line">    <span class="built_in">sum</span>(if(state <span class="operator">=</span> <span class="string">&#x27;chargeback&#x27;</span>, amount, <span class="number">0</span>)) chargeback_amount</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> transactions</span><br><span class="line">    <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">    <span class="keyword">select</span> id, country, <span class="string">&#x27;chargeback&#x27;</span> state, amount, c.trans_date</span><br><span class="line">    <span class="keyword">from</span> chargebacks c <span class="keyword">left</span> <span class="keyword">join</span> transactions t </span><br><span class="line">    <span class="keyword">on</span> c.trans_id <span class="operator">=</span> t.id</span><br><span class="line">) tmp </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="keyword">month</span>, country</span><br><span class="line"><span class="keyword">having</span> approved_amount <span class="keyword">or</span> chargeback_amount</span><br></pre></td></tr></table></figure><h4 id="1194-锦标赛优胜者"><a href="#1194-锦标赛优胜者" class="headerlink" title="1194. 锦标赛优胜者"></a><a href="https://leetcode-cn.com/problems/tournament-winners/">1194. 锦标赛优胜者</a></h4><p>难度困难</p><p>SQL架构</p><p><code>Players</code> 玩家表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+-------------+-------+</span><br><span class="line">| Column Name | Type  |</span><br><span class="line">+-------------+-------+</span><br><span class="line">| player_id   | int   |</span><br><span class="line">| group_id    | int   |</span><br><span class="line">+-------------+-------+</span><br><span class="line">玩家 ID 是此表的主键。</span><br><span class="line">此表的每一行表示每个玩家的组。</span><br></pre></td></tr></table></figure><p><code>Matches</code> 赛事表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| match_id      | int     |</span><br><span class="line">| first_player  | int     |</span><br><span class="line">| second_player | int     | </span><br><span class="line">| first_score   | int     |</span><br><span class="line">| second_score  | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">match_id 是此表的主键。</span><br><span class="line">每一行是一场比赛的记录，第一名和第二名球员包含每场比赛的球员 ID。</span><br><span class="line">第一个玩家和第二个玩家的分数分别包含第一个玩家和第二个玩家的分数。</span><br><span class="line">你可以假设，在每一场比赛中，球员都属于同一组。</span><br></pre></td></tr></table></figure><p>每组的获胜者是在组内得分最高的选手。如果平局，player_id <strong>最小</strong> 的选手获胜。</p><p>编写一个 SQL 查询来查找每组中的获胜者。</p><p>查询结果格式如下所示</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Players 表:</span><br><span class="line">+-----------+------------+</span><br><span class="line">| player_id | group_id   |</span><br><span class="line">+-----------+------------+</span><br><span class="line">| 15        | 1          |</span><br><span class="line">| 25        | 1          |</span><br><span class="line">| 30        | 1          |</span><br><span class="line">| 45        | 1          |</span><br><span class="line">| 10        | 2          |</span><br><span class="line">| 35        | 2          |</span><br><span class="line">| 50        | 2          |</span><br><span class="line">| 20        | 3          |</span><br><span class="line">| 40        | 3          |</span><br><span class="line">+-----------+------------+</span><br><span class="line"></span><br><span class="line">Matches 表:</span><br><span class="line">+------------+--------------+---------------+-------------+--------------+</span><br><span class="line">| match_id   | first_player | second_player | first_score | second_score |</span><br><span class="line">+------------+--------------+---------------+-------------+--------------+</span><br><span class="line">| 1          | 15           | 45            | 3           | 0            |</span><br><span class="line">| 2          | 30           | 25            | 1           | 2            |</span><br><span class="line">| 3          | 30           | 15            | 2           | 0            |</span><br><span class="line">| 4          | 40           | 20            | 5           | 2            |</span><br><span class="line">| 5          | 35           | 50            | 1           | 1            |</span><br><span class="line">+------------+--------------+---------------+-------------+--------------+</span><br><span class="line"></span><br><span class="line">Result 表:</span><br><span class="line">+-----------+------------+</span><br><span class="line">| group_id  | player_id  |</span><br><span class="line">+-----------+------------+ </span><br><span class="line">| 1         | 15         |</span><br><span class="line">| 2         | 35         |</span><br><span class="line">| 3         | 40         |</span><br><span class="line">+-----------+------------+</span><br></pre></td></tr></table></figure><p>union all</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> group_id, player_id</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> group_id, player_id, <span class="built_in">SUM</span>(score) <span class="keyword">AS</span> score</span><br><span class="line">    <span class="keyword">FROM</span> (</span><br><span class="line">        <span class="comment">-- 每个用户总的 first_score</span></span><br><span class="line">        <span class="keyword">SELECT</span> Players.group_id, Players.player_id, <span class="built_in">SUM</span>(Matches.first_score) <span class="keyword">AS</span> score</span><br><span class="line">        <span class="keyword">FROM</span> Players <span class="keyword">JOIN</span> <span class="keyword">Matches</span> <span class="keyword">ON</span> Players.player_id <span class="operator">=</span> Matches.first_player</span><br><span class="line">        <span class="keyword">GROUP</span> <span class="keyword">BY</span> Players.player_id</span><br><span class="line"></span><br><span class="line">        <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">-- 每个用户总的 second_score</span></span><br><span class="line">        <span class="keyword">SELECT</span> Players.group_id, Players.player_id, <span class="built_in">SUM</span>(Matches.second_score) <span class="keyword">AS</span> score</span><br><span class="line">        <span class="keyword">FROM</span> Players <span class="keyword">JOIN</span> <span class="keyword">Matches</span> <span class="keyword">ON</span> Players.player_id <span class="operator">=</span> Matches.second_player</span><br><span class="line">        <span class="keyword">GROUP</span> <span class="keyword">BY</span> Players.player_id</span><br><span class="line">    ) s</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> player_id</span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> score <span class="keyword">DESC</span>, player_id</span><br><span class="line">) <span class="keyword">result</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> group_id</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> group_id, player_id</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> players.<span class="operator">*</span>, <span class="built_in">sum</span>(if(player_id <span class="operator">=</span> first_player, first_score, second_score)) score</span><br><span class="line">    <span class="keyword">from</span> players <span class="keyword">join</span> <span class="keyword">matches</span></span><br><span class="line">    <span class="keyword">on</span> player_id <span class="operator">=</span> first_player <span class="keyword">or</span> player_id <span class="operator">=</span> second_player</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> player_id</span><br><span class="line">    <span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">desc</span>, player_id</span><br><span class="line">) tmp</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> group_id</span><br></pre></td></tr></table></figure><h4 id="1204-最后一个能进入电梯的人"><a href="#1204-最后一个能进入电梯的人" class="headerlink" title="1204. 最后一个能进入电梯的人"></a><a href="https://leetcode-cn.com/problems/last-person-to-fit-in-the-elevator/">1204. 最后一个能进入电梯的人</a></h4><p>难度中等</p><p>SQL架构</p><p>表: <code>Queue</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| person_id   | int     |</span><br><span class="line">| person_name | varchar |</span><br><span class="line">| weight      | int     |</span><br><span class="line">| turn        | int     |</span><br><span class="line">+-------------+---------+</span><br><span class="line">person_id 是这个表的主键。</span><br><span class="line">该表展示了所有等待电梯的人的信息。</span><br><span class="line">表中 person_id 和 turn 列将包含从 1 到 n 的所有数字，其中 n 是表中的行数。</span><br></pre></td></tr></table></figure><p>电梯最大载重量为 <strong>1000</strong>。</p><p>写一条 SQL 查询语句查找最后一个能进入电梯且不超过重量限制的 <code>person_name</code> 。题目确保队列中第一位的人可以进入电梯 。</p><p>查询结果如下所示 :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Queue 表</span><br><span class="line">+-----------+-------------------+--------+------+</span><br><span class="line">| person_id | person_name       | weight | turn |</span><br><span class="line">+-----------+-------------------+--------+------+</span><br><span class="line">| 5         | George Washington | 250    | 1    |</span><br><span class="line">| 3         | John Adams        | 350    | 2    |</span><br><span class="line">| 6         | Thomas Jefferson  | 400    | 3    |</span><br><span class="line">| 2         | Will Johnliams    | 200    | 4    |</span><br><span class="line">| 4         | Thomas Jefferson  | 175    | 5    |</span><br><span class="line">| 1         | James Elephant    | 500    | 6    |</span><br><span class="line">+-----------+-------------------+--------+------+</span><br><span class="line"></span><br><span class="line">Result 表</span><br><span class="line">+-------------------+</span><br><span class="line">| person_name       |</span><br><span class="line">+-------------------+</span><br><span class="line">| Thomas Jefferson  |</span><br><span class="line">+-------------------+</span><br><span class="line"></span><br><span class="line">为了简化，Queue 表按 turn 列由小到大排序。</span><br><span class="line">上例中 George Washington(id 5), John Adams(id 3) 和 Thomas Jefferson(id 6) 将可以进入电梯,因为他们的体重和为 250 + 350 + 400 = 1000。</span><br><span class="line">Thomas Jefferson(id 6) 是最后一个体重合适并进入电梯的人。</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> person_name</span><br><span class="line"><span class="keyword">from</span>(</span><br><span class="line">    <span class="keyword">select</span> person_name  ,<span class="built_in">sum</span>(weight) <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> turn) t</span><br><span class="line">    <span class="keyword">from</span> Queue</span><br><span class="line">)t1</span><br><span class="line"><span class="keyword">where</span> t<span class="operator">&lt;=</span><span class="number">1000</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> t <span class="keyword">desc</span> </span><br><span class="line">limit <span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="1211-查询结果的质量和占比"><a href="#1211-查询结果的质量和占比" class="headerlink" title="1211. 查询结果的质量和占比"></a><a href="https://leetcode-cn.com/problems/queries-quality-and-percentage/">1211. 查询结果的质量和占比</a></h4><p>难度简单</p><p>SQL架构</p><p>查询表 <code>Queries</code>： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| query_name  | varchar |</span><br><span class="line">| result      | varchar |</span><br><span class="line">| position    | int     |</span><br><span class="line">| rating      | int     |</span><br><span class="line">+-------------+---------+</span><br><span class="line">此表没有主键，并可能有重复的行。</span><br><span class="line">此表包含了一些从数据库中收集的查询信息。</span><br><span class="line">“位置”（position）列的值为 1 到 500 。</span><br><span class="line">“评分”（rating）列的值为 1 到 5 。评分小于 3 的查询被定义为质量很差的查询。</span><br></pre></td></tr></table></figure><p>将查询结果的质量 <code>quality</code> 定义为：</p><blockquote><p>各查询结果的评分与其位置之间比率的平均值。</p></blockquote><p>将劣质查询百分比 <code>poor_query_percentage</code> 为：</p><blockquote><p>评分小于 3 的查询结果占全部查询结果的百分比。</p></blockquote><p>编写一组 SQL 来查找每次查询的<code>名称</code>(<code>query_name</code>)、<code>质量</code>(<code>quality</code>) 和 <code>劣质查询百分比</code>(<code>poor_query_percentage</code>)。</p><p><code>质量</code>(<code>quality</code>) 和<code>劣质查询百分比</code>(<code>poor_query_percentage</code>) 都应四舍五入到小数点后两位。</p><p>查询结果格式如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Queries table:</span><br><span class="line">+------------+-------------------+----------+--------+</span><br><span class="line">| query_name | result            | position | rating |</span><br><span class="line">+------------+-------------------+----------+--------+</span><br><span class="line">| Dog        | Golden Retriever  | 1        | 5      |</span><br><span class="line">| Dog        | German Shepherd   | 2        | 5      |</span><br><span class="line">| Dog        | Mule              | 200      | 1      |</span><br><span class="line">| Cat        | Shirazi           | 5        | 2      |</span><br><span class="line">| Cat        | Siamese           | 3        | 3      |</span><br><span class="line">| Cat        | Sphynx            | 7        | 4      |</span><br><span class="line">+------------+-------------------+----------+--------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+------------+---------+-----------------------+</span><br><span class="line">| query_name | quality | poor_query_percentage |</span><br><span class="line">+------------+---------+-----------------------+</span><br><span class="line">| Dog        | 2.50    | 33.33                 |</span><br><span class="line">| Cat        | 0.66    | 33.33                 |</span><br><span class="line">+------------+---------+-----------------------+</span><br><span class="line"></span><br><span class="line">Dog 查询结果的质量为 ((5 / 1) + (5 / 2) + (1 / 200)) / 3 = 2.50</span><br><span class="line">Dog 查询结果的劣质查询百分比为 (1 / 3) * 100 = 33.33</span><br><span class="line"></span><br><span class="line">Cat 查询结果的质量为 ((2 / 5) + (3 / 3) + (4 / 7)) / 3 = 0.66</span><br><span class="line">Cat 查询结果的劣质查询百分比为 (1 / 3) * 100 = 33.33</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> query_name,</span><br><span class="line">    round(<span class="built_in">avg</span>(rating<span class="operator">/</span>position),<span class="number">2</span>) quality,</span><br><span class="line">    round(<span class="built_in">sum</span>(if(rating<span class="operator">&lt;</span><span class="number">3</span>,<span class="number">1</span>,<span class="number">0</span>))<span class="operator">/</span><span class="built_in">count</span>(<span class="operator">*</span>)<span class="operator">*</span><span class="number">100</span>,<span class="number">2</span>) poor_query_percentage</span><br><span class="line"><span class="keyword">from</span> Queries</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> query_name</span><br></pre></td></tr></table></figure><h4 id="1212-查询球队积分"><a href="#1212-查询球队积分" class="headerlink" title="1212. 查询球队积分"></a><a href="https://leetcode-cn.com/problems/team-scores-in-football-tournament/">1212. 查询球队积分</a></h4><p>难度中等</p><p>SQL架构</p><p>Table: <code>Teams</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+---------------+----------+</span><br><span class="line">| Column Name   | Type     |</span><br><span class="line">+---------------+----------+</span><br><span class="line">| team_id       | int      |</span><br><span class="line">| team_name     | varchar  |</span><br><span class="line">+---------------+----------+</span><br><span class="line">此表的主键是 team_id，表中的每一行都代表一支独立足球队。</span><br></pre></td></tr></table></figure><p>Table: <code>Matches</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| match_id      | int     |</span><br><span class="line">| host_team     | int     |</span><br><span class="line">| guest_team    | int     | </span><br><span class="line">| host_goals    | int     |</span><br><span class="line">| guest_goals   | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">此表的主键是 match_id，表中的每一行都代表一场已结束的比赛，比赛的主客队分别由它们自己的 id 表示，他们的进球由 host_goals 和 guest_goals 分别表示。</span><br></pre></td></tr></table></figure><p>积分规则如下：</p><ul><li>赢一场得三分；</li><li>平一场得一分；</li><li>输一场不得分。</li></ul><p>写出一条SQL语句以查询每个队的 <strong>team_id</strong>，<strong>team_name</strong> 和 <strong>num_points</strong>。结果根据 num_points <strong>降序排序</strong>，如果有两队积分相同，那么这两队按 team_id <strong>升序排序</strong>。</p><p>查询结果格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Teams table:</span><br><span class="line">+-----------+--------------+</span><br><span class="line">| team_id   | team_name    |</span><br><span class="line">+-----------+--------------+</span><br><span class="line">| 10        | Leetcode FC  |</span><br><span class="line">| 20        | NewYork FC   |</span><br><span class="line">| 30        | Atlanta FC   |</span><br><span class="line">| 40        | Chicago FC   |</span><br><span class="line">| 50        | Toronto FC   |</span><br><span class="line">+-----------+--------------+</span><br><span class="line"></span><br><span class="line">Matches table:</span><br><span class="line">+------------+--------------+---------------+-------------+--------------+</span><br><span class="line">| match_id   | host_team    | guest_team    | host_goals  | guest_goals  |</span><br><span class="line">+------------+--------------+---------------+-------------+--------------+</span><br><span class="line">| 1          | 10           | 20            | 3           | 0            |</span><br><span class="line">| 2          | 30           | 10            | 2           | 2            |</span><br><span class="line">| 3          | 10           | 50            | 5           | 1            |</span><br><span class="line">| 4          | 20           | 30            | 1           | 0            |</span><br><span class="line">| 5          | 50           | 30            | 1           | 0            |</span><br><span class="line">+------------+--------------+---------------+-------------+--------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+------------+--------------+---------------+</span><br><span class="line">| team_id    | team_name    | num_points    |</span><br><span class="line">+------------+--------------+---------------+</span><br><span class="line">| 10         | Leetcode FC  | 7             |</span><br><span class="line">| 20         | NewYork FC   | 3             |</span><br><span class="line">| 50         | Toronto FC   | 3             |</span><br><span class="line">| 30         | Atlanta FC   | 1             |</span><br><span class="line">| 40         | Chicago FC   | 0             |</span><br><span class="line">+------------+--------------+---------------+</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> team_id , team_name ,<span class="built_in">sum</span>(</span><br><span class="line">if(team_id <span class="operator">=</span> host_team <span class="operator">&amp;&amp;</span> host_goals<span class="operator">&gt;</span>guest_goals ,<span class="number">3</span>,<span class="number">0</span>)<span class="operator">+</span></span><br><span class="line">if(team_id <span class="operator">=</span> host_team <span class="operator">&amp;&amp;</span> host_goals<span class="operator">=</span>guest_goals,<span class="number">1</span>,<span class="number">0</span>)<span class="operator">+</span></span><br><span class="line">if(team_id <span class="operator">=</span> guest_team <span class="operator">&amp;&amp;</span> host_goals<span class="operator">=</span>guest_goals,<span class="number">1</span>,<span class="number">0</span>)<span class="operator">+</span></span><br><span class="line">if(team_id <span class="operator">=</span> guest_team <span class="operator">&amp;&amp;</span> host_goals<span class="operator">&lt;</span>guest_goals ,<span class="number">3</span>,<span class="number">0</span>)</span><br><span class="line">)num_points</span><br><span class="line"><span class="keyword">from</span> Teams t <span class="keyword">left</span> <span class="keyword">join</span> <span class="keyword">Matches</span> m</span><br><span class="line"><span class="keyword">on</span> t.team_id <span class="operator">=</span>m.host_team  <span class="keyword">or</span> t.team_id <span class="operator">=</span>m.guest_team  </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> team_id ,team_name</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> num_points <span class="keyword">desc</span>,team_id</span><br></pre></td></tr></table></figure><h4 id="1225-报告系统状态的连续日期"><a href="#1225-报告系统状态的连续日期" class="headerlink" title="1225. 报告系统状态的连续日期"></a><a href="https://leetcode-cn.com/problems/report-contiguous-dates/">1225. 报告系统状态的连续日期</a></h4><p>难度困难</p><p>SQL架构</p><p>Table: <code>Failed</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+--------------+---------+</span><br><span class="line">| Column Name  | Type    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">| fail_date    | date    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">该表主键为 fail_date。</span><br><span class="line">该表包含失败任务的天数.</span><br></pre></td></tr></table></figure><p>Table: <code>Succeeded</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+--------------+---------+</span><br><span class="line">| Column Name  | Type    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">| success_date | date    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">该表主键为 success_date。</span><br><span class="line">该表包含成功任务的天数.</span><br></pre></td></tr></table></figure><p>系统 <strong>每天</strong> 运行一个任务。每个任务都独立于先前的任务。任务的状态可以是失败或是成功。</p><p>编写一个 SQL 查询 <strong>2019-01-01</strong> 到 <strong>2019-12-31</strong> 期间任务连续同状态 <code>period_state</code> 的起止日期（<code>start_date</code> 和 <code>end_date</code>）。即如果任务失败了，就是失败状态的起止日期，如果任务成功了，就是成功状态的起止日期。</p><p>最后结果按照起始日期 <code>start_date</code> 排序</p><p>查询结果样例如下所示:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Failed table:</span><br><span class="line">+-------------------+</span><br><span class="line">| fail_date         |</span><br><span class="line">+-------------------+</span><br><span class="line">| 2018-12-28        |</span><br><span class="line">| 2018-12-29        |</span><br><span class="line">| 2019-01-04        |</span><br><span class="line">| 2019-01-05        |</span><br><span class="line">+-------------------+</span><br><span class="line"></span><br><span class="line">Succeeded table:</span><br><span class="line">+-------------------+</span><br><span class="line">| success_date      |</span><br><span class="line">+-------------------+</span><br><span class="line">| 2018-12-30        |</span><br><span class="line">| 2018-12-31        |</span><br><span class="line">| 2019-01-01        |</span><br><span class="line">| 2019-01-02        |</span><br><span class="line">| 2019-01-03        |</span><br><span class="line">| 2019-01-06        |</span><br><span class="line">+-------------------+</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+--------------+--------------+--------------+</span><br><span class="line">| period_state | start_date   | end_date     |</span><br><span class="line">+--------------+--------------+--------------+</span><br><span class="line">| succeeded    | 2019-01-01   | 2019-01-03   |</span><br><span class="line">| failed       | 2019-01-04   | 2019-01-05   |</span><br><span class="line">| succeeded    | 2019-01-06   | 2019-01-06   |</span><br><span class="line">+--------------+--------------+--------------+</span><br><span class="line"></span><br><span class="line">结果忽略了 2018 年的记录，因为我们只关心从 2019-01-01 到 2019-12-31 的记录</span><br><span class="line">从 2019-01-01 到 2019-01-03 所有任务成功，系统状态为 &quot;succeeded&quot;。</span><br><span class="line">从 2019-01-04 到 2019-01-05 所有任务失败，系统状态为 &quot;failed&quot;。</span><br><span class="line">从 2019-01-06 到 2019-01-06 所有任务成功，系统状态为 &quot;succeeded&quot;。</span><br></pre></td></tr></table></figure><p>开窗函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> type  period_state, <span class="built_in">min</span>(<span class="type">date</span>) start_date, <span class="built_in">max</span>(<span class="type">date</span>) <span class="keyword">as</span> end_date</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> type, <span class="type">date</span>, subdate(<span class="type">date</span>,<span class="built_in">row_number</span>()<span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> type <span class="keyword">order</span> <span class="keyword">by</span> <span class="type">date</span>)) <span class="keyword">as</span> diff</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">select</span> <span class="string">&#x27;failed&#x27;</span> <span class="keyword">as</span> type, fail_date <span class="keyword">as</span> <span class="type">date</span> <span class="keyword">from</span> Failed</span><br><span class="line">        <span class="keyword">where</span> fail_date <span class="keyword">between</span> <span class="string">&#x27;2019-01-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2019-12-31&#x27;</span></span><br><span class="line">        <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">        <span class="keyword">select</span> <span class="string">&#x27;succeeded&#x27;</span> <span class="keyword">as</span> type, success_date <span class="keyword">as</span> <span class="type">date</span> <span class="keyword">from</span> Succeeded</span><br><span class="line">        <span class="keyword">where</span> success_date <span class="keyword">between</span> <span class="string">&#x27;2019-01-01&#x27;</span> <span class="keyword">and</span> <span class="string">&#x27;2019-12-31&#x27;</span></span><br><span class="line">    ) a</span><br><span class="line">)b</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> type,diff</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> start_date</span><br></pre></td></tr></table></figure><h4 id="1241-每个帖子的评论数"><a href="#1241-每个帖子的评论数" class="headerlink" title="1241. 每个帖子的评论数"></a><a href="https://leetcode-cn.com/problems/number-of-comments-per-post/">1241. 每个帖子的评论数</a></h4><p>难度简单</p><p>SQL架构</p><p>表 <code>Submissions</code> 结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+---------------+----------+</span><br><span class="line">| 列名           | 类型     |</span><br><span class="line">+---------------+----------+</span><br><span class="line">| sub_id        | int      |</span><br><span class="line">| parent_id     | int      |</span><br><span class="line">+---------------+----------+</span><br><span class="line">上表没有主键, 所以可能会出现重复的行。</span><br><span class="line">每行可以是一个帖子或对该帖子的评论。</span><br><span class="line">如果是帖子的话，parent_id 就是 null。</span><br><span class="line">对于评论来说，parent_id 就是表中对应帖子的 sub_id。</span><br></pre></td></tr></table></figure><p>编写 SQL 语句以查找每个帖子的评论数。</p><p>结果表应包含帖子的 <code>post_id</code> 和对应的评论数 <code>number_of_comments</code> 并且按 <code>post_id</code> 升序排列。</p><p><code>Submissions</code> 可能包含重复的评论。您应该计算每个帖子的唯一评论数。</p><p><code>Submissions</code> 可能包含重复的帖子。您应该将它们视为一个帖子。</p><p>查询结果格式如下例所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Submissions table:</span><br><span class="line">+---------+------------+</span><br><span class="line">| sub_id  | parent_id  |</span><br><span class="line">+---------+------------+</span><br><span class="line">| 1       | Null       |</span><br><span class="line">| 2       | Null       |</span><br><span class="line">| 1       | Null       |</span><br><span class="line">| 12      | Null       |</span><br><span class="line">| 3       | 1          |</span><br><span class="line">| 5       | 2          |</span><br><span class="line">| 3       | 1          |</span><br><span class="line">| 4       | 1          |</span><br><span class="line">| 9       | 1          |</span><br><span class="line">| 10      | 2          |</span><br><span class="line">| 6       | 7          |</span><br><span class="line">+---------+------------+</span><br><span class="line"></span><br><span class="line">结果表：</span><br><span class="line">+---------+--------------------+</span><br><span class="line">| post_id | number_of_comments |</span><br><span class="line">+---------+--------------------+</span><br><span class="line">| 1       | 3                  |</span><br><span class="line">| 2       | 2                  |</span><br><span class="line">| 12      | 0                  |</span><br><span class="line">+---------+--------------------+</span><br><span class="line"></span><br><span class="line">表中 ID 为 1 的帖子有 ID 为 3、4 和 9 的三个评论。表中 ID 为 3 的评论重复出现了，所以我们只对它进行了一次计数。</span><br><span class="line">表中 ID 为 2 的帖子有 ID 为 5 和 10 的两个评论。</span><br><span class="line">ID 为 12 的帖子在表中没有评论。</span><br><span class="line">表中 ID 为 6 的评论是对 ID 为 7 的已删除帖子的评论，因此我们将其忽略。</span><br></pre></td></tr></table></figure><p>后join</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> s.sub_id post_id,ifnull(number_of_comments,<span class="number">0</span>) number_of_comments</span><br><span class="line"><span class="keyword">from</span> Submissions s</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> (</span><br><span class="line">  <span class="keyword">select</span> parent_id ,<span class="built_in">count</span>(<span class="keyword">distinct</span> sub_id) number_of_comments</span><br><span class="line">  <span class="keyword">from</span> Submissions </span><br><span class="line">  <span class="keyword">group</span> <span class="keyword">by</span> parent_id</span><br><span class="line">) t1</span><br><span class="line"><span class="keyword">on</span> s.sub_id <span class="operator">=</span> t1.parent_id</span><br><span class="line"><span class="keyword">where</span> s.parent_id  <span class="keyword">is</span> <span class="keyword">null</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> post_id,number_of_comments</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> sub_id</span><br></pre></td></tr></table></figure><p>先join</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> post_id, <span class="built_in">COUNT</span>(sub_id) <span class="keyword">AS</span> number_of_comments</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> post.sub_id <span class="keyword">AS</span> post_id, sub.sub_id <span class="keyword">AS</span> sub_id</span><br><span class="line">    <span class="keyword">FROM</span> Submissions post</span><br><span class="line">    <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Submissions sub</span><br><span class="line">    <span class="keyword">ON</span> post.sub_id <span class="operator">=</span> sub.parent_id</span><br><span class="line">    <span class="keyword">WHERE</span> post.parent_id <span class="keyword">is</span> <span class="keyword">null</span></span><br><span class="line">) T</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> post_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> post_id <span class="keyword">ASC</span></span><br></pre></td></tr></table></figure><h4 id="1251-平均售价"><a href="#1251-平均售价" class="headerlink" title="1251. 平均售价"></a><a href="https://leetcode-cn.com/problems/average-selling-price/">1251. 平均售价</a></h4><p>难度简单</p><p>SQL架构</p><p>Table: <code>Prices</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| product_id    | int     |</span><br><span class="line">| start_date    | date    |</span><br><span class="line">| end_date      | date    |</span><br><span class="line">| price         | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">(product_id，start_date，end_date) 是 Prices 表的主键。</span><br><span class="line">Prices 表的每一行表示的是某个产品在一段时期内的价格。</span><br><span class="line">每个产品的对应时间段是不会重叠的，这也意味着同一个产品的价格时段不会出现交叉。</span><br></pre></td></tr></table></figure><p>Table: <code>UnitsSold</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| product_id    | int     |</span><br><span class="line">| purchase_date | date    |</span><br><span class="line">| units         | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">UnitsSold 表没有主键，它可能包含重复项。</span><br><span class="line">UnitsSold 表的每一行表示的是每种产品的出售日期，单位和产品 id。</span><br></pre></td></tr></table></figure><p>编写SQL查询以查找每种产品的平均售价。<br><code>average_price</code> 应该四舍五入到小数点后两位。<br>查询结果格式如下例所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Prices table:</span><br><span class="line">+------------+------------+------------+--------+</span><br><span class="line">| product_id | start_date | end_date   | price  |</span><br><span class="line">+------------+------------+------------+--------+</span><br><span class="line">| 1          | 2019-02-17 | 2019-02-28 | 5      |</span><br><span class="line">| 1          | 2019-03-01 | 2019-03-22 | 20     |</span><br><span class="line">| 2          | 2019-02-01 | 2019-02-20 | 15     |</span><br><span class="line">| 2          | 2019-02-21 | 2019-03-31 | 30     |</span><br><span class="line">+------------+------------+------------+--------+</span><br><span class="line"> </span><br><span class="line">UnitsSold table:</span><br><span class="line">+------------+---------------+-------+</span><br><span class="line">| product_id | purchase_date | units |</span><br><span class="line">+------------+---------------+-------+</span><br><span class="line">| 1          | 2019-02-25    | 100   |</span><br><span class="line">| 1          | 2019-03-01    | 15    |</span><br><span class="line">| 2          | 2019-02-10    | 200   |</span><br><span class="line">| 2          | 2019-03-22    | 30    |</span><br><span class="line">+------------+---------------+-------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+------------+---------------+</span><br><span class="line">| product_id | average_price |</span><br><span class="line">+------------+---------------+</span><br><span class="line">| 1          | 6.96          |</span><br><span class="line">| 2          | 16.96         |</span><br><span class="line">+------------+---------------+</span><br><span class="line">平均售价 = 产品总价 / 销售的产品数量。</span><br><span class="line">产品 1 的平均售价 = ((100 * 5)+(15 * 20) )/ 115 = 6.96</span><br><span class="line">产品 2 的平均售价 = ((200 * 15)+(30 * 30) )/ 230 = 16.96</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    product_id,</span><br><span class="line">    Round(<span class="built_in">SUM</span>(sales) <span class="operator">/</span> <span class="built_in">SUM</span>(units), <span class="number">2</span>) <span class="keyword">AS</span> average_price</span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">    <span class="keyword">SELECT</span></span><br><span class="line">        Prices.product_id <span class="keyword">AS</span> product_id,</span><br><span class="line">        Prices.price <span class="operator">*</span> UnitsSold.units <span class="keyword">AS</span> sales,</span><br><span class="line">        UnitsSold.units <span class="keyword">AS</span> units</span><br><span class="line">    <span class="keyword">FROM</span> Prices </span><br><span class="line">    <span class="keyword">JOIN</span> UnitsSold <span class="keyword">ON</span> Prices.product_id <span class="operator">=</span> UnitsSold.product_id</span><br><span class="line">    <span class="keyword">WHERE</span> UnitsSold.purchase_date <span class="keyword">BETWEEN</span> Prices.start_date <span class="keyword">AND</span> Prices.end_date</span><br><span class="line">) T</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> product_id</span><br></pre></td></tr></table></figure><blockquote><p>2表关联的时候直接把日期做过滤</p></blockquote><h4 id="1264-页面推荐"><a href="#1264-页面推荐" class="headerlink" title="1264. 页面推荐"></a><a href="https://leetcode-cn.com/problems/page-recommendations/">1264. 页面推荐</a></h4><p>难度中等</p><p>SQL架构</p><p>朋友关系列表： <code>Friendship</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| user1_id      | int     |</span><br><span class="line">| user2_id      | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">这张表的主键是 (user1_id, user2_id)。</span><br><span class="line">这张表的每一行代表着 user1_id 和 user2_id 之间存在着朋友关系。</span><br></pre></td></tr></table></figure><p>喜欢列表： <code>Likes</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| Column Name | Type    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| user_id     | int     |</span><br><span class="line">| page_id     | int     |</span><br><span class="line">+-------------+---------+</span><br><span class="line">这张表的主键是 (user_id, page_id)。</span><br><span class="line">这张表的每一行代表着 user_id 喜欢 page_id。</span><br></pre></td></tr></table></figure><p>写一段 SQL  向<code>user_id</code> = 1 的用户，推荐其朋友们喜欢的页面。不要推荐该用户已经喜欢的页面。</p><p>你返回的结果中不应当包含重复项。</p><p>返回结果的格式如下例所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">Friendship table:</span><br><span class="line">+----------+----------+</span><br><span class="line">| user1_id | user2_id |</span><br><span class="line">+----------+----------+</span><br><span class="line">| 1        | 2        |</span><br><span class="line">| 1        | 3        |</span><br><span class="line">| 1        | 4        |</span><br><span class="line">| 2        | 3        |</span><br><span class="line">| 2        | 4        |</span><br><span class="line">| 2        | 5        |</span><br><span class="line">| 6        | 1        |</span><br><span class="line">+----------+----------+</span><br><span class="line"> </span><br><span class="line">Likes table:</span><br><span class="line">+---------+---------+</span><br><span class="line">| user_id | page_id |</span><br><span class="line">+---------+---------+</span><br><span class="line">| 1       | 88      |</span><br><span class="line">| 2       | 23      |</span><br><span class="line">| 3       | 24      |</span><br><span class="line">| 4       | 56      |</span><br><span class="line">| 5       | 11      |</span><br><span class="line">| 6       | 33      |</span><br><span class="line">| 2       | 77      |</span><br><span class="line">| 3       | 77      |</span><br><span class="line">| 6       | 88      |</span><br><span class="line">+---------+---------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+------------------+</span><br><span class="line">| recommended_page |</span><br><span class="line">+------------------+</span><br><span class="line">| 23               |</span><br><span class="line">| 24               |</span><br><span class="line">| 56               |</span><br><span class="line">| 33               |</span><br><span class="line">| 77               |</span><br><span class="line">+------------------+</span><br><span class="line">用户1 同 用户2, 3, 4, 6 是朋友关系。</span><br><span class="line">推荐页面为： 页面23 来自于 用户2, 页面24 来自于 用户3, 页面56 来自于 用户3 以及 页面33 来自于 用户6。</span><br><span class="line">页面77 同时被 用户2 和 用户3 推荐。</span><br><span class="line">页面88 没有被推荐，因为 用户1 已经喜欢了它。</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> page_id  recommended_page</span><br><span class="line"><span class="keyword">from</span> Likes</span><br><span class="line"><span class="keyword">where</span> user_id <span class="keyword">in</span>(</span><br><span class="line"><span class="keyword">select</span> if(user1_id<span class="operator">=</span><span class="number">1</span>,user2_id,user1_id) user_id</span><br><span class="line"><span class="keyword">from</span>  Friendship</span><br><span class="line"><span class="keyword">where</span>  user1_id <span class="operator">=</span><span class="number">1</span> <span class="keyword">or</span> user2_id <span class="operator">=</span><span class="number">1</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">and</span> page_id <span class="keyword">not</span> <span class="keyword">in</span> (<span class="keyword">select</span> page_id <span class="keyword">from</span> Likes <span class="keyword">where</span> user_id<span class="operator">=</span><span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="1270-向公司CEO汇报工作的所有人"><a href="#1270-向公司CEO汇报工作的所有人" class="headerlink" title="1270. 向公司CEO汇报工作的所有人"></a><a href="https://leetcode-cn.com/problems/all-people-report-to-the-given-manager/">1270. 向公司CEO汇报工作的所有人</a></h4><p>难度中等</p><p>SQL架构</p><p>员工表：<code>Employees</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| employee_id   | int     |</span><br><span class="line">| employee_name | varchar |</span><br><span class="line">| manager_id    | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">employee_id 是这个表的主键。</span><br><span class="line">这个表中每一行中，employee_id 表示职工的 ID，employee_name 表示职工的名字，manager_id 表示该职工汇报工作的直线经理。</span><br><span class="line">这个公司 CEO 是 employee_id = 1 的人。</span><br></pre></td></tr></table></figure><p>用 SQL 查询出所有直接或间接向公司 CEO 汇报工作的职工的 employee_id 。</p><p>由于公司规模较小，经理之间的间接关系不超过 3 个经理。</p><p>可以以任何顺序返回的结果，不需要去重。</p><p>查询结果示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Employees table:</span><br><span class="line">+-------------+---------------+------------+</span><br><span class="line">| employee_id | employee_name | manager_id |</span><br><span class="line">+-------------+---------------+------------+</span><br><span class="line">| 1           | Boss          | 1          |</span><br><span class="line">| 3           | Alice         | 3          |</span><br><span class="line">| 2           | Bob           | 1          |</span><br><span class="line">| 4           | Daniel        | 2          |</span><br><span class="line">| 7           | Luis          | 4          |</span><br><span class="line">| 8           | Jhon          | 3          |</span><br><span class="line">| 9           | Angela        | 8          |</span><br><span class="line">| 77          | Robert        | 1          |</span><br><span class="line">+-------------+---------------+------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+-------------+</span><br><span class="line">| employee_id |</span><br><span class="line">+-------------+</span><br><span class="line">| 2           |</span><br><span class="line">| 77          |</span><br><span class="line">| 4           |</span><br><span class="line">| 7           |</span><br><span class="line">+-------------+</span><br><span class="line"></span><br><span class="line">公司 CEO 的 employee_id 是 1.</span><br><span class="line">employee_id 是 2 和 77 的职员直接汇报给公司 CEO。</span><br><span class="line">employee_id 是 4 的职员间接汇报给公司 CEO 4 --&gt; 2 --&gt; 1 。</span><br><span class="line">employee_id 是 7 的职员间接汇报给公司 CEO 7 --&gt; 4 --&gt; 2 --&gt; 1 。</span><br><span class="line">employee_id 是 3, 8 ，9 的职员不会直接或间接的汇报给公司 CEO。 </span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> employee_id</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span> a.employee_id</span><br><span class="line"><span class="keyword">from</span> Employees a </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> Employees b <span class="keyword">on</span> a.manager_id <span class="operator">=</span> b.employee_id</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> Employees c <span class="keyword">on</span> b.manager_id <span class="operator">=</span> c.employee_id</span><br><span class="line"><span class="keyword">where</span> a.manager_id<span class="operator">=</span><span class="number">1</span> <span class="keyword">or</span> b.manager_id<span class="operator">=</span><span class="number">1</span>  <span class="keyword">or</span> c.manager_id<span class="operator">=</span><span class="number">1</span></span><br><span class="line">)t1</span><br><span class="line"><span class="keyword">where</span> employee_id<span class="operator">!=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><h4 id="1280-学生们参加各科测试的次数"><a href="#1280-学生们参加各科测试的次数" class="headerlink" title="1280. 学生们参加各科测试的次数"></a><a href="https://leetcode-cn.com/problems/students-and-examinations/">1280. 学生们参加各科测试的次数</a></h4><p>难度简单</p><p>SQL架构</p><p>学生表: <code>Students</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| student_id    | int     |</span><br><span class="line">| student_name  | varchar |</span><br><span class="line">+---------------+---------+</span><br><span class="line">主键为 student_id（学生ID），该表内的每一行都记录有学校一名学生的信息。</span><br></pre></td></tr></table></figure><p>科目表: <code>Subjects</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">+--------------+---------+</span><br><span class="line">| Column Name  | Type    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">| subject_name | varchar |</span><br><span class="line">+--------------+---------+</span><br><span class="line">主键为 subject_name（科目名称），每一行记录学校的一门科目名称。</span><br></pre></td></tr></table></figure><p>考试表: <code>Examinations</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+--------------+---------+</span><br><span class="line">| Column Name  | Type    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">| student_id   | int     |</span><br><span class="line">| subject_name | varchar |</span><br><span class="line">+--------------+---------+</span><br><span class="line">这张表压根没有主键，可能会有重复行。</span><br><span class="line">学生表里的一个学生修读科目表里的每一门科目，而这张考试表的每一行记录就表示学生表里的某个学生参加了一次科目表里某门科目的测试。</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> a.student_id, a.student_name, b.subject_name, <span class="built_in">COUNT</span>(e.subject_name) <span class="keyword">AS</span> attended_exams</span><br><span class="line"><span class="keyword">FROM</span> Students a <span class="keyword">CROSS</span> <span class="keyword">JOIN</span> Subjects b</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Examinations e <span class="keyword">ON</span> a.student_id <span class="operator">=</span> e.student_id <span class="keyword">AND</span> b.subject_name <span class="operator">=</span> e.subject_name</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> a.student_id, b.subject_name</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> a.student_id, b.subject_name</span><br></pre></td></tr></table></figure><blockquote><p> CROSS JOIN Mysql中没有full outer join     hive中可以用</p></blockquote><h4 id="1285-找到连续区间的开始和结束数字"><a href="#1285-找到连续区间的开始和结束数字" class="headerlink" title="1285. 找到连续区间的开始和结束数字"></a><a href="https://leetcode-cn.com/problems/find-the-start-and-end-number-of-continuous-ranges/">1285. 找到连续区间的开始和结束数字</a></h4><p>难度中等</p><p>SQL架构</p><p>表：<code>Logs</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| log_id        | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">id 是上表的主键。</span><br><span class="line">上表的每一行包含日志表中的一个 ID。</span><br></pre></td></tr></table></figure><p>后来一些 ID 从 <code>Logs</code> 表中删除。编写一个 SQL 查询得到 <code>Logs</code> 表中的连续区间的开始数字和结束数字。</p><p>将查询表按照 <code>start_id</code> 排序。</p><p>查询结果格式如下面的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Logs 表：</span><br><span class="line">+------------+</span><br><span class="line">| log_id     |</span><br><span class="line">+------------+</span><br><span class="line">| 1          |</span><br><span class="line">| 2          |</span><br><span class="line">| 3          |</span><br><span class="line">| 7          |</span><br><span class="line">| 8          |</span><br><span class="line">| 10         |</span><br><span class="line">+------------+</span><br><span class="line"></span><br><span class="line">结果表：</span><br><span class="line">+------------+--------------+</span><br><span class="line">| start_id   | end_id       |</span><br><span class="line">+------------+--------------+</span><br><span class="line">| 1          | 3            |</span><br><span class="line">| 7          | 8            |</span><br><span class="line">| 10         | 10           |</span><br><span class="line">+------------+--------------+</span><br><span class="line">结果表应包含 Logs 表中的所有区间。</span><br><span class="line">从 1 到 3 在表中。</span><br><span class="line">从 4 到 6 不在表中。</span><br><span class="line">从 7 到 8 在表中。</span><br><span class="line">9 不在表中。</span><br><span class="line">10 在表中。</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="built_in">MIN</span>(log_id) start_id,</span><br><span class="line">    <span class="built_in">MAX</span>(log_id) end_id</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    (<span class="keyword">SELECT</span></span><br><span class="line">        log_id, </span><br><span class="line">        log_id <span class="operator">-</span> <span class="built_in">row_number</span>() <span class="keyword">OVER</span>(<span class="keyword">ORDER</span> <span class="keyword">BY</span> log_id) <span class="keyword">as</span> diff</span><br><span class="line">    <span class="keyword">FROM</span> Logs) t</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> diff</span><br></pre></td></tr></table></figure><blockquote><p>相似1225题</p></blockquote><h4 id="1294-不同国家的天气类型"><a href="#1294-不同国家的天气类型" class="headerlink" title="1294. 不同国家的天气类型"></a><a href="https://leetcode-cn.com/problems/weather-type-in-each-country/">1294. 不同国家的天气类型</a></h4><p>难度简单</p><p>SQL架构</p><p>国家表：<code>Countries</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| country_id    | int     |</span><br><span class="line">| country_name  | varchar |</span><br><span class="line">+---------------+---------+</span><br><span class="line">country_id 是这张表的主键。</span><br><span class="line">该表的每行有 country_id 和 country_name 两列。</span><br></pre></td></tr></table></figure><p>天气表：<code>Weather</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| country_id    | int     |</span><br><span class="line">| weather_state | varchar |</span><br><span class="line">| day           | date    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">(country_id, day) 是该表的复合主键。</span><br><span class="line">该表的每一行记录了某个国家某一天的天气情况。</span><br></pre></td></tr></table></figure><p>写一段 SQL 来找到表中每个国家在 2019 年 11 月的天气类型。</p><p>天气类型的定义如下：当 weather_state 的平均值小于或等于15返回 <strong>Cold</strong>，当 weather_state 的平均值大于或等于 25 返回 <strong>Hot</strong>，否则返回 <strong>Warm</strong>。</p><p>你可以以任意顺序返回你的查询结果。</p><p>查询结果格式如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">Countries table:</span><br><span class="line">+------------+--------------+</span><br><span class="line">| country_id | country_name |</span><br><span class="line">+------------+--------------+</span><br><span class="line">| 2          | USA          |</span><br><span class="line">| 3          | Australia    |</span><br><span class="line">| 7          | Peru         |</span><br><span class="line">| 5          | China        |</span><br><span class="line">| 8          | Morocco      |</span><br><span class="line">| 9          | Spain        |</span><br><span class="line">+------------+--------------+</span><br><span class="line">Weather table:</span><br><span class="line">+------------+---------------+------------+</span><br><span class="line">| country_id | weather_state | day        |</span><br><span class="line">+------------+---------------+------------+</span><br><span class="line">| 2          | 15            | 2019-11-01 |</span><br><span class="line">| 2          | 12            | 2019-10-28 |</span><br><span class="line">| 2          | 12            | 2019-10-27 |</span><br><span class="line">| 3          | -2            | 2019-11-10 |</span><br><span class="line">| 3          | 0             | 2019-11-11 |</span><br><span class="line">| 3          | 3             | 2019-11-12 |</span><br><span class="line">| 5          | 16            | 2019-11-07 |</span><br><span class="line">| 5          | 18            | 2019-11-09 |</span><br><span class="line">| 5          | 21            | 2019-11-23 |</span><br><span class="line">| 7          | 25            | 2019-11-28 |</span><br><span class="line">| 7          | 22            | 2019-12-01 |</span><br><span class="line">| 7          | 20            | 2019-12-02 |</span><br><span class="line">| 8          | 25            | 2019-11-05 |</span><br><span class="line">| 8          | 27            | 2019-11-15 |</span><br><span class="line">| 8          | 31            | 2019-11-25 |</span><br><span class="line">| 9          | 7             | 2019-10-23 |</span><br><span class="line">| 9          | 3             | 2019-12-23 |</span><br><span class="line">+------------+---------------+------------+</span><br><span class="line">Result table:</span><br><span class="line">+--------------+--------------+</span><br><span class="line">| country_name | weather_type |</span><br><span class="line">+--------------+--------------+</span><br><span class="line">| USA          | Cold         |</span><br><span class="line">| Austraila    | Cold         |</span><br><span class="line">| Peru         | Hot          |</span><br><span class="line">| China        | Warm         |</span><br><span class="line">| Morocco      | Hot          |</span><br><span class="line">+--------------+--------------+</span><br><span class="line">USA 11 月的平均 weather_state 为 (15) / 1 = 15 所以天气类型为 Cold。</span><br><span class="line">Australia 11 月的平均 weather_state 为 (-2 + 0 + 3) / 3 = 0.333 所以天气类型为 Cold。</span><br><span class="line">Peru 11 月的平均 weather_state 为 (25) / 1 = 25 所以天气类型为 Hot。</span><br><span class="line">China 11 月的平均 weather_state 为 (16 + 18 + 21) / 3 = 18.333 所以天气类型为 Warm。</span><br><span class="line">Morocco 11 月的平均 weather_state 为 (25 + 27 + 31) / 3 = 27.667 所以天气类型为 Hot。</span><br><span class="line">我们并不知道 Spain 在 11 月的 weather_state 情况所以无需将他包含在结果中。</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> country_name,( <span class="keyword">case</span> <span class="keyword">when</span> <span class="built_in">avg</span>(weather_state)<span class="operator">&lt;=</span><span class="number">15</span> <span class="keyword">then</span> <span class="string">&#x27;Cold&#x27;</span></span><br><span class="line">                        <span class="keyword">when</span> <span class="built_in">avg</span>(weather_state)<span class="operator">&gt;=</span><span class="number">25</span> <span class="keyword">then</span> <span class="string">&#x27;Hot&#x27;</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="string">&#x27;Warm&#x27;</span> <span class="keyword">end</span> ) weather_type</span><br><span class="line"><span class="keyword">from</span> Countries c <span class="keyword">join</span> Weather w <span class="keyword">on</span> c.country_id <span class="operator">=</span> w.country_id</span><br><span class="line"><span class="keyword">where</span> date_format(<span class="keyword">day</span>,&quot;%Y-%m&quot;)<span class="operator">=</span><span class="string">&#x27;2019-11&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> country_name</span><br></pre></td></tr></table></figure><h4 id="1303-求团队人数"><a href="#1303-求团队人数" class="headerlink" title="1303. 求团队人数"></a><a href="https://leetcode-cn.com/problems/find-the-team-size/">1303. 求团队人数</a></h4><p>难度简单</p><p>SQL架构</p><p>员工表：<code>Employee</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| employee_id   | int     |</span><br><span class="line">| team_id       | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">employee_id 字段是这张表的主键，表中的每一行都包含每个员工的 ID 和他们所属的团队。</span><br></pre></td></tr></table></figure><p>编写一个 SQL 查询，以求得每个员工所在团队的总人数。</p><p>查询结果中的顺序无特定要求。</p><p>查询结果格式示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Employee Table:</span><br><span class="line">+-------------+------------+</span><br><span class="line">| employee_id | team_id    |</span><br><span class="line">+-------------+------------+</span><br><span class="line">|     1       |     8      |</span><br><span class="line">|     2       |     8      |</span><br><span class="line">|     3       |     8      |</span><br><span class="line">|     4       |     7      |</span><br><span class="line">|     5       |     9      |</span><br><span class="line">|     6       |     9      |</span><br><span class="line">+-------------+------------+</span><br><span class="line">Result table:</span><br><span class="line">+-------------+------------+</span><br><span class="line">| employee_id | team_size  |</span><br><span class="line">+-------------+------------+</span><br><span class="line">|     1       |     3      |</span><br><span class="line">|     2       |     3      |</span><br><span class="line">|     3       |     3      |</span><br><span class="line">|     4       |     1      |</span><br><span class="line">|     5       |     2      |</span><br><span class="line">|     6       |     2      |</span><br><span class="line">+-------------+------------+</span><br><span class="line">ID 为 1、2、3 的员工是 team_id 为 8 的团队的成员，</span><br><span class="line">ID 为 4 的员工是 team_id 为 7 的团队的成员，</span><br><span class="line">ID 为 5、6 的员工是 team_id 为 9 的团队的成员。</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> employee_id,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> team_id) team_size </span><br><span class="line"><span class="keyword">from</span> Employee</span><br></pre></td></tr></table></figure><h4 id="1308-不同性别每日分数总计"><a href="#1308-不同性别每日分数总计" class="headerlink" title="1308. 不同性别每日分数总计"></a><a href="https://leetcode-cn.com/problems/running-total-for-different-genders/">1308. 不同性别每日分数总计</a></h4><p>难度中等</p><p>SQL架构</p><p>表: <code>Scores</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| player_name   | varchar |</span><br><span class="line">| gender        | varchar |</span><br><span class="line">| day           | date    |</span><br><span class="line">| score_points  | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">(gender, day)是该表的主键</span><br><span class="line">一场比赛是在女队和男队之间举行的</span><br><span class="line">该表的每一行表示一个名叫 (player_name) 性别为 (gender) 的参赛者在某一天获得了 (score_points) 的分数</span><br><span class="line">如果参赛者是女性，那么 gender 列为 &#x27;F&#x27;，如果参赛者是男性，那么 gender 列为 &#x27;M&#x27;</span><br></pre></td></tr></table></figure><p>写一条SQL语句查询每种性别在每一天的总分，并按性别和日期对查询结果排序</p><p>下面是查询结果格式的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">Scores表:</span><br><span class="line">+-------------+--------+------------+--------------+</span><br><span class="line">| player_name | gender | day        | score_points |</span><br><span class="line">+-------------+--------+------------+--------------+</span><br><span class="line">| Aron        | F      | 2020-01-01 | 17           |</span><br><span class="line">| Alice       | F      | 2020-01-07 | 23           |</span><br><span class="line">| Bajrang     | M      | 2020-01-07 | 7            |</span><br><span class="line">| Khali       | M      | 2019-12-25 | 11           |</span><br><span class="line">| Slaman      | M      | 2019-12-30 | 13           |</span><br><span class="line">| Joe         | M      | 2019-12-31 | 3            |</span><br><span class="line">| Jose        | M      | 2019-12-18 | 2            |</span><br><span class="line">| Priya       | F      | 2019-12-31 | 23           |</span><br><span class="line">| Priyanka    | F      | 2019-12-30 | 17           |</span><br><span class="line">+-------------+--------+------------+--------------+</span><br><span class="line">结果表:</span><br><span class="line">+--------+------------+-------+</span><br><span class="line">| gender | day        | total |</span><br><span class="line">+--------+------------+-------+</span><br><span class="line">| F      | 2019-12-30 | 17    |</span><br><span class="line">| F      | 2019-12-31 | 40    |</span><br><span class="line">| F      | 2020-01-01 | 57    |</span><br><span class="line">| F      | 2020-01-07 | 80    |</span><br><span class="line">| M      | 2019-12-18 | 2     |</span><br><span class="line">| M      | 2019-12-25 | 13    |</span><br><span class="line">| M      | 2019-12-30 | 26    |</span><br><span class="line">| M      | 2019-12-31 | 29    |</span><br><span class="line">| M      | 2020-01-07 | 36    |</span><br><span class="line">+--------+------------+-------+</span><br><span class="line">女性队伍:</span><br><span class="line">第一天是 2019-12-30，Priyanka 获得 17 分，队伍的总分是 17 分</span><br><span class="line">第二天是 2019-12-31, Priya 获得 23 分，队伍的总分是 40 分</span><br><span class="line">第三天是 2020-01-01, Aron 获得 17 分，队伍的总分是 57 分</span><br><span class="line">第四天是 2020-01-07, Alice 获得 23 分，队伍的总分是 80 分</span><br><span class="line">男性队伍：</span><br><span class="line">第一天是 2019-12-18, Jose 获得 2 分，队伍的总分是 2 分</span><br><span class="line">第二天是 2019-12-25, Khali 获得 11 分，队伍的总分是 13 分</span><br><span class="line">第三天是 2019-12-30, Slaman 获得 13 分，队伍的总分是 26 分</span><br><span class="line">第四天是 2019-12-31, Joe 获得 3 分，队伍的总分是 29 分</span><br><span class="line">第五天是 2020-01-07, Bajrang 获得 7 分，队伍的总分是 36 分</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> gender , <span class="keyword">day</span>  ,<span class="built_in">sum</span>( score_points) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> gender <span class="keyword">order</span> <span class="keyword">by</span> <span class="keyword">day</span>)  total</span><br><span class="line"><span class="keyword">from</span> Scores </span><br></pre></td></tr></table></figure><h4 id="1321-餐馆营业额变化增长"><a href="#1321-餐馆营业额变化增长" class="headerlink" title="1321. 餐馆营业额变化增长"></a><a href="https://leetcode-cn.com/problems/restaurant-growth/">1321. 餐馆营业额变化增长</a></h4><p>难度中等</p><p>SQL架构</p><p>表: <code>Customer</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| customer_id   | int     |</span><br><span class="line">| name          | varchar |</span><br><span class="line">| visited_on    | date    |</span><br><span class="line">| amount        | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">(customer_id, visited_on) 是该表的主键</span><br><span class="line">该表包含一家餐馆的顾客交易数据</span><br><span class="line">visited_on 表示 (customer_id) 的顾客在 visited_on 那天访问了餐馆</span><br><span class="line">amount 是一个顾客某一天的消费总额</span><br></pre></td></tr></table></figure><p>你是餐馆的老板，现在你想分析一下可能的营业额变化增长（每天至少有一位顾客）</p><p>写一条 SQL 查询计算以 7 天（某日期 + 该日期前的 6 天）为一个时间段的顾客消费平均值</p><p>查询结果格式的例子如下：</p><ul><li>查询结果按 <code>visited_on</code> 排序</li><li><code>average_amount</code> 要 <strong>保留两位小数</strong>，日期数据的格式为 (‘YYYY-MM-DD’)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Customer 表:</span><br><span class="line">+-------------+--------------+--------------+-------------+</span><br><span class="line">| customer_id | name         | visited_on   | amount      |</span><br><span class="line">+-------------+--------------+--------------+-------------+</span><br><span class="line">| 1           | Jhon         | 2019-01-01   | 100         |</span><br><span class="line">| 2           | Daniel       | 2019-01-02   | 110         |</span><br><span class="line">| 3           | Jade         | 2019-01-03   | 120         |</span><br><span class="line">| 4           | Khaled       | 2019-01-04   | 130         |</span><br><span class="line">| 5           | Winston      | 2019-01-05   | 110         | </span><br><span class="line">| 6           | Elvis        | 2019-01-06   | 140         | </span><br><span class="line">| 7           | Anna         | 2019-01-07   | 150         |</span><br><span class="line">| 8           | Maria        | 2019-01-08   | 80          |</span><br><span class="line">| 9           | Jaze         | 2019-01-09   | 110         | </span><br><span class="line">| 1           | Jhon         | 2019-01-10   | 130         | </span><br><span class="line">| 3           | Jade         | 2019-01-10   | 150         | </span><br><span class="line">+-------------+--------------+--------------+-------------+</span><br><span class="line"></span><br><span class="line">结果表:</span><br><span class="line">+--------------+--------------+----------------+</span><br><span class="line">| visited_on   | amount       | average_amount |</span><br><span class="line">+--------------+--------------+----------------+</span><br><span class="line">| 2019-01-07   | 860          | 122.86         |</span><br><span class="line">| 2019-01-08   | 840          | 120            |</span><br><span class="line">| 2019-01-09   | 840          | 120            |</span><br><span class="line">| 2019-01-10   | 1000         | 142.86         |</span><br><span class="line">+--------------+--------------+----------------+</span><br><span class="line"></span><br><span class="line">第一个七天消费平均值从 2019-01-01 到 2019-01-07 是 (100 + 110 + 120 + 130 + 110 + 140 + 150)/7 = 122.86</span><br><span class="line">第二个七天消费平均值从 2019-01-02 到 2019-01-08 是 (110 + 120 + 130 + 110 + 140 + 150 + 80)/7 = 120</span><br><span class="line">第三个七天消费平均值从 2019-01-03 到 2019-01-09 是 (120 + 130 + 110 + 140 + 150 + 80 + 110)/7 = 120</span><br><span class="line">第四个七天消费平均值从 2019-01-04 到 2019-01-10 是 (130 + 110 + 140 + 150 + 80 + 110 + 130 + 150)/7 = 142.86</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  visited_on,amount,round(amount<span class="operator">/</span><span class="number">7</span>,<span class="number">2</span>) average_amount</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> visited_on,ant,<span class="built_in">lag</span>(visited_on,<span class="number">6</span>,<span class="keyword">null</span>) <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> visited_on) lg,</span><br><span class="line">            <span class="built_in">sum</span>(ant) <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> visited_on <span class="keyword">rows</span> <span class="keyword">between</span> <span class="number">6</span> PRECEDING <span class="keyword">and</span> <span class="keyword">current</span> <span class="type">row</span>) amount</span><br><span class="line">    <span class="keyword">from</span>(</span><br><span class="line">        <span class="keyword">select</span>  visited_on  ,<span class="built_in">sum</span>(amount) ant</span><br><span class="line">        <span class="keyword">from</span> Customer</span><br><span class="line">        <span class="keyword">group</span> <span class="keyword">by</span> visited_on</span><br><span class="line">    )t1</span><br><span class="line">)t2</span><br><span class="line"><span class="keyword">where</span> lg <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span></span><br></pre></td></tr></table></figure><h4 id="1322-广告效果"><a href="#1322-广告效果" class="headerlink" title="1322. 广告效果"></a><a href="https://leetcode-cn.com/problems/ads-performance/">1322. 广告效果</a></h4><p>难度简单8收藏分享切换为英文关注反馈</p><p>SQL架构</p><p>表: <code>Ads</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| ad_id         | int     |</span><br><span class="line">| user_id       | int     |</span><br><span class="line">| action        | enum    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">(ad_id, user_id) 是该表的主键</span><br><span class="line">该表的每一行包含一条广告的 ID(ad_id)，用户的 ID(user_id) 和用户对广告采取的行为 (action)</span><br><span class="line">action 列是一个枚举类型 (&#x27;Clicked&#x27;, &#x27;Viewed&#x27;, &#x27;Ignored&#x27;) 。</span><br></pre></td></tr></table></figure><p>一家公司正在运营这些广告并想计算每条广告的效果。</p><p>广告效果用点击通过率（Click-Through Rate：CTR）来衡量，公式如下:</p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2020/03/06/sql1.png" alt="img"></p><p>写一条SQL语句来查询每一条广告的 <code>ctr</code> ，</p><p> <code>ctr</code> 要保留两位小数。结果需要按 <code>ctr</code> <strong>降序</strong>、按 <code>ad_id</code> <strong>升序</strong> 进行排序。</p><p>查询结果示例如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Ads 表:</span><br><span class="line">+-------+---------+---------+</span><br><span class="line">| ad_id | user_id | action  |</span><br><span class="line">+-------+---------+---------+</span><br><span class="line">| 1     | 1       | Clicked |</span><br><span class="line">| 2     | 2       | Clicked |</span><br><span class="line">| 3     | 3       | Viewed  |</span><br><span class="line">| 5     | 5       | Ignored |</span><br><span class="line">| 1     | 7       | Ignored |</span><br><span class="line">| 2     | 7       | Viewed  |</span><br><span class="line">| 3     | 5       | Clicked |</span><br><span class="line">| 1     | 4       | Viewed  |</span><br><span class="line">| 2     | 11      | Viewed  |</span><br><span class="line">| 1     | 2       | Clicked |</span><br><span class="line">+-------+---------+---------+</span><br><span class="line">结果表:</span><br><span class="line">+-------+-------+</span><br><span class="line">| ad_id | ctr   |</span><br><span class="line">+-------+-------+</span><br><span class="line">| 1     | 66.67 |</span><br><span class="line">| 3     | 50.00 |</span><br><span class="line">| 2     | 33.33 |</span><br><span class="line">| 5     | 0.00  |</span><br><span class="line">+-------+-------+</span><br><span class="line">对于 ad_id = 1, ctr = (2/(2+1)) * 100 = 66.67</span><br><span class="line">对于 ad_id = 2, ctr = (1/(1+2)) * 100 = 33.33</span><br><span class="line">对于 ad_id = 3, ctr = (1/(1+1)) * 100 = 50.00</span><br><span class="line">对于 ad_id = 5, ctr = 0.00, 注意 ad_id = 5 没有被点击 (Clicked) 或查看 (Viewed) 过</span><br><span class="line">注意我们不关心 action 为 Ingnored 的广告</span><br><span class="line">结果按 ctr（降序），ad_id（升序）排序</span><br></pre></td></tr></table></figure><p>精简</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> ad_id,</span><br><span class="line">    ROUND(IFNULL(<span class="built_in">SUM</span>(action <span class="operator">=</span> <span class="string">&#x27;Clicked&#x27;</span>) <span class="operator">/</span></span><br><span class="line">        (<span class="built_in">SUM</span>(action <span class="operator">=</span> <span class="string">&#x27;Clicked&#x27;</span>) <span class="operator">+</span> <span class="built_in">SUM</span>(action <span class="operator">=</span> <span class="string">&#x27;Viewed&#x27;</span>)) <span class="operator">*</span> <span class="number">100</span>, <span class="number">0</span>), <span class="number">2</span>) <span class="keyword">AS</span> ctr</span><br><span class="line"><span class="keyword">FROM</span> Ads</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> ad_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> ctr <span class="keyword">DESC</span>, ad_id <span class="keyword">ASC</span>;</span><br></pre></td></tr></table></figure><p>笨方法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.ad_id,ifnull(ctr,<span class="number">0</span>) ctr</span><br><span class="line"><span class="keyword">from</span> Ads a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> (</span><br><span class="line">    <span class="keyword">select</span> ad_id,round(<span class="built_in">sum</span>(if(action<span class="operator">=</span><span class="string">&#x27;Clicked&#x27;</span>,<span class="number">1</span>,<span class="number">0</span>))<span class="operator">/</span><span class="built_in">count</span>(<span class="operator">*</span>)<span class="operator">*</span><span class="number">100</span>,<span class="number">2</span>) ctr </span><br><span class="line">    <span class="keyword">from</span> Ads </span><br><span class="line">    <span class="keyword">where</span> action <span class="operator">!=</span><span class="string">&#x27;Ignored&#x27;</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> ad_id</span><br><span class="line">)t1 </span><br><span class="line"><span class="keyword">on</span> a.ad_id<span class="operator">=</span> t1.ad_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> ad_id,ctr</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> ctr <span class="keyword">desc</span>,ad_id</span><br></pre></td></tr></table></figure><h4 id="1327-列出指定时间段内所有的下单产品"><a href="#1327-列出指定时间段内所有的下单产品" class="headerlink" title="1327. 列出指定时间段内所有的下单产品"></a><a href="https://leetcode-cn.com/problems/list-the-products-ordered-in-a-period/">1327. 列出指定时间段内所有的下单产品</a></h4><p>难度简单</p><p>SQL架构</p><p>表: <code>Products</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+------------------+---------+</span><br><span class="line">| Column Name      | Type    |</span><br><span class="line">+------------------+---------+</span><br><span class="line">| product_id       | int     |</span><br><span class="line">| product_name     | varchar |</span><br><span class="line">| product_category | varchar |</span><br><span class="line">+------------------+---------+</span><br><span class="line">product_id 是该表主键。</span><br><span class="line">该表包含该公司产品的数据。</span><br></pre></td></tr></table></figure><p>表: <code>Orders</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| product_id    | int     |</span><br><span class="line">| order_date    | date    |</span><br><span class="line">| unit          | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">该表无主键，可能包含重复行。</span><br><span class="line">product_id 是表单 Products 的外键。</span><br><span class="line">unit 是在日期 order_date 内下单产品的数目。</span><br></pre></td></tr></table></figure><p>写一个 SQL 语句，要求获取在 2020 年 2 月份下单的数量不少于 100 的产品的名字和数目。</p><p>返回结果表单的顺序无要求。</p><p>查询结果的格式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">Products 表:</span><br><span class="line">+-------------+-----------------------+------------------+</span><br><span class="line">| product_id  | product_name          | product_category |</span><br><span class="line">+-------------+-----------------------+------------------+</span><br><span class="line">| 1           | Leetcode Solutions    | Book             |</span><br><span class="line">| 2           | Jewels of Stringology | Book             |</span><br><span class="line">| 3           | HP                    | Laptop           |</span><br><span class="line">| 4           | Lenovo                | Laptop           |</span><br><span class="line">| 5           | Leetcode Kit          | T-shirt          |</span><br><span class="line">+-------------+-----------------------+------------------+</span><br><span class="line"></span><br><span class="line">Orders 表:</span><br><span class="line">+--------------+--------------+----------+</span><br><span class="line">| product_id   | order_date   | unit     |</span><br><span class="line">+--------------+--------------+----------+</span><br><span class="line">| 1            | 2020-02-05   | 60       |</span><br><span class="line">| 1            | 2020-02-10   | 70       |</span><br><span class="line">| 2            | 2020-01-18   | 30       |</span><br><span class="line">| 2            | 2020-02-11   | 80       |</span><br><span class="line">| 3            | 2020-02-17   | 2        |</span><br><span class="line">| 3            | 2020-02-24   | 3        |</span><br><span class="line">| 4            | 2020-03-01   | 20       |</span><br><span class="line">| 4            | 2020-03-04   | 30       |</span><br><span class="line">| 4            | 2020-03-04   | 60       |</span><br><span class="line">| 5            | 2020-02-25   | 50       |</span><br><span class="line">| 5            | 2020-02-27   | 50       |</span><br><span class="line">| 5            | 2020-03-01   | 50       |</span><br><span class="line">+--------------+--------------+----------+</span><br><span class="line"></span><br><span class="line">Result 表:</span><br><span class="line">+--------------------+---------+</span><br><span class="line">| product_name       | unit    |</span><br><span class="line">+--------------------+---------+</span><br><span class="line">| Leetcode Solutions | 130     |</span><br><span class="line">| Leetcode Kit       | 100     |</span><br><span class="line">+--------------------+---------+</span><br><span class="line"></span><br><span class="line">2020 年 2 月份下单 product_id = 1 的产品的数目总和为 (60 + 70) = 130 。</span><br><span class="line">2020 年 2 月份下单 product_id = 2 的产品的数目总和为 80 。</span><br><span class="line">2020 年 2 月份下单 product_id = 3 的产品的数目总和为 (2 + 3) = 5 。</span><br><span class="line">2020 年 2 月份 product_id = 4 的产品并没有下单。</span><br><span class="line">2020 年 2 月份下单 product_id = 5 的产品的数目总和为 (50 + 50) = 100 。</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> product_name,<span class="built_in">sum</span>(unit) unit </span><br><span class="line"><span class="keyword">from</span> Orders o <span class="keyword">left</span> <span class="keyword">join</span> Products p</span><br><span class="line"><span class="keyword">on</span> o.product_id<span class="operator">=</span>p.product_id</span><br><span class="line"><span class="keyword">where</span> date_format(order_date,<span class="string">&#x27;%Y-%m&#x27;</span>)<span class="operator">=</span><span class="string">&#x27;2020-02&#x27;</span> </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> product_name</span><br><span class="line"><span class="keyword">having</span> unit<span class="operator">&gt;=</span><span class="number">100</span></span><br></pre></td></tr></table></figure><h4 id="1336-每次访问的交易次数"><a href="#1336-每次访问的交易次数" class="headerlink" title="1336. 每次访问的交易次数"></a><a href="https://leetcode-cn.com/problems/number-of-transactions-per-visit/">1336. 每次访问的交易次数</a></h4><p>难度困难</p><p>SQL架构</p><p>表: <code>Visits</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| user_id       | int     |</span><br><span class="line">| visit_date    | date    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">(user_id, visit_date) 是该表的主键</span><br><span class="line">该表的每行表示 user_id 在 visit_date 访问了银行</span><br></pre></td></tr></table></figure><p>表: <code>Transactions</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+------------------+---------+</span><br><span class="line">| Column Name      | Type    |</span><br><span class="line">+------------------+---------+</span><br><span class="line">| user_id          | int     |</span><br><span class="line">| transaction_date | date    |</span><br><span class="line">| amount           | int     |</span><br><span class="line">+------------------+---------+</span><br><span class="line">该表没有主键，所以可能有重复行</span><br><span class="line">该表的每一行表示 user_id 在 transaction_date 完成了一笔 amount 数额的交易</span><br><span class="line">可以保证用户 (user) 在 transaction_date 访问了银行 (也就是说 Visits 表包含 (user_id, transaction_date) 行)</span><br></pre></td></tr></table></figure><p>银行想要得到银行客户在一次访问时的交易次数和相应的在一次访问时该交易次数的客户数量的图表</p><p>写一条 SQL 查询多少客户访问了银行但没有进行任何交易，多少客户访问了银行进行了一次交易等等</p><p>结果包含两列：</p><ul><li><code>transactions_count：</code> 客户在一次访问中的交易次数</li><li><code>visits_count：</code> 在 <code>transactions_count</code> 交易次数下相应的一次访问时的客户数量</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">transactions_count` 的值从 `0` 到所有用户一次访问中的 `max(transactions_count)</span><br></pre></td></tr></table></figure><p>按 <code>transactions_count</code> 排序</p><p>下面是查询结果格式的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">Visits 表:</span><br><span class="line">+---------+------------+</span><br><span class="line">| user_id | visit_date |</span><br><span class="line">+---------+------------+</span><br><span class="line">| 1       | 2020-01-01 |</span><br><span class="line">| 2       | 2020-01-02 |</span><br><span class="line">| 12      | 2020-01-01 |</span><br><span class="line">| 19      | 2020-01-03 |</span><br><span class="line">| 1       | 2020-01-02 |</span><br><span class="line">| 2       | 2020-01-03 |</span><br><span class="line">| 1       | 2020-01-04 |</span><br><span class="line">| 7       | 2020-01-11 |</span><br><span class="line">| 9       | 2020-01-25 |</span><br><span class="line">| 8       | 2020-01-28 |</span><br><span class="line">+---------+------------+</span><br><span class="line">Transactions 表:</span><br><span class="line">+---------+------------------+--------+</span><br><span class="line">| user_id | transaction_date | amount |</span><br><span class="line">+---------+------------------+--------+</span><br><span class="line">| 1       | 2020-01-02       | 120    |</span><br><span class="line">| 2       | 2020-01-03       | 22     |</span><br><span class="line">| 7       | 2020-01-11       | 232    |</span><br><span class="line">| 1       | 2020-01-04       | 7      |</span><br><span class="line">| 9       | 2020-01-25       | 33     |</span><br><span class="line">| 9       | 2020-01-25       | 66     |</span><br><span class="line">| 8       | 2020-01-28       | 1      |</span><br><span class="line">| 9       | 2020-01-25       | 99     |</span><br><span class="line">+---------+------------------+--------+</span><br><span class="line">结果表:</span><br><span class="line">+--------------------+--------------+</span><br><span class="line">| transactions_count | visits_count |</span><br><span class="line">+--------------------+--------------+</span><br><span class="line">| 0                  | 4            |</span><br><span class="line">| 1                  | 5            |</span><br><span class="line">| 2                  | 0            |</span><br><span class="line">| 3                  | 1            |</span><br><span class="line">+--------------------+--------------+</span><br><span class="line">* 对于 transactions_count = 0, visits 中 (1, &quot;2020-01-01&quot;), (2, &quot;2020-01-02&quot;), (12, &quot;2020-01-01&quot;) 和 (19, &quot;2020-01-03&quot;) 没有进行交易，所以 visits_count = 4 。</span><br><span class="line">* 对于 transactions_count = 1, visits 中 (2, &quot;2020-01-03&quot;), (7, &quot;2020-01-11&quot;), (8, &quot;2020-01-28&quot;), (1, &quot;2020-01-02&quot;) 和 (1, &quot;2020-01-04&quot;) 进行了一次交易，所以 visits_count = 5 。</span><br><span class="line">* 对于 transactions_count = 2, 没有客户访问银行进行了两次交易，所以 visits_count = 0 。</span><br><span class="line">* 对于 transactions_count = 3, visits 中 (9, &quot;2020-01-25&quot;) 进行了三次交易，所以 visits_count = 1 。</span><br><span class="line">* 对于 transactions_count &gt;= 4, 没有客户访问银行进行了超过3次交易，所以我们停止在 transactions_count = 3 。</span><br><span class="line"></span><br><span class="line">如下是这个例子的图表：</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">SELECT</span> t5.rnb <span class="keyword">AS</span> transactions_count, IFNULL(visits_count, <span class="number">0</span>) <span class="keyword">AS</span> visits_count</span><br><span class="line">    <span class="keyword">FROM</span></span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">SELECT</span> <span class="number">0</span> <span class="keyword">AS</span> rnb</span><br><span class="line">        <span class="keyword">UNION</span></span><br><span class="line">        <span class="keyword">SELECT</span> <span class="built_in">ROW_NUMBER</span>() <span class="keyword">OVER</span> () <span class="keyword">AS</span> rnb</span><br><span class="line">        <span class="keyword">FROM</span> Transactions</span><br><span class="line">    ) t5</span><br><span class="line">    <span class="keyword">LEFT</span> <span class="keyword">JOIN</span></span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">SELECT</span></span><br><span class="line">            cnt <span class="keyword">AS</span> transactions_count</span><br><span class="line">            ,<span class="built_in">COUNT</span>(user_id) <span class="keyword">AS</span> visits_count</span><br><span class="line">        <span class="keyword">FROM</span></span><br><span class="line">        (</span><br><span class="line">            <span class="keyword">SELECT</span> t1.user_id, <span class="built_in">COUNT</span>(t2.amount) <span class="keyword">AS</span> cnt</span><br><span class="line">            <span class="keyword">FROM</span> Visits t1</span><br><span class="line">            <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Transactions t2</span><br><span class="line">            <span class="keyword">ON</span> t1.user_id <span class="operator">=</span> t2.user_id <span class="keyword">AND</span> t1.visit_date <span class="operator">=</span> t2.transaction_date</span><br><span class="line">            <span class="keyword">GROUP</span> <span class="keyword">BY</span> user_id, visit_date</span><br><span class="line">        ) t3</span><br><span class="line">        <span class="keyword">GROUP</span> <span class="keyword">BY</span> cnt</span><br><span class="line">    ) t4</span><br><span class="line">    <span class="keyword">ON</span> t5.rnb <span class="operator">=</span> t4.transactions_count</span><br><span class="line">) t6</span><br><span class="line"><span class="keyword">WHERE</span> transactions_count <span class="operator">&lt;=</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(t2.amount) <span class="keyword">AS</span> cnt</span><br><span class="line">    <span class="keyword">FROM</span> Visits t1</span><br><span class="line">    <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> Transactions t2</span><br><span class="line">    <span class="keyword">ON</span> t1.user_id <span class="operator">=</span> t2.user_id <span class="keyword">AND</span> t1.visit_date <span class="operator">=</span> t2.transaction_date</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> t1.user_id, visit_date</span><br><span class="line">    <span class="keyword">ORDER</span> <span class="keyword">BY</span> cnt <span class="keyword">DESC</span></span><br><span class="line">    LIMIT <span class="number">1</span>)</span><br></pre></td></tr></table></figure><blockquote><p>难点 从0自增序列，2交易的人数为0</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> pcnt transactions_count,<span class="built_in">count</span>(<span class="operator">*</span>) visits_count</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line"><span class="keyword">select</span> visit_date,</span><br><span class="line">        <span class="built_in">sum</span>(if(amount <span class="keyword">is</span>  <span class="keyword">null</span>,<span class="number">0</span>,<span class="number">1</span>)) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> transaction_date ) pcnt,</span><br><span class="line">        <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span>  visit_date ) tcnt</span><br><span class="line"><span class="keyword">from</span> Visits v <span class="keyword">left</span> <span class="keyword">join</span> Transactions t</span><br><span class="line"><span class="keyword">on</span> v.user_id<span class="operator">=</span> t.user_id <span class="keyword">and</span> v.visit_date<span class="operator">=</span>t.transaction_date</span><br><span class="line">)t1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> pcnt</span><br></pre></td></tr></table></figure><p>这个得出结果是[0, 4], [1, 5], [3, 3] 少了[2,0] 还没想到什么好办法能把[2，0]加进去。。。</p><h4 id="1341-电影评分"><a href="#1341-电影评分" class="headerlink" title="1341. 电影评分"></a><a href="https://leetcode-cn.com/problems/movie-rating/">1341. 电影评分</a></h4><p>难度中等</p><p>SQL架构</p><p>表：<code>Movies</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| movie_id      | int     |</span><br><span class="line">| title         | varchar |</span><br><span class="line">+---------------+---------+</span><br><span class="line">movie_id 是这个表的主键。</span><br><span class="line">title 是电影的名字。</span><br></pre></td></tr></table></figure><p>表：<code>Users</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| user_id       | int     |</span><br><span class="line">| name          | varchar |</span><br><span class="line">+---------------+---------+</span><br><span class="line">user_id 是表的主键。</span><br></pre></td></tr></table></figure><p>表：<code>Movie_Rating</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| movie_id      | int     |</span><br><span class="line">| user_id       | int     |</span><br><span class="line">| rating        | int     |</span><br><span class="line">| created_at    | date    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">(movie_id, user_id) 是这个表的主键。</span><br><span class="line">这个表包含用户在其评论中对电影的评分 rating 。</span><br><span class="line">created_at 是用户的点评日期。 </span><br></pre></td></tr></table></figure><p>请你编写一组 SQL 查询：</p><ul><li><p>查找评论电影数量最多的用户名。</p><p>如果出现平局，返回字典序较小的用户名。</p></li><li><p>查找在</p><p>2020 年 2 月 平均评分最高</p><p>的电影名称。</p><p>如果出现平局，返回字典序较小的电影名称。</p></li></ul><p>查询分两行返回，查询结果格式如下例所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">Movies 表：</span><br><span class="line">+-------------+--------------+</span><br><span class="line">| movie_id    |  title       |</span><br><span class="line">+-------------+--------------+</span><br><span class="line">| 1           | Avengers     |</span><br><span class="line">| 2           | Frozen 2     |</span><br><span class="line">| 3           | Joker        |</span><br><span class="line">+-------------+--------------+</span><br><span class="line"></span><br><span class="line">Users 表：</span><br><span class="line">+-------------+--------------+</span><br><span class="line">| user_id     |  name        |</span><br><span class="line">+-------------+--------------+</span><br><span class="line">| 1           | Daniel       |</span><br><span class="line">| 2           | Monica       |</span><br><span class="line">| 3           | Maria        |</span><br><span class="line">| 4           | James        |</span><br><span class="line">+-------------+--------------+</span><br><span class="line"></span><br><span class="line">Movie_Rating 表：</span><br><span class="line">+-------------+--------------+--------------+-------------+</span><br><span class="line">| movie_id    | user_id      | rating       | created_at  |</span><br><span class="line">+-------------+--------------+--------------+-------------+</span><br><span class="line">| 1           | 1            | 3            | 2020-01-12  |</span><br><span class="line">| 1           | 2            | 4            | 2020-02-11  |</span><br><span class="line">| 1           | 3            | 2            | 2020-02-12  |</span><br><span class="line">| 1           | 4            | 1            | 2020-01-01  |</span><br><span class="line">| 2           | 1            | 5            | 2020-02-17  | </span><br><span class="line">| 2           | 2            | 2            | 2020-02-01  | </span><br><span class="line">| 2           | 3            | 2            | 2020-03-01  |</span><br><span class="line">| 3           | 1            | 3            | 2020-02-22  | </span><br><span class="line">| 3           | 2            | 4            | 2020-02-25  | </span><br><span class="line">+-------------+--------------+--------------+-------------+</span><br><span class="line"></span><br><span class="line">Result 表：</span><br><span class="line">+--------------+</span><br><span class="line">| results      |</span><br><span class="line">+--------------+</span><br><span class="line">| Daniel       |</span><br><span class="line">| Frozen 2     |</span><br><span class="line">+--------------+</span><br><span class="line"></span><br><span class="line">Daniel 和 Monica 都点评了 3 部电影（&quot;Avengers&quot;, &quot;Frozen 2&quot; 和 &quot;Joker&quot;） 但是 Daniel 字典序比较小。</span><br><span class="line">Frozen 2 和 Joker 在 2 月的评分都是 3.5，但是 Frozen 2 的字典序比较小。</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name results </span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> m.user_id ,u.name </span><br><span class="line">    <span class="keyword">from</span> Movie_Rating m <span class="keyword">left</span> <span class="keyword">join</span> Users u </span><br><span class="line">    <span class="keyword">on</span> m.user_id <span class="operator">=</span> u.user_id</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> user_id</span><br><span class="line">    <span class="keyword">order</span> <span class="keyword">by</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">desc</span>,name</span><br><span class="line">    limit <span class="number">1</span></span><br><span class="line">)t1</span><br><span class="line"><span class="keyword">union</span> </span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span> title results</span><br><span class="line"><span class="keyword">from</span> Movie_Rating r <span class="keyword">left</span> <span class="keyword">join</span> Movies m</span><br><span class="line"><span class="keyword">on</span> r.movie_id <span class="operator">=</span>m.movie_id </span><br><span class="line"><span class="keyword">where</span> date_format(created_at,<span class="string">&#x27;%Y-%m&#x27;</span>)<span class="operator">=</span><span class="string">&#x27;2020-02&#x27;</span></span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> r.movie_id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> <span class="built_in">avg</span>(rating) <span class="keyword">desc</span>,title </span><br><span class="line">limit <span class="number">1</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="1350-院系无效的学生"><a href="#1350-院系无效的学生" class="headerlink" title="1350. 院系无效的学生"></a><a href="https://leetcode-cn.com/problems/students-with-invalid-departments/">1350. 院系无效的学生</a></h4><p>难度简单</p><p>SQL架构</p><p>院系表: <code>Departments</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| id            | int     |</span><br><span class="line">| name          | varchar |</span><br><span class="line">+---------------+---------+</span><br><span class="line">id 是该表的主键</span><br><span class="line">该表包含一所大学每个院系的 id 信息</span><br></pre></td></tr></table></figure><p>学生表: <code>Students</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| id            | int     |</span><br><span class="line">| name          | varchar |</span><br><span class="line">| department_id | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">id 是该表的主键</span><br><span class="line">该表包含一所大学每个学生的 id 和他/她就读的院系信息</span><br></pre></td></tr></table></figure><p>写一条 SQL 语句以查询那些所在院系不存在的学生的 id 和姓名</p><p>可以以任何顺序返回结果</p><p>下面是返回结果格式的例子</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Departments 表:</span><br><span class="line">+------+--------------------------+</span><br><span class="line">| id   | name                     |</span><br><span class="line">+------+--------------------------+</span><br><span class="line">| 1    | Electrical Engineering   |</span><br><span class="line">| 7    | Computer Engineering     |</span><br><span class="line">| 13   | Bussiness Administration |</span><br><span class="line">+------+--------------------------+</span><br><span class="line"></span><br><span class="line">Students 表:</span><br><span class="line">+------+----------+---------------+</span><br><span class="line">| id   | name     | department_id |</span><br><span class="line">+------+----------+---------------+</span><br><span class="line">| 23   | Alice    | 1             |</span><br><span class="line">| 1    | Bob      | 7             |</span><br><span class="line">| 5    | Jennifer | 13            |</span><br><span class="line">| 2    | John     | 14            |</span><br><span class="line">| 4    | Jasmine  | 77            |</span><br><span class="line">| 3    | Steve    | 74            |</span><br><span class="line">| 6    | Luis     | 1             |</span><br><span class="line">| 8    | Jonathan | 7             |</span><br><span class="line">| 7    | Daiana   | 33            |</span><br><span class="line">| 11   | Madelynn | 1             |</span><br><span class="line">+------+----------+---------------+</span><br><span class="line"></span><br><span class="line">结果表:</span><br><span class="line">+------+----------+</span><br><span class="line">| id   | name     |</span><br><span class="line">+------+----------+</span><br><span class="line">| 2    | John     |</span><br><span class="line">| 7    | Daiana   |</span><br><span class="line">| 4    | Jasmine  |</span><br><span class="line">| 3    | Steve    |</span><br><span class="line">+------+----------+</span><br><span class="line"></span><br><span class="line">John, Daiana, Steve 和 Jasmine 所在的院系分别是 14, 33, 74 和 77， 其中 14, 33, 74 和 77 并不存在于院系表</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> id,name  </span><br><span class="line"><span class="keyword">from</span> Students </span><br><span class="line"><span class="keyword">where</span> department_id <span class="keyword">not</span> <span class="keyword">in</span> </span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> id </span><br><span class="line">    <span class="keyword">from</span> Departments</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="1355-活动参与者"><a href="#1355-活动参与者" class="headerlink" title="1355. 活动参与者"></a><a href="https://leetcode-cn.com/problems/activity-participants/">1355. 活动参与者</a></h4><p>难度中等</p><p>SQL架构</p><p>表: <code>Friends</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| id            | int     |</span><br><span class="line">| name          | varchar |</span><br><span class="line">| activity      | varchar |</span><br><span class="line">+---------------+---------+</span><br><span class="line">id 是朋友的 id 和该表的主键</span><br><span class="line">name 是朋友的名字</span><br><span class="line">activity 是朋友参加的活动的名字</span><br></pre></td></tr></table></figure><p>表: <code>Activities</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| id            | int     |</span><br><span class="line">| name          | varchar |</span><br><span class="line">+---------------+---------+</span><br><span class="line">id 是该表的主键</span><br><span class="line">name 是活动的名字</span><br></pre></td></tr></table></figure><p>写一条 SQL 查询那些既没有最多，也没有最少参与者的活动的名字</p><p>可以以任何顺序返回结果，Activities 表的每项活动的参与者都来自 Friends 表</p><p>下面是查询结果格式的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Friends 表:</span><br><span class="line">+------+--------------+---------------+</span><br><span class="line">| id   | name         | activity      |</span><br><span class="line">+------+--------------+---------------+</span><br><span class="line">| 1    | Jonathan D.  | Eating        |</span><br><span class="line">| 2    | Jade W.      | Singing       |</span><br><span class="line">| 3    | Victor J.    | Singing       |</span><br><span class="line">| 4    | Elvis Q.     | Eating        |</span><br><span class="line">| 5    | Daniel A.    | Eating        |</span><br><span class="line">| 6    | Bob B.       | Horse Riding  |</span><br><span class="line">+------+--------------+---------------+</span><br><span class="line"></span><br><span class="line">Activities 表:</span><br><span class="line">+------+--------------+</span><br><span class="line">| id   | name         |</span><br><span class="line">+------+--------------+</span><br><span class="line">| 1    | Eating       |</span><br><span class="line">| 2    | Singing      |</span><br><span class="line">| 3    | Horse Riding |</span><br><span class="line">+------+--------------+</span><br><span class="line"></span><br><span class="line">Result 表:</span><br><span class="line">+--------------+</span><br><span class="line">| activity     |</span><br><span class="line">+--------------+</span><br><span class="line">| Singing      |</span><br><span class="line">+--------------+</span><br><span class="line"></span><br><span class="line">Eating 活动有三个人参加, 是最多人参加的活动 (Jonathan D. , Elvis Q. and Daniel A.)</span><br><span class="line">Horse Riding 活动有一个人参加, 是最少人参加的活动 (Bob B.)</span><br><span class="line">Singing 活动有两个人参加 (Victor J. and Jade W.)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> activity</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line">    <span class="keyword">select</span> activity,</span><br><span class="line">    <span class="built_in">rank</span>()<span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> cnt) rk1,</span><br><span class="line">    <span class="built_in">rank</span>()<span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> cnt <span class="keyword">desc</span>) rk2</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">select</span>  activity  ,<span class="built_in">count</span>(<span class="operator">*</span>) cnt</span><br><span class="line">        <span class="keyword">from</span>  Friends</span><br><span class="line">        <span class="keyword">group</span> <span class="keyword">by</span>  activity </span><br><span class="line">    )t1</span><br><span class="line">)t2</span><br><span class="line"><span class="keyword">where</span> rk1 <span class="operator">!=</span><span class="number">1</span> <span class="keyword">and</span> rk2 <span class="operator">!=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>不需要关联 Activities表，因为 至少有一人参加</p></blockquote><h4 id="1364-顾客的可信联系人数量"><a href="#1364-顾客的可信联系人数量" class="headerlink" title="1364. 顾客的可信联系人数量"></a><a href="https://leetcode-cn.com/problems/number-of-trusted-contacts-of-a-customer/">1364. 顾客的可信联系人数量</a></h4><p>难度中等</p><p>SQL架构</p><p>顾客表：<code>Customers</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| customer_id   | int     |</span><br><span class="line">| customer_name | varchar |</span><br><span class="line">| email         | varchar |</span><br><span class="line">+---------------+---------+</span><br><span class="line">customer_id 是这张表的主键。</span><br><span class="line">此表的每一行包含了某在线商店顾客的姓名和电子邮件。</span><br></pre></td></tr></table></figure><p>联系方式表：<code>Contacts</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| user_id       | id      |</span><br><span class="line">| contact_name  | varchar |</span><br><span class="line">| contact_email | varchar |</span><br><span class="line">+---------------+---------+</span><br><span class="line">(user_id, contact_email) 是这张表的主键。</span><br><span class="line">此表的每一行表示编号为 user_id 的顾客的某位联系人的姓名和电子邮件。</span><br><span class="line">此表包含每位顾客的联系人信息，但顾客的联系人不一定存在于顾客表中。</span><br></pre></td></tr></table></figure><p>发票表：<code>Invoices</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+--------------+---------+</span><br><span class="line">| Column Name  | Type    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">| invoice_id   | int     |</span><br><span class="line">| price        | int     |</span><br><span class="line">| user_id      | int     |</span><br><span class="line">+--------------+---------+</span><br><span class="line">invoice_id 是这张表的主键。</span><br><span class="line">此表的每一行分别表示编号为 user_id 的顾客拥有有一张编号为 invoice_id、价格为 price 的发票。</span><br></pre></td></tr></table></figure><p>为每张发票 <code>invoice_id</code> 编写一个SQL查询以查找以下内容：</p><ul><li><code>customer_name</code>：与发票相关的顾客名称。</li><li><code>price</code>：发票的价格。</li><li><code>contacts_cnt</code>：该顾客的联系人数量。</li><li><code>trusted_contacts_cnt</code>：可信联系人的数量：既是该顾客的联系人又是商店顾客的联系人数量（即：可信联系人的电子邮件存在于客户表中）。</li></ul><p>将查询的结果按照 <code>invoice_id</code> 排序。</p><p>查询结果的格式如下例所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">Customers table:</span><br><span class="line">+-------------+---------------+--------------------+</span><br><span class="line">| customer_id | customer_name | email              |</span><br><span class="line">+-------------+---------------+--------------------+</span><br><span class="line">| 1           | Alice         | alice@leetcode.com |</span><br><span class="line">| 2           | Bob           | bob@leetcode.com   |</span><br><span class="line">| 13          | John          | john@leetcode.com  |</span><br><span class="line">| 6           | Alex          | alex@leetcode.com  |</span><br><span class="line">+-------------+---------------+--------------------+</span><br><span class="line">Contacts table:</span><br><span class="line">+-------------+--------------+--------------------+</span><br><span class="line">| user_id     | contact_name | contact_email      |</span><br><span class="line">+-------------+--------------+--------------------+</span><br><span class="line">| 1           | Bob          | bob@leetcode.com   |</span><br><span class="line">| 1           | John         | john@leetcode.com  |</span><br><span class="line">| 1           | Jal          | jal@leetcode.com   |</span><br><span class="line">| 2           | Omar         | omar@leetcode.com  |</span><br><span class="line">| 2           | Meir         | meir@leetcode.com  |</span><br><span class="line">| 6           | Alice        | alice@leetcode.com |</span><br><span class="line">+-------------+--------------+--------------------+</span><br><span class="line">Invoices table:</span><br><span class="line">+------------+-------+---------+</span><br><span class="line">| invoice_id | price | user_id |</span><br><span class="line">+------------+-------+---------+</span><br><span class="line">| 77         | 100   | 1       |</span><br><span class="line">| 88         | 200   | 1       |</span><br><span class="line">| 99         | 300   | 2       |</span><br><span class="line">| 66         | 400   | 2       |</span><br><span class="line">| 55         | 500   | 13      |</span><br><span class="line">| 44         | 60    | 6       |</span><br><span class="line">+------------+-------+---------+</span><br><span class="line">Result table:</span><br><span class="line">+------------+---------------+-------+--------------+----------------------+</span><br><span class="line">| invoice_id | customer_name | price | contacts_cnt | trusted_contacts_cnt |</span><br><span class="line">+------------+---------------+-------+--------------+----------------------+</span><br><span class="line">| 44         | Alex          | 60    | 1            | 1                    |</span><br><span class="line">| 55         | John          | 500   | 0            | 0                    |</span><br><span class="line">| 66         | Bob           | 400   | 2            | 0                    |</span><br><span class="line">| 77         | Alice         | 100   | 3            | 2                    |</span><br><span class="line">| 88         | Alice         | 200   | 3            | 2                    |</span><br><span class="line">| 99         | Bob           | 300   | 2            | 0                    |</span><br><span class="line">+------------+---------------+-------+--------------+----------------------+</span><br><span class="line">Alice 有三位联系人，其中两位(Bob 和 John)是可信联系人。</span><br><span class="line">Bob 有两位联系人, 他们中的任何一位都不是可信联系人。</span><br><span class="line">Alex 只有一位联系人(Alice)，并是一位可信联系人。</span><br><span class="line">John 没有任何联系人。</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> invoice_id ,customer_name,price,ifnull(cnt,<span class="number">0</span>) contacts_cnt,ifnull(bc,<span class="number">0</span>) trusted_contacts_cnt </span><br><span class="line"><span class="keyword">from</span> Invoices i</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> (</span><br><span class="line"><span class="keyword">select</span> user_id ,<span class="built_in">count</span>(<span class="operator">*</span>) cnt</span><br><span class="line"><span class="keyword">from</span> Contacts</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> user_id</span><br><span class="line">) t1</span><br><span class="line"><span class="keyword">on</span> i.user_id<span class="operator">=</span>t1.user_id</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> (</span><br><span class="line"><span class="keyword">select</span>  user_id ,<span class="built_in">count</span>(<span class="operator">*</span>) bc</span><br><span class="line"><span class="keyword">from</span> Contacts</span><br><span class="line">    <span class="keyword">where</span> contact_name <span class="keyword">in</span></span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">select</span> customer_name</span><br><span class="line">        <span class="keyword">from</span> Customers</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> user_id </span><br><span class="line">)t2</span><br><span class="line"><span class="keyword">on</span> i.user_id <span class="operator">=</span> t2.user_id</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> Customers c</span><br><span class="line"><span class="keyword">on</span> i.user_id<span class="operator">=</span> c.customer_id</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> invoice_id</span><br></pre></td></tr></table></figure><blockquote><p>就是麻烦点 各种join</p></blockquote><h4 id="1369-获取最近第二次的活动"><a href="#1369-获取最近第二次的活动" class="headerlink" title="1369. 获取最近第二次的活动"></a><a href="https://leetcode-cn.com/problems/get-the-second-most-recent-activity/">1369. 获取最近第二次的活动</a></h4><p>难度困难</p><p>SQL架构</p><p>表: <code>UserActivity</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| username      | varchar |</span><br><span class="line">| activity      | varchar |</span><br><span class="line">| startDate     | Date    |</span><br><span class="line">| endDate       | Date    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">该表不包含主键</span><br><span class="line">该表包含每个用户在一段时间内进行的活动的信息</span><br><span class="line">名为 username 的用户在 startDate 到 endDate 日内有一次活动</span><br></pre></td></tr></table></figure><p>写一条SQL查询展示每一位用户 <strong>最近第二次</strong> 的活动</p><p>如果用户仅有一次活动，返回该活动</p><p>一个用户不能同时进行超过一项活动，以 <strong>任意</strong> 顺序返回结果</p><p>下面是查询结果格式的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">UserActivity 表:</span><br><span class="line">+------------+--------------+-------------+-------------+</span><br><span class="line">| username   | activity     | startDate   | endDate     |</span><br><span class="line">+------------+--------------+-------------+-------------+</span><br><span class="line">| Alice      | Travel       | 2020-02-12  | 2020-02-20  |</span><br><span class="line">| Alice      | Dancing      | 2020-02-21  | 2020-02-23  |</span><br><span class="line">| Alice      | Travel       | 2020-02-24  | 2020-02-28  |</span><br><span class="line">| Bob        | Travel       | 2020-02-11  | 2020-02-18  |</span><br><span class="line">+------------+--------------+-------------+-------------+</span><br><span class="line"></span><br><span class="line">Result 表:</span><br><span class="line">+------------+--------------+-------------+-------------+</span><br><span class="line">| username   | activity     | startDate   | endDate     |</span><br><span class="line">+------------+--------------+-------------+-------------+</span><br><span class="line">| Alice      | Dancing      | 2020-02-21  | 2020-02-23  |</span><br><span class="line">| Bob        | Travel       | 2020-02-11  | 2020-02-18  |</span><br><span class="line">+------------+--------------+-------------+-------------+</span><br><span class="line"></span><br><span class="line">Alice 最近第二次的活动是从 2020-02-24 到 2020-02-28 的旅行, 在此之前的 2020-02-21 到 2020-02-23 她进行了舞蹈</span><br><span class="line">Bob 只有一条记录，我们就取这条记录</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> username, activity ,startDate,endDate </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span> username, activity ,startDate,endDate ,</span><br><span class="line">    <span class="built_in">rank</span>()<span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> username <span class="keyword">order</span> <span class="keyword">by</span> startDate <span class="keyword">desc</span>) rk,</span><br><span class="line">    <span class="built_in">lag</span>( startDate ,<span class="number">1</span>,<span class="keyword">null</span>)<span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> username <span class="keyword">order</span> <span class="keyword">by</span> startDate ) lg</span><br><span class="line"><span class="keyword">from</span> UserActivity</span><br><span class="line">)t1</span><br><span class="line"><span class="keyword">where</span> rk<span class="operator">=</span><span class="number">2</span> <span class="keyword">or</span>  (rk <span class="operator">=</span> <span class="number">1</span> <span class="operator">&amp;&amp;</span>  lg <span class="keyword">is</span> <span class="keyword">null</span>)</span><br></pre></td></tr></table></figure><h4 id="1378-使用唯一标识码替换员工ID"><a href="#1378-使用唯一标识码替换员工ID" class="headerlink" title="1378. 使用唯一标识码替换员工ID"></a><a href="https://leetcode-cn.com/problems/replace-employee-id-with-the-unique-identifier/">1378. 使用唯一标识码替换员工ID</a></h4><p>难度简单</p><p>SQL架构</p><p><code>Employees</code> 表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| id            | int     |</span><br><span class="line">| name          | varchar |</span><br><span class="line">+---------------+---------+</span><br><span class="line">id 是这张表的主键。</span><br><span class="line">这张表的每一行分别代表了某公司其中一位员工的名字和 ID 。</span><br></pre></td></tr></table></figure><p><code>EmployeeUNI</code> 表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| id            | int     |</span><br><span class="line">| unique_id     | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">(id, unique_id) 是这张表的主键。</span><br><span class="line">这张表的每一行包含了该公司某位员工的 ID 和他的唯一标识码（unique ID）。</span><br></pre></td></tr></table></figure><p>写一段SQL查询来展示每位用户的 <strong>唯一标识码（unique ID ）</strong>；如果某位员工没有唯一标识码，使用 null 填充即可。</p><p>你可以以 <strong>任意</strong> 顺序返回结果表。</p><p>查询结果的格式如下例所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Employees table:</span><br><span class="line">+----+----------+</span><br><span class="line">| id | name     |</span><br><span class="line">+----+----------+</span><br><span class="line">| 1  | Alice    |</span><br><span class="line">| 7  | Bob      |</span><br><span class="line">| 11 | Meir     |</span><br><span class="line">| 90 | Winston  |</span><br><span class="line">| 3  | Jonathan |</span><br><span class="line">+----+----------+</span><br><span class="line"></span><br><span class="line">EmployeeUNI table:</span><br><span class="line">+----+-----------+</span><br><span class="line">| id | unique_id |</span><br><span class="line">+----+-----------+</span><br><span class="line">| 3  | 1         |</span><br><span class="line">| 11 | 2         |</span><br><span class="line">| 90 | 3         |</span><br><span class="line">+----+-----------+</span><br><span class="line"></span><br><span class="line">EmployeeUNI table:</span><br><span class="line">+-----------+----------+</span><br><span class="line">| unique_id | name     |</span><br><span class="line">+-----------+----------+</span><br><span class="line">| null      | Alice    |</span><br><span class="line">| null      | Bob      |</span><br><span class="line">| 2         | Meir     |</span><br><span class="line">| 3         | Winston  |</span><br><span class="line">| 1         | Jonathan |</span><br><span class="line">+-----------+----------+</span><br><span class="line"></span><br><span class="line">Alice and Bob 没有唯一标识码, 因此我们使用 null 替代。</span><br><span class="line">Meir 的唯一标识码是 2 。</span><br><span class="line">Winston 的唯一标识码是 3 。</span><br><span class="line">Jonathan 唯一标识码是 1 。</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> unique_id,e.name</span><br><span class="line"><span class="keyword">from</span> Employees  e <span class="keyword">left</span> <span class="keyword">join</span> EmployeeUNI u</span><br><span class="line"><span class="keyword">on</span> e.id <span class="operator">=</span> u.id</span><br></pre></td></tr></table></figure><h4 id="1384-按年度列出销售总额"><a href="#1384-按年度列出销售总额" class="headerlink" title="1384. 按年度列出销售总额"></a><a href="https://leetcode-cn.com/problems/total-sales-amount-by-year/">1384. 按年度列出销售总额</a></h4><p>难度困难</p><p>SQL架构</p><p> <code>Product</code> 表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| product_id    | int     |</span><br><span class="line">| product_name  | varchar |</span><br><span class="line">+---------------+---------+</span><br><span class="line">product_id 是这张表的主键。</span><br><span class="line">product_name 是产品的名称。</span><br></pre></td></tr></table></figure><p><code>Sales</code> 表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+---------------------+---------+</span><br><span class="line">| Column Name         | Type    |</span><br><span class="line">+---------------------+---------+</span><br><span class="line">| product_id          | int     |</span><br><span class="line">| period_start        | varchar |</span><br><span class="line">| period_end          | date    |</span><br><span class="line">| average_daily_sales | int     |</span><br><span class="line">+---------------------+---------+</span><br><span class="line">product_id 是这张表的主键。</span><br><span class="line">period_start 和 period_end 是该产品销售期的起始日期和结束日期，且这两个日期包含在销售期内。</span><br><span class="line">average_daily_sales 列存储销售期内该产品的日平均销售额。</span><br></pre></td></tr></table></figure><p>编写一段SQL查询每个产品每年的总销售额，并包含 product_id, product_name 以及 report_year 等信息。</p><p>销售年份的日期介于 2018 年到 2020 年之间。你返回的结果需要按 product_id 和 report_year <strong>排序</strong>。</p><p>查询结果格式如下例所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Product table:</span><br><span class="line">+------------+--------------+</span><br><span class="line">| product_id | product_name |</span><br><span class="line">+------------+--------------+</span><br><span class="line">| 1          | LC Phone     |</span><br><span class="line">| 2          | LC T-Shirt   |</span><br><span class="line">| 3          | LC Keychain  |</span><br><span class="line">+------------+--------------+</span><br><span class="line"></span><br><span class="line">Sales table:</span><br><span class="line">+------------+--------------+-------------+---------------------+</span><br><span class="line">| product_id | period_start | period_end  | average_daily_sales |</span><br><span class="line">+------------+--------------+-------------+---------------------+</span><br><span class="line">| 1          | 2019-01-25   | 2019-02-28  | 100                 |</span><br><span class="line">| 2          | 2018-12-01   | 2020-01-01  | 10                  |</span><br><span class="line">| 3          | 2019-12-01   | 2020-01-31  | 1                   |</span><br><span class="line">+------------+--------------+-------------+---------------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+------------+--------------+-------------+--------------+</span><br><span class="line">| product_id | product_name | report_year | total_amount |</span><br><span class="line">+------------+--------------+-------------+--------------+</span><br><span class="line">| 1          | LC Phone     |    2019     | 3500         |</span><br><span class="line">| 2          | LC T-Shirt   |    2018     | 310          |</span><br><span class="line">| 2          | LC T-Shirt   |    2019     | 3650         |</span><br><span class="line">| 2          | LC T-Shirt   |    2020     | 10           |</span><br><span class="line">| 3          | LC Keychain  |    2019     | 31           |</span><br><span class="line">| 3          | LC Keychain  |    2020     | 31           |</span><br><span class="line">+------------+--------------+-------------+--------------+</span><br><span class="line">LC Phone 在 2019-01-25 至 2019-02-28 期间销售，该产品销售时间总计35天。销售总额 35*100 = 3500。</span><br><span class="line">LC T-shirt 在 2018-12-01 至 2020-01-01 期间销售，该产品在2018年、2019年、2020年的销售时间分别是31天、365天、1天，2018年、2019年、2020年的销售总额分别是31*10=310、365*10=3650、1*10=10。</span><br><span class="line">LC Keychain 在 2019-12-01 至 2020-01-31 期间销售，该产品在2019年、2020年的销售时间分别是：31天、31天，2019年、2020年的销售总额分别是31*1=31、31*1=31。</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(</span><br><span class="line"> <span class="keyword">select</span> Sales.product_id, product_name, <span class="string">&#x27;2018&#x27;</span> <span class="keyword">as</span> <span class="string">&#x27;report_year&#x27;</span>, if(period_start<span class="operator">&lt;</span><span class="string">&#x27;2019-01-01&#x27;</span>, (datediff(if(period_end<span class="operator">&lt;</span><span class="string">&#x27;2019-01-01&#x27;</span>, period_end, <span class="type">date</span>(<span class="string">&#x27;2018-12-31&#x27;</span>)), if(period_start<span class="operator">&gt;=</span><span class="string">&#x27;2018-01-01&#x27;</span>, period_start, <span class="type">date</span>(<span class="string">&#x27;2018-01-01&#x27;</span>)))<span class="operator">+</span><span class="number">1</span>)<span class="operator">*</span>average_daily_sales, <span class="number">0</span>) <span class="keyword">as</span> total_amount</span><br><span class="line"><span class="keyword">from</span> Sales  </span><br><span class="line"><span class="keyword">join</span> Product <span class="keyword">on</span> Sales.product_id <span class="operator">=</span> Product.product_id </span><br><span class="line"><span class="keyword">having</span>  total_amount<span class="operator">&gt;</span><span class="number">0</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">union</span>(</span><br><span class="line"><span class="keyword">select</span> Sales.product_id, product_name, <span class="string">&#x27;2019&#x27;</span> <span class="keyword">as</span> <span class="string">&#x27;report_year&#x27;</span>, if( period_start<span class="operator">&lt;</span><span class="string">&#x27;2020-01-01&#x27;</span>, (datediff(if(period_end<span class="operator">&lt;</span><span class="string">&#x27;2020-01-01&#x27;</span>, period_end, <span class="type">date</span>(<span class="string">&#x27;2019-12-31&#x27;</span>)), if(period_start<span class="operator">&gt;=</span><span class="string">&#x27;2019-01-01&#x27;</span>, period_start, <span class="type">date</span>(<span class="string">&#x27;2019-01-01&#x27;</span>)))<span class="operator">+</span><span class="number">1</span>)<span class="operator">*</span>average_daily_sales , <span class="number">0</span>) <span class="keyword">as</span> total_amount</span><br><span class="line"><span class="keyword">from</span> Sales  </span><br><span class="line"><span class="keyword">join</span> Product <span class="keyword">on</span> (Sales.product_id <span class="operator">=</span> Product.product_id )</span><br><span class="line"><span class="keyword">having</span>  total_amount<span class="operator">&gt;</span><span class="number">0</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">union</span>(</span><br><span class="line"><span class="keyword">select</span> Sales.product_id, product_name, <span class="string">&#x27;2020&#x27;</span> <span class="keyword">as</span> <span class="string">&#x27;report_year&#x27;</span>, (datediff(if(period_end<span class="operator">&lt;</span><span class="string">&#x27;2021-01-01&#x27;</span>, period_end, <span class="type">date</span>(<span class="string">&#x27;2020-12-31&#x27;</span>)), if(period_start<span class="operator">&gt;=</span><span class="string">&#x27;2020-01-01&#x27;</span>, period_start, <span class="type">date</span>(<span class="string">&#x27;2020-01-01&#x27;</span>)))<span class="operator">+</span><span class="number">1</span>)<span class="operator">*</span>average_daily_sales <span class="keyword">as</span> total_amount</span><br><span class="line"><span class="keyword">from</span> Sales  </span><br><span class="line"><span class="keyword">join</span> Product  <span class="keyword">on</span> (Sales.product_id <span class="operator">=</span> Product.product_id)</span><br><span class="line"><span class="keyword">having</span> total_amount<span class="operator">&gt;</span><span class="number">0</span></span><br><span class="line">) </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> product_id, report_year</span><br></pre></td></tr></table></figure><blockquote><p>各个年份进行union,就是年份判断的时候麻烦些</p></blockquote><h4 id="1393-股票的资本损益"><a href="#1393-股票的资本损益" class="headerlink" title="1393. 股票的资本损益"></a><a href="https://leetcode-cn.com/problems/capital-gainloss/">1393. 股票的资本损益</a></h4><p>难度中等</p><p>SQL架构</p><p><code>Stocks</code> 表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| stock_name    | varchar |</span><br><span class="line">| operation     | enum    |</span><br><span class="line">| operation_day | int     |</span><br><span class="line">| price         | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">(stock_name, day) 是这张表的主键</span><br><span class="line">operation 列使用的是一种枚举类型，包括：(&#x27;Sell&#x27;,&#x27;Buy&#x27;)</span><br><span class="line">此表的每一行代表了名为 stock_name 的某支股票在 operation_day 这一天的操作价格。</span><br><span class="line">保证股票的每次&#x27;Sell&#x27;操作前，都有相应的&#x27;Buy&#x27;操作。</span><br></pre></td></tr></table></figure><p>编写一个SQL查询来报告每支股票的资本损益。</p><p>股票的资本损益是一次或多次买卖股票后的全部收益或损失。</p><p>以任意顺序返回结果即可。</p><p>SQL查询结果的格式如下例所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Stocks 表:</span><br><span class="line">+---------------+-----------+---------------+--------+</span><br><span class="line">| stock_name    | operation | operation_day | price  |</span><br><span class="line">+---------------+-----------+---------------+--------+</span><br><span class="line">| Leetcode      | Buy       | 1             | 1000   |</span><br><span class="line">| Corona Masks  | Buy       | 2             | 10     |</span><br><span class="line">| Leetcode      | Sell      | 5             | 9000   |</span><br><span class="line">| Handbags      | Buy       | 17            | 30000  |</span><br><span class="line">| Corona Masks  | Sell      | 3             | 1010   |</span><br><span class="line">| Corona Masks  | Buy       | 4             | 1000   |</span><br><span class="line">| Corona Masks  | Sell      | 5             | 500    |</span><br><span class="line">| Corona Masks  | Buy       | 6             | 1000   |</span><br><span class="line">| Handbags      | Sell      | 29            | 7000   |</span><br><span class="line">| Corona Masks  | Sell      | 10            | 10000  |</span><br><span class="line">+---------------+-----------+---------------+--------+</span><br><span class="line"></span><br><span class="line">Result 表:</span><br><span class="line">+---------------+-------------------+</span><br><span class="line">| stock_name    | capital_gain_loss |</span><br><span class="line">+---------------+-------------------+</span><br><span class="line">| Corona Masks  | 9500              |</span><br><span class="line">| Leetcode      | 8000              |</span><br><span class="line">| Handbags      | -23000            |</span><br><span class="line">+---------------+-------------------+</span><br><span class="line">Leetcode 股票在第一天以1000美元的价格买入，在第五天以9000美元的价格卖出。资本收益=9000-1000=8000美元。</span><br><span class="line">Handbags 股票在第17天以30000美元的价格买入，在第29天以7000美元的价格卖出。资本损失=7000-30000=-23000美元。</span><br><span class="line">Corona Masks 股票在第1天以10美元的价格买入，在第3天以1010美元的价格卖出。在第4天以1000美元的价格再次购买，在第5天以500美元的价格出售。最后，它在第6天以1000美元的价格被买走，在第10天以10000美元的价格被卖掉。资本损益是每次（’Buy&#x27;-&gt;&#x27;Sell&#x27;）操作资本收益或损失的和=（1010-10）+（500-1000）+（10000-1000）=1000-500+9000=9500美元。</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> stock_name,sell<span class="operator">-</span>buy capital_gain_loss</span><br><span class="line"><span class="keyword">from</span>(</span><br><span class="line"><span class="keyword">select</span> stock_name ,</span><br><span class="line">       <span class="built_in">sum</span>(if(operation<span class="operator">=</span><span class="string">&#x27;Buy&#x27;</span>, price,<span class="number">0</span>))<span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> stock_name ) buy,</span><br><span class="line">       <span class="built_in">sum</span>(if(operation<span class="operator">=</span><span class="string">&#x27;Sell&#x27;</span>,price,<span class="number">0</span>))<span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> stock_name) sell</span><br><span class="line"><span class="keyword">from</span> Stocks s</span><br><span class="line">)t1</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> stock_name,buy,sell</span><br></pre></td></tr></table></figure><h4 id="1398-购买了产品A和产品B却没有购买产品C的顾客"><a href="#1398-购买了产品A和产品B却没有购买产品C的顾客" class="headerlink" title="1398. 购买了产品A和产品B却没有购买产品C的顾客"></a><a href="https://leetcode-cn.com/problems/customers-who-bought-products-a-and-b-but-not-c/">1398. 购买了产品A和产品B却没有购买产品C的顾客</a></h4><p>难度中等</p><p>SQL架构</p><p> <code>Customers</code> 表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+---------------------+---------+</span><br><span class="line">| Column Name         | Type    |</span><br><span class="line">+---------------------+---------+</span><br><span class="line">| customer_id         | int     |</span><br><span class="line">| customer_name       | varchar |</span><br><span class="line">+---------------------+---------+</span><br><span class="line">customer_id 是这张表的主键。</span><br><span class="line">customer_name 是顾客的名称。</span><br></pre></td></tr></table></figure><p><code>Orders</code> 表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| order_id      | int     |</span><br><span class="line">| customer_id   | int     |</span><br><span class="line">| product_name  | varchar |</span><br><span class="line">+---------------+---------+</span><br><span class="line">order_id 是这张表的主键。</span><br><span class="line">customer_id 是购买了名为 &quot;product_name&quot; 产品顾客的id。</span><br></pre></td></tr></table></figure><p>请你设计 SQL 查询来报告购买了产品 A 和产品 B 却没有购买产品 C 的顾客的 ID 和姓名（ <code>customer_id</code> 和 <code>customer_name</code> ），我们将基于此结果为他们推荐产品 C 。<br>您返回的查询结果需要按照 <code>customer_id</code> <strong>排序</strong>。</p><p>查询结果如下例所示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Customers table:</span><br><span class="line">+-------------+---------------+</span><br><span class="line">| customer_id | customer_name |</span><br><span class="line">+-------------+---------------+</span><br><span class="line">| 1           | Daniel        |</span><br><span class="line">| 2           | Diana         |</span><br><span class="line">| 3           | Elizabeth     |</span><br><span class="line">| 4           | Jhon          |</span><br><span class="line">+-------------+---------------+</span><br><span class="line"></span><br><span class="line">Orders table:</span><br><span class="line">+------------+--------------+---------------+</span><br><span class="line">| order_id   | customer_id  | product_name  |</span><br><span class="line">+------------+--------------+---------------+</span><br><span class="line">| 10         |     1        |     A         |</span><br><span class="line">| 20         |     1        |     B         |</span><br><span class="line">| 30         |     1        |     D         |</span><br><span class="line">| 40         |     1        |     C         |</span><br><span class="line">| 50         |     2        |     A         |</span><br><span class="line">| 60         |     3        |     A         |</span><br><span class="line">| 70         |     3        |     B         |</span><br><span class="line">| 80         |     3        |     D         |</span><br><span class="line">| 90         |     4        |     C         |</span><br><span class="line">+------------+--------------+---------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+-------------+---------------+</span><br><span class="line">| customer_id | customer_name |</span><br><span class="line">+-------------+---------------+</span><br><span class="line">| 3           | Elizabeth     |</span><br><span class="line">+-------------+---------------+</span><br><span class="line">只有 customer_id 为 3 的顾客购买了产品 A 和产品 B ，却没有购买产品 C 。</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  o.customer_id, customer_name </span><br><span class="line"><span class="keyword">from</span> Orders o <span class="keyword">left</span> <span class="keyword">join</span>  Customers c</span><br><span class="line"><span class="keyword">on</span> o.customer_id<span class="operator">=</span>c.customer_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> customer_id</span><br><span class="line"><span class="keyword">having</span> <span class="built_in">sum</span>(product_name <span class="operator">=</span><span class="string">&#x27;A&#x27;</span>)<span class="operator">&gt;=</span><span class="number">1</span> <span class="keyword">and</span> <span class="built_in">sum</span>(product_name<span class="operator">=</span><span class="string">&#x27;B&#x27;</span>)<span class="operator">&gt;=</span><span class="number">1</span> <span class="keyword">and</span> <span class="built_in">sum</span>(product_name<span class="operator">=</span><span class="string">&#x27;C&#x27;</span>)<span class="operator">=</span><span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="1407-排名靠前的旅行者"><a href="#1407-排名靠前的旅行者" class="headerlink" title="1407. 排名靠前的旅行者"></a><a href="https://leetcode-cn.com/problems/top-travellers/">1407. 排名靠前的旅行者</a></h4><p>难度简单</p><p>SQL架构</p><p>表单: <code>Users</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| id            | int     |</span><br><span class="line">| name          | varchar |</span><br><span class="line">+---------------+---------+</span><br><span class="line">id 是该表单主键.</span><br><span class="line">name 是用户名字.</span><br></pre></td></tr></table></figure><p>表单: <code>Rides</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| id            | int     |</span><br><span class="line">| user_id       | int     |</span><br><span class="line">| distance      | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">id 是该表单主键.</span><br><span class="line">user_id 是本次行程的用户的 id, 而该用户此次行程距离为 distance.</span><br></pre></td></tr></table></figure><p>写一段 SQL , 报告每个用户的旅行距离.</p><p>返回的结果表单, 以 <code>travelled_distance</code> 降序排列, 如果有两个或者更多的用户旅行了相同的距离, 那么再以 <code>name</code> 升序排列.</p><p>查询结果格式, 如下例所示.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">Users 表单:</span><br><span class="line">+------+-----------+</span><br><span class="line">| id   | name      |</span><br><span class="line">+------+-----------+</span><br><span class="line">| 1    | Alice     |</span><br><span class="line">| 2    | Bob       |</span><br><span class="line">| 3    | Alex      |</span><br><span class="line">| 4    | Donald    |</span><br><span class="line">| 7    | Lee       |</span><br><span class="line">| 13   | Jonathan  |</span><br><span class="line">| 19   | Elvis     |</span><br><span class="line">+------+-----------+</span><br><span class="line"></span><br><span class="line">Rides 表单:</span><br><span class="line">+------+----------+----------+</span><br><span class="line">| id   | user_id  | distance |</span><br><span class="line">+------+----------+----------+</span><br><span class="line">| 1    | 1        | 120      |</span><br><span class="line">| 2    | 2        | 317      |</span><br><span class="line">| 3    | 3        | 222      |</span><br><span class="line">| 4    | 7        | 100      |</span><br><span class="line">| 5    | 13       | 312      |</span><br><span class="line">| 6    | 19       | 50       |</span><br><span class="line">| 7    | 7        | 120      |</span><br><span class="line">| 8    | 19       | 400      |</span><br><span class="line">| 9    | 7        | 230      |</span><br><span class="line">+------+----------+----------+</span><br><span class="line"></span><br><span class="line">Result 表单:</span><br><span class="line">+----------+--------------------+</span><br><span class="line">| name     | travelled_distance |</span><br><span class="line">+----------+--------------------+</span><br><span class="line">| Elvis    | 450                |</span><br><span class="line">| Lee      | 450                |</span><br><span class="line">| Bob      | 317                |</span><br><span class="line">| Jonathan | 312                |</span><br><span class="line">| Alex     | 222                |</span><br><span class="line">| Alice    | 120                |</span><br><span class="line">| Donald   | 0                  |</span><br><span class="line">+----------+--------------------+</span><br><span class="line">Elvis 和 Lee 旅行了 450 英里, Elvis 是排名靠前的旅行者, 因为他的名字在字母表上的排序比 Lee 更小.</span><br><span class="line">Bob, Jonathan, Alex 和 Alice 只有一次行程, 我们只按此次行程的全部距离对他们排序.</span><br><span class="line">Donald 没有任何行程, 他的旅行距离为 0.</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name,<span class="built_in">sum</span>(ifnull(distance,<span class="number">0</span>)) travelled_distance </span><br><span class="line"><span class="keyword">from</span> Users u <span class="keyword">left</span> <span class="keyword">join</span> Rides r</span><br><span class="line"><span class="keyword">on</span> u.id <span class="operator">=</span> r.user_id</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> name</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> travelled_distance  <span class="keyword">desc</span>, name </span><br></pre></td></tr></table></figure><h4 id="1412-查找成绩处于中游的学生"><a href="#1412-查找成绩处于中游的学生" class="headerlink" title="1412. 查找成绩处于中游的学生"></a><a href="https://leetcode-cn.com/problems/find-the-quiet-students-in-all-exams/">1412. 查找成绩处于中游的学生</a></h4><p>难度困难</p><p>SQL架构</p><p>表: <code>Student</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+---------------------+---------+</span><br><span class="line">| Column Name         | Type    |</span><br><span class="line">+---------------------+---------+</span><br><span class="line">| student_id          | int     |</span><br><span class="line">| student_name        | varchar |</span><br><span class="line">+---------------------+---------+</span><br><span class="line">student_id 是该表主键.</span><br><span class="line">student_name 学生名字.</span><br></pre></td></tr></table></figure><p>表: <code>Exam</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| exam_id       | int     |</span><br><span class="line">| student_id    | int     |</span><br><span class="line">| score         | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">(exam_id, student_id) 是该表主键.</span><br><span class="line">学生 student_id 在测验 exam_id 中得分为 score.</span><br></pre></td></tr></table></figure><p>成绩处于中游的学生是指至少参加了一次测验, 且得分既不是最高分也不是最低分的学生。</p><p>写一个 SQL 语句，找出在所有测验中都处于中游的学生 <code>(student_id, student_name)</code>。</p><p>不要返回从来没有参加过测验的学生。返回结果表按照 <code>student_id</code> 排序。</p><p>查询结果格式如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Student 表：</span><br><span class="line">+-------------+---------------+</span><br><span class="line">| student_id  | student_name  |</span><br><span class="line">+-------------+---------------+</span><br><span class="line">| 1           | Daniel        |</span><br><span class="line">| 2           | Jade          |</span><br><span class="line">| 3           | Stella        |</span><br><span class="line">| 4           | Jonathan      |</span><br><span class="line">| 5           | Will          |</span><br><span class="line">+-------------+---------------+</span><br><span class="line"></span><br><span class="line">Exam 表：</span><br><span class="line">+------------+--------------+-----------+</span><br><span class="line">| exam_id    | student_id   | score     |</span><br><span class="line">+------------+--------------+-----------+</span><br><span class="line">| 10         |     1        |    70     |</span><br><span class="line">| 10         |     2        |    80     |</span><br><span class="line">| 10         |     3        |    90     |</span><br><span class="line">| 20         |     1        |    80     |</span><br><span class="line">| 30         |     1        |    70     |</span><br><span class="line">| 30         |     3        |    80     |</span><br><span class="line">| 30         |     4        |    90     |</span><br><span class="line">| 40         |     1        |    60     |</span><br><span class="line">| 40         |     2        |    70     |</span><br><span class="line">| 40         |     4        |    80     |</span><br><span class="line">+------------+--------------+-----------+</span><br><span class="line"></span><br><span class="line">Result 表：</span><br><span class="line">+-------------+---------------+</span><br><span class="line">| student_id  | student_name  |</span><br><span class="line">+-------------+---------------+</span><br><span class="line">| 2           | Jade          |</span><br><span class="line">+-------------+---------------+</span><br><span class="line"></span><br><span class="line">对于测验 1: 学生 1 和 3 分别获得了最低分和最高分。</span><br><span class="line">对于测验 2: 学生 1 既获得了最高分, 也获得了最低分。</span><br><span class="line">对于测验 3 和 4: 学生 1 和 4 分别获得了最低分和最高分。</span><br><span class="line">学生 2 和 5 没有在任一场测验中获得了最高分或者最低分。</span><br><span class="line">因为学生 5 从来没有参加过任何测验, 所以他被排除于结果表。</span><br><span class="line">由此, 我们仅仅返回学生 2 的信息。</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.student_id,student_name</span><br><span class="line"><span class="keyword">from</span> Exam e <span class="keyword">left</span> <span class="keyword">join</span> Student s</span><br><span class="line"><span class="keyword">on</span> e.student_id<span class="operator">=</span>s.student_id</span><br><span class="line"><span class="keyword">where</span> e.student_id <span class="keyword">not</span> <span class="keyword">in</span>(</span><br><span class="line">    <span class="keyword">select</span> student_id</span><br><span class="line">    <span class="keyword">from</span>(</span><br><span class="line">        <span class="keyword">select</span> student_id,<span class="built_in">rank</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> exam_id <span class="keyword">order</span> <span class="keyword">by</span> score <span class="keyword">desc</span>) rkmax, <span class="built_in">rank</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> exam_id <span class="keyword">order</span> <span class="keyword">by</span> score ) rkmin</span><br><span class="line">        <span class="keyword">from</span> Exam </span><br><span class="line">    )t1</span><br><span class="line">    <span class="keyword">where</span> rkmax <span class="operator">=</span> <span class="number">1</span> <span class="keyword">or</span> rkmin <span class="operator">=</span><span class="number">1</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> e.student_id,student_name</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> e.student_id </span><br></pre></td></tr></table></figure><h4 id="1421-净现值查询"><a href="#1421-净现值查询" class="headerlink" title="1421. 净现值查询"></a><a href="https://leetcode-cn.com/problems/npv-queries/">1421. 净现值查询</a></h4><p>难度中等</p><p>SQL架构</p><p>表: <code>NPV</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| id            | int     |</span><br><span class="line">| year          | int     |</span><br><span class="line">| npv           | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">(id, year) 是该表主键.</span><br><span class="line">该表有每一笔存货的年份, id 和对应净现值的信息.</span><br></pre></td></tr></table></figure><p>表: <code>Queries</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| id            | int     |</span><br><span class="line">| year          | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">(id, year) 是该表主键.</span><br><span class="line">该表有每一次查询所对应存货的 id 和年份的信息.</span><br></pre></td></tr></table></figure><p>写一个 SQL, 找到 Queries 表中每一次查询的净现值.</p><p>结果表没有顺序要求.</p><p>查询结果的格式如下所示:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">NPV 表:</span><br><span class="line">+------+--------+--------+</span><br><span class="line">| id   | year   | npv    |</span><br><span class="line">+------+--------+--------+</span><br><span class="line">| 1    | 2018   | 100    |</span><br><span class="line">| 7    | 2020   | 30     |</span><br><span class="line">| 13   | 2019   | 40     |</span><br><span class="line">| 1    | 2019   | 113    |</span><br><span class="line">| 2    | 2008   | 121    |</span><br><span class="line">| 3    | 2009   | 12     |</span><br><span class="line">| 11   | 2020   | 99     |</span><br><span class="line">| 7    | 2019   | 0      |</span><br><span class="line">+------+--------+--------+</span><br><span class="line"></span><br><span class="line">Queries 表:</span><br><span class="line">+------+--------+</span><br><span class="line">| id   | year   |</span><br><span class="line">+------+--------+</span><br><span class="line">| 1    | 2019   |</span><br><span class="line">| 2    | 2008   |</span><br><span class="line">| 3    | 2009   |</span><br><span class="line">| 7    | 2018   |</span><br><span class="line">| 7    | 2019   |</span><br><span class="line">| 7    | 2020   |</span><br><span class="line">| 13   | 2019   |</span><br><span class="line">+------+--------+</span><br><span class="line"></span><br><span class="line">结果表:</span><br><span class="line">+------+--------+--------+</span><br><span class="line">| id   | year   | npv    |</span><br><span class="line">+------+--------+--------+</span><br><span class="line">| 1    | 2019   | 113    |</span><br><span class="line">| 2    | 2008   | 121    |</span><br><span class="line">| 3    | 2009   | 12     |</span><br><span class="line">| 7    | 2018   | 0      |</span><br><span class="line">| 7    | 2019   | 0      |</span><br><span class="line">| 7    | 2020   | 30     |</span><br><span class="line">| 13   | 2019   | 40     |</span><br><span class="line">+------+--------+--------+</span><br><span class="line"></span><br><span class="line">(7, 2018)的净现值不在 NPV 表中, 我们把它看作是 0.</span><br><span class="line">所有其它查询的净现值都能在 NPV 表中找到.</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> q.id,q.year,ifnull(npv,<span class="number">0</span>) npv</span><br><span class="line"><span class="keyword">from</span> Queries q <span class="keyword">left</span> <span class="keyword">join</span> NPV n</span><br><span class="line"><span class="keyword">on</span> q.id <span class="operator">=</span> n.id <span class="keyword">and</span> q.year <span class="operator">=</span> n.year</span><br></pre></td></tr></table></figure><blockquote><p>npv 净现值概念 了解下</p></blockquote><h4 id="1435-制作会话柱状图"><a href="#1435-制作会话柱状图" class="headerlink" title="1435. 制作会话柱状图"></a><a href="https://leetcode-cn.com/problems/create-a-session-bar-chart/">1435. 制作会话柱状图</a></h4><p>难度简单</p><p>SQL架构</p><p>表：<code>Sessions</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+---------------------+---------+</span><br><span class="line">| Column Name         | Type    |</span><br><span class="line">+---------------------+---------+</span><br><span class="line">| session_id          | int     |</span><br><span class="line">| duration            | int     |</span><br><span class="line">+---------------------+---------+</span><br><span class="line">session_id 是该表主键</span><br><span class="line">duration 是用户访问应用的时间, 以秒为单位</span><br></pre></td></tr></table></figure><p>你想知道用户在你的 app 上的访问时长情况。因此决定统计访问时长区间分别为 “[0-5&gt;”, “[5-10&gt;”, “[10-15&gt;” 和 “15 or more” （单位：分钟）的会话数量，并以此绘制柱状图。</p><p>写一个SQL查询来报告（访问时长区间，会话总数）。结果可用任何顺序呈现。</p><p><strong>下方为查询的输出格式：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Sessions 表：</span><br><span class="line">+-------------+---------------+</span><br><span class="line">| session_id  | duration      |</span><br><span class="line">+-------------+---------------+</span><br><span class="line">| 1           | 30            |</span><br><span class="line">| 2           | 199           |</span><br><span class="line">| 3           | 299           |</span><br><span class="line">| 4           | 580           |</span><br><span class="line">| 5           | 1000          |</span><br><span class="line">+-------------+---------------+</span><br><span class="line"></span><br><span class="line">Result 表：</span><br><span class="line">+--------------+--------------+</span><br><span class="line">| bin          | total        |</span><br><span class="line">+--------------+--------------+</span><br><span class="line">| [0-5&gt;        | 3            |</span><br><span class="line">| [5-10&gt;       | 1            |</span><br><span class="line">| [10-15&gt;      | 0            |</span><br><span class="line">| 15 or more   | 1            |</span><br><span class="line">+--------------+--------------+</span><br><span class="line"></span><br><span class="line">对于 session_id 1，2 和 3 ，它们的访问时间大于等于 0 分钟且小于 5 分钟。</span><br><span class="line">对于 session_id 4，它的访问时间大于等于 5 分钟且小于 10 分钟。</span><br><span class="line">没有会话的访问时间大于等于 10 分钟且小于 15 分钟。</span><br><span class="line">对于 session_id 5, 它的访问时间大于等于 15 分钟。</span><br></pre></td></tr></table></figure><p>Union</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;[0-5&gt;&#x27;</span> <span class="keyword">as</span> bin, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> total <span class="keyword">from</span> Sessions <span class="keyword">where</span> duration<span class="operator">/</span><span class="number">60</span><span class="operator">&gt;=</span><span class="number">0</span> <span class="keyword">and</span> duration<span class="operator">/</span><span class="number">60</span><span class="operator">&lt;</span><span class="number">5</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;[5-10&gt;&#x27;</span> <span class="keyword">as</span> bin, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> total <span class="keyword">from</span> Sessions <span class="keyword">where</span> duration<span class="operator">/</span><span class="number">60</span><span class="operator">&gt;=</span><span class="number">5</span> <span class="keyword">and</span> duration<span class="operator">/</span><span class="number">60</span><span class="operator">&lt;</span><span class="number">10</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;[10-15&gt;&#x27;</span> <span class="keyword">as</span> bin, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> total <span class="keyword">from</span> Sessions <span class="keyword">where</span> duration<span class="operator">/</span><span class="number">60</span><span class="operator">&gt;=</span><span class="number">10</span> <span class="keyword">and</span> duration<span class="operator">/</span><span class="number">60</span><span class="operator">&lt;</span><span class="number">15</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;15 or more&#x27;</span><span class="keyword">as</span> bin, <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> total <span class="keyword">from</span> Sessions <span class="keyword">where</span> duration<span class="operator">/</span><span class="number">60</span><span class="operator">&gt;=</span><span class="number">15</span></span><br></pre></td></tr></table></figure><p>还有很多其他解法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.bin, <span class="built_in">count</span>(b.bin) <span class="keyword">as</span> total</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> <span class="string">&#x27;[0-5&gt;&#x27;</span> <span class="keyword">as</span> bin <span class="keyword">union</span> <span class="keyword">select</span> <span class="string">&#x27;[5-10&gt;&#x27;</span> <span class="keyword">as</span> bin <span class="keyword">union</span> <span class="keyword">select</span> <span class="string">&#x27;[10-15&gt;&#x27;</span> <span class="keyword">as</span> bin <span class="keyword">union</span> <span class="keyword">select</span> <span class="string">&#x27;15 or more&#x27;</span> <span class="keyword">as</span> bin </span><br><span class="line">)a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> </span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">case</span></span><br><span class="line">        <span class="keyword">when</span> duration <span class="operator">&lt;</span> <span class="number">300</span> <span class="keyword">then</span> <span class="string">&#x27;[0-5&gt;&#x27;</span></span><br><span class="line">        <span class="keyword">when</span> duration <span class="operator">&gt;=</span> <span class="number">300</span> <span class="keyword">and</span> duration <span class="operator">&lt;</span> <span class="number">600</span> <span class="keyword">then</span> <span class="string">&#x27;[5-10&gt;&#x27;</span></span><br><span class="line">        <span class="keyword">when</span> duration <span class="operator">&gt;=</span> <span class="number">600</span> <span class="keyword">and</span> duration <span class="operator">&lt;</span> <span class="number">900</span> <span class="keyword">then</span> <span class="string">&#x27;[10-15&gt;&#x27;</span></span><br><span class="line">        <span class="keyword">else</span> <span class="string">&#x27;15 or more&#x27;</span></span><br><span class="line">        <span class="keyword">end</span> bin</span><br><span class="line">    <span class="keyword">from</span> Sessions </span><br><span class="line">)b</span><br><span class="line"><span class="keyword">on</span> a.bin <span class="operator">=</span> b.bin</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> a.bin</span><br></pre></td></tr></table></figure><h4 id="1440-计算布尔表达式的值"><a href="#1440-计算布尔表达式的值" class="headerlink" title="1440. 计算布尔表达式的值"></a><a href="https://leetcode-cn.com/problems/evaluate-boolean-expression/">1440. 计算布尔表达式的值</a></h4><p>难度中等</p><p>SQL架构</p><p>表 <code>Variables</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| name          | varchar |</span><br><span class="line">| value         | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">name 是该表主键.</span><br><span class="line">该表包含了存储的变量及其对应的值.</span><br></pre></td></tr></table></figure><p>表 <code>Expressions</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| left_operand  | varchar |</span><br><span class="line">| operator      | enum    |</span><br><span class="line">| right_operand | varchar |</span><br><span class="line">+---------------+---------+</span><br><span class="line">(left_operand, operator, right_operand) 是该表主键.</span><br><span class="line">该表包含了需要计算的布尔表达式.</span><br><span class="line">operator 是枚举类型, 取值于(&#x27;&lt;&#x27;, &#x27;&gt;&#x27;, &#x27;=&#x27;)</span><br><span class="line">left_operand 和 right_operand 的值保证存在于 Variables 表单中.</span><br></pre></td></tr></table></figure><p>写一个 SQL 查询, 以计算表 <code>Expressions</code> 中的布尔表达式.</p><p>返回的结果表没有顺序要求.</p><p>查询结果格式如下例所示.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">Variables 表:</span><br><span class="line">+------+-------+</span><br><span class="line">| name | value |</span><br><span class="line">+------+-------+</span><br><span class="line">| x    | 66    |</span><br><span class="line">| y    | 77    |</span><br><span class="line">+------+-------+</span><br><span class="line"></span><br><span class="line">Expressions 表:</span><br><span class="line">+--------------+----------+---------------+</span><br><span class="line">| left_operand | operator | right_operand |</span><br><span class="line">+--------------+----------+---------------+</span><br><span class="line">| x            | &gt;        | y             |</span><br><span class="line">| x            | &lt;        | y             |</span><br><span class="line">| x            | =        | y             |</span><br><span class="line">| y            | &gt;        | x             |</span><br><span class="line">| y            | &lt;        | x             |</span><br><span class="line">| x            | =        | x             |</span><br><span class="line">+--------------+----------+---------------+</span><br><span class="line"></span><br><span class="line">Result 表:</span><br><span class="line">+--------------+----------+---------------+-------+</span><br><span class="line">| left_operand | operator | right_operand | value |</span><br><span class="line">+--------------+----------+---------------+-------+</span><br><span class="line">| x            | &gt;        | y             | false |</span><br><span class="line">| x            | &lt;        | y             | true  |</span><br><span class="line">| x            | =        | y             | false |</span><br><span class="line">| y            | &gt;        | x             | true  |</span><br><span class="line">| y            | &lt;        | x             | false |</span><br><span class="line">| x            | =        | x             | true  |</span><br><span class="line">+--------------+----------+---------------+-------+</span><br><span class="line">如上所示, 你需要通过使用 Variables 表来找到 Expressions 表中的每一个布尔表达式的值.</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> e.left_operand,e.operator,e.right_operand,</span><br><span class="line"><span class="keyword">case</span> e.operator</span><br><span class="line">    <span class="keyword">when</span> <span class="string">&#x27;&gt;&#x27;</span> <span class="keyword">then</span> if(v1.value<span class="operator">&gt;</span>v2.value,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;false&#x27;</span>)</span><br><span class="line">    <span class="keyword">when</span> <span class="string">&#x27;&lt;&#x27;</span> <span class="keyword">then</span> if(v1.value<span class="operator">&lt;</span>v2.value,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;false&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>  if(v1.value<span class="operator">=</span>v2.value,<span class="string">&#x27;true&#x27;</span>,<span class="string">&#x27;false&#x27;</span>)</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">value</span></span><br><span class="line"><span class="keyword">from</span> Expressions e</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> Variables v1 <span class="keyword">on</span> v1.name <span class="operator">=</span> e.left_operand </span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> Variables v2 <span class="keyword">on</span> v2.name <span class="operator">=</span> e.right_operand</span><br></pre></td></tr></table></figure><h4 id="1445-苹果和桔子"><a href="#1445-苹果和桔子" class="headerlink" title="1445. 苹果和桔子"></a><a href="https://leetcode-cn.com/problems/apples-oranges/">1445. 苹果和桔子</a></h4><p>难度中等</p><p>SQL架构</p><p>表: <code>Sales</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| sale_date     | date    |</span><br><span class="line">| fruit         | enum    | </span><br><span class="line">| sold_num      | int     | </span><br><span class="line">+---------------+---------+</span><br><span class="line">(sale_date,fruit) 是该表主键.</span><br><span class="line">该表包含了每一天中&quot;苹果&quot; 和 &quot;桔子&quot;的销售情况.</span><br></pre></td></tr></table></figure><p>写一个 SQL 查询, 报告每一天 <strong>苹果</strong> 和 <strong>桔子</strong> 销售的数目的差异.</p><p>返回的结果表, 按照格式为 (‘YYYY-MM-DD’) 的 <code>sale_date</code> 排序.</p><p>查询结果表如下例所示:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Sales 表:</span><br><span class="line">+------------+------------+-------------+</span><br><span class="line">| sale_date  | fruit      | sold_num    |</span><br><span class="line">+------------+------------+-------------+</span><br><span class="line">| 2020-05-01 | apples     | 10          |</span><br><span class="line">| 2020-05-01 | oranges    | 8           |</span><br><span class="line">| 2020-05-02 | apples     | 15          |</span><br><span class="line">| 2020-05-02 | oranges    | 15          |</span><br><span class="line">| 2020-05-03 | apples     | 20          |</span><br><span class="line">| 2020-05-03 | oranges    | 0           |</span><br><span class="line">| 2020-05-04 | apples     | 15          |</span><br><span class="line">| 2020-05-04 | oranges    | 16          |</span><br><span class="line">+------------+------------+-------------+</span><br><span class="line"></span><br><span class="line">Result 表:</span><br><span class="line">+------------+--------------+</span><br><span class="line">| sale_date  | diff         |</span><br><span class="line">+------------+--------------+</span><br><span class="line">| 2020-05-01 | 2            |</span><br><span class="line">| 2020-05-02 | 0            |</span><br><span class="line">| 2020-05-03 | 20           |</span><br><span class="line">| 2020-05-04 | -1           |</span><br><span class="line">+------------+--------------+</span><br><span class="line"></span><br><span class="line">在 2020-05-01, 卖了 10 个苹果 和 8 个桔子 (差异为 10 - 8 = 2).</span><br><span class="line">在 2020-05-02, 卖了 15 个苹果 和 15 个桔子 (差异为 15 - 15 = 0).</span><br><span class="line">在 2020-05-03, 卖了 20 个苹果 和 0 个桔子 (差异为 20 - 0 = 20).</span><br><span class="line">在 2020-05-04, 卖了 15 个苹果 和 16 个桔子 (差异为 15 - 16 = -1).</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  sale_date,sold_num<span class="operator">-</span>ld diff</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span> sale_date,sold_num , fruit ,<span class="built_in">lead</span>(sold_num ,<span class="number">1</span>,<span class="keyword">null</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span>  sale_date ) ld</span><br><span class="line"><span class="keyword">from</span> Sales</span><br><span class="line">)t1</span><br><span class="line"><span class="keyword">where</span> fruit<span class="operator">=</span><span class="string">&#x27;apples&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="1454-活跃用户"><a href="#1454-活跃用户" class="headerlink" title="1454.  活跃用户"></a><a href="https://leetcode-cn.com/problems/active-users/">1454.  活跃用户</a></h4><p>难度中等</p><p>SQL架构</p><p>表 <code>Accounts</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| id            | int     |</span><br><span class="line">| name          | varchar |</span><br><span class="line">+---------------+---------+</span><br><span class="line">id 是该表主键.</span><br><span class="line">该表包含账户 id 和账户的用户名.</span><br></pre></td></tr></table></figure><p>表 <code>Logins</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| id            | int     |</span><br><span class="line">| login_date    | date    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">该表无主键, 可能包含重复项.</span><br><span class="line">该表包含登录用户的账户 id 和登录日期. 用户也许一天内登录多次.</span><br></pre></td></tr></table></figure><p>写一个 SQL 查询, 找到活跃用户的 id 和 name.</p><p>活跃用户是指那些至少连续 5 天登录账户的用户.</p><p>返回的结果表按照 id 排序.</p><p>结果表格式如下例所示:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Accounts 表:</span><br><span class="line">+----+----------+</span><br><span class="line">| id | name     |</span><br><span class="line">+----+----------+</span><br><span class="line">| 1  | Winston  |</span><br><span class="line">| 7  | Jonathan |</span><br><span class="line">+----+----------+</span><br><span class="line"></span><br><span class="line">Logins 表:</span><br><span class="line">+----+------------+</span><br><span class="line">| id | login_date |</span><br><span class="line">+----+------------+</span><br><span class="line">| 7  | 2020-05-30 |</span><br><span class="line">| 1  | 2020-05-30 |</span><br><span class="line">| 7  | 2020-05-31 |</span><br><span class="line">| 7  | 2020-06-01 |</span><br><span class="line">| 7  | 2020-06-02 |</span><br><span class="line">| 7  | 2020-06-02 |</span><br><span class="line">| 7  | 2020-06-03 |</span><br><span class="line">| 1  | 2020-06-07 |</span><br><span class="line">| 7  | 2020-06-10 |</span><br><span class="line">+----+------------+</span><br><span class="line"></span><br><span class="line">Result 表:</span><br><span class="line">+----+----------+</span><br><span class="line">| id | name     |</span><br><span class="line">+----+----------+</span><br><span class="line">| 7  | Jonathan |</span><br><span class="line">+----+----------+</span><br><span class="line">id = 1 的用户 Winston 仅仅在不同的 2 天内登录了 2 次, 所以, Winston 不是活跃用户.</span><br><span class="line">id = 7 的用户 Jonathon 在不同的 6 天内登录了 7 次, , 6 天中有 5 天是连续的, 所以, Jonathan 是活跃用户.</span><br></pre></td></tr></table></figure><p><strong>后续问题:</strong><br>如果活跃用户是那些至少连续 <code>n</code> 天登录账户的用户, 你能否写出通用的解决方案?</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> t3.id,name</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">distinct</span> id</span><br><span class="line">    <span class="keyword">from</span> </span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">select</span> id,login_date,<span class="built_in">lead</span>(login_date,<span class="number">4</span>,<span class="keyword">null</span>) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> id <span class="keyword">order</span> <span class="keyword">by</span> login_date) ld</span><br><span class="line">        <span class="keyword">from</span> </span><br><span class="line">        (</span><br><span class="line">            <span class="keyword">select</span> id,login_date </span><br><span class="line">            <span class="keyword">from</span> Logins</span><br><span class="line">            <span class="keyword">group</span> <span class="keyword">by</span> id,login_date</span><br><span class="line">        )t1</span><br><span class="line">    )t2</span><br><span class="line">    <span class="keyword">where</span> datediff(ld,login_date)<span class="operator">=</span><span class="number">4</span></span><br><span class="line">)t3</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> Accounts a</span><br><span class="line"><span class="keyword">on</span> t3.id <span class="operator">=</span> a.id</span><br></pre></td></tr></table></figure><blockquote><p>注意用户当天重复登入</p></blockquote><h4 id="1459-矩形面积"><a href="#1459-矩形面积" class="headerlink" title="1459. 矩形面积"></a><a href="https://leetcode-cn.com/problems/rectangles-area/">1459. 矩形面积</a></h4><p>难度中等</p><p>SQL架构</p><p>表: <code>Points</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| id            | int     |</span><br><span class="line">| x_value       | int     |</span><br><span class="line">| y_value       | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">id 是该表主键.</span><br><span class="line">每个点都表示为二维空间 (x_value, y_value).</span><br></pre></td></tr></table></figure><p>写一个 SQL 语句, 报告由表中任意两点可以形成的所有可能的矩形. </p><p>结果表中的每一行包含三列 (p1, p2, area) 如下:</p><ul><li><strong>p1</strong> 和 <strong>p2</strong> 是矩形两个对角的 id 且 p1 &lt; p2.</li><li>矩形的面积由列 <strong>area</strong> 表示. </li></ul><p>请按照面积大小降序排列，如果面积相同的话, 则按照 p1 和 p2 升序对结果表排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Points 表:</span><br><span class="line">+----------+-------------+-------------+</span><br><span class="line">| id       | x_value     | y_value     |</span><br><span class="line">+----------+-------------+-------------+</span><br><span class="line">| 1        | 2           | 8           |</span><br><span class="line">| 2        | 4           | 7           |</span><br><span class="line">| 3        | 2           | 10          |</span><br><span class="line">+----------+-------------+-------------+</span><br><span class="line"></span><br><span class="line">Result 表:</span><br><span class="line">+----------+-------------+-------------+</span><br><span class="line">| p1       | p2          | area        |</span><br><span class="line">+----------+-------------+-------------+</span><br><span class="line">| 2        | 3           | 6           |</span><br><span class="line">| 1        | 2           | 2           |</span><br><span class="line">+----------+-------------+-------------+</span><br><span class="line"></span><br><span class="line">p1 应该小于 p2 并且面积大于 0.</span><br><span class="line">p1 = 1 且 p2 = 2 时, 面积等于 |2-4| * |8-7| = 2.</span><br><span class="line">p1 = 2 且 p2 = 3 时, 面积等于 |4-2| * |7-10| = 6.</span><br><span class="line">p1 = 1 且 p2 = 3 时, 是不可能为矩形的, 因为面积等于 0.</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.id P1,b.id P2,<span class="built_in">abs</span>(a.x_value<span class="operator">-</span>b.x_value)<span class="operator">*</span><span class="built_in">abs</span>(a.y_value<span class="operator">-</span>b.y_value) <span class="keyword">as</span> area</span><br><span class="line"><span class="keyword">from</span> Points a,Points b</span><br><span class="line"><span class="keyword">where</span> a.id<span class="operator">&lt;</span>b.id <span class="keyword">and</span> a.x_value <span class="operator">!=</span> b.x_value <span class="keyword">and</span> a.y_value <span class="operator">!=</span> b.y_value</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> area <span class="keyword">desc</span>,P1 ,P2 </span><br></pre></td></tr></table></figure><h4 id="1468-计算税后工资"><a href="#1468-计算税后工资" class="headerlink" title="1468. 计算税后工资"></a><a href="https://leetcode-cn.com/problems/calculate-salaries/">1468. 计算税后工资</a></h4><p>难度中等</p><p>SQL架构</p><p><code>Salaries</code> 表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| company_id    | int     |</span><br><span class="line">| employee_id   | int     |</span><br><span class="line">| employee_name | varchar |</span><br><span class="line">| salary        | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">(company_id, employee_id) 是这个表的主键</span><br><span class="line">这个表包括员工的company id, id, name 和 salary </span><br></pre></td></tr></table></figure><p>写一条查询 SQL 来查找每个员工的税后工资</p><p>每个公司的税率计算依照以下规则</p><ul><li>如果这个公司员工最高工资不到 1000 ，税率为 0%</li><li>如果这个公司员工最高工资在 1000 到 10000 之间，税率为 24%</li><li>如果这个公司员工最高工资大于 10000 ，税率为 49%</li></ul><p>按任意顺序返回结果，税后工资结果取整</p><p>结果表格式如下例所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Salaries 表：</span><br><span class="line">+------------+-------------+---------------+--------+</span><br><span class="line">| company_id | employee_id | employee_name | salary |</span><br><span class="line">+------------+-------------+---------------+--------+</span><br><span class="line">| 1          | 1           | Tony          | 2000   |</span><br><span class="line">| 1          | 2           | Pronub        | 21300  |</span><br><span class="line">| 1          | 3           | Tyrrox        | 10800  |</span><br><span class="line">| 2          | 1           | Pam           | 300    |</span><br><span class="line">| 2          | 7           | Bassem        | 450    |</span><br><span class="line">| 2          | 9           | Hermione      | 700    |</span><br><span class="line">| 3          | 7           | Bocaben       | 100    |</span><br><span class="line">| 3          | 2           | Ognjen        | 2200   |</span><br><span class="line">| 3          | 13          | Nyancat       | 3300   |</span><br><span class="line">| 3          | 15          | Morninngcat   | 1866   |</span><br><span class="line">+------------+-------------+---------------+--------+</span><br><span class="line"></span><br><span class="line">Result 表：</span><br><span class="line">+------------+-------------+---------------+--------+</span><br><span class="line">| company_id | employee_id | employee_name | salary |</span><br><span class="line">+------------+-------------+---------------+--------+</span><br><span class="line">| 1          | 1           | Tony          | 1020   |</span><br><span class="line">| 1          | 2           | Pronub        | 10863  |</span><br><span class="line">| 1          | 3           | Tyrrox        | 5508   |</span><br><span class="line">| 2          | 1           | Pam           | 300    |</span><br><span class="line">| 2          | 7           | Bassem        | 450    |</span><br><span class="line">| 2          | 9           | Hermione      | 700    |</span><br><span class="line">| 3          | 7           | Bocaben       | 76     |</span><br><span class="line">| 3          | 2           | Ognjen        | 1672   |</span><br><span class="line">| 3          | 13          | Nyancat       | 2508   |</span><br><span class="line">| 3          | 15          | Morninngcat   | 5911   |</span><br><span class="line">+------------+-------------+---------------+--------+</span><br><span class="line">对于公司 1 ，最高工资是 21300 ，其每个员工的税率为 49%</span><br><span class="line">对于公司 2 ，最高工资是 700 ，其每个员工税率为 0%</span><br><span class="line">对于公司 3 ，最高工资是 7777 ，其每个员工税率是 24%</span><br><span class="line">税后工资计算 = 工资 - ( 税率 / 100）*工资</span><br><span class="line">对于上述案例，Morninngcat 的税后工资 = 7777 - 7777 * ( 24 / 100) = 7777 - 1866.48 = 5910.52 ，取整为 5911</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> company_id,employee_id , employee_name,</span><br><span class="line">round(<span class="keyword">case</span> <span class="keyword">when</span> maxsalary<span class="operator">&lt;</span><span class="number">1000</span> <span class="keyword">then</span> salary</span><br><span class="line">       <span class="keyword">when</span> maxsalary<span class="operator">&lt;</span><span class="number">10000</span> <span class="keyword">then</span> salary<span class="operator">*</span>(<span class="number">1</span><span class="number">-0.24</span>)</span><br><span class="line">       <span class="keyword">else</span> salary<span class="operator">*</span>(<span class="number">1</span><span class="number">-0.49</span>) <span class="keyword">end</span> ,<span class="number">0</span>)salary</span><br><span class="line"><span class="keyword">from</span>(</span><br><span class="line">    <span class="keyword">select</span> <span class="operator">*</span>,<span class="built_in">max</span>(salary) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> company_id ) maxsalary</span><br><span class="line">    <span class="keyword">from</span> Salaries </span><br><span class="line">)t1</span><br></pre></td></tr></table></figure><h4 id="1479-周内每天的销售情况"><a href="#1479-周内每天的销售情况" class="headerlink" title="1479. 周内每天的销售情况"></a><a href="https://leetcode-cn.com/problems/sales-by-day-of-the-week/">1479. 周内每天的销售情况</a></h4><p>难度困难</p><p>SQL架构</p><p>表：<code>Orders</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| order_id      | int     |</span><br><span class="line">| customer_id   | int     |</span><br><span class="line">| order_date    | date    | </span><br><span class="line">| item_id       | varchar |</span><br><span class="line">| quantity      | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">(order_id, item_id) 是该表主键</span><br><span class="line">该表包含了订单信息</span><br><span class="line">order_date 是id为 item_id 的商品被id为 customer_id 的消费者订购的日期.</span><br></pre></td></tr></table></figure><p>表：<code>Items</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+---------------------+---------+</span><br><span class="line">| Column Name         | Type    |</span><br><span class="line">+---------------------+---------+</span><br><span class="line">| item_id             | varchar |</span><br><span class="line">| item_name           | varchar |</span><br><span class="line">| item_category       | varchar |</span><br><span class="line">+---------------------+---------+</span><br><span class="line">item_id 是该表主键</span><br><span class="line">item_name 是商品的名字</span><br><span class="line">item_category 是商品的类别</span><br></pre></td></tr></table></figure><p>你是企业主，想要获得分类商品和周内每天的销售报告。</p><p>写一个SQL语句，报告 <strong>周内每天</strong> 每个商品类别下订购了多少单位。</p><p>返回结果表单 <strong>按商品类别排序</strong> 。</p><p>查询结果格式如下例所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">Orders 表：</span><br><span class="line">+------------+--------------+-------------+--------------+-------------+</span><br><span class="line">| order_id   | customer_id  | order_date  | item_id      | quantity    |</span><br><span class="line">+------------+--------------+-------------+--------------+-------------+</span><br><span class="line">| 1          | 1            | 2020-06-01  | 1            | 10          |</span><br><span class="line">| 2          | 1            | 2020-06-08  | 2            | 10          |</span><br><span class="line">| 3          | 2            | 2020-06-02  | 1            | 5           |</span><br><span class="line">| 4          | 3            | 2020-06-03  | 3            | 5           |</span><br><span class="line">| 5          | 4            | 2020-06-04  | 4            | 1           |</span><br><span class="line">| 6          | 4            | 2020-06-05  | 5            | 5           |</span><br><span class="line">| 7          | 5            | 2020-06-05  | 1            | 10          |</span><br><span class="line">| 8          | 5            | 2020-06-14  | 4            | 5           |</span><br><span class="line">| 9          | 5            | 2020-06-21  | 3            | 5           |</span><br><span class="line">+------------+--------------+-------------+--------------+-------------+</span><br><span class="line"></span><br><span class="line">Items 表：</span><br><span class="line">+------------+----------------+---------------+</span><br><span class="line">| item_id    | item_name      | item_category |</span><br><span class="line">+------------+----------------+---------------+</span><br><span class="line">| 1          | LC Alg. Book   | Book          |</span><br><span class="line">| 2          | LC DB. Book    | Book          |</span><br><span class="line">| 3          | LC SmarthPhone | Phone         |</span><br><span class="line">| 4          | LC Phone 2020  | Phone         |</span><br><span class="line">| 5          | LC SmartGlass  | Glasses       |</span><br><span class="line">| 6          | LC T-Shirt XL  | T-Shirt       |</span><br><span class="line">+------------+----------------+---------------+</span><br><span class="line"></span><br><span class="line">Result 表：</span><br><span class="line">+------------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+</span><br><span class="line">| Category   | Monday    | Tuesday   | Wednesday | Thursday  | Friday    | Saturday  | Sunday    |</span><br><span class="line">+------------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+</span><br><span class="line">| Book       | 20        | 5         | 0         | 0         | 10        | 0         | 0         |</span><br><span class="line">| Glasses    | 0         | 0         | 0         | 0         | 5         | 0         | 0         |</span><br><span class="line">| Phone      | 0         | 0         | 5         | 1         | 0         | 0         | 10        |</span><br><span class="line">| T-Shirt    | 0         | 0         | 0         | 0         | 0         | 0         | 0         |</span><br><span class="line">+------------+-----------+-----------+-----------+-----------+-----------+-----------+-----------+</span><br><span class="line">在周一(2020-06-01, 2020-06-08)，Book分类(ids: 1, 2)下，总共销售了20个单位(10 + 10)</span><br><span class="line">在周二(2020-06-02)，Book分类(ids: 1, 2)下，总共销售了5个单位</span><br><span class="line">在周三(2020-06-03)，Phone分类(ids: 3, 4)下，总共销售了5个单位</span><br><span class="line">在周四(2020-06-04)，Phone分类(ids: 3, 4)下，总共销售了1个单位</span><br><span class="line">在周五(2020-06-05)，Book分类(ids: 1, 2)下，总共销售了10个单位，Glasses分类(ids: 5)下，总共销售了5个单位</span><br><span class="line">在周六, 没有商品销售</span><br><span class="line">在周天(2020-06-14, 2020-06-21)，Phone分类(ids: 3, 4)下，总共销售了10个单位(5 + 5)</span><br><span class="line">没有销售 T-Shirt 类别的商品</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> item_category <span class="keyword">as</span> category, </span><br><span class="line"><span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> num <span class="operator">=</span> <span class="number">2</span> <span class="keyword">then</span> quantity <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> Monday,</span><br><span class="line"><span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> num <span class="operator">=</span> <span class="number">3</span> <span class="keyword">then</span> quantity <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> Tuesday,</span><br><span class="line"><span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> num <span class="operator">=</span> <span class="number">4</span> <span class="keyword">then</span> quantity <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> Wednesday,</span><br><span class="line"><span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> num <span class="operator">=</span> <span class="number">5</span> <span class="keyword">then</span> quantity <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> Thursday,</span><br><span class="line"><span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> num <span class="operator">=</span> <span class="number">6</span> <span class="keyword">then</span> quantity <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> Friday,</span><br><span class="line"><span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> num <span class="operator">=</span> <span class="number">7</span> <span class="keyword">then</span> quantity <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> Saturday,</span><br><span class="line"><span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> num <span class="operator">=</span> <span class="number">1</span> <span class="keyword">then</span> quantity <span class="keyword">else</span> <span class="number">0</span> <span class="keyword">end</span>) <span class="keyword">as</span> Sunday</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> item_category, quantity,dayofweek(order_date) <span class="keyword">as</span> num <span class="keyword">from</span> </span><br><span class="line">items i <span class="keyword">left</span> <span class="keyword">join</span> orders o </span><br><span class="line"><span class="keyword">on</span> i.item_id<span class="operator">=</span>o.item_id) t</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> item_category</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> item_category</span><br></pre></td></tr></table></figure><h4 id="1485-按日期分组销售产品"><a href="#1485-按日期分组销售产品" class="headerlink" title="1485. 按日期分组销售产品"></a><a href="https://leetcode-cn.com/problems/group-sold-products-by-the-date/">1485. 按日期分组销售产品</a></h4><p>难度简单</p><p>SQL架构</p><p>表 <code>Activities</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+-------------+---------+</span><br><span class="line">| 列名         | 类型    |</span><br><span class="line">+-------------+---------+</span><br><span class="line">| sell_date   | date    |</span><br><span class="line">| product     | varchar |</span><br><span class="line">+-------------+---------+</span><br><span class="line">此表没有主键，它可能包含重复项。</span><br><span class="line">此表的每一行都包含产品名称和在市场上销售的日期。</span><br></pre></td></tr></table></figure><p>编写一个 SQL 查询来查找每个日期、销售的不同产品的数量及其名称。<br>每个日期的销售产品名称应按词典序排列。<br>返回按 <code>sell_date</code> 排序的结果表。</p><p>查询结果格式如下例所示。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Activities 表：</span><br><span class="line">+------------+-------------+</span><br><span class="line">| sell_date  | product     |</span><br><span class="line">+------------+-------------+</span><br><span class="line">| 2020-05-30 | Headphone   |</span><br><span class="line">| 2020-06-01 | Pencil      |</span><br><span class="line">| 2020-06-02 | Mask        |</span><br><span class="line">| 2020-05-30 | Basketball  |</span><br><span class="line">| 2020-06-01 | Bible       |</span><br><span class="line">| 2020-06-02 | Mask        |</span><br><span class="line">| 2020-05-30 | T-Shirt     |</span><br><span class="line">+------------+-------------+</span><br><span class="line"></span><br><span class="line">Result 表：</span><br><span class="line">+------------+----------+------------------------------+</span><br><span class="line">| sell_date  | num_sold | products                     |</span><br><span class="line">+------------+----------+------------------------------+</span><br><span class="line">| 2020-05-30 | 3        | Basketball,Headphone,T-shirt |</span><br><span class="line">| 2020-06-01 | 2        | Bible,Pencil                 |</span><br><span class="line">| 2020-06-02 | 1        | Mask                         |</span><br><span class="line">+------------+----------+------------------------------+</span><br><span class="line">对于2020-05-30，出售的物品是 (Headphone, Basketball, T-shirt)，按词典序排列，并用逗号 &#x27;,&#x27; 分隔。</span><br><span class="line">对于2020-06-01，出售的物品是 (Pencil, Bible)，按词典序排列，并用逗号分隔。</span><br><span class="line">对于2020-06-02，出售的物品是 (Mask)，只需返回该物品名。</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> sell_date, <span class="built_in">count</span>(<span class="keyword">distinct</span> product) num_sold, </span><br><span class="line">    group_concat(<span class="keyword">distinct</span> product <span class="keyword">order</span> <span class="keyword">by</span> product) products</span><br><span class="line"><span class="keyword">from</span> Activities</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> sell_date</span><br></pre></td></tr></table></figure><blockquote><p>行转列</p></blockquote><h4 id="1495-上月播放的儿童适宜电影"><a href="#1495-上月播放的儿童适宜电影" class="headerlink" title="1495. 上月播放的儿童适宜电影"></a><a href="https://leetcode-cn.com/problems/friendly-movies-streamed-last-month/">1495. 上月播放的儿童适宜电影</a></h4><p>难度简单</p><p>SQL架构</p><p>表: <code>TVProgram</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| program_date  | date    |</span><br><span class="line">| content_id    | int     |</span><br><span class="line">| channel       | varchar |</span><br><span class="line">+---------------+---------+</span><br><span class="line">(program_date, content_id) 是该表主键.</span><br><span class="line">该表包含电视上的节目信息.</span><br><span class="line">content_id 是电视一些频道上的节目的 id.</span><br></pre></td></tr></table></figure><p>表: <code>Content</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">+------------------+---------+</span><br><span class="line">| Column Name      | Type    |</span><br><span class="line">+------------------+---------+</span><br><span class="line">| content_id       | varchar |</span><br><span class="line">| title            | varchar |</span><br><span class="line">| Kids_content     | enum    |</span><br><span class="line">| content_type     | varchar |</span><br><span class="line">+------------------+---------+</span><br><span class="line">content_id 是该表主键.</span><br><span class="line">Kids_content 是枚举类型, 取值为(&#x27;Y&#x27;, &#x27;N&#x27;), 其中: </span><br><span class="line">&#x27;Y&#x27; 表示儿童适宜内容, 而&#x27;N&#x27;表示儿童不宜内容.</span><br><span class="line">content_type 表示内容的类型, 比如电影, 电视剧等.</span><br></pre></td></tr></table></figure><p>写一个 SQL 语句, 报告在 2020 年 6 月份播放的儿童适宜电影的去重电影名.</p><p>返回的结果表单没有顺序要求.</p><p>查询结果的格式如下例所示.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">TVProgram 表:</span><br><span class="line">+--------------------+--------------+-------------+</span><br><span class="line">| program_date       | content_id   | channel     |</span><br><span class="line">+--------------------+--------------+-------------+</span><br><span class="line">| 2020-06-10 08:00   | 1            | LC-Channel  |</span><br><span class="line">| 2020-05-11 12:00   | 2            | LC-Channel  |</span><br><span class="line">| 2020-05-12 12:00   | 3            | LC-Channel  |</span><br><span class="line">| 2020-05-13 14:00   | 4            | Disney Ch   |</span><br><span class="line">| 2020-06-18 14:00   | 4            | Disney Ch   |</span><br><span class="line">| 2020-07-15 16:00   | 5            | Disney Ch   |</span><br><span class="line">+--------------------+--------------+-------------+</span><br><span class="line"></span><br><span class="line">Content 表:</span><br><span class="line">+------------+----------------+---------------+---------------+</span><br><span class="line">| content_id | title          | Kids_content  | content_type  |</span><br><span class="line">+------------+----------------+---------------+---------------+</span><br><span class="line">| 1          | Leetcode Movie | N             | Movies        |</span><br><span class="line">| 2          | Alg. for Kids  | Y             | Series        |</span><br><span class="line">| 3          | Database Sols  | N             | Series        |</span><br><span class="line">| 4          | Aladdin        | Y             | Movies        |</span><br><span class="line">| 5          | Cinderella     | Y             | Movies        |</span><br><span class="line">+------------+----------------+---------------+---------------+</span><br><span class="line"></span><br><span class="line">Result 表:</span><br><span class="line">+--------------+</span><br><span class="line">| title        |</span><br><span class="line">+--------------+</span><br><span class="line">| Aladdin      |</span><br><span class="line">+--------------+</span><br><span class="line">&quot;Leetcode Movie&quot; 是儿童不宜的电影.</span><br><span class="line">&quot;Alg. for Kids&quot; 不是电影.</span><br><span class="line">&quot;Database Sols&quot; 不是电影</span><br><span class="line">&quot;Alladin&quot; 是电影, 儿童适宜, 并且在 2020 年 6 月份播放.</span><br><span class="line">&quot;Cinderella&quot; 不在 2020 年 6 月份播放.</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> title   </span><br><span class="line"><span class="keyword">from</span> TVProgram t <span class="keyword">left</span> <span class="keyword">join</span> Content c</span><br><span class="line"><span class="keyword">on</span> t.content_id  <span class="operator">=</span> c.content_id </span><br><span class="line"><span class="keyword">where</span>  Kids_content <span class="operator">=</span><span class="string">&#x27;Y&#x27;</span> </span><br><span class="line"><span class="keyword">and</span> date_format(program_date ,<span class="string">&#x27;%Y-%m&#x27;</span>)<span class="operator">=</span><span class="string">&#x27;2020-06&#x27;</span></span><br><span class="line"><span class="keyword">and</span> content_type<span class="operator">=</span><span class="string">&#x27;Movies&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><p>LEFT()函数参见：<a href="https://www.begtut.com/sql/func-mysql-left.html">https://www.begtut.com/sql/func-mysql-left.html</a><br>REGEXP语法参见：<br><a href="https://www.cnblogs.com/timssd/p/5882742.html">https://www.cnblogs.com/timssd/p/5882742.html</a><br><a href="https://www.cnblogs.com/zhaopanpan/p/10133224.html">https://www.cnblogs.com/zhaopanpan/p/10133224.html</a><br>DATE_FORMAT()函数参见：<a href="https://www.w3school.com.cn/sql/func_date_format.asp">https://www.w3school.com.cn/sql/func_date_format.asp</a><br>EXTRACT()函数参见：<a href="https://www.runoob.com/sql/func-extract.html">https://www.runoob.com/sql/func-extract.html</a><br>DATEDIFF()函数参见：<a href="https://www.runoob.com/sql/func-datediff-mysql.html">https://www.runoob.com/sql/func-datediff-mysql.html</a><br>YEAR()函数参见：<a href="https://blog.csdn.net/moakun/article/details/82528829">https://blog.csdn.net/moakun/article/details/82528829</a><br>MONTH()函数参见：<a href="https://www.yiibai.com/mysql/month.html">https://www.yiibai.com/mysql/month.html</a></p></blockquote><h4 id="1501-可以放心投资的国家"><a href="#1501-可以放心投资的国家" class="headerlink" title="1501. 可以放心投资的国家"></a><a href="https://leetcode-cn.com/problems/countries-you-can-safely-invest-in/">1501. 可以放心投资的国家</a></h4><p>难度中等</p><p>SQL架构</p><p>表 <code>Person</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+----------------+---------+</span><br><span class="line">| Column Name    | Type    |</span><br><span class="line">+----------------+---------+</span><br><span class="line">| id             | int     |</span><br><span class="line">| name           | varchar |</span><br><span class="line">| phone_number   | varchar |</span><br><span class="line">+----------------+---------+</span><br><span class="line">id 是该表主键.</span><br><span class="line">该表每一行包含一个人的名字和电话号码.</span><br><span class="line">电话号码的格式是:&#x27;xxx-yyyyyyy&#x27;, 其中xxx是国家码(3个字符), yyyyyyy是电话号码(7个字符), x和y都表示数字. 同时, 国家码和电话号码都可以包含前导0.</span><br></pre></td></tr></table></figure><p>表 <code>Country</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+----------------+---------+</span><br><span class="line">| Column Name    | Type    |</span><br><span class="line">+----------------+---------+</span><br><span class="line">| name           | varchar |</span><br><span class="line">| country_code   | varchar |</span><br><span class="line">+----------------+---------+</span><br><span class="line">country_code是该表主键.</span><br><span class="line">该表每一行包含国家名和国家码. country_code的格式是&#x27;xxx&#x27;, x是数字.</span><br></pre></td></tr></table></figure><p>表 <code>Calls</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+-------------+------+</span><br><span class="line">| Column Name | Type |</span><br><span class="line">+-------------+------+</span><br><span class="line">| caller_id   | int  |</span><br><span class="line">| callee_id   | int  |</span><br><span class="line">| duration    | int  |</span><br><span class="line">+-------------+------+</span><br><span class="line">该表无主键, 可能包含重复行.</span><br><span class="line">每一行包含呼叫方id, 被呼叫方id和以分钟为单位的通话时长. caller_id != callee_id</span><br></pre></td></tr></table></figure><p>一家电信公司想要投资新的国家. 该公司想要投资的国家是: 该国的平均通话时长要严格地大于全球平均通话时长.</p><p>写一段 SQL, 找到所有该公司可以投资的国家.</p><p>返回的结果表没有顺序要求.</p><p>查询的结果格式如下例所示.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">Person 表:</span><br><span class="line">+----+----------+--------------+</span><br><span class="line">| id | name     | phone_number |</span><br><span class="line">+----+----------+--------------+</span><br><span class="line">| 3  | Jonathan | 051-1234567  |</span><br><span class="line">| 12 | Elvis    | 051-7654321  |</span><br><span class="line">| 1  | Moncef   | 212-1234567  |</span><br><span class="line">| 2  | Maroua   | 212-6523651  |</span><br><span class="line">| 7  | Meir     | 972-1234567  |</span><br><span class="line">| 9  | Rachel   | 972-0011100  |</span><br><span class="line">+----+----------+--------------+</span><br><span class="line"></span><br><span class="line">Country 表:</span><br><span class="line">+----------+--------------+</span><br><span class="line">| name     | country_code |</span><br><span class="line">+----------+--------------+</span><br><span class="line">| Peru     | 051          |</span><br><span class="line">| Israel   | 972          |</span><br><span class="line">| Morocco  | 212          |</span><br><span class="line">| Germany  | 049          |</span><br><span class="line">| Ethiopia | 251          |</span><br><span class="line">+----------+--------------+</span><br><span class="line"></span><br><span class="line">Calls 表:</span><br><span class="line">+-----------+-----------+----------+</span><br><span class="line">| caller_id | callee_id | duration |</span><br><span class="line">+-----------+-----------+----------+</span><br><span class="line">| 1         | 9         | 33       |</span><br><span class="line">| 2         | 9         | 4        |</span><br><span class="line">| 1         | 2         | 59       |</span><br><span class="line">| 3         | 12        | 102      |</span><br><span class="line">| 3         | 12        | 330      |</span><br><span class="line">| 12        | 3         | 5        |</span><br><span class="line">| 7         | 9         | 13       |</span><br><span class="line">| 7         | 1         | 3        |</span><br><span class="line">| 9         | 7         | 1        |</span><br><span class="line">| 1         | 7         | 7        |</span><br><span class="line">+-----------+-----------+----------+</span><br><span class="line"></span><br><span class="line">Result 表:</span><br><span class="line">+----------+</span><br><span class="line">| country  |</span><br><span class="line">+----------+</span><br><span class="line">| Peru     |</span><br><span class="line">+----------+</span><br><span class="line">国家Peru的平均通话时长是 (102 + 102 + 330 + 330 + 5 + 5) / 6 = 145.666667</span><br><span class="line">国家Israel的平均通话时长是 (33 + 4 + 13 + 13 + 3 + 1 + 1 + 7) / 8 = 9.37500</span><br><span class="line">国家Morocco的平均通话时长是 (33 + 4 + 59 + 59 + 3 + 7) / 6 = 27.5000 </span><br><span class="line">全球平均通话时长 = (2 * (33 + 3 + 59 + 102 + 330 + 5 + 13 + 3 + 1 + 7)) / 20 = 55.70000</span><br><span class="line">所以, Peru是唯一的平均通话时长大于全球平均通话时长的国家, 也是唯一的推荐投资的国家.</span><br></pre></td></tr></table></figure><p>笛卡尔积</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> c2.name <span class="keyword">as</span> country </span><br><span class="line"><span class="keyword">from</span> Calls c1,Person p,Country c2</span><br><span class="line"><span class="keyword">where</span> (p.id<span class="operator">=</span>c1.caller_id <span class="keyword">or</span> p.id<span class="operator">=</span>c1.callee_id) <span class="keyword">and</span> c2.country_code<span class="operator">=</span><span class="keyword">left</span>(p.phone_number,<span class="number">3</span>)</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> c2.name </span><br><span class="line"><span class="keyword">having</span> <span class="built_in">avg</span>(duration)<span class="operator">&gt;</span>(<span class="keyword">select</span> <span class="built_in">avg</span>(duration) <span class="keyword">from</span> Calls)</span><br></pre></td></tr></table></figure><p>思路更清晰</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> people_country <span class="keyword">as</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> id, c.name country</span><br><span class="line">    <span class="keyword">from</span> Person p <span class="keyword">left</span> <span class="keyword">join</span> Country c</span><br><span class="line">    <span class="keyword">on</span> <span class="keyword">left</span>(p.phone_number,<span class="number">3</span>) <span class="operator">=</span> c.country_code</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> country</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> country, <span class="built_in">avg</span>(duration) avgtime</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">select</span> caller_id id, duration</span><br><span class="line">        <span class="keyword">from</span> Calls</span><br><span class="line">        <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">        <span class="keyword">select</span> callee_id, duration</span><br><span class="line">        <span class="keyword">from</span> Calls</span><br><span class="line">    ) t <span class="keyword">left</span> <span class="keyword">join</span> people_country</span><br><span class="line">    <span class="keyword">using</span>(id)</span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> country</span><br><span class="line">) temp</span><br><span class="line"><span class="keyword">where</span> avgtime <span class="operator">&gt;</span> </span><br><span class="line">    (</span><br><span class="line">        <span class="keyword">select</span> <span class="built_in">avg</span>(duration) avgtime</span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">        (</span><br><span class="line">            <span class="keyword">select</span> caller_id, duration</span><br><span class="line">            <span class="keyword">from</span> Calls</span><br><span class="line">            <span class="keyword">union</span> <span class="keyword">all</span></span><br><span class="line">            <span class="keyword">select</span> callee_id, duration</span><br><span class="line">            <span class="keyword">from</span> Calls</span><br><span class="line">        ) t</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h4 id="1511-消费者下单频率"><a href="#1511-消费者下单频率" class="headerlink" title="1511. 消费者下单频率"></a><a href="https://leetcode-cn.com/problems/customer-order-frequency/">1511. 消费者下单频率</a></h4><p>难度简单</p><p>SQL架构</p><p>表: <code>Customers</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| customer_id   | int     |</span><br><span class="line">| name          | varchar |</span><br><span class="line">| country       | varchar |</span><br><span class="line">+---------------+---------+</span><br><span class="line">customer_id 是该表主键.</span><br><span class="line">该表包含公司消费者的信息.</span><br></pre></td></tr></table></figure><p>表: <code>Product</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| product_id    | int     |</span><br><span class="line">| description   | varchar |</span><br><span class="line">| price         | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">product_id 是该表主键.</span><br><span class="line">该表包含公司产品的信息.</span><br><span class="line">price 是本产品的花销.</span><br></pre></td></tr></table></figure><p>表: <code>Orders</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| order_id      | int     |</span><br><span class="line">| customer_id   | int     |</span><br><span class="line">| product_id    | int     |</span><br><span class="line">| order_date    | date    |</span><br><span class="line">| quantity      | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">order_id 是该表主键.</span><br><span class="line">该表包含消费者下单的信息.</span><br><span class="line">customer_id 是买了数量为&quot;quantity&quot;, id为&quot;product_id&quot;产品的消费者的 id.</span><br><span class="line">Order_date 是订单发货的日期, 格式为(&#x27;YYYY-MM-DD&#x27;).</span><br></pre></td></tr></table></figure><p>写一个 SQL 语句, 报告消费者的 id 和名字, 其中消费者在 2020 年 6 月和 7 月, 每月至少花费了$100.</p><p>结果表无顺序要求.</p><p>查询结果格式如下例所示.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">Customers</span><br><span class="line">+--------------+-----------+-------------+</span><br><span class="line">| customer_id  | name      | country     |</span><br><span class="line">+--------------+-----------+-------------+</span><br><span class="line">| 1            | Winston   | USA         |</span><br><span class="line">| 2            | Jonathan  | Peru        |</span><br><span class="line">| 3            | Moustafa  | Egypt       |</span><br><span class="line">+--------------+-----------+-------------+</span><br><span class="line"></span><br><span class="line">Product</span><br><span class="line">+--------------+-------------+-------------+</span><br><span class="line">| product_id   | description | price       |</span><br><span class="line">+--------------+-------------+-------------+</span><br><span class="line">| 10           | LC Phone    | 300         |</span><br><span class="line">| 20           | LC T-Shirt  | 10          |</span><br><span class="line">| 30           | LC Book     | 45          |</span><br><span class="line">| 40           | LC Keychain | 2           |</span><br><span class="line">+--------------+-------------+-------------+</span><br><span class="line"></span><br><span class="line">Orders</span><br><span class="line">+--------------+-------------+-------------+-------------+-----------+</span><br><span class="line">| order_id     | customer_id | product_id  | order_date  | quantity  |</span><br><span class="line">+--------------+-------------+-------------+-------------+-----------+</span><br><span class="line">| 1            | 1           | 10          | 2020-06-10  | 1         |</span><br><span class="line">| 2            | 1           | 20          | 2020-07-01  | 1         |</span><br><span class="line">| 3            | 1           | 30          | 2020-07-08  | 2         |</span><br><span class="line">| 4            | 2           | 10          | 2020-06-15  | 2         |</span><br><span class="line">| 5            | 2           | 40          | 2020-07-01  | 10        |</span><br><span class="line">| 6            | 3           | 20          | 2020-06-24  | 2         |</span><br><span class="line">| 7            | 3           | 30          | 2020-06-25  | 2         |</span><br><span class="line">| 9            | 3           | 30          | 2020-05-08  | 3         |</span><br><span class="line">+--------------+-------------+-------------+-------------+-----------+</span><br><span class="line"></span><br><span class="line">Result 表:</span><br><span class="line">+--------------+------------+</span><br><span class="line">| customer_id  | name       |  </span><br><span class="line">+--------------+------------+</span><br><span class="line">| 1            | Winston    |</span><br><span class="line">+--------------+------------+ </span><br><span class="line">Winston 在2020年6月花费了$300(300 * 1), 在7月花费了$100(10 * 1 + 45 * 2).</span><br><span class="line">Jonathan 在2020年6月花费了$600(300 * 2), 在7月花费了$20(2 * 10).</span><br><span class="line">Moustafa 在2020年6月花费了$110 (10 * 2 + 45 * 2), 在7月花费了$0.</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> customer_id,name</span><br><span class="line"><span class="keyword">from</span> Customers</span><br><span class="line"><span class="keyword">where</span> customer_id <span class="keyword">in</span></span><br><span class="line">(<span class="keyword">select</span> customer_id</span><br><span class="line">    <span class="keyword">from</span></span><br><span class="line">        (<span class="keyword">select</span> customer_id, <span class="keyword">month</span>(order_date) <span class="keyword">as</span> <span class="keyword">month</span> , <span class="built_in">sum</span>(quantity<span class="operator">*</span>price) <span class="keyword">as</span> total</span><br><span class="line">        <span class="keyword">from</span> Orders o <span class="keyword">left</span> <span class="keyword">join</span> Product p <span class="keyword">on</span> o.product_id <span class="operator">=</span> p.product_id</span><br><span class="line">        <span class="keyword">where</span> <span class="keyword">month</span>(order_date) <span class="operator">=</span> <span class="number">6</span> <span class="keyword">or</span> <span class="keyword">month</span>(order_date)<span class="operator">=</span><span class="number">7</span></span><br><span class="line">        <span class="keyword">group</span> <span class="keyword">by</span> customer_id,<span class="keyword">month</span>(order_date)</span><br><span class="line">        ) <span class="keyword">as</span> t1</span><br><span class="line">    <span class="keyword">where</span> total <span class="operator">&gt;=</span><span class="number">100</span></span><br><span class="line">    <span class="keyword">group</span> <span class="keyword">by</span> customer_id</span><br><span class="line">    <span class="keyword">having</span> <span class="built_in">count</span>(<span class="operator">*</span>)<span class="operator">&gt;=</span><span class="number">2</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="1517-Find-Users-With-Valid-E-Mails"><a href="#1517-Find-Users-With-Valid-E-Mails" class="headerlink" title="1517. Find Users With Valid E-Mails"></a><a href="https://leetcode-cn.com/problems/find-users-with-valid-e-mails/">1517. Find Users With Valid E-Mails</a></h4><p>难度简单</p><p>SQL架构</p><p>Table: <code>Users</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| user_id       | int     |</span><br><span class="line">| name          | varchar |</span><br><span class="line">| mail          | varchar |</span><br><span class="line">+---------------+---------+</span><br><span class="line">user_id is the primary key for this table.</span><br><span class="line">This table contains information of the users signed up in a website. Some e-mails are invalid.</span><br></pre></td></tr></table></figure><p>Write an SQL query to find the users who have <strong>valid emails</strong>.</p><p>A valid e-mail has a prefix name and a domain where: </p><ul><li><strong>The prefix name</strong> is a string that may contain letters (upper or lower case), digits, underscore <code>&#39;_&#39;</code>, period <code>&#39;.&#39;</code> and/or dash <code>&#39;-&#39;</code>. The prefix name <strong>must</strong> start with a letter.</li><li><strong>The domain</strong> is <code>&#39;@leetcode.com&#39;</code>.</li></ul><p>Return the result table in any order.</p><p>The query result format is in the following example.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Users</span><br><span class="line">+---------+-----------+-------------------------+</span><br><span class="line">| user_id | name      | mail                    |</span><br><span class="line">+---------+-----------+-------------------------+</span><br><span class="line">| 1       | Winston   | winston@leetcode.com    |</span><br><span class="line">| 2       | Jonathan  | jonathanisgreat         |</span><br><span class="line">| 3       | Annabelle | bella-@leetcode.com     |</span><br><span class="line">| 4       | Sally     | sally.come@leetcode.com |</span><br><span class="line">| 5       | Marwan    | quarz#2020@leetcode.com |</span><br><span class="line">| 6       | David     | david69@gmail.com       |</span><br><span class="line">| 7       | Shapiro   | .shapo@leetcode.com     |</span><br><span class="line">+---------+-----------+-------------------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+---------+-----------+-------------------------+</span><br><span class="line">| user_id | name      | mail                    |</span><br><span class="line">+---------+-----------+-------------------------+</span><br><span class="line">| 1       | Winston   | winston@leetcode.com    |</span><br><span class="line">| 3       | Annabelle | bella-@leetcode.com     |</span><br><span class="line">| 4       | Sally     | sally.come@leetcode.com |</span><br><span class="line">+---------+-----------+-------------------------+</span><br><span class="line">The mail of user 2 doesn&#x27;t have a domain.</span><br><span class="line">The mail of user 5 has # sign which is not allowed.</span><br><span class="line">The mail of user 6 doesn&#x27;t have leetcode domain.</span><br><span class="line">The mail of user 7 starts with a period.</span><br></pre></td></tr></table></figure><p>考察正则表达式的使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> Users</span><br><span class="line"><span class="keyword">WHERE</span> mail REGEXP <span class="string">&#x27;^[a-zA-Z]+[\\w_\\.\\-]*@leetcode.com$&#x27;</span>   </span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> user_id;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> Users</span><br><span class="line"><span class="keyword">where</span> mail regexp <span class="string">&#x27;^[a-zA-Z]+[a-zA-Z0-9_\\./\\-]&#123;0,&#125;@leetcode.com$&#x27;</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> user_id</span><br></pre></td></tr></table></figure><blockquote><p>坑点：<br>1、前缀可能是一个字母，比如“<a href="mailto:&#x4a;&#x40;&#x6c;&#101;&#101;&#x74;&#99;&#111;&#100;&#x65;&#x2e;&#99;&#111;&#109;">&#x4a;&#x40;&#x6c;&#101;&#101;&#x74;&#99;&#111;&#100;&#x65;&#x2e;&#99;&#111;&#109;</a>”，所以匹配非首字母外的前缀字符数量要用{0,}或*，不能用+。<br>2、题意要求：underscore ‘’, period ‘.’ and/or dash ‘-‘，/没加单引号，不留神可能写漏/。<br>3、后缀可能是“@leetcodeecom”，所以要对“.”加转义符号。<br>4、后缀可能是“@LEETCODE.COM”，默认是不区分大小写匹配，所以要加上“BINARY”区分大小写。<br>语法：<br>1、<a href="https://www.cnblogs.com/timssd/p/5882742.html">https://www.cnblogs.com/timssd/p/5882742.html</a><br>2、<a href="https://www.cnblogs.com/zhaopanpan/p/10133224.html">https://www.cnblogs.com/zhaopanpan/p/10133224.html</a><br>3、”双反斜杠+w”表示字母、数字、下划线，相对”a-zA-Z0-9”的写法更简洁。</p></blockquote><h4 id="1527-Patients-With-a-Condition"><a href="#1527-Patients-With-a-Condition" class="headerlink" title="1527. Patients With a Condition"></a><a href="https://leetcode-cn.com/problems/patients-with-a-condition/">1527. Patients With a Condition</a></h4><p>难度简单</p><p>SQL架构</p><p>Table: <code>Patients</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">+--------------+---------+</span><br><span class="line">| Column Name  | Type    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">| patient_id   | int     |</span><br><span class="line">| patient_name | varchar |</span><br><span class="line">| conditions   | varchar |</span><br><span class="line">+--------------+---------+</span><br><span class="line">patient_id is the primary key for this table.</span><br><span class="line">&#x27;conditions&#x27; contains 0 or more code separated by spaces. </span><br><span class="line">This table contains information of the patients in the hospital.</span><br></pre></td></tr></table></figure><p>Write an SQL query to report the patient_id, patient_name all conditions of patients who have Type I Diabetes. Type I Diabetes always starts with <code>DIAB1</code> prefix</p><p>Return the result table in any order.</p><p>The query result format is in the following example.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Patients</span><br><span class="line">+------------+--------------+--------------+</span><br><span class="line">| patient_id | patient_name | conditions   |</span><br><span class="line">+------------+--------------+--------------+</span><br><span class="line">| 1          | Daniel       | YFEV COUGH   |</span><br><span class="line">| 2          | Alice        |              |</span><br><span class="line">| 3          | Bob          | DIAB100 MYOP |</span><br><span class="line">| 4          | George       | ACNE DIAB100 |</span><br><span class="line">| 5          | Alain        | DIAB201      |</span><br><span class="line">+------------+--------------+--------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+------------+--------------+--------------+</span><br><span class="line">| patient_id | patient_name | conditions   |</span><br><span class="line">+------------+--------------+--------------+</span><br><span class="line">| 3          | Bob          | DIAB100 MYOP |</span><br><span class="line">| 4          | George       | ACNE DIAB100 | </span><br><span class="line">+------------+--------------+--------------+</span><br><span class="line">Bob and George both have a condition that starts with DIAB1.</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span>  patient_id , patient_name ,conditions </span><br><span class="line"><span class="keyword">from</span> Patients</span><br><span class="line"><span class="keyword">where</span> conditions <span class="keyword">like</span> <span class="string">&#x27;%DIAB1%&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="1532-The-Most-Recent-Three-Orders"><a href="#1532-The-Most-Recent-Three-Orders" class="headerlink" title="1532. The Most Recent Three Orders"></a><a href="https://leetcode-cn.com/problems/the-most-recent-three-orders/">1532. The Most Recent Three Orders</a></h4><p>难度中等</p><p>SQL架构</p><p>Table: <code>Customers</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| customer_id   | int     |</span><br><span class="line">| name          | varchar |</span><br><span class="line">+---------------+---------+</span><br><span class="line">customer_id is the primary key for this table.</span><br><span class="line">This table contains information about customers.</span><br></pre></td></tr></table></figure><p>Table: <code>Orders</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| order_id      | int     |</span><br><span class="line">| order_date    | date    |</span><br><span class="line">| customer_id   | int     |</span><br><span class="line">| cost          | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">order_id is the primary key for this table.</span><br><span class="line">This table contains information about the orders made by customer_id.</span><br><span class="line">Each customer has one order per day.</span><br></pre></td></tr></table></figure><p>Write an SQL query to find the most recent 3 orders of each user. If a user ordered less than 3 orders return all of their orders.</p><p>Return the result table sorted by <code>customer_name</code> in <strong>ascending</strong> order and in case of a tie by the <code>customer_id</code> in <strong>ascending</strong> order. If there still a tie, order them by the <code>order_date</code> in <strong>descending</strong> order.</p><p>The query result format is in the following example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">Customers</span><br><span class="line">+-------------+-----------+</span><br><span class="line">| customer_id | name      |</span><br><span class="line">+-------------+-----------+</span><br><span class="line">| 1           | Winston   |</span><br><span class="line">| 2           | Jonathan  |</span><br><span class="line">| 3           | Annabelle |</span><br><span class="line">| 4           | Marwan    |</span><br><span class="line">| 5           | Khaled    |</span><br><span class="line">+-------------+-----------+</span><br><span class="line"></span><br><span class="line">Orders</span><br><span class="line">+----------+------------+-------------+------+</span><br><span class="line">| order_id | order_date | customer_id | cost |</span><br><span class="line">+----------+------------+-------------+------+</span><br><span class="line">| 1        | 2020-07-31 | 1           | 30   |</span><br><span class="line">| 2        | 2020-07-30 | 2           | 40   |</span><br><span class="line">| 3        | 2020-07-31 | 3           | 70   |</span><br><span class="line">| 4        | 2020-07-29 | 4           | 100  |</span><br><span class="line">| 5        | 2020-06-10 | 1           | 1010 |</span><br><span class="line">| 6        | 2020-08-01 | 2           | 102  |</span><br><span class="line">| 7        | 2020-08-01 | 3           | 111  |</span><br><span class="line">| 8        | 2020-08-03 | 1           | 99   |</span><br><span class="line">| 9        | 2020-08-07 | 2           | 32   |</span><br><span class="line">| 10       | 2020-07-15 | 1           | 2    |</span><br><span class="line">+----------+------------+-------------+------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+---------------+-------------+----------+------------+</span><br><span class="line">| customer_name | customer_id | order_id | order_date |</span><br><span class="line">+---------------+-------------+----------+------------+</span><br><span class="line">| Annabelle     | 3           | 7        | 2020-08-01 |</span><br><span class="line">| Annabelle     | 3           | 3        | 2020-07-31 |</span><br><span class="line">| Jonathan      | 2           | 9        | 2020-08-07 |</span><br><span class="line">| Jonathan      | 2           | 6        | 2020-08-01 |</span><br><span class="line">| Jonathan      | 2           | 2        | 2020-07-30 |</span><br><span class="line">| Marwan        | 4           | 4        | 2020-07-29 |</span><br><span class="line">| Winston       | 1           | 8        | 2020-08-03 |</span><br><span class="line">| Winston       | 1           | 1        | 2020-07-31 |</span><br><span class="line">| Winston       | 1           | 10       | 2020-07-15 |</span><br><span class="line">+---------------+-------------+----------+------------+</span><br><span class="line">Winston has 4 orders, we discard the order of &quot;2020-06-10&quot; because it is the oldest order.</span><br><span class="line">Annabelle has only 2 orders, we return them.</span><br><span class="line">Jonathan has exactly 3 orders.</span><br><span class="line">Marwan ordered only one time.</span><br><span class="line">We sort the result table by customer_name in ascending order, by customer_id in ascending order and by order_date in descending order in case of a tie.</span><br></pre></td></tr></table></figure><p><strong>Follow-up:</strong><br>Can you write a general solution for the most recent <code>n</code> orders?</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> name customer_name ,customer_id,order_id,order_date</span><br><span class="line"><span class="keyword">from</span> (</span><br><span class="line"><span class="keyword">select</span>  name ,o.customer_id,order_id,order_date ,<span class="built_in">rank</span>()<span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> o.customer_id <span class="keyword">order</span> <span class="keyword">by</span> order_date <span class="keyword">desc</span>) rk</span><br><span class="line"><span class="keyword">from</span> Orders o <span class="keyword">left</span> <span class="keyword">join</span> Customers c</span><br><span class="line"><span class="keyword">on</span> o.customer_id<span class="operator">=</span>c.customer_id</span><br><span class="line">)t1</span><br><span class="line"><span class="keyword">where</span> rk <span class="operator">&lt;=</span><span class="number">3</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> customer_name ,customer_id,order_date <span class="keyword">desc</span></span><br></pre></td></tr></table></figure><h4 id="1543-Fix-Product-Name-Format"><a href="#1543-Fix-Product-Name-Format" class="headerlink" title="1543. Fix Product Name Format"></a><a href="https://leetcode-cn.com/problems/fix-product-name-format/">1543. Fix Product Name Format</a></h4><p>难度简单</p><p>SQL架构</p><p>Table: <code>Sales</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+--------------+---------+</span><br><span class="line">| Column Name  | Type    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">| sale_id      | int     |</span><br><span class="line">| product_name | varchar |</span><br><span class="line">| sale_date    | date    |</span><br><span class="line">+--------------+---------+</span><br><span class="line">sale_id is the primary key for this table.</span><br><span class="line">Each row of this table contains the product name and the date it was sold.</span><br></pre></td></tr></table></figure><p>Since table Sales was filled manually in the year 2000, <code>product_name</code> may contain leading and/or trailing white spaces, also they are case-insensitive.</p><p>Write an SQL query to report</p><ul><li><code>product_name</code> in lowercase without leading or trailing white spaces.</li><li><code>sale_date</code> in the format <code>(&#39;YYYY-MM&#39;)</code> </li><li><code>total</code> the number of times the product was sold in this month.</li></ul><p>Return the result table ordered by <code>product_name</code> in <strong>ascending order</strong>, in case of a tie order it by <code>sale_date</code> in <strong>ascending order</strong>.</p><p>The query result format is in the following example.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Sales</span><br><span class="line">+------------+------------------+--------------+</span><br><span class="line">| sale_id    | product_name     | sale_date    |</span><br><span class="line">+------------+------------------+--------------+</span><br><span class="line">| 1          |      LCPHONE     | 2000-01-16   |</span><br><span class="line">| 2          |    LCPhone       | 2000-01-17   |</span><br><span class="line">| 3          |     LcPhOnE      | 2000-02-18   |</span><br><span class="line">| 4          |      LCKeyCHAiN  | 2000-02-19   |</span><br><span class="line">| 5          |   LCKeyChain     | 2000-02-28   |</span><br><span class="line">| 6          | Matryoshka       | 2000-03-31   | </span><br><span class="line">+------------+------------------+--------------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+--------------+--------------+----------+</span><br><span class="line">| product_name | sale_date    | total    |</span><br><span class="line">+--------------+--------------+----------+</span><br><span class="line">| lcphone      | 2000-01      | 2        |</span><br><span class="line">| lckeychain   | 2000-02      | 2        | </span><br><span class="line">| lcphone      | 2000-02      | 1        | </span><br><span class="line">| matryoshka   | 2000-03      | 1        | </span><br><span class="line">+--------------+--------------+----------+</span><br><span class="line"></span><br><span class="line">In January, 2 LcPhones were sold, please note that the product names are not case sensitive and may contain spaces.</span><br><span class="line">In Februery, 2 LCKeychains and 1 LCPhone were sold.</span><br><span class="line">In March, 1 matryoshka was sold.</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">trim</span>(<span class="built_in">lower</span>(product_name)) <span class="keyword">as</span> product_name, </span><br><span class="line">        date_format(sale_date,<span class="string">&#x27;%Y-%m&#x27;</span>) <span class="keyword">as</span> sale_date,</span><br><span class="line">        <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> total </span><br><span class="line"><span class="keyword">from</span> Sales </span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="built_in">trim</span>(<span class="built_in">lower</span>(product_name)), date_format(sale_date,<span class="string">&#x27;%Y-%m&#x27;</span>) </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> product_name <span class="keyword">asc</span>, sale_date <span class="keyword">asc</span></span><br></pre></td></tr></table></figure><blockquote><p>注意大小写、空格 </p></blockquote><h4 id="1549-The-Most-Recent-Orders-for-Each-Product"><a href="#1549-The-Most-Recent-Orders-for-Each-Product" class="headerlink" title="1549. The Most Recent Orders for Each Product"></a><a href="https://leetcode-cn.com/problems/the-most-recent-orders-for-each-product/">1549. The Most Recent Orders for Each Product</a></h4><p>难度中等</p><p>SQL架构</p><p>Table: <code>Customers</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| customer_id   | int     |</span><br><span class="line">| name          | varchar |</span><br><span class="line">+---------------+---------+</span><br><span class="line">customer_id is the primary key for this table.</span><br><span class="line">This table contains information about the customers.</span><br></pre></td></tr></table></figure><p>Table: <code>Orders</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| order_id      | int     |</span><br><span class="line">| order_date    | date    |</span><br><span class="line">| customer_id   | int     |</span><br><span class="line">| product_id    | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">order_id is the primary key for this table.</span><br><span class="line">This table contains information about the orders made by customer_id.</span><br><span class="line">There will be no product ordered by the same user more than once in one day.</span><br></pre></td></tr></table></figure><p>Table: <code>Products</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+---------------+---------+</span><br><span class="line">| Column Name   | Type    |</span><br><span class="line">+---------------+---------+</span><br><span class="line">| product_id    | int     |</span><br><span class="line">| product_name  | varchar |</span><br><span class="line">| price         | int     |</span><br><span class="line">+---------------+---------+</span><br><span class="line">product_id is the primary key for this table.</span><br><span class="line">This table contains information about the Products.</span><br></pre></td></tr></table></figure><p>Write an SQL query to find the most recent order(s) of each product.</p><p>Return the result table sorted by <code>product_name</code> in <strong>ascending</strong> order and in case of a tie by the <code>product_id</code> in <strong>ascending</strong> order. If there still a tie, order them by the <code>order_id</code> in <strong>ascending</strong> order.</p><p>The query result format is in the following example:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">Customers</span><br><span class="line">+-------------+-----------+</span><br><span class="line">| customer_id | name      |</span><br><span class="line">+-------------+-----------+</span><br><span class="line">| 1           | Winston   |</span><br><span class="line">| 2           | Jonathan  |</span><br><span class="line">| 3           | Annabelle |</span><br><span class="line">| 4           | Marwan    |</span><br><span class="line">| 5           | Khaled    |</span><br><span class="line">+-------------+-----------+</span><br><span class="line"></span><br><span class="line">Orders</span><br><span class="line">+----------+------------+-------------+------------+</span><br><span class="line">| order_id | order_date | customer_id | product_id |</span><br><span class="line">+----------+------------+-------------+------------+</span><br><span class="line">| 1        | 2020-07-31 | 1           | 1          |</span><br><span class="line">| 2        | 2020-07-30 | 2           | 2          |</span><br><span class="line">| 3        | 2020-08-29 | 3           | 3          |</span><br><span class="line">| 4        | 2020-07-29 | 4           | 1          |</span><br><span class="line">| 5        | 2020-06-10 | 1           | 2          |</span><br><span class="line">| 6        | 2020-08-01 | 2           | 1          |</span><br><span class="line">| 7        | 2020-08-01 | 3           | 1          |</span><br><span class="line">| 8        | 2020-08-03 | 1           | 2          |</span><br><span class="line">| 9        | 2020-08-07 | 2           | 3          |</span><br><span class="line">| 10       | 2020-07-15 | 1           | 2          |</span><br><span class="line">+----------+------------+-------------+------------+</span><br><span class="line"></span><br><span class="line">Products</span><br><span class="line">+------------+--------------+-------+</span><br><span class="line">| product_id | product_name | price |</span><br><span class="line">+------------+--------------+-------+</span><br><span class="line">| 1          | keyboard     | 120   |</span><br><span class="line">| 2          | mouse        | 80    |</span><br><span class="line">| 3          | screen       | 600   |</span><br><span class="line">| 4          | hard disk    | 450   |</span><br><span class="line">+------------+--------------+-------+</span><br><span class="line"></span><br><span class="line">Result table:</span><br><span class="line">+--------------+------------+----------+------------+</span><br><span class="line">| product_name | product_id | order_id | order_date |</span><br><span class="line">+--------------+------------+----------+------------+</span><br><span class="line">| keyboard     | 1          | 6        | 2020-08-01 |</span><br><span class="line">| keyboard     | 1          | 7        | 2020-08-01 |</span><br><span class="line">| mouse        | 2          | 8        | 2020-08-03 |</span><br><span class="line">| screen       | 3          | 3        | 2020-08-29 |</span><br><span class="line">+--------------+------------+----------+------------+</span><br><span class="line">keyboard&#x27;s most recent order is in 2020-08-01, it was ordered two times this day.</span><br><span class="line">mouse&#x27;s most recent order is in 2020-08-03, it was ordered only once this day.</span><br><span class="line">screen&#x27;s most recent order is in 2020-08-29, it was ordered only once this day.</span><br><span class="line">The hard disk was never ordered and we don&#x27;t include it in the result table.</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> product_name,product_id,order_id,order_date</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(</span><br><span class="line"><span class="keyword">select</span> product_name ,o.product_id ,order_id,order_date ,</span><br><span class="line">    <span class="built_in">rank</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> o.product_id <span class="keyword">order</span> <span class="keyword">by</span> order_date <span class="keyword">desc</span>) rk</span><br><span class="line"><span class="keyword">from</span> Orders o <span class="keyword">left</span> <span class="keyword">join</span> Products p</span><br><span class="line"><span class="keyword">on</span> o.product_id <span class="operator">=</span>p.product_id </span><br><span class="line">)t1</span><br><span class="line"><span class="keyword">where</span> rk <span class="operator">=</span><span class="number">1</span></span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> product_name,product_id,order_id</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> SQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 笔试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BigData-数据仓库学习</title>
      <link href="/2021/01/07/BigData-%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/01/07/BigData-%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="一、相关技术"><a href="#一、相关技术" class="headerlink" title="一、相关技术"></a>一、相关技术</h3><h4 id="1、技术选型"><a href="#1、技术选型" class="headerlink" title="1、技术选型"></a>1、技术选型</h4><p><img src="https://file.buildworld.cn/img/20201224104550.png"></p><h4 id="2、系统数据流程设计"><a href="#2、系统数据流程设计" class="headerlink" title="2、系统数据流程设计"></a>2、系统数据流程设计</h4><p><img src="https://file.buildworld.cn/img/20201224142101.png"></p><h3 id="二、数仓分层"><a href="#二、数仓分层" class="headerlink" title="二、数仓分层"></a>二、数仓分层</h3><h4 id="1、数据仓库分层"><a href="#1、数据仓库分层" class="headerlink" title="1、数据仓库分层"></a>1、数据仓库分层</h4><p><img src="https://file.buildworld.cn/img/20210107104843.png"></p><h4 id="2、范式理论"><a href="#2、范式理论" class="headerlink" title="2、范式理论"></a>2、范式理论</h4><blockquote><ul><li>第一范式：属性不可分割性。</li><li>第二范式：不能存在“部分函数依赖”</li><li>第三范式：不能存在传递函数依赖。</li></ul></blockquote><h4 id="3、关系建模和维度建模"><a href="#3、关系建模和维度建模" class="headerlink" title="3、关系建模和维度建模"></a>3、关系建模和维度建模</h4><blockquote><ul><li><p><strong>联机事务处理OLTP（on-line transaction processing）</strong></p><p>OLTP是传统的关系型数据库的主要应用，主要是基本的、日常的事务处理，例如银行交易。</p></li><li><p><strong>联机分析处理OLAP（On-Line Analytical Processing）</strong></p><p>OLAP是数据仓库系统的主要应用，支持复杂的分析操作，侧重决策支持，并且提供直观易懂的查询结果。</p><p>二者对比</p><table><thead><tr><th align="center">对比属性</th><th>OLTP</th><th>OLAP</th></tr></thead><tbody><tr><td align="center">读特性</td><td>每次查询只返回少量记录</td><td>对大量记录进行汇总</td></tr><tr><td align="center">写特性</td><td>随机、低延时写入用户的输入</td><td>批量导入</td></tr><tr><td align="center">使用场景</td><td>用户，Java EE项目</td><td>内部分析师，为决策提供支持</td></tr><tr><td align="center">数据表征</td><td>最新数据状态</td><td>随时间变化的历史状态</td></tr><tr><td align="center">数据规模</td><td>GB</td><td>TB到PB</td></tr></tbody></table></li></ul></blockquote><h5 id="3-1-关系建模"><a href="#3-1-关系建模" class="headerlink" title="3.1 关系建模"></a>3.1 关系建模</h5><blockquote><p><strong>关系模型</strong>如图所示，严格遵循第三范式（3NF），从图中可以看出，较为松散、零碎，物理表数量多，而数据冗余程度低。由于数据分布于众多的表中，这些数据可以更为灵活地被应用，功能性较强。关系模型主要应用与OLTP系统中，为了保证数据的一致性以及避免冗余，所以大部分业务系统的表都是遵循第三范式的。</p><p><img src="https://file.buildworld.cn/img/20210107161933.png"></p></blockquote><h5 id="3-2维度建模"><a href="#3-2维度建模" class="headerlink" title="3.2维度建模"></a>3.2维度建模</h5><blockquote><p><strong>维度模型</strong>如图所示，主要应用于OLAP系统中，通常以某一个事实表为中心进行表的组织，主要面向业务，特征是可能存在数据的冗余，但是能方便的得到数据。</p><p><img src="https://file.buildworld.cn/img/20210107162057.png"></p></blockquote><p><strong>关系模型虽然冗余少，但是在大规模数据，跨表分析统计查询过程中，会造成多表关联，这会大大降低执行效率。所以通常我们采用维度模型建模，把相关各种表整理成两种：事实表和维度表两种。</strong></p><h4 id="4、维度表和事实表"><a href="#4、维度表和事实表" class="headerlink" title="4、维度表和事实表"></a>4、维度表和事实表</h4><h5 id="4-1维度表"><a href="#4-1维度表" class="headerlink" title="4.1维度表"></a>4.1维度表</h5><blockquote><p><strong>维度表</strong>：一般是对事实的描述信息。每一张维表对应现实世界中的一个对象或者概念。   例如：用户、商品、日期、地区等。</p><ul><li> 维表的范围很宽（具有多个属性、列比较多）</li><li> 跟事实表相比，行数相对较小：通常&lt; 10万条</li><li> 内容相对固定：编码表</li></ul></blockquote><h5 id="4-2事实表"><a href="#4-2事实表" class="headerlink" title="4.2事实表"></a>4.2事实表</h5><blockquote><p><strong>事实表中</strong>每行数据代表一个业务事件（下单、支付、退款、评价等）。“事实”这个术语表示的是业务事件的<strong>度量值（可统计次数、个数、金额等）</strong>，</p><ul><li> 非常的大</li><li> 内容相对的窄：列数较少（主要是外键id和度量值）</li><li> 经常发生变化，每天会新增加很多。</li></ul></blockquote><blockquote><p><strong>1）事务型事实表</strong></p><p>以<strong>每个事务或事件为单位</strong>，例如一个销售订单记录，一笔支付记录等，作为事实表里的一行数据。一旦事务被提交，事实表数据被插入，数据就不再进行更改，其更新方式为增量更新。</p><p><strong>2）周期型快照事实表</strong></p><p>周期型快照事实表中<strong>不会保留所有数据，只保留固定时间间隔的数据</strong>，例如每天或者每月的销售额，或每月的账户余额等。</p><p>例如购物车，有加减商品，随时都有可能变化，但是我们更关心每天结束时这里面有多少商品，方便我们后期统计分析。</p><p><strong>3）累积型快照事实表</strong></p><p><strong>累计快照事实表用于跟踪业务事实的变化。</strong>例如，数据仓库中可能需要累积或者存储订单从下订单开始，到订单商品被打包、运输、和签收的各个业务阶段的时间点数据来跟踪订单声明周期的进展情况。当这个业务过程进行时，事实表的记录也要不断更新。</p></blockquote><h4 id="5、维度模型分类"><a href="#5、维度模型分类" class="headerlink" title="5、维度模型分类"></a>5、维度模型分类</h4><h5 id="5-1、星型模型"><a href="#5-1、星型模型" class="headerlink" title="5.1、星型模型"></a>5.1、星型模型</h5><blockquote><p>雪花模型与星型模型的区别主要在于维度的层级，标准的星型模型维度只有一层，而雪花模型可能会涉及多级<img src="https://file.buildworld.cn/img/20210107202646.png"></p></blockquote><h5 id="5-2、雪花模型"><a href="#5-2、雪花模型" class="headerlink" title="5.2、雪花模型"></a>5.2、雪花模型</h5><p><img src="https://file.buildworld.cn/img/20210107204147.png"></p><h5 id="5-3、星座模型"><a href="#5-3、星座模型" class="headerlink" title="5.3、星座模型"></a>5.3、星座模型</h5><blockquote><p>星座模型与前两种情况的区别是事实表的数量，星座模型是基于多个事实表的。</p></blockquote><p><img src="https://file.buildworld.cn/img/20210107210328.png"></p><h4 id="6、数据仓库建模"><a href="#6、数据仓库建模" class="headerlink" title="6、数据仓库建模"></a>6、数据仓库建模</h4><h5 id="6-1、ODS层"><a href="#6-1、ODS层" class="headerlink" title="6.1、ODS层"></a>6.1、ODS层</h5><blockquote><ul><li>用户行为数据</li><li>业务数据</li></ul></blockquote><h5 id="6-2、DWD层"><a href="#6-2、DWD层" class="headerlink" title="6.2、DWD层"></a>6.2、DWD层</h5><blockquote><p>DWD层需要构建维度模型，一般采用星型模型。见上面图</p><p><strong>维度建模一般按照以下四个步骤：</strong></p><p><code>选择业务过程→声明粒度→确认维度→确认事实</code></p><p><strong>（1）选择业务过程</strong></p><p>在业务系统中，挑选我们感兴趣的业务线，比如下单业务，支付业务，退款业务，物流业务，一条业务线对应一张事实表。</p><p>如果是中小公司，尽量把所有业务过程都选择。</p><p>如果是大公司（1000多张表），选择和需求相关的业务线。</p><p><strong>（2）声明粒度</strong></p><p>数据粒度指数据仓库的数据中保存数据的细化程度或综合程度的级别。</p><p>声明粒度意味着精确定义事实表中的一行数据表示什么，应该尽可能选择<strong>最小粒度</strong>，以此来应各种各样的需求。</p><p><strong>典型的粒度声明如下：</strong></p><p>订单事实表中一行数据表示的是一个订单中的一个商品项。</p><p>支付事实表中一行数据表示的是一个支付记录。</p><p><strong>（3）确定维度</strong></p><p>维度的主要作用是描述业务是事实，主要表示的是“谁，何处，何时”等信息。</p><p>确定维度的原则是：后续需求中是否要分析相关维度的指标。例如，需要统计，什么时间下的订单多，哪个地区下的订单多，哪个用户下的订单多。需要确定的维度就包括：时间维度、地区维度、用户维度。</p><p><strong>（4）确定事实</strong></p><p>此处的“事实”一词，指的是业务中的度量值（次数、个数、件数、金额，可以进行累加），例如订单金额、下单次数等。</p><p>在DWD层，以<strong>业务过程</strong>为建模驱动，基于每个具体业务过程的特点，构建<strong>最细粒度</strong>的明细层事实表。事实表可做适当的宽表化处理。</p></blockquote><h5 id="6-3-DWS和DWT层"><a href="#6-3-DWS和DWT层" class="headerlink" title="6.3 DWS和DWT层"></a>6.3 DWS和DWT层</h5><blockquote><p><code>DWS和DWT层的区别</code>：DWS层存放的所有主题对象当天的汇总行为，例如每个地区当天的下单次数，下单金额等，DWT层存放的是所有主题对象的累积行为，例如每个地区最近７天（15天、30天、60天）的下单次数、下单金额等。</p></blockquote><h5 id="6-4-ADS层"><a href="#6-4-ADS层" class="headerlink" title="6.4 ADS层"></a>6.4 ADS层</h5><h3 id="三、流批一体架构"><a href="#三、流批一体架构" class="headerlink" title="三、流批一体架构"></a>三、流批一体架构</h3><h4 id="1、传统数仓架构（Lambda）"><a href="#1、传统数仓架构（Lambda）" class="headerlink" title="1、传统数仓架构（Lambda）"></a>1、传统数仓架构（Lambda）</h4><p><img src="https://file.buildworld.cn/img/20210115195432.png"></p><blockquote><p>传统的Lambda架构分为：</p><ul><li>业务层</li><li>存储层</li><li>计算层</li><li>服务层</li><li>应用层</li></ul></blockquote><p>传统的架构很灵活，流和批之间没有相互耦合，但是也会<strong>带来的问题</strong>：</p><ul><li><strong>效率层面</strong>：流批底层数据模型不一致，导致应用层需要做大量的拼接逻辑（同比、环比、二次加工等），搭建效率低，且容易出错。</li><li><strong>成本层面</strong>：流批存储系统隔离（面向不同写入场景），提供的数据服务不一致，维护成本高。同时，手工创建数据同步任务，增加了开发成本和存储成本。</li><li><strong>质量与资源层面</strong>：首先，一个业务逻辑，两个引擎两套代码，SQL 逻辑不能复用，数据一致性和质量难以保障。其次，不同平台和引擎间切换，开发体验割裂，容易出现变更遗漏。并且，批处理&amp;流处理集群无法做到错峰，资源利用率较低。</li></ul><h4 id="2、流批一体架构（Kappa-Lambda）"><a href="#2、流批一体架构（Kappa-Lambda）" class="headerlink" title="2、流批一体架构（Kappa+Lambda）"></a>2、流批一体架构（Kappa+Lambda）</h4><p><strong>本质上是在流的场景中寻找批场景</strong></p><p><img src="https://file.buildworld.cn/img/20210115200803.png"></p><ul><li><strong>流批逻辑层</strong>：这是最重要的部分之一。业务层和存储层仍然不变，在此之上构建一个流批逻辑层来进行流存储和批存储的映射。有了这个逻辑层，就可以基于 Flink 引擎面向统一的逻辑层做业务逻辑表达，并且输出是统一的。</li><li><strong>计算层</strong>：做流批统一处理。首先，一套代码，两种计算模式，逻辑统一，灵活切换，可以实现研发效率大幅提升。其次，流批计算资源混部，资源利用率提升。</li><li><strong>服务层</strong>：做流批统一存储，无需手工同步，无重复存储。</li><li><strong>应用层</strong>：进行产品组装，流批存储透明化，查询逻辑完全一致，应用端接入成本大幅降低，点查 / OLAP 分析统一支持。</li></ul>]]></content>
      
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Data WareHouse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法学习记录</title>
      <link href="/2020/11/04/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/11/04/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h3><h4 id="1、常见的数据结构"><a href="#1、常见的数据结构" class="headerlink" title="1、常见的数据结构"></a>1、常见的数据结构</h4><blockquote><p><code>「队列」</code>、<code>「栈」</code>这两种数据结构既可以使⽤链表也可以使⽤数组实现。⽤数组实现，就要处理扩容缩容的问题；⽤链表实现，没有这个问题，但需要更多的内存空间存储节点指针。</p><p><code>「图」</code>的两种表⽰⽅法，邻接表就是链表，邻接矩阵就是⼆维数组。邻接矩阵判断连通性迅速，并可以进⾏矩阵运算解决⼀些问题，但是如果图⽐较稀疏的话很耗费空间。邻接表⽐较节省空间，但是很多操作的效率上肯定⽐不过邻接矩阵。</p><p><code>「散列表」</code>就是通过散列函数把键映射到⼀个⼤数组⾥。⽽且对于解决散列冲突的⽅法，拉链法需要链表特性，操作简单，但需要额外的空间存储指针；线性探查法就需要数组特性，以便连续寻址，不需要指针的存储空间，但操作稍微复杂些。</p><p><code>「树」</code>，⽤数组实现就是「堆」，因为「堆」是⼀个完全⼆叉树，⽤数组存储不需要节点指针，操作也⽐较简单；⽤链表实现就是很常⻅的那种「树」，因为不⼀定是完全⼆叉树，所以不适合⽤数组存储。为此，在这种链表「树」结构之上，⼜衍⽣出各种巧妙的设计，⽐如⼆叉搜索树、AVL树、红⿊树、区间树、B 树等等，以应对不同的问题。</p></blockquote><h4 id="2、常见的算法框架"><a href="#2、常见的算法框架" class="headerlink" title="2、常见的算法框架"></a>2、常见的算法框架</h4><blockquote><p>数组遍历框架，典型的线性迭代结构：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line"><span class="comment">// 迭代访问 arr[i]</span></span><br><span class="line">      &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>链表遍历框架，兼具迭代和递归结构：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 基本的单链表节点 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    ListNode next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">for</span> (ListNode p = head; p != <span class="keyword">null</span>; p = p.next) &#123;</span><br><span class="line"><span class="comment">// 迭代访问 p.val</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(ListNode head)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 递归访问 head.val</span></span><br><span class="line">     traverse(head.next)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><blockquote><p>⼆叉树遍历框架，典型的⾮线性递归遍历结构：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 基本的⼆叉树节点 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode left, right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        traverse(root.left)</span><br><span class="line">        traverse(root.right)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="二、动态规划"><a href="#二、动态规划" class="headerlink" title="二、动态规划"></a>二、动态规划</h3><h4 id="1、斐波那契数列的算法优化"><a href="#1、斐波那契数列的算法优化" class="headerlink" title="1、斐波那契数列的算法优化"></a>1、斐波那契数列的算法优化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 斐波那契数列(备忘录)</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fib3</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (N &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span>[] meno = <span class="keyword">new</span> <span class="keyword">int</span>[N + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">return</span> helper(meno, N);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">helper</span><span class="params">(<span class="keyword">int</span>[] meno, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (meno[n] != <span class="number">0</span>) <span class="keyword">return</span> meno[n];</span><br><span class="line"></span><br><span class="line">    meno[n] = helper(meno, n - <span class="number">1</span>) + helper(meno, n - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">return</span> meno[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 斐波那契数列(dp表)</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[N + <span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">1</span>] = dp[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= N; i++) &#123;</span><br><span class="line">        dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dp[N];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//斐波那契数列(空间复杂度降为1)</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fib2</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> prev = <span class="number">1</span>, curr = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> sum = prev + curr;</span><br><span class="line">        prev = curr;</span><br><span class="line">        curr = sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> curr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、回溯算法"><a href="#三、回溯算法" class="headerlink" title="三、回溯算法"></a>三、回溯算法</h3><p><strong>纯暴力穷举算法，复杂度很高</strong></p><h4 id="回溯算法的框架："><a href="#回溯算法的框架：" class="headerlink" title="回溯算法的框架："></a>回溯算法的框架：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">result = []</span><br><span class="line"><span class="function">def <span class="title">backtrack</span><span class="params">(路径, 选择列表)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">if</span> 满⾜结束条件:</span></span><br><span class="line"><span class="function">result.<span class="title">add</span><span class="params">(路径)</span></span></span><br><span class="line"><span class="function">return</span></span><br><span class="line"><span class="function"><span class="keyword">for</span> 选择 in 选择列表:</span></span><br><span class="line"><span class="function">做选择</span></span><br><span class="line"><span class="function"><span class="title">backtrack</span><span class="params">(路径, 选择列表)</span></span></span><br><span class="line"><span class="function">撤销选择</span></span><br></pre></td></tr></table></figure><h4 id="1、全排列算法"><a href="#1、全排列算法" class="headerlink" title="1、全排列算法"></a>1、全排列算法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 全排列代码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MiChong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-11-04 08:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuanPaiLie</span> </span>&#123;</span><br><span class="line">    <span class="comment">//路径集合</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 结果：[[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]</span></span><br><span class="line">        <span class="keyword">int</span>[] nums = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res = permute(nums);</span><br><span class="line">        System.out.println(res.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        LinkedList&lt;Integer&gt; track = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        backtrack(nums, track);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  路径：记录在 track 中</span></span><br><span class="line"><span class="comment">     *  选择列表：nums 中不存在于 track 的那些元素</span></span><br><span class="line"><span class="comment">     *  结束条件：nums 中的元素全都在 track 中出现</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nums 需要排列的数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> track 存放的路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">backtrack</span><span class="params">(<span class="keyword">int</span>[] nums, LinkedList&lt;Integer&gt; track)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 到底了，跳出此方法</span></span><br><span class="line">        <span class="keyword">if</span> (track.size() == nums.length) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> LinkedList(track));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 排除不合法的选择</span></span><br><span class="line">            <span class="keyword">if</span> (track.contains(nums[i]))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//做选择</span></span><br><span class="line">            track.add(nums[i]);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 进入下一层决策树</span></span><br><span class="line">            backtrack(nums, track);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 取消选择</span></span><br><span class="line">            track.removeLast();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、BFS算法"><a href="#四、BFS算法" class="headerlink" title="四、BFS算法"></a>四、BFS算法</h3><p><strong>图的搜索算法分为BDF（广度优先搜索）和（深度优先搜索）</strong></p><h4 id="BFS框架"><a href="#BFS框架" class="headerlink" title="BFS框架"></a>BFS框架</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算从起点 start 到终点 target 的最近距离</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">BFS</span><span class="params">(Node start, Node target)</span> </span>&#123;</span><br><span class="line">    Queue&lt;Node&gt; q; <span class="comment">// 核⼼数据结构</span></span><br><span class="line">    Set&lt;Node&gt; visited; <span class="comment">// 避免⾛回头路</span></span><br><span class="line">    q.offer(start); <span class="comment">// 将起点加⼊队列</span></span><br><span class="line">    visited.add(start);</span><br><span class="line">    <span class="keyword">int</span> step = <span class="number">0</span>; <span class="comment">// 记录扩散的步数</span></span><br><span class="line">    <span class="keyword">while</span> (q not empty) &#123;</span><br><span class="line">        <span class="keyword">int</span> sz = q.size();</span><br><span class="line">        <span class="comment">/* 将当前队列中的所有节点向四周扩散 */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; i++) &#123;</span><br><span class="line">            Node cur = q.poll();</span><br><span class="line">            <span class="comment">/* 划重点：这⾥判断是否到达终点 */</span></span><br><span class="line">            <span class="keyword">if</span> (cur is target)</span><br><span class="line">            <span class="keyword">return</span> step;</span><br><span class="line">            <span class="comment">/* 将 cur 的相邻节点加⼊队列 */</span></span><br><span class="line">            <span class="keyword">for</span> (Node x : cur.adj())</span><br><span class="line">                <span class="keyword">if</span> (x not in visited) &#123;</span><br><span class="line">                q.offer(x);</span><br><span class="line">                visited.add(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 划重点：更新步数在这⾥ */</span></span><br><span class="line">        step++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二叉树的最小深度"><a href="#二叉树的最小深度" class="headerlink" title="二叉树的最小深度"></a><a href="https://leetcode-cn.com/problems/minimum-depth-of-binary-tree/">二叉树的最小深度</a></h4><blockquote><p>题目地址：<a href="https://leetcode-cn.com/problems/minimum-depth-of-binary-tree/">https://leetcode-cn.com/problems/minimum-depth-of-binary-tree/</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    TreeNode left;</span><br><span class="line">    TreeNode right;</span><br><span class="line"></span><br><span class="line">    TreeNode() &#123; &#125;</span><br><span class="line">    TreeNode(<span class="keyword">int</span> val) &#123; <span class="keyword">this</span>.val = val; &#125;</span><br><span class="line">    TreeNode(<span class="keyword">int</span> val, TreeNode left, TreeNode right) &#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">        <span class="keyword">this</span>.left = left;</span><br><span class="line">        <span class="keyword">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (root == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    Queue&lt;TreeNode&gt; q = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    q.offer(root);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> depth = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!q.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> sz = q.size();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; i++) &#123;</span><br><span class="line">            TreeNode cur = q.poll();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (cur.left == <span class="keyword">null</span> &amp;&amp; cur.right == <span class="keyword">null</span>) <span class="keyword">return</span> depth;</span><br><span class="line">            <span class="keyword">if</span> (cur.left != <span class="keyword">null</span>) q.offer(cur.left);</span><br><span class="line">            <span class="keyword">if</span> (cur.right != <span class="keyword">null</span>) q.offer(cur.right);</span><br><span class="line">        &#125;</span><br><span class="line">        depth++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> depth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>DFS的时间复杂度比BFS高，但是DFS的空间复杂度比BFS低。</p><p>DFS在最坏的情况下空间复杂度为O(logN)，而BFS最坏情况下的空间复杂度为O(N)。</p></blockquote><h3 id="五、二分搜索"><a href="#五、二分搜索" class="headerlink" title="五、二分搜索"></a>五、二分搜索</h3><h4 id="零、⼆分查找框架"><a href="#零、⼆分查找框架" class="headerlink" title="零、⼆分查找框架"></a>零、⼆分查找框架</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>, right = ...;</span><br><span class="line">        <span class="keyword">while</span> (...)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] == target) &#123;</span><br><span class="line">...</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = ...</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">                right = ...</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h4><blockquote><p>题目地址： <a href="https://leetcode-cn.com/problems/binary-search/">https://leetcode-cn.com/problems/binary-search/</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">binarySearch</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> right = nums.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target) <span class="keyword">return</span> mid;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) left = mid + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) right = mid - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BigData--分布式流数据流引擎Apache Flink</title>
      <link href="/2020/09/11/BigData-%E5%88%86%E5%B8%83%E5%BC%8F%E6%B5%81%E6%95%B0%E6%8D%AE%E6%B5%81%E5%BC%95%E6%93%8EApache-Flink/"/>
      <url>/2020/09/11/BigData-%E5%88%86%E5%B8%83%E5%BC%8F%E6%B5%81%E6%95%B0%E6%8D%AE%E6%B5%81%E5%BC%95%E6%93%8EApache-Flink/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="https://flink.apache.org/img/flink-header-logo.svg"></p><p><a href="https://flink.apache.org/">官网：https://flink.apache.org/</a></p><h3 id="一、Flink的重要特点"><a href="#一、Flink的重要特点" class="headerlink" title="一、Flink的重要特点"></a>一、Flink的重要特点</h3><h4 id="1）事件驱动型（Event-driven）"><a href="#1）事件驱动型（Event-driven）" class="headerlink" title="1）事件驱动型（Event-driven）"></a>1）事件驱动型（Event-driven）</h4><blockquote><ul><li><code>事件驱动的应用程序</code>是一个有状态的应用程序，它从一个或多个事件流接收事件，并通过触发计算、状态更新或外部操作对传入事件作出反应。</li><li><code>事件驱动应用程序</code>是传统应用程序设计的一种发展，它具有分离的计算和数据存储层。在这种体系结构中，应用程序从远程事务数据库读取数据并将其持久化。</li><li>相反，<code>事件驱动应用程序</code>基于有状态流处理应用程序。在这个设计中，数据和计算被放在同一个位置，从而产生本地（内存或磁盘）数据访问。容错是通过定期将检查点写入远程持久存储来实现的。下图描述了传统应用程序体系结构与事件驱动应用程序之间的区别。</li></ul></blockquote><p><img src="https://file.buildworld.cn/img/20200911125128.png"></p><p><strong>kafka作为消息队列就是一种典型的事件驱动型应用。</strong></p><h4 id="2）-流、批（stream，micro-batching）"><a href="#2）-流、批（stream，micro-batching）" class="headerlink" title="2） 流、批（stream，micro-batching）"></a>2） 流、批（stream，micro-batching）</h4><blockquote><p><code>Spark</code>中，一切都是批次组成的，离线数据是一个大批次，实时数据是一个个无限的小批次组成的。</p><p><code>Flink</code>中，一切都是由流组成的，离线数据是有界限的流，实时数据是一个没有界限的流，这就是所谓的有界流和无界流。</p></blockquote><h4 id="3）分层API"><a href="#3）分层API" class="headerlink" title="3）分层API"></a>3）分层API</h4><p><img src="https://file.buildworld.cn/img/20200911155213.png"></p><blockquote><p>越顶层越抽象，最高层级的抽象是SQL。</p><p>越底层越具体</p></blockquote><h3 id="二、Flink使用（word-count）"><a href="#二、Flink使用（word-count）" class="headerlink" title="二、Flink使用（word count）"></a>二、Flink使用（word count）</h3><h4 id="1、设置pom文件"><a href="#1、设置pom文件" class="headerlink" title="1、设置pom文件"></a>1、设置pom文件</h4><blockquote><p>注意下面的依赖设置，使用的是scala 2.12.x版本，Flink版本为1.10.1</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.buildworld.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>FlinkTrain<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-scala_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.flink/flink-streaming-scala --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-streaming-scala_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 该插件用于将Scala代码编译成class文件 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.alchim31.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>scala-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 声明绑定到maven的compile阶段 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、编写scala代码"><a href="#2、编写scala代码" class="headerlink" title="2、编写scala代码"></a>2、编写scala代码</h4><h5 id="1）批处理-wordcount"><a href="#1）批处理-wordcount" class="headerlink" title="1）批处理 wordcount"></a>1）批处理 wordcount</h5><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.buildworld.flink</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.scala.&#123;<span class="type">DataSet</span>, <span class="type">ExecutionEnvironment</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.scala._</span><br><span class="line"></span><br><span class="line"><span class="comment">// 批处理的word count</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">WordCount</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个批处理的执行环境</span></span><br><span class="line">    <span class="keyword">val</span> env: <span class="type">ExecutionEnvironment</span> = <span class="type">ExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从文件中读取数据</span></span><br><span class="line">    <span class="keyword">val</span> inputPath = <span class="string">&quot;D:\\Java\\project\\Scala\\FlinkTrain\\src\\main\\resources\\hello.txt&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> dataSet: <span class="type">DataSet</span>[<span class="type">String</span>] = env.readTextFile(inputPath)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对数据进行转换处理统计，先分词，再按照word进行分组，最后进行聚合统计</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> resultDataSet: <span class="type">DataSet</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = dataSet</span><br><span class="line">      .flatMap(_.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">      .map((_, <span class="number">1</span>))</span><br><span class="line">      .groupBy(<span class="number">0</span>) <span class="comment">//以第一个元素为key进行分组</span></span><br><span class="line">      .sum(<span class="number">1</span>) <span class="comment">//对所有数据的第二个元素求和</span></span><br><span class="line"></span><br><span class="line">    resultDataSet.print()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2）流处理wordcount"><a href="#2）流处理wordcount" class="headerlink" title="2）流处理wordcount"></a>2）流处理wordcount</h5><p><strong>超级简单，比sparkstreaming的流式处理简单多了！！！</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.scala._</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 流处理的word count</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">WordCountByStream</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建一个批处理的执行环境</span></span><br><span class="line">    <span class="keyword">val</span> env: <span class="type">StreamExecutionEnvironment</span> = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置并行度</span></span><br><span class="line">    env.setParallelism(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从端口中读取数据</span></span><br><span class="line">    <span class="keyword">val</span> dataSet: <span class="type">DataStream</span>[<span class="type">String</span>] = env.socketTextStream(<span class="string">&quot;192.168.162.102&quot;</span>, <span class="number">7777</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对数据进行转换处理统计，先分词，再按照word进行分组，最后进行聚合统计</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> resultDataSet = dataSet</span><br><span class="line">      .flatMap(_.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">      .filter(_.nonEmpty)</span><br><span class="line">      .map((_, <span class="number">1</span>))</span><br><span class="line">      .keyBy(<span class="number">0</span>) <span class="comment">//以第一个元素为key进行分组</span></span><br><span class="line">      .sum(<span class="number">1</span>) <span class="comment">//对所有数据的第二个元素求和</span></span><br><span class="line"></span><br><span class="line">    resultDataSet.print()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动任务执行</span></span><br><span class="line">    env.execute()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>补充</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.utils.<span class="type">ParameterTool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//可以冲启动参数里面读取指定的参数</span></span><br><span class="line"><span class="keyword">val</span> parameterTool: <span class="type">ParameterTool</span> = <span class="type">ParameterTool</span>.fromArgs(args)</span><br><span class="line"><span class="keyword">val</span> host: <span class="type">String</span> = parameterTool.get(<span class="string">&quot;host&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> port: <span class="type">Int</span> = parameterTool.getInt(<span class="string">&quot;port&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="三、Flink-运行架构"><a href="#三、Flink-运行架构" class="headerlink" title="三、Flink 运行架构"></a>三、Flink 运行架构</h3><h4 id="1、Flink运行时组件"><a href="#1、Flink运行时组件" class="headerlink" title="1、Flink运行时组件"></a>1、Flink运行时组件</h4><p><img src="https://file.buildworld.cn/img/20200914200131.png"></p><blockquote><ul><li><p><strong>作业管理器（JobManager）</strong><br>控制一个应用程序执行的主进程，也就是说，每个应用程序都会被一个不同的JobManager 所控制执行。JobManager 会先接收到要执行的应用程序，这个应用程序会包括：作业图（JobGraph）、逻辑数据流图（logical dataflow graph）和打包了所有的类、库和其它资源的 JAR 包。JobManager 会把 JobGraph 转换成一个物理层面的数据流图，这个图被叫做“执行图”（ExecutionGraph），包含了所有可以并发执行的任务。JobManager 会向资源管理器（ResourceManager）请求执行任务必要的资源，也就是任务管理器（TaskManager）上的插槽（slot）。一旦它获取到了足够的资源，就会将执行图分发到真正运行它们的<br>TaskManager 上。而在运行过程中，JobManager 会负责所有需要中央协调的操作，比如说检查点（checkpoints）的协调。</p></li><li><p><strong>资源管理器（ResourceManager）</strong><br>主要负责管理任务管理器（TaskManager）的插槽（slot），TaskManger 插槽是 Flink 中<br>定义的处理资源单元。Flink 为不同的环境和资源管理工具提供了不同资源管理器，比如<br>YARN、Mesos、K8s，以及 standalone 部署。当 JobManager 申请插槽资源时，ResourceManager会将有空闲插槽的 TaskManager 分配给 JobManager。如果 ResourceManager 没有足够的插槽来满足 JobManager 的请求，它还可以向资源提供平台发起会话，以提供启动 TaskManager进程的容器。另外，ResourceManager 还负责终止空闲的 TaskManager，释放计算资源。</p></li><li><p><strong>任务管理器（TaskManager）</strong></p><p>Flink 中的工作进程。通常在 Flink 中会有多个 TaskManager 运行，每一个 TaskManager都包含了一定数量的插槽（slots）。插槽的数量限制了 TaskManager 能够执行的任务数量。<br>启动之后，TaskManager 会向资源管理器注册它的插槽；收到资源管理器的指令后，TaskManager 就会将一个或者多个插槽提供给 JobManager 调用。JobManager 就可以向插槽分配任务（tasks）来执行了。在执行过程中，一个 TaskManager 可以跟其它运行同一应用程<br>序的 TaskManager 交换数据。</p></li><li><p><strong>分发器（Dispatcher）</strong></p><p>可以跨作业运行，它为应用提交提供了 REST 接口。当一个应用被提交执行时，分发器<br>就会启动并将应用移交给一个 JobManager。由于是 REST 接口，所以 Dispatcher 可以作为集<br>群的一个 HTTP 接入点，这样就能够不受防火墙阻挡。Dispatcher 也会启动一个 Web UI，用<br>来方便地展示和监控作业执行的信息。Dispatcher 在架构中可能并不是必需的，这取决于应<br>用提交运行的方式。</p></li></ul></blockquote><h4 id="2、任务提交流程"><a href="#2、任务提交流程" class="headerlink" title="2、任务提交流程"></a>2、任务提交流程</h4><p><img src="https://file.buildworld.cn/img/20200914205020.png"></p><h4 id="3、任务调度原理"><a href="#3、任务调度原理" class="headerlink" title="3、任务调度原理"></a>3、任务调度原理</h4><p>Task Slot  是静态的概念，是指 TaskManager  具有的并发执行能力，可以通过参数 taskmanager.numberOfTaskSlots 进行配置；而 并行度 parallelism  是动态概念 ，即 即 TaskManager  运行程序时实际使用的并发能力，可以通过参数 parallelism.default进行配置。</p><h3 id="四、Flink流处理API"><a href="#四、Flink流处理API" class="headerlink" title="四、Flink流处理API"></a>四、Flink流处理API</h3><h4 id="1、三种不同方式读取数据"><a href="#1、三种不同方式读取数据" class="headerlink" title="1、三种不同方式读取数据"></a>1、三种不同方式读取数据</h4><p>bin/kafka-topics.sh  –zookeeper localhost:2181 –list</p><p>bin/kafka-topics.sh  –zookeeper localhost:2181 –create –replication-factor 3 –partitions 1 –topic sensor</p><p>bin/kafka-console-producer.sh –broker-list 10.81.1.56:9092 –topic sensor</p><p>bin/kafka-console-consumer.sh –bootstrap-server localhost:9092 –from-beginning –topic sensor</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sensor_1, 1547718199, 35.8</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.<span class="type">Properties</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.serialization.<span class="type">SimpleStringSchema</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.scala._</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.connectors.kafka.<span class="type">FlinkKafkaConsumer011</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义样例类，温度传感器</span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">SensorReading</span>(<span class="params">id: <span class="type">String</span>, timestamp: <span class="type">Long</span>, temperature: <span class="type">Double</span></span>)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SourceTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建执行环境</span></span><br><span class="line">    <span class="keyword">val</span> env: <span class="type">StreamExecutionEnvironment</span> = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line"></span><br><span class="line"><span class="comment">//    //1、从集合中读取数据</span></span><br><span class="line"><span class="comment">//    val data = List(</span></span><br><span class="line"><span class="comment">//      SensorReading(&quot;sensor_1&quot;, 1547718199, 35.8),</span></span><br><span class="line"><span class="comment">//      SensorReading(&quot;sensor_6&quot;, 1547718201, 15.4),</span></span><br><span class="line"><span class="comment">//      SensorReading(&quot;sensor_7&quot;, 1547718202, 6.7),</span></span><br><span class="line"><span class="comment">//      SensorReading(&quot;sensor_10&quot;, 1547718205, 38.1)</span></span><br><span class="line"><span class="comment">//    )</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    val stream1: DataStream[SensorReading] = env.fromCollection(data)</span></span><br><span class="line"><span class="comment">//    stream1.print()</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    //2、从文件中读取数据</span></span><br><span class="line"><span class="comment">//    val stream2 = env.readTextFile(&quot;YOUR_FILE_PATH&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、从kafka中读取数据</span></span><br><span class="line">    <span class="keyword">val</span> properties = <span class="keyword">new</span> <span class="type">Properties</span>()</span><br><span class="line">    properties.setProperty(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;localhost:9092&quot;</span>)</span><br><span class="line">    properties.setProperty(<span class="string">&quot;group.id&quot;</span>, <span class="string">&quot;consumer-group&quot;</span>)</span><br><span class="line">    properties.setProperty(<span class="string">&quot;auto.offset.reset&quot;</span>, <span class="string">&quot;latest&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> stream3: <span class="type">DataStream</span>[<span class="type">String</span>] = env.addSource(<span class="keyword">new</span> <span class="type">FlinkKafkaConsumer011</span>[<span class="type">String</span>](<span class="string">&quot;sensor&quot;</span>, <span class="keyword">new</span> <span class="type">SimpleStringSchema</span>(), properties))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> value: <span class="type">DataStream</span>[<span class="type">String</span>] = stream3.flatMap(_.split(<span class="string">&quot;,&quot;</span>)).filter(_.nonEmpty)</span><br><span class="line"></span><br><span class="line">    value.print()</span><br><span class="line">    <span class="comment">//执行</span></span><br><span class="line">    env.execute()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、自定义-Source"><a href="#2、自定义-Source" class="headerlink" title="2、自定义 Source"></a>2、自定义 Source</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySensorSource</span> <span class="keyword">extends</span> <span class="title">SourceFunction</span>[<span class="type">SensorReading</span>] </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// flag: 表示数据源是否还在正常运行</span></span><br><span class="line">  <span class="keyword">var</span> running: <span class="type">Boolean</span> = <span class="literal">true</span></span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>(sourceContext: <span class="type">SourceFunction</span>.<span class="type">SourceContext</span>[<span class="type">SensorReading</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//定义一个随机数发生器</span></span><br><span class="line">    <span class="keyword">val</span> rand = <span class="keyword">new</span> <span class="type">Random</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//随机生成一组传感器的初始温度</span></span><br><span class="line">    <span class="keyword">var</span> curTemp = <span class="number">1.</span>to(<span class="number">10</span>).map(</span><br><span class="line">      i =&gt; (<span class="string">&quot;sensor_&quot;</span> + i, <span class="number">65</span> + rand.nextGaussian() * <span class="number">20</span>)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (running) &#123;</span><br><span class="line">      <span class="comment">//更新温度值</span></span><br><span class="line">      curTemp = curTemp.map(</span><br><span class="line">        t =&gt; (t._1, t._2 + rand.nextGaussian())</span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">      <span class="comment">//获取当前的时间戳</span></span><br><span class="line">      <span class="keyword">val</span> curTime: <span class="type">Long</span> = <span class="type">System</span>.currentTimeMillis()</span><br><span class="line"></span><br><span class="line">      curTemp.foreach(</span><br><span class="line">        t =&gt; sourceContext.collect(<span class="type">SensorReading</span>(t._1, curTime, t._2))</span><br><span class="line">      )</span><br><span class="line"></span><br><span class="line">      num+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (num == <span class="number">5</span>)&#123;</span><br><span class="line">        cancel()</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="type">Thread</span>.sleep(<span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">cancel</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    running = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用自定义Source"><a href="#使用自定义Source" class="headerlink" title="使用自定义Source"></a>使用自定义Source</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> stream4: <span class="type">DataStream</span>[<span class="type">SensorReading</span>] = env.addSource(<span class="keyword">new</span> <span class="type">MySensorSource</span>())</span><br><span class="line">stream4.print()</span><br></pre></td></tr></table></figure><h4 id="3、Transform转换算子"><a href="#3、Transform转换算子" class="headerlink" title="3、Transform转换算子"></a>3、Transform转换算子</h4><h5 id="map"><a href="#map" class="headerlink" title="map"></a>map</h5><h5 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h5><h5 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h5><h5 id="KeyBy"><a href="#KeyBy" class="headerlink" title="KeyBy"></a>KeyBy</h5><h5 id="滚动聚合算子（Rolling-Aggregation）"><a href="#滚动聚合算子（Rolling-Aggregation）" class="headerlink" title="滚动聚合算子（Rolling Aggregation）"></a>滚动聚合算子（Rolling Aggregation）</h5><blockquote><p>这些算子可以针对 KeyedStream 的每一个支流做聚合。</p><p>sum()<br>min()<br>max()<br>minBy()<br>maxBy()</p></blockquote><h5 id="Reduce"><a href="#Reduce" class="headerlink" title="Reduce"></a>Reduce</h5><blockquote><p><code>KeyedStream</code> → → <code>DataStream</code>：一个分组数据流的聚合操作，合并当前的元素和上次聚合的结果，产生一个新的值，返回的流中包含每一次聚合的结果，而不是只返回最后一次聚合的最终结果。</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> resultStream = dataStream</span><br><span class="line">  .keyBy(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">  .reduce((curState, newData) =&gt;</span><br><span class="line">    <span class="type">SensorReading</span>(curState.id, newData.timestamp, curState.temperature.min(newData.temperature))</span><br><span class="line">  )</span><br></pre></td></tr></table></figure><h5 id="Split-和-和-Select"><a href="#Split-和-和-Select" class="headerlink" title="Split 和 和 Select"></a>Split 和 和 Select</h5><p><img src="https://file.buildworld.cn/img/20201011165829.png" alt="DataStream → → SplitStream：根据某些特征把一个 DataStream 拆分成两个或者多个 DataStream。"></p><p><img src="https://file.buildworld.cn/img/20201011165909.png" alt="SplitStream →DataStream：从一个 SplitStream 中获取一个或者多个DataStream。"></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">SensorReading</span>(<span class="params">id: <span class="type">String</span>, timestamp: <span class="type">Long</span>, temperature: <span class="type">Double</span></span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> resultStream = dataStream</span><br><span class="line">  .keyBy(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">  .reduce((curState, newData) =&gt;</span><br><span class="line">    <span class="type">SensorReading</span>(curState.id, newData.timestamp, curState.temperature.min(newData.temperature))</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据过滤，按照指定条件将数据分开来</span></span><br><span class="line"><span class="keyword">val</span> splitStream = resultStream.split(data =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (data.temperature &gt; <span class="number">30</span>)</span><br><span class="line">    <span class="type">Seq</span>(<span class="string">&quot;high&quot;</span>)</span><br><span class="line">  <span class="keyword">else</span> <span class="type">Seq</span>(<span class="string">&quot;low&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> high = splitStream.select(<span class="string">&quot;high&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> low = splitStream.select(<span class="string">&quot;low&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> all = splitStream.select(<span class="string">&quot;high&quot;</span>, <span class="string">&quot;low&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="Connect和CoMap"><a href="#Connect和CoMap" class="headerlink" title="Connect和CoMap"></a>Connect和CoMap</h5><p><img src="https://file.buildworld.cn/img/20201012100125.png"></p><p><img src="https://file.buildworld.cn/img/20201012100146.png"></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> warning: <span class="type">DataStream</span>[(<span class="type">String</span>, <span class="type">Double</span>)] = high.map(sensorData =&gt; (sensorData.id, sensorData.temperature))</span><br><span class="line"></span><br><span class="line"><span class="comment">// DataStream,DataStream → → ConnectedStreams：连接两个保持他们类型的数据流，两个数据流被 Connect 之后，只是被放在了一个同一个流中，内部依然保持各自的数据和形式不发生任何变化，两个流相互独立。</span></span><br><span class="line"><span class="keyword">val</span> connected: <span class="type">ConnectedStreams</span>[(<span class="type">String</span>, <span class="type">Double</span>), <span class="type">SensorReading</span>] = warning.connect(low)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ConnectedStreams → DataStream：作用于 ConnectedStreams 上，功能与 map和 flatMap 一样，对 ConnectedStreams 中的每一个 Stream 分别进行 map 和 flatMap处理。</span></span><br><span class="line"><span class="keyword">val</span> coMap: <span class="type">DataStream</span>[<span class="type">Product</span>] = connected.map(</span><br><span class="line">  warningData =&gt; (warningData._1, warningData._2, <span class="string">&quot;WARNING&quot;</span>),</span><br><span class="line">  lowData =&gt; (lowData.id, lowData.temperature, <span class="string">&quot;SAFE&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">coMap.print()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印结果</span></span><br><span class="line"><span class="number">10</span>&gt; (sensor_7,<span class="number">6.7</span>,<span class="type">SAFE</span>)</span><br><span class="line"><span class="number">8</span>&gt; (sensor_6,<span class="number">15.4</span>,<span class="type">SAFE</span>)</span><br><span class="line"><span class="number">6</span>&gt; (sensor_10,<span class="number">38.1</span>,<span class="type">WARNING</span>)</span><br><span class="line"><span class="number">7</span>&gt; (sensor_1,<span class="number">30.8</span>,<span class="type">WARNING</span>)</span><br><span class="line"><span class="number">7</span>&gt; (sensor_1,<span class="number">30.8</span>,<span class="type">WARNING</span>)</span><br><span class="line"><span class="number">7</span>&gt; (sensor_1,<span class="number">30.8</span>,<span class="type">WARNING</span>)</span><br><span class="line"><span class="number">7</span>&gt; (sensor_1,<span class="number">30.8</span>,<span class="type">WARNING</span>)</span><br><span class="line"><span class="number">7</span>&gt; (sensor_1,<span class="number">30.8</span>,<span class="type">WARNING</span>)</span><br><span class="line"><span class="number">7</span>&gt; (sensor_1,<span class="number">30.8</span>,<span class="type">WARNING</span>)</span><br></pre></td></tr></table></figure><h5 id="Union"><a href="#Union" class="headerlink" title="Union"></a>Union</h5><p><img src="https://file.buildworld.cn/img/20201012101514.png"></p><blockquote><ul><li>Union 之前两个流的类型必须是一样，Connect 可以不一样，在之后的 coMap中再去调整成为一样的。</li><li>Connect 只能操作两个流，Union 可以操作多个。</li></ul></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> unionStream: <span class="type">DataStream</span>[<span class="type">SensorReading</span>] = high.union(low)</span><br><span class="line">unionStream.print(<span class="string">&quot;union:::&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="4、支持的数据类型"><a href="#4、支持的数据类型" class="headerlink" title="4、支持的数据类型"></a>4、支持的数据类型</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> env = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line">env.setParallelism(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//基本数据类型</span></span><br><span class="line"><span class="keyword">val</span> numbers: <span class="type">DataStream</span>[<span class="type">Long</span>] = env.fromElements(<span class="number">1</span>L, <span class="number">2</span>L, <span class="number">3</span>L, <span class="number">4</span>L)</span><br><span class="line"><span class="keyword">val</span> res: <span class="type">DataStream</span>[<span class="type">Long</span>] = numbers.map(n =&gt; n + <span class="number">1</span>)</span><br><span class="line">res.print(<span class="string">&quot;相加：&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 元组</span></span><br><span class="line"><span class="keyword">val</span> persons1: <span class="type">DataStream</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = env.fromElements(</span><br><span class="line">  (<span class="string">&quot;michong&quot;</span>, <span class="number">25</span>),</span><br><span class="line">  (<span class="string">&quot;lili&quot;</span>, <span class="number">15</span>)</span><br><span class="line">)</span><br><span class="line"><span class="comment">//元组数据过滤</span></span><br><span class="line"><span class="keyword">val</span> res1: <span class="type">DataStream</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = persons1.filter(p =&gt; p._2 &gt; <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Scala样例类</span></span><br><span class="line"><span class="keyword">val</span> persons2: <span class="type">DataStream</span>[<span class="type">Person</span>] = env.fromElements(</span><br><span class="line">  <span class="type">Person</span>(<span class="string">&quot;MiChong&quot;</span>, <span class="number">25</span>),</span><br><span class="line">  <span class="type">Person</span>(<span class="string">&quot;Lili&quot;</span>, <span class="number">15</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> res2: <span class="type">DataStream</span>[<span class="type">Person</span>] = persons2.filter(</span><br><span class="line">  p =&gt; p.age &gt; <span class="number">18</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">res2.print(<span class="string">&quot;成年人： &quot;</span>)</span><br><span class="line">env.execute()</span><br></pre></td></tr></table></figure><h4 id="5、实现-UDF-函数——更细粒度的控制流"><a href="#5、实现-UDF-函数——更细粒度的控制流" class="headerlink" title="5、实现 UDF 函数——更细粒度的控制流"></a>5、实现 UDF 函数——更细粒度的控制流</h4><h6 id="函数类（Function-Classes）"><a href="#函数类（Function-Classes）" class="headerlink" title="函数类（Function Classes）"></a>函数类（Function Classes）</h6><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> res2: <span class="type">DataStream</span>[<span class="type">Person</span>] = persons2.filter(<span class="keyword">new</span> <span class="type">MyFilter</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">extends</span> <span class="title">FilterFunction</span>[<span class="type">Person</span>] </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">filter</span></span>(p: <span class="type">Person</span>): <span class="type">Boolean</span> = &#123;</span><br><span class="line">    p.age &gt; <span class="number">18</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="富函数（Rich-Functions）"><a href="#富函数（Rich-Functions）" class="headerlink" title="富函数（Rich Functions）"></a>富函数（Rich Functions）</h6><blockquote><p>“富函数”是 DataStream API 提供的一个函数类的接口，所有 Flink 函数类都有其 Rich 版本。它与常规函数的不同在于，可以获取运行环境的上下文，并拥有一些生命周期方法，所以可以实现更复杂的功能。</p><p><strong>生命周期</strong></p><ul><li><code>open()</code>方法是 rich function 的初始化方法，当一个算子例如 map 或者 filter被调用之前 open()会被调用。</li><li><code>close()</code>方法是生命周期中的最后一个调用的方法，做一些清理工作。</li><li><code>getRuntimeContext()</code>方法提供了函数的 RuntimeContext 的一些信息，例如函数执行的并行度，任务的名字，以及 state 状态</li></ul></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFlatMap</span> <span class="keyword">extends</span> <span class="title">RichFlatMapFunction</span>[<span class="type">Int</span>, (<span class="type">Int</span>, <span class="type">Int</span>)] </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> subTaskIndex = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">open</span></span>(parameters: <span class="type">Configuration</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    subTaskIndex = getRuntimeContext.getIndexOfThisSubtask</span><br><span class="line">    <span class="comment">//做一些初始化工作，建立HDFS的连接</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">flatMap</span></span>(in: <span class="type">Int</span>, collector: <span class="type">Collector</span>[(<span class="type">Int</span>, <span class="type">Int</span>)]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">if</span> (in % <span class="number">2</span> == subTaskIndex) &#123;</span><br><span class="line">      collector.collect((subTaskIndex, in))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">close</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 以下做一些清理工作，断开HDFS的连接</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、Sink"><a href="#6、Sink" class="headerlink" title="6、Sink"></a>6、Sink</h4><blockquote><p>Flink的对外输出操作</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.<span class="type">Properties</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.serialization.<span class="type">SimpleStringSchema</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.scala._</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.connectors.kafka.&#123;<span class="type">FlinkKafkaConsumer011</span>, <span class="type">FlinkKafkaProducer011</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义样例类，温度传感器</span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">SensorReading</span>(<span class="params">id: <span class="type">String</span>, timestamp: <span class="type">Long</span>, temperature: <span class="type">Double</span></span>)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SourceTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建执行环境</span></span><br><span class="line">    <span class="keyword">val</span> env: <span class="type">StreamExecutionEnvironment</span> = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、从kafka中读取数据</span></span><br><span class="line">    <span class="keyword">val</span> properties = <span class="keyword">new</span> <span class="type">Properties</span>()</span><br><span class="line">    properties.setProperty(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;10.12.42.174:9092&quot;</span>)</span><br><span class="line">    properties.setProperty(<span class="string">&quot;group.id&quot;</span>, <span class="string">&quot;consumer-group&quot;</span>)</span><br><span class="line">    <span class="comment">//    properties.setProperty(&quot;auto.offset.reset&quot;, &quot;latest&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> stream3: <span class="type">DataStream</span>[<span class="type">String</span>] = env.addSource(<span class="keyword">new</span> <span class="type">FlinkKafkaConsumer011</span>[<span class="type">String</span>](<span class="string">&quot;sensor&quot;</span>, <span class="keyword">new</span> <span class="type">SimpleStringSchema</span>(), properties))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将从kafka获取的数据处理</span></span><br><span class="line">    <span class="keyword">val</span> outputStream: <span class="type">DataStream</span>[<span class="type">String</span>] = stream3.map(</span><br><span class="line">      data =&gt; &#123;</span><br><span class="line">        <span class="keyword">var</span> arr = data.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">        <span class="type">SensorReading</span>(arr(<span class="number">0</span>), arr(<span class="number">1</span>).toLong, arr(<span class="number">2</span>).toDouble).toString</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将处处之后的数据重新发送到kafka中</span></span><br><span class="line">    outputStream.addSink(<span class="keyword">new</span> <span class="type">FlinkKafkaProducer011</span>[<span class="type">String</span>](<span class="string">&quot;10.12.42.174:9092&quot;</span>, <span class="string">&quot;sensor_res&quot;</span>, <span class="keyword">new</span> <span class="type">SimpleStringSchema</span>()))</span><br><span class="line">    outputStream.print()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行</span></span><br><span class="line">    env.execute()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-connector-kafka-0.11_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="JDBC自定义sink"><a href="#JDBC自定义sink" class="headerlink" title="JDBC自定义sink"></a>JDBC自定义sink</h6><blockquote><p>数据从Kafka获取，然后进行dataStream转换，最后将结果保存在mysql中</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.&#123;<span class="type">Connection</span>, <span class="type">DriverManager</span>, <span class="type">PreparedStatement</span>&#125;</span><br><span class="line"><span class="keyword">import</span> java.util.<span class="type">Properties</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.serialization.<span class="type">SimpleStringSchema</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.configuration.<span class="type">Configuration</span></span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.sink.&#123;<span class="type">RichSinkFunction</span>, <span class="type">SinkFunction</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.scala._</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.connectors.kafka.&#123;<span class="type">FlinkKafkaConsumer011</span>, <span class="type">FlinkKafkaProducer011</span>&#125;</span><br><span class="line"><span class="comment">// 定义样例类，温度传感器</span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">SensorReading</span>(<span class="params">id: <span class="type">String</span>, timestamp: <span class="type">Long</span>, temperature: <span class="type">Double</span></span>)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SourceTest</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建执行环境</span></span><br><span class="line">    <span class="keyword">val</span> env: <span class="type">StreamExecutionEnvironment</span> = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、从kafka中读取数据</span></span><br><span class="line">    <span class="keyword">val</span> properties = <span class="keyword">new</span> <span class="type">Properties</span>()</span><br><span class="line">    properties.setProperty(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;10.12.42.174:9092&quot;</span>)</span><br><span class="line">    properties.setProperty(<span class="string">&quot;group.id&quot;</span>, <span class="string">&quot;consumer-group&quot;</span>)</span><br><span class="line">    <span class="comment">//    properties.setProperty(&quot;auto.offset.reset&quot;, &quot;latest&quot;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> stream3: <span class="type">DataStream</span>[<span class="type">String</span>] = env.addSource(<span class="keyword">new</span> <span class="type">FlinkKafkaConsumer011</span>[<span class="type">String</span>](<span class="string">&quot;sensor&quot;</span>, <span class="keyword">new</span> <span class="type">SimpleStringSchema</span>(), properties))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将从kafka获取的数据处理</span></span><br><span class="line">    <span class="keyword">val</span> outputStream: <span class="type">DataStream</span>[<span class="type">SensorReading</span>] = stream3.map(</span><br><span class="line">      data =&gt; &#123;</span><br><span class="line">        <span class="keyword">var</span> arr = data.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">        <span class="type">SensorReading</span>(arr(<span class="number">0</span>), arr(<span class="number">1</span>).toLong, arr(<span class="number">2</span>).toDouble)</span><br><span class="line">      &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将处处之后的数据重新发送到kafka中</span></span><br><span class="line">    <span class="comment">//    outputStream.addSink(new FlinkKafkaProducer011[String](&quot;10.12.42.174:9092&quot;, &quot;sensor_res&quot;, new SimpleStringSchema()))</span></span><br><span class="line">    <span class="comment">//    outputStream.print()</span></span><br><span class="line"></span><br><span class="line">    outputStream.addSink(<span class="keyword">new</span> <span class="type">MyJdbcSink</span>())</span><br><span class="line">    <span class="comment">//执行</span></span><br><span class="line">    env.execute()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 自定义关于Sink的JDBC连接处理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyJdbcSink</span>(<span class="params"></span>) <span class="keyword">extends</span> <span class="title">RichSinkFunction</span>[<span class="type">SensorReading</span>] </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化自定义参数</span></span><br><span class="line">  <span class="keyword">var</span> conn: <span class="type">Connection</span> = _</span><br><span class="line">  <span class="keyword">var</span> insertStmt: <span class="type">PreparedStatement</span> = _</span><br><span class="line">  <span class="keyword">var</span> updateStmt: <span class="type">PreparedStatement</span> = _</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建数据库连接</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">open</span></span>(parameters: <span class="type">Configuration</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    conn = <span class="type">DriverManager</span>.getConnection(<span class="string">&quot;jdbc:mysql://10.12.42.174/flink&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>)</span><br><span class="line">    insertStmt = conn.prepareStatement(<span class="string">&quot;insert into sensor_temp(id,temp) values (?,?)&quot;</span>)</span><br><span class="line">    updateStmt = conn.prepareStatement(<span class="string">&quot;update sensor_temp set temp =? where id = ? &quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">invoke</span></span>(value: <span class="type">SensorReading</span>, context: <span class="type">SinkFunction</span>.<span class="type">Context</span>[_]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先执行更新程序，查到就更新</span></span><br><span class="line">    updateStmt.setDouble(<span class="number">1</span>, value.temperature)</span><br><span class="line">    updateStmt.setString(<span class="number">2</span>, value.id)</span><br><span class="line">    updateStmt.execute()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果没有更新的内容就插入</span></span><br><span class="line">    <span class="keyword">if</span> (updateStmt.getUpdateCount == <span class="number">0</span>) &#123;</span><br><span class="line">      insertStmt.setString(<span class="number">1</span>, value.id)</span><br><span class="line">      insertStmt.setDouble(<span class="number">2</span>, value.temperature)</span><br><span class="line">      insertStmt.execute()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">close</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    insertStmt.close()</span><br><span class="line">    updateStmt.close()</span><br><span class="line">    conn.close()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、Flink中的Window"><a href="#五、Flink中的Window" class="headerlink" title="五、Flink中的Window"></a>五、Flink中的Window</h3><blockquote><p>Window是一种<strong>切割无限数据</strong>为<strong>有限块</strong>进行处理的手段。</p></blockquote><h4 id="1、Window类型"><a href="#1、Window类型" class="headerlink" title="1、Window类型"></a>1、Window类型</h4><ul><li>CountWindow:按照指定的数据条数生成一个window，和时间没有关系</li><li>TimeWindow:按照时间生成window</li></ul><h4 id="2、窗口实现原理的不同分成三类"><a href="#2、窗口实现原理的不同分成三类" class="headerlink" title="2、窗口实现原理的不同分成三类"></a>2、窗口实现原理的不同分成三类</h4><h5 id="1）滚动窗口（Tumbling-Windows"><a href="#1）滚动窗口（Tumbling-Windows" class="headerlink" title="1）滚动窗口（Tumbling Windows)"></a>1）滚动窗口（Tumbling Windows)</h5><blockquote><p>将数据依据<code>固定的窗口长度</code>对数据进行<code>切片</code>。</p><p><strong>特点：时间对齐，窗口长度固定，没有重叠。</strong></p></blockquote><h5 id="2）滑动窗口（Sliding-Windows）"><a href="#2）滑动窗口（Sliding-Windows）" class="headerlink" title="2）滑动窗口（Sliding Windows）"></a>2）滑动窗口（Sliding Windows）</h5><blockquote><p>滑动窗口由<code>固定的窗口长度</code>和<code>滑动间隔</code>组成。</p><p><strong>特点：时间对齐，窗口长度固定，可以有重叠</strong></p></blockquote><h5 id="3）会话窗口（Session-Windows"><a href="#3）会话窗口（Session-Windows" class="headerlink" title="3）会话窗口（Session Windows)"></a>3）会话窗口（Session Windows)</h5><blockquote><p>由一系列事件组合一个指定时间长度的 <code>timeout</code> 间隙组成，类似于 web 应用的session，也就是一段时间没有接收到新数据就会生成新的窗口。</p><p><strong>特点：时间无对齐。</strong></p><p><img src="https://file.buildworld.cn/img/20201013095706.png"></p></blockquote><h4 id="3、Window-API"><a href="#3、Window-API" class="headerlink" title="3、Window API"></a>3、Window API</h4><h5 id="TimeWindow"><a href="#TimeWindow" class="headerlink" title="TimeWindow"></a>TimeWindow</h5><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.windowing.time.<span class="type">Time</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将从kafka获取的数据处理</span></span><br><span class="line"><span class="keyword">val</span> outputStream: <span class="type">DataStream</span>[<span class="type">SensorReading</span>] = stream3.map(</span><br><span class="line">  data =&gt; &#123;</span><br><span class="line">    <span class="keyword">val</span> arr = data.split(<span class="string">&quot;,&quot;</span>)</span><br><span class="line">    <span class="type">SensorReading</span>(arr(<span class="number">0</span>), arr(<span class="number">1</span>).toLong, arr(<span class="number">2</span>).toDouble)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">outputStream</span><br><span class="line">  .map(data =&gt; (data.id, data.temperature))</span><br><span class="line">  .keyBy(_._1) <span class="comment">//安装二元组的第一个元素（id）分组</span></span><br><span class="line">  .timeWindow(<span class="type">Time</span>.seconds(<span class="number">10</span>)) <span class="comment">// 一个参数就是滚动窗口，两个参数就是滑动窗口</span></span><br><span class="line">  .window(<span class="type">SlidingEventTimeWindows</span>.of(<span class="type">Time</span>.seconds(<span class="number">15</span>),<span class="type">Time</span>.seconds(<span class="number">5</span>)))  <span class="comment">// 会话窗口</span></span><br><span class="line">  .reduce((curRes, newData) =&gt; (curRes._1, curRes._2.min(newData._2), newData._3))</span><br></pre></td></tr></table></figure><h5 id="CountWindow"><a href="#CountWindow" class="headerlink" title="CountWindow"></a>CountWindow</h5><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">outputStream</span><br><span class="line">  .map(data =&gt; (data.id, data.temperature))</span><br><span class="line">  .keyBy(_._1) <span class="comment">//安装二元组的第一个元素（id）分组</span></span><br><span class="line">  .countWindow(<span class="number">5</span>) <span class="comment">// 一个参数就是滚动窗口，两个参数就是滑动窗口</span></span><br><span class="line">  .reduce((curRes, newData) =&gt; (curRes._1, curRes._2.min(newData._2), newData._3))</span><br></pre></td></tr></table></figure><h4 id="4、window-function"><a href="#4、window-function" class="headerlink" title="4、window function"></a>4、window function</h4><blockquote><ul><li><strong>增量聚合函数（incremental aggregation functions）</strong><br>每条数据到来就进行计算，保持一个简单的状态。典型的增量聚合函数有ReduceFunction, AggregateFunction。</li><li><strong>全窗口函数（full window functions）</strong><br>先把窗口所有数据收集起来，等到计算的时候会遍历所有数据。ProcessWindowFunction 就是一个全窗口函数。</li></ul></blockquote><h3 id="六、时间语义与-Wartermark"><a href="#六、时间语义与-Wartermark" class="headerlink" title="六、时间语义与 Wartermark"></a>六、时间语义与 Wartermark</h3><p><strong>在 Flink  的流式处理中，绝大部分的业务都会使用 <code>eventTime</code></strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建执行环境</span></span><br><span class="line"><span class="keyword">val</span> env: <span class="type">StreamExecutionEnvironment</span> = <span class="type">StreamExecutionEnvironment</span>.getExecutionEnvironment</span><br><span class="line"><span class="comment">// 从调用时刻开始给 env 创建的每一个 stream 追加时间特征</span></span><br><span class="line">env.setStreamTimeCharacteristic(<span class="type">TimeCharacteristic</span>.<span class="type">EventTime</span>)</span><br></pre></td></tr></table></figure><h4 id="Watermark"><a href="#Watermark" class="headerlink" title="Watermark"></a>Watermark</h4><ul><li>Watermark 是一种衡量 Event Time 进展的机制。</li><li><strong>Watermark  是用于处理乱序事件的</strong>，而正确的处理乱序事件，通常用Watermark 机制结合 window 来实现。</li><li>数据流中的 Watermark 用于表示 timestamp 小于 Watermark 的数据，都已经到达了，因此，window 的执行也是由 Watermark 触发的。</li><li>Watermark 可以理解成一个延迟触发机制，我们可以设置 Watermark 的延时时长 t，每次系统会校验已经到达的数据中最大的 maxEventTime，然后认定 eventTime小于 maxEventTime - t 的所有数据都已经到达，如果有窗口的停止时间等于maxEventTime – t，那么这个窗口被触发执行。</li></ul><h3 id="七、ProcessFunction-API（底层-API）"><a href="#七、ProcessFunction-API（底层-API）" class="headerlink" title="七、ProcessFunction API（底层 API）"></a>七、ProcessFunction API（底层 API）</h3><blockquote><p>Process Function 用来构建事件驱动的应用以及实现自定义的业务逻辑(使用之前的window 函数和转换算子无法实现)。</p><p>Flink 提供了 8 个 Process Function：<br>•  ProcessFunction<br>•  KeyedProcessFunction<br>•  CoProcessFunction<br>•  ProcessJoinFunction<br>•  BroadcastProcessFunction<br>•  KeyedBroadcastProcessFunction<br>•  ProcessWindowFunction<br>•  ProcessAllWindowFunction</p></blockquote><h4 id="TimerService-和-定时器（Timers）案例"><a href="#TimerService-和-定时器（Timers）案例" class="headerlink" title="TimerService 和 定时器（Timers）案例"></a>TimerService 和 定时器（Timers）案例</h4><blockquote><p>监控温度传感器的温度值，如果温度值在 10 秒钟之内(processing time)连续上升，则报警</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.buildworld.flink.processfunc.bean.SensorReading;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.ValueState;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.common.state.ValueStateDescriptor;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.api.java.tuple.Tuple;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.configuration.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.datastream.DataStreamSource;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.streaming.api.functions.KeyedProcessFunction;</span><br><span class="line"><span class="keyword">import</span> org.apache.flink.util.Collector;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MiChong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-12-07 15:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessFunction_App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//socket 文本流</span></span><br><span class="line">        DataStreamSource&lt;String&gt; inputStream = env.socketTextStream(<span class="string">&quot;localhost&quot;</span>, <span class="number">7777</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//转换为SensorReading类型</span></span><br><span class="line">        DataStream&lt;SensorReading&gt; dataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">            String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>]));</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试keyedProcessFunction，先分组再定义</span></span><br><span class="line">        dataStream.keyBy(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">                .process(<span class="keyword">new</span> TempConsIncreWarning(<span class="number">10</span>))</span><br><span class="line">                .print();</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现自定义处理函数，检测一段时间内的温度连续上升，输出报警</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TempConsIncreWarning</span> <span class="keyword">extends</span> <span class="title">KeyedProcessFunction</span>&lt;<span class="title">Tuple</span>, <span class="title">SensorReading</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义私有属性，当前统计的时间间隔</span></span><br><span class="line">        <span class="keyword">private</span> Integer interval;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//定义状态，保存上一次的温度值，定时器时间戳</span></span><br><span class="line">        <span class="keyword">private</span> ValueState&lt;Double&gt; lastTempState;</span><br><span class="line">        <span class="keyword">private</span> ValueState&lt;Long&gt; timerTsState;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">TempConsIncreWarning</span><span class="params">(Integer interval)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.interval = interval;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">(Configuration parameters)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            lastTempState = getRuntimeContext().getState(<span class="keyword">new</span> ValueStateDescriptor&lt;Double&gt;(<span class="string">&quot;last-temp&quot;</span>, Double.class, Double.MIN_VALUE));</span><br><span class="line">            timerTsState = getRuntimeContext().getState(<span class="keyword">new</span> ValueStateDescriptor&lt;Long&gt;(<span class="string">&quot;time-ts&quot;</span>, Long.class));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processElement</span><span class="params">(SensorReading sensorReading, Context context, Collector&lt;String&gt; collector)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//取出状态</span></span><br><span class="line">            Double lastTemp = lastTempState.value();</span><br><span class="line">            Long timerTs = timerTsState.value();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//更新温度状态</span></span><br><span class="line">            lastTempState.update(sensorReading.getTemperature());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果温度上升并且没有定时器的时候，注册10秒之后的定时器，开始等待</span></span><br><span class="line">            <span class="keyword">if</span> (sensorReading.getTemperature() &gt; lastTemp &amp;&amp; timerTs == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//计算出定时器的时间戳</span></span><br><span class="line">                Long ts = context.timerService().currentProcessingTime() + interval * <span class="number">1000L</span>;</span><br><span class="line">                context.timerService().registerProcessingTimeTimer(ts);</span><br><span class="line">                timerTsState.update(ts);</span><br><span class="line">                System.out.println(<span class="string">&quot;温度上升&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果温度下降，删除定时器</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (sensorReading.getTemperature() &lt; lastTemp &amp;&amp; timerTs != <span class="keyword">null</span>) &#123;</span><br><span class="line">                context.timerService().deleteProcessingTimeTimer(timerTs);</span><br><span class="line">                timerTsState.clear();</span><br><span class="line">                System.out.println(<span class="string">&quot;温度下降&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTimer</span><span class="params">(<span class="keyword">long</span> timestamp, OnTimerContext ctx, Collector&lt;String&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            out.collect(<span class="string">&quot;传感器：&quot;</span> + ctx.getCurrentKey().getField(<span class="number">0</span>) + <span class="string">&quot;温度值连续&quot;</span> + interval + <span class="string">&quot;秒上升&quot;</span> + <span class="string">&quot;,当前温度为：&quot;</span> + lastTempState.value());</span><br><span class="line">            timerTsState.clear();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">            lastTempState.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="侧输出流（SideOutput）"><a href="#侧输出流（SideOutput）" class="headerlink" title="侧输出流（SideOutput）"></a>侧输出流（SideOutput）</h4><blockquote><p>案例：用来监控传感器温度值，将温度值低于 30 度的数据输出到 side output。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessFunction_SideOutputCase</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//socket 文本流</span></span><br><span class="line">        DataStreamSource&lt;String&gt; inputStream = env.socketTextStream(<span class="string">&quot;localhost&quot;</span>, <span class="number">7777</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//转换为SensorReading类型</span></span><br><span class="line">        DataStream&lt;SensorReading&gt; dataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">            String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>]));</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> OutputTag&lt;SensorReading&gt; lowTempTag = <span class="keyword">new</span> OutputTag&lt;SensorReading&gt;(<span class="string">&quot;lowTemp&quot;</span>) &#123;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试keyedProcessFunction，自定义侧输出流实现分流操作</span></span><br><span class="line">        SingleOutputStreamOperator&lt;SensorReading&gt; highTempStream = dataStream.keyBy(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">                .process(<span class="keyword">new</span> ProcessFunction&lt;SensorReading, SensorReading&gt;() &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">processElement</span><span class="params">(SensorReading sensorReading, Context context, Collector&lt;SensorReading&gt; collector)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (sensorReading.getTemperature() &lt; <span class="number">30</span>) &#123;</span><br><span class="line">                            context.output(lowTempTag, sensorReading);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            collector.collect(sensorReading);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        DataStream&lt;SensorReading&gt; lowTempStream = highTempStream.getSideOutput(lowTempTag);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分别输出</span></span><br><span class="line">        highTempStream.print(<span class="string">&quot;high&quot;</span>);</span><br><span class="line">        lowTempStream.print(<span class="string">&quot;low&quot;</span>);</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="八、状态编程和容错机制"><a href="#八、状态编程和容错机制" class="headerlink" title="八、状态编程和容错机制"></a>八、状态编程和容错机制</h3><blockquote><p>流式计算分为<code>有状态</code>和<code>无状态</code>两种情况。无状态的计算观察每个独立事件，并根据最后一个事件输出结果（<strong>无状态流处理</strong>每次只转换一条输入记录，并且仅根据最新的输入记录输出结果）。有状态的计算则会基于多个事件输出结果（<strong>有状态流处理</strong>维护所有已处理记录的状态值，并根据每条新输入的记录更新状态，因此输出记录(灰条)反映的是综合考虑多个事件之后的结果。）。</p></blockquote><h4 id="1、Flink检查点算法–检查点分界线（Checkpoint-Barrier）"><a href="#1、Flink检查点算法–检查点分界线（Checkpoint-Barrier）" class="headerlink" title="1、Flink检查点算法–检查点分界线（Checkpoint Barrier）"></a>1、Flink检查点算法–检查点分界线（Checkpoint Barrier）</h4><blockquote><ul><li>Flink 的检查点算法用到了一种称为分界线（barrier）的特殊数据形式，用来把一条流上数据按照不同的检查点分开。</li><li>分界线之前到来的数据导致的状态更改，都会被包含在当前分界线所属的检查点中；而基于分界线之后的数据导致的所有更改，就会被包含在之后的检查点中。</li></ul></blockquote><h4 id="2、保存点（Savepoints）"><a href="#2、保存点（Savepoints）" class="headerlink" title="2、保存点（Savepoints）"></a>2、保存点（Savepoints）</h4><blockquote><ul><li>Flink 还提供了可以自定义的镜像保存功能，就是<code>保存点（savepoints）</code></li><li>原则上，创建保存点使用的算法与检查点完全相同，因此保存点可以认为就是具有一些额外元数据的检查点</li><li>Flink不会自动创建保存点，因此用户（或者外部调度程序）必须明确地触发创建操作</li><li>保存点是一个强大的功能。除了故障恢复外，保存点可以用于：有计划的手动备份，更新应用程序，版本迁移，暂停和重启应用，等等</li></ul></blockquote><h4 id="3、容错机制配置项"><a href="#3、容错机制配置项" class="headerlink" title="3、容错机制配置项"></a>3、容错机制配置项</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、检查点配置</span></span><br><span class="line">env.enableCheckpointing(<span class="number">300</span>);</span><br><span class="line"><span class="comment">//高级选项</span></span><br><span class="line">env.getCheckpointConfig().setCheckpointingMode(CheckpointingMode.EXACTLY_ONCE);</span><br><span class="line">env.getCheckpointConfig().setCheckpointTimeout(<span class="number">60000L</span>);</span><br><span class="line">env.getCheckpointConfig().setMaxConcurrentCheckpoints(<span class="number">2</span>);</span><br><span class="line">env.getCheckpointConfig().setMinPauseBetweenCheckpoints(<span class="number">100L</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、重启策略配置</span></span><br><span class="line"><span class="comment">// 固定延迟重启</span></span><br><span class="line">env.setRestartStrategy(RestartStrategies.fixedDelayRestart(<span class="number">3</span>, <span class="number">10000L</span>));</span><br><span class="line"><span class="comment">//失败率重启</span></span><br><span class="line">env.setRestartStrategy(RestartStrategies.failureRateRestart(<span class="number">3</span>, Time.minutes(<span class="number">10</span>),Time.minutes(<span class="number">1</span>)));</span><br></pre></td></tr></table></figure><h4 id="4、状态一致性分类"><a href="#4、状态一致性分类" class="headerlink" title="4、状态一致性分类"></a>4、状态一致性分类</h4><blockquote><p>Flink 的一个重大价值在于， 它既保证了 <code>exactly-once</code> ，也具有<code>低延迟</code>和<code>高吞吐力</code>的处理能力。</p></blockquote><p><img src="https://file.buildworld.cn/img/20201208182144.png"></p><h4 id="5、Flink和kafka实现端到端的-exactly-once-语义"><a href="#5、Flink和kafka实现端到端的-exactly-once-语义" class="headerlink" title="5、Flink和kafka实现端到端的 exactly-once  语义"></a>5、Flink和kafka实现端到端的 exactly-once  语义</h4><p><img src="https://file.buildworld.cn/img/20201209123608.png"></p><h3 id="九、Table-API和Flink-SQL"><a href="#九、Table-API和Flink-SQL" class="headerlink" title="九、Table API和Flink SQL"></a>九、Table API和Flink SQL</h3><h4 id="1、引入pom依赖"><a href="#1、引入pom依赖" class="headerlink" title="1、引入pom依赖"></a>1、引入pom依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-streaming-java_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-table-planner_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!--阿里巴巴贡献出来的Blink--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-table-planner-blink_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、简单的例子"><a href="#2、简单的例子" class="headerlink" title="2、简单的例子"></a>2、简单的例子</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1、读取数据</span></span><br><span class="line">DataStreamSource&lt;String&gt; inputStream = env.readTextFile(<span class="string">&quot;D:\\Java\\project\\Flink_Java\\src\\main\\resources\\sensor.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、转化成pojo</span></span><br><span class="line">DataStream&lt;SensorReading&gt; dataStream = inputStream.map(</span><br><span class="line">        line -&gt; &#123;</span><br><span class="line">            String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、创建表环境</span></span><br><span class="line">StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4、基于流创建一张表</span></span><br><span class="line">Table dataTable = tableEnv.fromDataStream(dataStream);</span><br><span class="line"></span><br><span class="line"><span class="comment">//5、调用table API进行转化操作</span></span><br><span class="line">Table resTable = dataTable.select(<span class="string">&quot;id,temperature&quot;</span>)</span><br><span class="line">        .where(<span class="string">&quot; id = &#x27;sensor_1&#x27;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//6、执行SQL</span></span><br><span class="line">tableEnv.createTemporaryView(<span class="string">&quot;sensor&quot;</span>, dataTable);</span><br><span class="line">String sql = <span class="string">&quot;select id,temperature from sensor where id = &#x27;sensor_1&#x27;&quot;</span>;</span><br><span class="line">Table resultSqlTable = tableEnv.sqlQuery(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">//7、打印出查询结果</span></span><br><span class="line">tableEnv.toAppendStream(resTable, Row.class).print(<span class="string">&quot;result&quot;</span>);</span><br><span class="line">tableEnv.toAppendStream(resultSqlTable, Row.class).print(<span class="string">&quot;resultSql&quot;</span>);</span><br><span class="line"></span><br><span class="line">env.execute();</span><br></pre></td></tr></table></figure><h4 id="3、新老版本的流、批处理方法"><a href="#3、新老版本的流、批处理方法" class="headerlink" title="3、新老版本的流、批处理方法"></a>3、新老版本的流、批处理方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、创建环境</span></span><br><span class="line">StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.1 基于老版本planner的流处理</span></span><br><span class="line">EnvironmentSettings oldStreamSettings = EnvironmentSettings</span><br><span class="line">        .newInstance()</span><br><span class="line">        .useOldPlanner()</span><br><span class="line">        .inStreamingMode()</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">StreamTableEnvironment oldStreamTableEnv = StreamTableEnvironment.create(env, oldStreamSettings);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.2 基于老版本planner的批处理</span></span><br><span class="line">ExecutionEnvironment batchEnv = ExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">BatchTableEnvironment oldBatchTableEnv = BatchTableEnvironment.create(batchEnv);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.3 基于Blink的流处理</span></span><br><span class="line">EnvironmentSettings blinkStreamSettings = EnvironmentSettings</span><br><span class="line">        .newInstance()</span><br><span class="line">        .useBlinkPlanner()</span><br><span class="line">        .inStreamingMode()</span><br><span class="line">        .build();</span><br><span class="line">StreamTableEnvironment blinkStreamTableEnv = StreamTableEnvironment.create(env, blinkStreamSettings);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.4 基于Blink的批处理</span></span><br><span class="line">EnvironmentSettings blinkBatchSettings = EnvironmentSettings</span><br><span class="line">        .newInstance()</span><br><span class="line">        .useBlinkPlanner()</span><br><span class="line">        .inBatchMode()</span><br><span class="line">        .build();</span><br><span class="line">TableEnvironment blinkBatchTableEnv = TableEnvironment.create(blinkBatchSettings);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">env.execute();</span><br></pre></td></tr></table></figure><h4 id="4、连接外部系统创建一张表"><a href="#4、连接外部系统创建一张表" class="headerlink" title="4、连接外部系统创建一张表"></a>4、连接外部系统创建一张表</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、创建环境</span></span><br><span class="line">StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、表的创建：连接外部系统，读取数据</span></span><br><span class="line"><span class="comment">// 2.1 读取文件</span></span><br><span class="line">String filePath = <span class="string">&quot;D:\\Java\\project\\Flink_Java\\src\\main\\resources\\sensor.txt&quot;</span>;</span><br><span class="line">tableEnv.connect(<span class="keyword">new</span> FileSystem().path(filePath))</span><br><span class="line">.withFormat(<span class="keyword">new</span> Csv())</span><br><span class="line">.withSchema(<span class="keyword">new</span> Schema()</span><br><span class="line">        .field(<span class="string">&quot;id&quot;</span>, DataTypes.STRING())</span><br><span class="line">        .field(<span class="string">&quot;timestamp&quot;</span>,DataTypes.BIGINT())</span><br><span class="line">        .field(<span class="string">&quot;temp&quot;</span>,DataTypes.DOUBLE())</span><br><span class="line">).createTemporaryTable(<span class="string">&quot;inputTable&quot;</span>);</span><br><span class="line"></span><br><span class="line">Table inputTable = tableEnv.from(<span class="string">&quot;inputTable&quot;</span>);</span><br><span class="line">inputTable.printSchema();</span><br><span class="line">tableEnv.toAppendStream(inputTable, Row.class).print();</span><br><span class="line"></span><br><span class="line">env.execute();</span><br></pre></td></tr></table></figure><h4 id="5、查询转换"><a href="#5、查询转换" class="headerlink" title="5、查询转换"></a>5、查询转换</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">/ <span class="number">3</span> 查询转换</span><br><span class="line"><span class="comment">// 3.1 Table API</span></span><br><span class="line"><span class="comment">// 简单转换</span></span><br><span class="line">Table resultTable = inputTable.select(<span class="string">&quot;id,temperature&quot;</span>)</span><br><span class="line">        .filter(<span class="string">&quot;id = &#x27;sensor_6&#x27;&quot;</span>);</span><br><span class="line"><span class="comment">// 聚合统计</span></span><br><span class="line">Table aggTable = inputTable.groupBy(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">        .select(<span class="string">&quot;id,id.count as count,temperature.avg as avgTemp&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.2 SQL</span></span><br><span class="line">Table sqlTable = tableEnv.sqlQuery(<span class="string">&quot;select id,temperature from inputTable where id = &#x27;sensor_6&#x27;&quot;</span>);</span><br><span class="line">Table sqlQuery = tableEnv.sqlQuery(<span class="string">&quot;select id,count(id) as cnt,avg(temperature) as avgTemp from inputTable group by id&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印输出</span></span><br><span class="line">tableEnv.toAppendStream(resultTable,Row.class).print(<span class="string">&quot;resultTable&quot;</span>);</span><br><span class="line">tableEnv.toRetractStream(aggTable,Row.class).print(<span class="string">&quot;aggTable&quot;</span>);</span><br><span class="line">tableEnv.toAppendStream(sqlTable,Row.class).print(<span class="string">&quot;sqlTable&quot;</span>);</span><br><span class="line">tableEnv.toRetractStream(sqlQuery,Row.class).print(<span class="string">&quot;sqlQuery&quot;</span>);</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 4、输出到文件</span></span><br><span class="line"><span class="comment">// 连接外部文件注册输出表</span></span><br><span class="line">String outputFilePath = <span class="string">&quot;D:\\Java\\project\\Flink_Java\\src\\main\\resources\\output_sensor.txt&quot;</span>;</span><br><span class="line"></span><br><span class="line"> tableEnv.connect(<span class="keyword">new</span> FileSystem().path(outputFilePath))</span><br><span class="line">                .withFormat(<span class="keyword">new</span> Csv())</span><br><span class="line">                .withSchema(<span class="keyword">new</span> Schema()</span><br><span class="line">                        .field(<span class="string">&quot;id&quot;</span>, DataTypes.STRING())</span><br><span class="line"><span class="comment">//                        .field(&quot;cnt&quot;,DataTypes.BIGINT())</span></span><br><span class="line">                        .field(<span class="string">&quot;temperature&quot;</span>, DataTypes.DOUBLE()))</span><br><span class="line">                .createTemporaryTable(<span class="string">&quot;outputTable&quot;</span>);</span><br><span class="line"></span><br><span class="line">Table outputTable = tableEnv.from(<span class="string">&quot;outputTable&quot;</span>);</span><br><span class="line">resultTable.insertInto(<span class="string">&quot;outputTable&quot;</span>);</span><br></pre></td></tr></table></figure><h4 id="6、Table-amp-amp-Kafka"><a href="#6、Table-amp-amp-Kafka" class="headerlink" title="6、Table&amp;&amp;Kafka"></a>6、Table&amp;&amp;Kafka</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 1、创建环境</span></span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、连接kafka，读取数据</span></span><br><span class="line">        tableEnv.connect(<span class="keyword">new</span> Kafka()</span><br><span class="line">                .version(<span class="string">&quot;0.11&quot;</span>)</span><br><span class="line">                .topic(<span class="string">&quot;sensor&quot;</span>)</span><br><span class="line">                .property(<span class="string">&quot;zookeeper.connect&quot;</span>, <span class="string">&quot;10.12.42.174:2181&quot;</span>)</span><br><span class="line">                .property(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;10.12.42.174:9092&quot;</span>))</span><br><span class="line">                .withFormat(<span class="keyword">new</span> Csv())</span><br><span class="line">                .withSchema(<span class="keyword">new</span> Schema()</span><br><span class="line">                        .field(<span class="string">&quot;id&quot;</span>, DataTypes.STRING())</span><br><span class="line">                        .field(<span class="string">&quot;timestamp&quot;</span>, DataTypes.BIGINT())</span><br><span class="line">                        .field(<span class="string">&quot;temp&quot;</span>, DataTypes.DOUBLE()))</span><br><span class="line">        .createTemporaryTable(<span class="string">&quot;inputTable&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、查询转换</span></span><br><span class="line">        <span class="comment">// 简单转换</span></span><br><span class="line">        Table sensorTable = tableEnv.from(<span class="string">&quot;inputTable&quot;</span>);</span><br><span class="line">        Table resultTable = sensorTable.select(<span class="string">&quot;id,temp&quot;</span>)</span><br><span class="line">                .filter(<span class="string">&quot;id = &#x27;sensor_6&#x27;&quot;</span>);</span><br><span class="line">        <span class="comment">// 聚合统计</span></span><br><span class="line">        Table aggTable = sensorTable.groupBy(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">                .select(<span class="string">&quot;id,id.count as count,temp.avg as avgTemp&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、输出到文件</span></span><br><span class="line">        <span class="comment">// 连接外部文件注册输出表</span></span><br><span class="line"></span><br><span class="line">        tableEnv.connect(<span class="keyword">new</span> Kafka()</span><br><span class="line">                .version(<span class="string">&quot;0.11&quot;</span>)</span><br><span class="line">                .topic(<span class="string">&quot;flink&quot;</span>)</span><br><span class="line">                .property(<span class="string">&quot;zookeeper.connect&quot;</span>, <span class="string">&quot;10.12.42.174:2181&quot;</span>)</span><br><span class="line">                .property(<span class="string">&quot;bootstrap.servers&quot;</span>, <span class="string">&quot;10.12.42.174:9092&quot;</span>))</span><br><span class="line">                .withFormat(<span class="keyword">new</span> Csv())</span><br><span class="line">                .withSchema(<span class="keyword">new</span> Schema()</span><br><span class="line">                        .field(<span class="string">&quot;id&quot;</span>, DataTypes.STRING())</span><br><span class="line"><span class="comment">//                        .field(&quot;timestamp&quot;, DataTypes.BIGINT())</span></span><br><span class="line">                        .field(<span class="string">&quot;temp&quot;</span>, DataTypes.DOUBLE()))</span><br><span class="line">                .createTemporaryTable(<span class="string">&quot;outputTable&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5、写入到kafka中</span></span><br><span class="line">        resultTable.insertInto(<span class="string">&quot;outputTable&quot;</span>);</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br></pre></td></tr></table></figure><h4 id="7、更新模式"><a href="#7、更新模式" class="headerlink" title="7、更新模式"></a>7、更新模式</h4><blockquote><ul><li>对于流式查询，需要声明如何在表和外部连接器之间执行转换</li><li>与外部系统交换的消息类型，由更新模式（Update Mode）指定</li></ul></blockquote><p><img src="https://file.buildworld.cn/img/20201209210053.png"></p><h4 id="8、输出到MySQL"><a href="#8、输出到MySQL" class="headerlink" title="8、输出到MySQL"></a>8、输出到MySQL</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.flink<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>flink-jdbc_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.10.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">&lt;/dependency</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 4、连接MySQL</span></span><br><span class="line">String sinkDDL = <span class="string">&quot;create table jdbcOutputTable (&quot;</span> +</span><br><span class="line">        <span class="string">&quot; id varchar(20) not null, &quot;</span> +</span><br><span class="line">        <span class="string">&quot; avgTemp double not null &quot;</span> +</span><br><span class="line">        <span class="string">&quot;) with (&quot;</span> +</span><br><span class="line">        <span class="string">&quot; &#x27;connector.type&#x27; = &#x27;jdbc&#x27;, &quot;</span> +</span><br><span class="line">        <span class="string">&quot; &#x27;connector.url&#x27; = &#x27;jdbc:mysql://localhost:3306/flink&#x27;, &quot;</span> +</span><br><span class="line">        <span class="string">&quot; &#x27;connector.table&#x27; = &#x27;sensor_count&#x27;, &quot;</span> +</span><br><span class="line">        <span class="string">&quot; &#x27;connector.driver&#x27; = &#x27;com.mysql.jdbc.Driver&#x27;, &quot;</span> +</span><br><span class="line">        <span class="string">&quot; &#x27;connector.username&#x27; = &#x27;root&#x27;, &quot;</span> +</span><br><span class="line">        <span class="string">&quot; &#x27;connector.password&#x27; = &#x27;root&#x27; )&quot;</span>;</span><br><span class="line">tableEnv.sqlUpdate(sinkDDL);</span><br><span class="line">aggTable.insertInto(<span class="string">&quot;jdbcOutputTable&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="9、动态表和持续查询"><a href="#9、动态表和持续查询" class="headerlink" title="9、动态表和持续查询"></a>9、动态表和持续查询</h4><p><img src="https://file.buildworld.cn/img/20201211151959.png"></p><blockquote><ul><li>流被转换为动态表</li><li>对动态表计算连续查询，生成新的动态表</li><li>生成的动态表被转换回流</li></ul></blockquote><h4 id="10、Group-Windows"><a href="#10、Group-Windows" class="headerlink" title="10、Group Windows"></a>10、Group Windows</h4><blockquote><p>滚动窗口（Tumbling windows）– 滚动窗口要用 <code>Tumble</code> 类来定义</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Tumbling Event-time Window</span></span><br><span class="line">.window(Tumble.over(<span class="string">&quot;10.minutes&quot;</span>).on(<span class="string">&quot;rowtime&quot;</span>).as(<span class="string">&quot;w&quot;</span>))</span><br><span class="line"><span class="comment">// Tumbling Processing-time Window</span></span><br><span class="line">.window( Tumble.over(<span class="string">&quot; 10.minutes &quot;</span>).on(<span class="string">&quot; proctime &quot;</span>).as(<span class="string">&quot;w&quot;</span>))</span><br><span class="line"><span class="comment">// Tumbling Row-count Window</span></span><br><span class="line">.window( Tumble.over(<span class="string">&quot; 10.rows &quot;</span>).on(<span class="string">&quot; proctime &quot;</span>).as(<span class="string">&quot;w&quot;</span>))</span><br></pre></td></tr></table></figure><blockquote><p>滑动窗口（Sliding windows）– 滑动窗口要用 <code>Slide</code> 类来定义</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Sliding Event-time Window</span></span><br><span class="line">.window(Slide.over(<span class="string">&quot;10.minutes&quot;</span>).every(<span class="string">&quot;5.minutes&quot;</span>).on(<span class="string">&quot;rowtime&quot;</span>).as(<span class="string">&quot;w&quot;</span>))</span><br><span class="line"><span class="comment">// Sliding Processing-time window</span></span><br><span class="line">.window(Slide.over(<span class="string">&quot;10.minutes&quot;</span>).every(<span class="string">&quot;5.minutes&quot;</span>).on(<span class="string">&quot;proctime&quot;</span>).as(<span class="string">&quot;w&quot;</span>))</span><br><span class="line"><span class="comment">// Sliding Row-count window</span></span><br><span class="line">.window(Slide.over(<span class="string">&quot;10.rows&quot;</span>).every(<span class="string">&quot;5.rows&quot;</span>).on(<span class="string">&quot;proctime&quot;</span>).as(<span class="string">&quot;w&quot;</span>))</span><br></pre></td></tr></table></figure><h4 id="11、自定义UDF"><a href="#11、自定义UDF" class="headerlink" title="11、自定义UDF"></a>11、自定义UDF</h4><h5 id="标量函数（Scalar-Functions）"><a href="#标量函数（Scalar-Functions）" class="headerlink" title="标量函数（Scalar Functions）"></a>标量函数（Scalar Functions）</h5><blockquote><p>• 用户定义的标量函数，可以将0、1或多个标量值，映射到新的标量值<br>• 为了定义标量函数，必须在 <code>org.apache.flink.table.functions</code> 中扩展基类<code>ScalarFunction</code>，并实现（一个或多个）求值（eval）方法<br>• 标量函数的行为由求值方法决定，求值方法必须公开声明并命名为 <code>eval</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScalarFunctionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 1、创建环境</span></span><br><span class="line">        StreamExecutionEnvironment env = StreamExecutionEnvironment.getExecutionEnvironment();</span><br><span class="line">        env.setParallelism(<span class="number">1</span>);</span><br><span class="line">        env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);</span><br><span class="line"></span><br><span class="line">        StreamTableEnvironment tableEnv = StreamTableEnvironment.create(env);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、表的创建：连接外部系统，读取数据</span></span><br><span class="line">        <span class="comment">// 2.1 读取文件</span></span><br><span class="line">        String filePath = <span class="string">&quot;D:\\Java\\project\\Flink_Java\\src\\main\\resources\\sensor.txt&quot;</span>;</span><br><span class="line">        DataStream&lt;String&gt; inputStream = env.readTextFile(filePath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 转换成POJO</span></span><br><span class="line">        DataStream&lt;SensorReading&gt; dataStream = inputStream.map(line -&gt; &#123;</span><br><span class="line">            String[] fields = line.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SensorReading(fields[<span class="number">0</span>], <span class="keyword">new</span> Long(fields[<span class="number">1</span>]), <span class="keyword">new</span> Double(fields[<span class="number">2</span>]));</span><br><span class="line">        &#125;)</span><br><span class="line">                .assignTimestampsAndWatermarks(<span class="keyword">new</span> BoundedOutOfOrdernessTimestampExtractor&lt;SensorReading&gt;(Time.seconds(<span class="number">2</span>)) &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">extractTimestamp</span><span class="params">(SensorReading element)</span> </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> element.getTimestamp() * <span class="number">1000L</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、将流转换为表</span></span><br><span class="line">        Table sensorTable = tableEnv.fromDataStream(dataStream, <span class="string">&quot;id,timestamp as ts,temperature as temp&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义标量函数，实现求id的hash值</span></span><br><span class="line">        <span class="comment">// 4.1 table API</span></span><br><span class="line">        HashCode hashCode = <span class="keyword">new</span> HashCode(<span class="number">21</span>);</span><br><span class="line">        <span class="comment">// 需要在环境中注册UDF</span></span><br><span class="line">        tableEnv.registerFunction(<span class="string">&quot;hashCode&quot;</span>,hashCode);</span><br><span class="line">        Table resultTable = sensorTable.select(<span class="string">&quot;id,ts,hashCode(id)&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.2 SQL</span></span><br><span class="line">        tableEnv.createTemporaryView(<span class="string">&quot;sensor&quot;</span>,sensorTable);</span><br><span class="line">        Table resultSqlTable = tableEnv.sqlQuery(<span class="string">&quot;select id,ts,hashCode(id) from sensor&quot;</span>);</span><br><span class="line"></span><br><span class="line">        tableEnv.toAppendStream(resultTable, Row.class).print(<span class="string">&quot;resultTable&quot;</span>);</span><br><span class="line">        tableEnv.toRetractStream(resultSqlTable, Row.class).print(<span class="string">&quot;resultSqlTable&quot;</span>);</span><br><span class="line"></span><br><span class="line">        env.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现自定义的ScalarFunction</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HashCode</span> <span class="keyword">extends</span> <span class="title">ScalarFunction</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> factor = <span class="number">13</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">HashCode</span><span class="params">(<span class="keyword">int</span> factor)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.factor = factor;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">eval</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> s.hashCode() * factor;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="表函数（Table-Functions）"><a href="#表函数（Table-Functions）" class="headerlink" title="表函数（Table Functions）"></a>表函数（Table Functions）</h5><blockquote><p>• 用户定义的表函数，也可以将0、1或多个标量值作为输入参数；与标量函数不同的是，它可以返回任意数量的行作为输出，而不是单个值<br>• 为了定义一个表函数，必须扩展 <code>org.apache.flink.table.functions</code> 中的基类<code>TableFunction</code> 并实现（一个或多个）求值方法<br>• 表函数的行为由其求值方法决定，求值方法必须是 <code>public</code> 的，并命名为 <code>eval</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    <span class="comment">// 实现自定义TableFunction</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Split</span> <span class="keyword">extends</span> <span class="title">TableFunction</span>&lt;<span class="title">Tuple2</span>&lt;<span class="title">String</span>, <span class="title">Integer</span>&gt;&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 定义属性，分隔符</span></span><br><span class="line">        <span class="keyword">private</span> String separator = <span class="string">&quot;,&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Split</span><span class="params">(String separator)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.separator = separator;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 必须实现一个eval方法，没有返回值</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eval</span><span class="params">( String str )</span></span>&#123;</span><br><span class="line">            <span class="keyword">for</span>( String s: str.split(separator) )&#123;</span><br><span class="line">                collect(<span class="keyword">new</span> Tuple2&lt;&gt;(s, s.length()));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="comment">// 4. 自定义表函数，实现将id拆分，并输出（word, length）</span></span><br><span class="line">        <span class="comment">// 4.1 table API</span></span><br><span class="line">        Split split = <span class="keyword">new</span> Split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 需要在环境中注册UDF</span></span><br><span class="line">        tableEnv.registerFunction(<span class="string">&quot;split&quot;</span>, split);</span><br><span class="line">        Table resultTable = sensorTable</span><br><span class="line">                .joinLateral(<span class="string">&quot;split(id) as (word, length)&quot;</span>)</span><br><span class="line">                .select(<span class="string">&quot;id, ts, word, length&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.2 SQL</span></span><br><span class="line">        tableEnv.createTemporaryView(<span class="string">&quot;sensor&quot;</span>, sensorTable);</span><br><span class="line">        Table resultSqlTable = tableEnv.sqlQuery(<span class="string">&quot;select id, ts, word, length &quot;</span> +</span><br><span class="line">                <span class="string">&quot; from sensor, lateral table(split(id)) as splitid(word, length)&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="聚合函数（Aggregate-Functions）"><a href="#聚合函数（Aggregate-Functions）" class="headerlink" title="聚合函数（Aggregate Functions）"></a>聚合函数（Aggregate Functions）</h5><blockquote><p><strong>AggregateFunction 的工作原理如下：</strong></p><p>首先，它需要一个累加器（Accumulator），用来保存聚合中间结果的数据结构；可以通过调用 createAccumulator() 方法创建空累加器<br>随后，对每个输入行调用函数的 accumulate() 方法来更新累加器<br>处理完所有行后，将调用函数的 getValue() 方法来计算并返回最终结果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">// 实现自定义的AggregateFunction</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AvgTemp</span> <span class="keyword">extends</span> <span class="title">AggregateFunction</span>&lt;<span class="title">Double</span>, <span class="title">Tuple2</span>&lt;<span class="title">Double</span>, <span class="title">Integer</span>&gt;&gt;</span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Double <span class="title">getValue</span><span class="params">(Tuple2&lt;Double, Integer&gt; accumulator)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> accumulator.f0 / accumulator.f1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Tuple2&lt;Double, Integer&gt; <span class="title">createAccumulator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Tuple2&lt;&gt;(<span class="number">0.0</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 必须实现一个accumulate方法，来数据之后更新状态</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accumulate</span><span class="params">( Tuple2&lt;Double, Integer&gt; accumulator, Double temp )</span></span>&#123;</span><br><span class="line">            accumulator.f0 += temp;</span><br><span class="line">            accumulator.f1 += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line">        <span class="comment">// 4. 自定义聚合函数，求当前传感器的平均温度值</span></span><br><span class="line">        <span class="comment">// 4.1 table API</span></span><br><span class="line">        AvgTemp avgTemp = <span class="keyword">new</span> AvgTemp();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 需要在环境中注册UDF</span></span><br><span class="line">        tableEnv.registerFunction(<span class="string">&quot;avgTemp&quot;</span>, avgTemp);</span><br><span class="line">        Table resultTable = sensorTable</span><br><span class="line">                .groupBy(<span class="string">&quot;id&quot;</span>)</span><br><span class="line">                .aggregate( <span class="string">&quot;avgTemp(temp) as avgtemp&quot;</span> )</span><br><span class="line">                .select(<span class="string">&quot;id, avgtemp&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="表聚合函数（Table-Aggregate-Functions）"><a href="#表聚合函数（Table-Aggregate-Functions）" class="headerlink" title="表聚合函数（Table Aggregate Functions）"></a>表聚合函数（Table Aggregate Functions）</h5><blockquote><p><strong>TableAggregateFunction 的工作原理如下:</strong><br>– 首先，它同样需要一个累加器（Accumulator），它是保存聚合中间结果的数据结构。通过调用 createAccumulator() 方法可以创建空累加器。<br>– 随后，对每个输入行调用函数的 accumulate() 方法来更新累加器。<br>– 处理完所有行后，将调用函数的 emitValue() 方法来计算并返回最终结果。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Apache </tag>
            
            <tag> Flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BigData--大数据技术之Spark机器学习库MLLib</title>
      <link href="/2020/09/09/BigData-%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BSpark%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%BA%93MLLib/"/>
      <url>/2020/09/09/BigData-%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BSpark%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%BA%93MLLib/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>MLlib fits into Spark’s APIs and interoperates with NumPy in Python (as of Spark 0.9) and R libraries (as of Spark 1.5). You can use any Hadoop data source (e.g. HDFS, HBase, or local files), making it easy to plug into Hadoop workflows.</p></blockquote><h3 id="1、Spark-MLib介绍"><a href="#1、Spark-MLib介绍" class="headerlink" title="1、Spark MLib介绍"></a>1、Spark MLib介绍</h3><blockquote><ul><li>MLlib 是 Spark 的机器学习库，旨在简化机器学习的工程实践工作，并方便扩展到更大规模。</li><li>MLlib 由一些通用的学习算法和工具组成，包括分类、回归、聚类、协同过滤、降维等，同时还包括底层的优化原语和高层的管道 API。</li></ul></blockquote><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>数据类型</td><td>向量、带类别的向量、矩阵等</td></tr><tr><td>数学统计计算库</td><td>基本统计量、相关分析、随机数产生器、假设检验等</td></tr><tr><td>算法评测</td><td>AUC、准确率、召回率、F-Measure 等</td></tr><tr><td>机器学习算法</td><td>分类算法、回归算法、聚类算法、协同过滤等</td></tr></tbody></table><blockquote><p><strong>Spark 机器学习库从 1.2 版本以后被分为两个包：</strong></p><ul><li><code>spark.mllib </code>包含基于RDD的原始算法API。Spark MLlib 历史比较长，在1.0 以前的版本即已经包含了，提供的算法实现都是基于原始的 RDD。</li><li><a href="http://spark.apache.org/docs/latest/ml-guide.html"><code>spark.ml</code></a> 则提供了基于<a href="http://spark.apache.org/docs/latest/sql-programming-guide.html#dataframes">DataFrames</a> 高层次的API，可以用来构建机器学习工作流（<code>PipeLine</code>）。<code>ML Pipeline</code> 弥补了原始 MLlib 库的不足，向用户提供了一个基于 DataFrame 的机器学习工作流式 API 套件。</li></ul></blockquote><pre><code>#### 目前MLlib支持的主要的机器学习算法</code></pre><p><img src="https://file.buildworld.cn/img/20200909141502.png"></p><h3 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.spark/spark-mllib --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-mllib_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><ul><li><code>DataFrame</code>：使用Spark SQL中的DataFrame作为数据集，它可以容纳各种数据类型。 较之 RDD，包含了 schema 信息，更类似传统数据库中的二维表格。它被 ML Pipeline 用来存储源数据。例如，DataFrame中的列可以是存储的文本，特征向量，真实标签和预测的标签等。</li><li><code>Transformer</code>：翻译成转换器，是一种可以将一个DataFrame转换为另一个DataFrame的算法。比如一个模型就是一个 Transformer。它可以把 一个不包含预测标签的测试数据集 DataFrame 打上标签，转化成另一个包含预测标签的 DataFrame。技术上，Transformer实现了一个方法transform（），它通过附加一个或多个列将一个DataFrame转换为另一个DataFrame。</li><li><code>Estimator</code>：翻译成估计器或评估器，它是学习算法或在训练数据上的训练方法的概念抽象。在 Pipeline 里通常是被用来操作 DataFrame 数据并生产一个 Transformer。从技术上讲，Estimator实现了一个方法fit（），它接受一个DataFrame并产生一个转换器。如一个随机森林算法就是一个 Estimator，它可以调用fit（），通过训练特征数据而得到一个随机森林模型。</li><li><code>Paramete</code>r：Parameter 被用来设置 Transformer 或者 Estimator 的参数。现在，所有转换器和估计器可共享用于指定参数的公共API。ParamMap是一组（参数，值）对。</li><li><code>PipeLine</code>：翻译为工作流或者管道。工作流将多个工作流阶段（转换器和估计器）连接在一起，形成机器学习的工作流，并获得结果输出。</li></ul></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.buildworld.spark.ml</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.ml.&#123;<span class="type">Pipeline</span>, <span class="type">PipelineModel</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.ml.classification.<span class="type">LogisticRegression</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.ml.feature.&#123;<span class="type">HashingTF</span>, <span class="type">Tokenizer</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.&#123;<span class="type">Row</span>, <span class="type">SparkSession</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.ml.linalg.<span class="type">Vector</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SparkMLIB_DEMO</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> spark: <span class="type">SparkSession</span> = <span class="type">SparkSession</span>.builder().master(<span class="string">&quot;local&quot;</span>).appName(<span class="string">&quot;MLib&quot;</span>).getOrCreate()</span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line"></span><br><span class="line">    <span class="comment">//引入要包含的包并构建训练数据集</span></span><br><span class="line">    <span class="keyword">val</span> training = spark.createDataFrame(<span class="type">Seq</span>(</span><br><span class="line">      (<span class="number">0</span>L, <span class="string">&quot;a b c d e spark&quot;</span>, <span class="number">1.0</span>),</span><br><span class="line">      (<span class="number">1</span>L, <span class="string">&quot;b d&quot;</span>, <span class="number">0.0</span>),</span><br><span class="line">      (<span class="number">2</span>L, <span class="string">&quot;spark f g h&quot;</span>, <span class="number">1.0</span>),</span><br><span class="line">      (<span class="number">3</span>L, <span class="string">&quot;hadoop mapreduce&quot;</span>, <span class="number">0.0</span>)</span><br><span class="line">    )).toDF(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;text&quot;</span>, <span class="string">&quot;label&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> tokenizer: <span class="type">Tokenizer</span> = <span class="keyword">new</span> <span class="type">Tokenizer</span>()</span><br><span class="line">      .setInputCol(<span class="string">&quot;text&quot;</span>)</span><br><span class="line">      .setOutputCol(<span class="string">&quot;words&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> hashingTF: <span class="type">HashingTF</span> = <span class="keyword">new</span> <span class="type">HashingTF</span>()</span><br><span class="line">      .setNumFeatures(<span class="number">1000</span>)</span><br><span class="line">      .setInputCol(tokenizer.getInputCol)</span><br><span class="line">      .setOutputCol(<span class="string">&quot;features&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> lr: <span class="type">LogisticRegression</span> = <span class="keyword">new</span> <span class="type">LogisticRegression</span>()</span><br><span class="line">      .setMaxIter(<span class="number">10</span>)</span><br><span class="line">      .setRegParam(<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//照具体的处理逻辑有序的组织PipelineStages 并创建一个Pipeline</span></span><br><span class="line">    <span class="keyword">val</span> pipeline: <span class="type">Pipeline</span> = <span class="keyword">new</span> <span class="type">Pipeline</span>().setStages(<span class="type">Array</span>(tokenizer, hashingTF, lr))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//现在构建的Pipeline本质上是一个Estimator，在它的fit（）方法运行之后，它将产生一个PipelineModel，它是一个Transformer。</span></span><br><span class="line">    <span class="keyword">val</span> model: <span class="type">PipelineModel</span> = pipeline.fit(training)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构建测试数据</span></span><br><span class="line">    <span class="keyword">val</span> test = spark.createDataFrame(<span class="type">Seq</span>(</span><br><span class="line">      (<span class="number">4</span>L, <span class="string">&quot;spark i j k&quot;</span>),</span><br><span class="line">      (<span class="number">5</span>L, <span class="string">&quot;l m n&quot;</span>),</span><br><span class="line">      (<span class="number">6</span>L, <span class="string">&quot;spark a&quot;</span>),</span><br><span class="line">      (<span class="number">7</span>L, <span class="string">&quot;apache hadoop&quot;</span>)</span><br><span class="line">    )).toDF(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;text&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用我们训练好的PipelineModel的transform（）方法，让测试数据按顺序通过拟合的工作流，生成我们所需要的预测结果。</span></span><br><span class="line">    model.transform(test).select(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;text&quot;</span>, <span class="string">&quot;probability&quot;</span>, <span class="string">&quot;prediction&quot;</span>).collect().foreach &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="type">Row</span>(id: <span class="type">Long</span>, text: <span class="type">String</span>, prob: <span class="type">Vector</span>, prediction: <span class="type">Double</span>) =&gt;</span><br><span class="line">        println(<span class="string">s&quot;(<span class="subst">$id</span>, <span class="subst">$text</span>) --&gt; prob=<span class="subst">$prob</span>, prediction=<span class="subst">$prediction</span>&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="先挖个坑，后面有机会再来学习"><a href="#先挖个坑，后面有机会再来学习" class="headerlink" title="先挖个坑，后面有机会再来学习"></a>先挖个坑，后面有机会再来学习</h3>]]></content>
      
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
            <tag> MLlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BigData--大数据技术之SparkStreaming</title>
      <link href="/2020/09/07/BigData-%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BSparkStreaming/"/>
      <url>/2020/09/07/BigData-%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BSparkStreaming/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>Spark Streaming用于流式数据的处理。Spark Streaming支持的数据输入源很多，例如：Kafka、Flume、Twitter、ZeroMQ和简单的TCP套接字等等。数据输入后可以用Spark的高度抽象原语如：map、reduce、join、window等进行运算。而结果也能保存在很多地方，如HDFS，数据库等。</p></blockquote><p><img src="https://file.buildworld.cn/img/20200906163217.png"></p><h3 id="1、SparkStreaming架构"><a href="#1、SparkStreaming架构" class="headerlink" title="1、SparkStreaming架构"></a>1、SparkStreaming架构</h3><p><img src="https://file.buildworld.cn/img/20200907215002.png" alt="SparkStreaming架构"></p><h4 id="依赖（采用scala-2-12-x版本）"><a href="#依赖（采用scala-2-12-x版本）" class="headerlink" title="依赖（采用scala 2.12.x版本）"></a>依赖（采用scala 2.12.x版本）</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-core_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-sql_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-streaming_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-streaming-kafka-0-10_2.12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kafka-clients<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2、WordCount案例实操"><a href="#2、WordCount案例实操" class="headerlink" title="2、WordCount案例实操"></a>2、WordCount案例实操</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.buildworld.spark.streaming</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.&#123;<span class="type">Seconds</span>, <span class="type">StreamingContext</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">WordCount</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用SparkStreaming完成WordCount</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Spark配置对象</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;WordCount&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实时数据分析环境对象</span></span><br><span class="line">    <span class="comment">//采集周期：以指定的时间为周期采集实时数据</span></span><br><span class="line">    <span class="keyword">val</span> streamingContext = <span class="keyword">new</span> <span class="type">StreamingContext</span>(sparkConf, <span class="type">Seconds</span>(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从指定的端口中采集数据</span></span><br><span class="line">    <span class="keyword">val</span> socketLineDStream = streamingContext.socketTextStream(<span class="string">&quot;hadoop102&quot;</span>, <span class="number">9999</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将采集的书籍进行分解，扁平化</span></span><br><span class="line">    <span class="keyword">val</span> wordDStream = socketLineDStream.flatMap(line =&gt; line.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将数据进行结构的转换，方便统计分析</span></span><br><span class="line">    <span class="keyword">val</span> mapDStream = wordDStream.map((_, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将转换结构之后的数据进行聚合处理</span></span><br><span class="line">    <span class="keyword">val</span> wordToSumDStream = mapDStream.reduceByKey(_ + _)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将结果打印出来</span></span><br><span class="line">    wordToSumDStream.print()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//启动采集器</span></span><br><span class="line">    streamingContext.start()</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Driver等待采集器的执行</span></span><br><span class="line">    streamingContext.awaitTermination()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、自定义数据源"><a href="#3、自定义数据源" class="headerlink" title="3、自定义数据源"></a>3、自定义数据源</h3><blockquote><p>除了可以从socket中读取数据，我们还可以从mysql中读取数据，具体看自己的业务需求</p></blockquote><h4 id="1）声明采集器"><a href="#1）声明采集器" class="headerlink" title="1）声明采集器"></a>1）声明采集器</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明采集器</span></span><br><span class="line"><span class="comment">// 1) 继承Receiver</span></span><br><span class="line"><span class="comment">// 2) 重写onStart,onStop方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyReceiver</span>(<span class="params">host: <span class="type">String</span>, port: <span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Receiver</span>[<span class="type">String</span>](<span class="params"><span class="type">StorageLevel</span>.<span class="type">MEMORY_ONLY</span></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> socket: <span class="type">Socket</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">receive</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    socket = <span class="keyword">new</span> <span class="type">Socket</span>(host, port)</span><br><span class="line">    <span class="keyword">val</span> reader = <span class="keyword">new</span> <span class="type">BufferedReader</span>(<span class="keyword">new</span> <span class="type">InputStreamReader</span>(socket.getInputStream, <span class="string">&quot;UTF-8&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> line: <span class="type">String</span> = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> ((line = reader.readLine()) != <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">//将采集的数据存储到采集器的内部进行转换</span></span><br><span class="line">      <span class="keyword">this</span>.store(line)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">onStart</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="type">Thread</span>(<span class="keyword">new</span> <span class="type">Runnable</span> &#123;</span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">        receive()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).start()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">onStop</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    socket.close()</span><br><span class="line">    socket = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2）使用自定义的采集器"><a href="#2）使用自定义的采集器" class="headerlink" title="2）使用自定义的采集器"></a>2）使用自定义的采集器</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//从指定的端口中采集数据</span></span><br><span class="line"><span class="keyword">val</span> receiverStream = streamingContext.receiverStream(<span class="keyword">new</span> <span class="type">MyReceiver</span>(<span class="string">&quot;hadoop102&quot;</span>, <span class="number">9999</span>))</span><br></pre></td></tr></table></figure><h3 id="4、Kafka数据源（版本kafka0-11-x）"><a href="#4、Kafka数据源（版本kafka0-11-x）" class="headerlink" title="4、Kafka数据源（版本kafka0.11.x）"></a>4、Kafka数据源（版本kafka0.11.x）</h3><blockquote><p>两个版本的代码不太一样：</p><p>spark官网kafka0.10版本样例：<a href="http://spark.apache.org/docs/2.3.0/streaming-kafka-0-10-integration.html">http://spark.apache.org/docs/2.3.0/streaming-kafka-0-10-integration.html</a></p><p>spark官网kafka0.8.x版本样例：<a href="http://spark.apache.org/docs/2.3.0/streaming-kafka-0-8-integration.html">http://spark.apache.org/docs/2.3.0/streaming-kafka-0-8-integration.html</a></p></blockquote><p><strong>以下代码在kafka0.11.x上面的运行的</strong></p><h4 id="模拟产生数据（通过代码自动生成消息）"><a href="#模拟产生数据（通过代码自动生成消息）" class="headerlink" title="模拟产生数据（通过代码自动生成消息）"></a>模拟产生数据（通过代码自动生成消息）</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 产生数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">KafkaWordProducer</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// kafka服务器地址</span></span><br><span class="line">    <span class="keyword">val</span> brokers = <span class="string">&quot;hadoop102:9092&quot;</span></span><br><span class="line">    <span class="comment">// kafka topic</span></span><br><span class="line">    <span class="keyword">val</span> topic = <span class="string">&quot;michong&quot;</span></span><br><span class="line">    <span class="comment">// 每秒发送三次消息</span></span><br><span class="line">    <span class="keyword">val</span> messagesPerSec = <span class="number">1</span></span><br><span class="line">    <span class="comment">// 每次发送五个数字</span></span><br><span class="line">    <span class="keyword">val</span> wordsPerMessage = <span class="number">5</span></span><br><span class="line">    <span class="keyword">val</span> props = <span class="keyword">new</span> util.<span class="type">HashMap</span>[<span class="type">String</span>, <span class="type">Object</span>]()</span><br><span class="line">    props.put(<span class="type">ProducerConfig</span>.<span class="type">BOOTSTRAP_SERVERS_CONFIG</span>, brokers)</span><br><span class="line">    props.put(<span class="type">ProducerConfig</span>.<span class="type">VALUE_SERIALIZER_CLASS_CONFIG</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>)</span><br><span class="line">    props.put(<span class="type">ProducerConfig</span>.<span class="type">KEY_SERIALIZER_CLASS_CONFIG</span>, <span class="string">&quot;org.apache.kafka.common.serialization.StringSerializer&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> producer = <span class="keyword">new</span> <span class="type">KafkaProducer</span>[<span class="type">String</span>, <span class="type">String</span>](props)</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">      (<span class="number">1</span> to messagesPerSec.toInt).foreach&#123;</span><br><span class="line">        messageNum =&gt; <span class="keyword">val</span> str = (<span class="number">1</span> to wordsPerMessage.toInt).map(x =&gt; <span class="type">Random</span>.nextInt(<span class="number">30</span>).toString).mkString(<span class="string">&quot; &quot;</span>)</span><br><span class="line">          println(str)</span><br><span class="line">          <span class="keyword">val</span> message = <span class="keyword">new</span> <span class="type">ProducerRecord</span>[<span class="type">String</span>, <span class="type">String</span>](topic, <span class="literal">null</span>, str)</span><br><span class="line">          producer.send(message)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="type">Thread</span>.sleep(<span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="控制台生成Topic以及消息"><a href="#控制台生成Topic以及消息" class="headerlink" title="控制台生成Topic以及消息"></a>控制台生成Topic以及消息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 生成一个名字叫michong 的topic</span></span><br><span class="line">bin/kafka-topics.sh --zookeeper hadoop102:2181 --create --replication-factor 2 --partitions 3 --topic michong</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入kafka控制台手动输入消息</span></span><br><span class="line">bin/kafka-console-producer.sh --broker-list hadoop102:9092 --topic michong</span><br></pre></td></tr></table></figure><h4 id="Wordcount词频统计"><a href="#Wordcount词频统计" class="headerlink" title="Wordcount词频统计"></a>Wordcount词频统计</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">al sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">&quot;kafkaDirectWordCount&quot;</span>).setMaster(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line">  <span class="keyword">val</span> ssc = <span class="keyword">new</span> <span class="type">StreamingContext</span>(sparkConf, <span class="type">Seconds</span>(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> <span class="type">KafkaTopic</span> = <span class="type">List</span>(<span class="string">&quot;michong&quot;</span>)</span><br><span class="line">  <span class="keyword">val</span> kafkaParams = <span class="type">Map</span>[<span class="type">String</span>, <span class="type">Object</span>](</span><br><span class="line">    <span class="string">&quot;bootstrap.servers&quot;</span> -&gt; <span class="string">&quot;hadoop102:9092&quot;</span>,</span><br><span class="line">    <span class="string">&quot;key.deserializer&quot;</span> -&gt; classOf[<span class="type">StringDeserializer</span>],</span><br><span class="line">    <span class="string">&quot;value.deserializer&quot;</span> -&gt; classOf[<span class="type">StringDeserializer</span>],</span><br><span class="line">    <span class="string">&quot;group.id&quot;</span> -&gt; <span class="string">&quot;michong&quot;</span>,</span><br><span class="line">    <span class="string">&quot;auto.offset.reset&quot;</span> -&gt; <span class="string">&quot;latest&quot;</span>,</span><br><span class="line">    <span class="string">&quot;enable.auto.commit&quot;</span> -&gt; (<span class="literal">false</span>: java.lang.<span class="type">Boolean</span>)</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="comment">// TODO ... 消费数据</span></span><br><span class="line">  <span class="comment">// messages 是全部的数据</span></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定kafka数据源</span></span><br><span class="line"><span class="comment">     * ssc：StreamingContext的实例</span></span><br><span class="line"><span class="comment">     * LocationStrategies：位置策略，如果kafka的broker节点跟Executor在同一台机器上给一种策略，不在一台机器上给另外一种策略</span></span><br><span class="line"><span class="comment">     * 设定策略后会以最优的策略进行获取数据</span></span><br><span class="line"><span class="comment">     * 一般在企业中kafka节点跟Executor不会放到一台机器的，原因是kakfa是消息存储的，Executor用来做消息的计算，</span></span><br><span class="line"><span class="comment">     * 因此计算与存储分开，存储对磁盘要求高，计算对内存、CPU要求高</span></span><br><span class="line"><span class="comment">     * 如果Executor节点跟Broker节点在一起的话使用PreferBrokers策略，如果不在一起的话使用PreferConsistent策略</span></span><br><span class="line"><span class="comment">     * 使用PreferConsistent策略的话，将来在kafka中拉取了数据以后尽量将数据分散到所有的Executor上</span></span><br><span class="line"><span class="comment">     * ConsumerStrategies：消费者策略（指定如何消费）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="keyword">val</span> messages = <span class="type">KafkaUtils</span>.createDirectStream(ssc,</span><br><span class="line">    <span class="type">LocationStrategies</span>.<span class="type">PreferConsistent</span>,</span><br><span class="line">    <span class="type">ConsumerStrategies</span>.<span class="type">Subscribe</span>[<span class="type">String</span>, <span class="type">String</span>](<span class="type">KafkaTopic</span>, kafkaParams))</span><br><span class="line">  <span class="comment">// x.value获得数据里的值</span></span><br><span class="line">  messages.map(x =&gt; x.value())</span><br><span class="line">    .flatMap(_.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">    .map(x =&gt; (x, <span class="number">1</span>))</span><br><span class="line">    .reduceByKey(_ + _)</span><br><span class="line">    .print()</span><br><span class="line">  ssc.start()</span><br><span class="line">  ssc.awaitTermination()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="统计结果如下"><a href="#统计结果如下" class="headerlink" title="统计结果如下"></a>统计结果如下</h4><p><img src="https://file.buildworld.cn/img/20200907202538.png"></p><h3 id="5、DStream转换"><a href="#5、DStream转换" class="headerlink" title="5、DStream转换"></a>5、DStream转换</h3><h4 id="无状态转化操作"><a href="#无状态转化操作" class="headerlink" title="无状态转化操作"></a>无状态转化操作</h4><p><strong>上面的Wordcount词频统计代码就是使用的无状态转化操作。</strong></p><blockquote><p>无状态转化操作就是把简单的RDD转化操作应用到每个批次上，也就是转化DStream中的每一个RDD。部分无状态转化操作列在了下表中。注意，针对键值对的DStream转化操作(比如 reduceByKey())要添加<code>import StreamingContext._</code>才能在Scala中使用。</p><ul><li>map(func) ：对源DStream的每个元素，采用func函数进行转换，得到一个新的DStream；</li><li>flatMap(func)： 与map相似，但是每个输入项可用被映射为0个或者多个输出项；</li><li>filter(func)： 返回一个新的DStream，仅包含源DStream中满足函数func的项；</li><li>repartition(numPartitions)： 通过创建更多或者更少的分区改变DStream的并行程度；</li><li>union(otherStream)： 返回一个新的DStream，包含源DStream和其他DStream的元素；</li><li>count()：统计源DStream中每个RDD的元素数量；</li><li>reduce(func)：利用函数func聚集源DStream中每个RDD的元素，返回一个包含单元素RDDs的新DStream；</li><li>countByValue()：应用于元素类型为K的DStream上，返回一个（K，V）键值对类型的新DStream，每个键的值是在原DStream的每个RDD中的出现次数；</li><li>reduceByKey(func, [numTasks])：当在一个由(K,V)键值对组成的DStream上执行该操作时，返回一个新的由(K,V)键值对组成的DStream，每一个key的值均由给定的recuce函数（func）聚集起来；</li><li>join(otherStream, [numTasks])：当应用于两个DStream（一个包含（K,V）键值对,一个包含(K,W)键值对），返回一个包含(K, (V, W))键值对的新DStream；</li><li>cogroup(otherStream, [numTasks])：当应用于两个DStream（一个包含（K,V）键值对,一个包含(K,W)键值对），返回一个包含(K, Seq[V], Seq[W])的元组；</li><li>transform(func)：通过对源DStream的每个RDD应用RDD-to-RDD函数，创建一个新DStream。支持在新的DStream中做任何RDD操作。</li></ul></blockquote><p><img src="https://file.buildworld.cn/img/20200907210350.png"></p><h4 id="有状态转化操作"><a href="#有状态转化操作" class="headerlink" title="有状态转化操作"></a>有状态转化操作</h4><p><strong>将历史数据也拿过来分析</strong></p><h5 id="追踪状态变化-updateStateByKey-的转换"><a href="#追踪状态变化-updateStateByKey-的转换" class="headerlink" title="追踪状态变化(updateStateByKey)的转换"></a>追踪状态变化(updateStateByKey)的转换</h5><blockquote><p><code>UpdateStateByKey</code>原语用于记录历史记录，有时，我们需要在 DStream 中跨批次维护状态(例如流计算中累加wordcount)。针对这种情况，<code>updateStateByKey()</code> 为我们提供了对一个状态变量的访问，用于键值对形式的 DStream。给定一个由(键，事件)对构成的 DStream，并传递一个指定如何根据新的事件 更新每个键对应状态的函数，它可以构建出一个新的 DStream，其内部数据为(键，状态) 对。 </p><p><code>updateStateByKey()</code> 的结果会是一个新的 DStream，其内部的 RDD 序列是由每个时间区间对应的(键，状态)对组成的。</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.kafka.clients.consumer.<span class="type">ConsumerRecord</span></span><br><span class="line"><span class="keyword">import</span> org.apache.kafka.common.serialization.<span class="type">StringDeserializer</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.rdd.<span class="type">RDD</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.dstream.&#123;<span class="type">DStream</span>, <span class="type">InputDStream</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.kafka010._</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.streaming.&#123;<span class="type">Seconds</span>, <span class="type">StreamingContext</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.&#123;<span class="type">HashPartitioner</span>, <span class="type">SparkConf</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">KafkaDirectStream</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">  <span class="comment">// 更新方法</span></span><br><span class="line">  <span class="keyword">val</span> updateFunc = (it: <span class="type">Iterator</span>[(<span class="type">String</span>, <span class="type">Seq</span>[<span class="type">Int</span>], <span class="type">Option</span>[<span class="type">Int</span>])]) =&gt; &#123;</span><br><span class="line">    it.map &#123; <span class="keyword">case</span> (w, s, o) =&gt; (w, s.sum + o.getOrElse(<span class="number">0</span>)) &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> conf: <span class="type">SparkConf</span> = <span class="keyword">new</span> <span class="type">SparkConf</span>().setAppName(<span class="string">&quot;KafkaDirectStream&quot;</span>).setMaster(<span class="string">&quot;local[*]&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> ssc: <span class="type">StreamingContext</span> = <span class="keyword">new</span> <span class="type">StreamingContext</span>(conf, <span class="type">Seconds</span>(<span class="number">5</span>))</span><br><span class="line">    ssc.checkpoint(<span class="string">&quot;./ck&quot;</span>)</span><br><span class="line">    <span class="comment">//跟Kafka整合（直连方式，调用Kafka底层的消费数据的API）</span></span><br><span class="line">    <span class="keyword">val</span> brokerList = <span class="string">&quot;hadoop102:9092&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> kafkaParams = <span class="type">Map</span>[<span class="type">String</span>, <span class="type">Object</span>](</span><br><span class="line">      <span class="string">&quot;bootstrap.servers&quot;</span> -&gt; brokerList,</span><br><span class="line">      <span class="string">&quot;key.deserializer&quot;</span> -&gt; classOf[<span class="type">StringDeserializer</span>],</span><br><span class="line">      <span class="string">&quot;value.deserializer&quot;</span> -&gt; classOf[<span class="type">StringDeserializer</span>],</span><br><span class="line">      <span class="string">&quot;group.id&quot;</span> -&gt; <span class="string">&quot;michong&quot;</span>,</span><br><span class="line">      <span class="comment">//这个代表，任务启动之前产生的数据也要读</span></span><br><span class="line">      <span class="string">&quot;auto.offset.reset&quot;</span> -&gt; <span class="string">&quot;earliest&quot;</span>,</span><br><span class="line">      <span class="string">&quot;enable.auto.commit&quot;</span> -&gt; (<span class="literal">false</span>: java.lang.<span class="type">Boolean</span>)</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">val</span> topics = <span class="type">Array</span>(<span class="string">&quot;michong&quot;</span>)</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定kafka数据源</span></span><br><span class="line"><span class="comment">     * ssc：StreamingContext的实例</span></span><br><span class="line"><span class="comment">     * LocationStrategies：位置策略，如果kafka的broker节点跟Executor在同一台机器上给一种策略，不在一台机器上给另外一种策略</span></span><br><span class="line"><span class="comment">     * 设定策略后会以最优的策略进行获取数据</span></span><br><span class="line"><span class="comment">     * 一般在企业中kafka节点跟Executor不会放到一台机器的，原因是kakfa是消息存储的，Executor用来做消息的计算，</span></span><br><span class="line"><span class="comment">     * 因此计算与存储分开，存储对磁盘要求高，计算对内存、CPU要求高</span></span><br><span class="line"><span class="comment">     * 如果Executor节点跟Broker节点在一起的话使用PreferBrokers策略，如果不在一起的话使用PreferConsistent策略</span></span><br><span class="line"><span class="comment">     * 使用PreferConsistent策略的话，将来在kafka中拉取了数据以后尽量将数据分散到所有的Executor上</span></span><br><span class="line"><span class="comment">     * ConsumerStrategies：消费者策略（指定如何消费）</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">val</span> directStream: <span class="type">InputDStream</span>[<span class="type">ConsumerRecord</span>[<span class="type">String</span>, <span class="type">String</span>]] = <span class="type">KafkaUtils</span>.createDirectStream(ssc,</span><br><span class="line">      <span class="type">LocationStrategies</span>.<span class="type">PreferConsistent</span>,</span><br><span class="line">      <span class="type">ConsumerStrategies</span>.<span class="type">Subscribe</span>[<span class="type">String</span>, <span class="type">String</span>](topics, kafkaParams)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印出词频统计结果</span></span><br><span class="line">    <span class="keyword">val</span> result: <span class="type">DStream</span>[(<span class="type">String</span>, <span class="type">Int</span>)] = directStream.map(_.value()).flatMap(_.split(<span class="string">&quot; &quot;</span>))</span><br><span class="line">      .map((_, <span class="number">1</span>))</span><br><span class="line">      .updateStateByKey(updateFunc, <span class="keyword">new</span> <span class="type">HashPartitioner</span>(ssc.sparkContext.defaultParallelism), <span class="literal">true</span>)</span><br><span class="line">    result.print()</span><br><span class="line"></span><br><span class="line">    directStream.foreachRDD(rdd =&gt; &#123;</span><br><span class="line">      <span class="keyword">val</span> offsetRange: <span class="type">Array</span>[<span class="type">OffsetRange</span>] = rdd.asInstanceOf[<span class="type">HasOffsetRanges</span>].offsetRanges</span><br><span class="line">      <span class="keyword">val</span> maped: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">String</span>)] = rdd.map(record =&gt; (record.key, record.value))</span><br><span class="line">      <span class="comment">//计算逻辑</span></span><br><span class="line">      maped.foreach(println)</span><br><span class="line">      <span class="comment">//循环输出</span></span><br><span class="line">      println(<span class="string">&quot;************&quot;</span>+<span class="type">System</span>.currentTimeMillis()+<span class="string">&quot;************&quot;</span>)</span><br><span class="line">      <span class="keyword">for</span> (o &lt;- offsetRange) &#123;</span><br><span class="line">        println(<span class="string">s&quot;<span class="subst">$&#123;o.topic&#125;</span> <span class="subst">$&#123;o.partition&#125;</span> <span class="subst">$&#123;o.fromOffset&#125;</span> <span class="subst">$&#123;o.untilOffset&#125;</span>&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    ssc.start()</span><br><span class="line">    ssc.awaitTermination()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Window-Operations"><a href="#Window-Operations" class="headerlink" title="Window Operations"></a>Window Operations</h5><blockquote><p>Window Operations可以设置窗口的大小和滑动窗口的间隔来动态的获取当前Steaming的允许状态。基于窗口的操作会在一个比 StreamingContext 的批次间隔更长的时间范围内，通过整合多个批次的结果，计算出整个窗口的结果。</p></blockquote><p><img src="https://file.buildworld.cn/img/20200908094728.png"></p><p><strong>所有基于窗口的操作都需要两个参数，分别为窗口时长以及滑动步长，两者都必须是 StreamContext 的批次间隔的整数倍。</strong></p><h6 id="关于Window的操作有如下原语："><a href="#关于Window的操作有如下原语：" class="headerlink" title="关于Window的操作有如下原语："></a>关于Window的操作有如下原语：</h6><blockquote><ul><li>（1）<code>window(windowLength, slideInterval):</code> 基于对源DStream窗化的批次进行计算返回一个新的Dstream</li><li>（2）<code>countByWindow(windowLength, slideInterval)：</code>返回一个滑动窗口计数流中的元素。</li><li>（3）<code>reduceByWindow(func, windowLength, slideInterval)：</code>通过使用自定义函数整合滑动区间流元素来创建一个新的单元素流。</li><li>（4）<code>reduceByKeyAndWindow(func, windowLength, slideInterval, [numTasks])：</code>当在一个(K,V)对的DStream上调用此函数，会返回一个新(K,V)对的DStream，此处通过对滑动窗口中批次数据使用reduce函数来整合每个key的value值。Note:默认情况下，这个操作使用Spark的默认数量并行任务(本地是2)，在集群模式中依据配置属性(spark.default.parallelism)来做grouping。你可以通过设置可选参数numTasks来设置不同数量的tasks。</li><li>（5）<code>reduceByKeyAndWindow(func, invFunc, windowLength, slideInterval, [numTasks])：</code>这个函数是上述函数的更高效版本，每个窗口的reduce值都是通过用前一个窗的reduce值来递增计算。通过reduce进入到滑动窗口数据并”反向reduce”离开窗口的旧数据来实现这个操作。一个例子是随着窗口滑动对keys的“加”“减”计数。通过前边介绍可以想到，这个函数只适用于”可逆的reduce函数”，也就是这些reduce函数有相应的”反reduce”函数(以参数invFunc形式传入)。如前述函数，reduce任务的数量通过可选参数来配置。注意：为了使用这个操作，<a href="#checkpointing">检查点</a>必须可用。 </li><li>（6）<code>countByValueAndWindow(windowLength,slideInterval, [numTasks])：</code>对(K,V)对的DStream调用，返回(K,Long)对的新DStream，其中每个key的值是其在滑动窗口中频率。如上，可配置reduce任务数量。</li></ul><p><code>reduceByWindow()</code> 和 <code>reduceByKeyAndWindow()</code> 让我们可以对每个窗口更高效地进行归约操作。它们接收一个归约函数，在整个窗口上执行，比如 +。除此以外，它们还有一种特殊形式，通过只考虑新进入窗口的数据和离开窗口的数据，让 Spark 增量计算归约结果。这种特殊形式需要提供归约函数的一个逆函数，比 如 + 对应的逆函数为 -。对于较大的窗口，提供逆函数可以大大提高执行效率  </p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//窗口大小应该为采集周期的整数倍，窗口滑动的步长也应该为采集周期的整数倍</span></span><br><span class="line"><span class="keyword">val</span> windowDStream: <span class="type">DStream</span>[<span class="type">ConsumerRecord</span>[<span class="type">String</span>, <span class="type">String</span>]] = directStream.window(<span class="type">Seconds</span>(<span class="number">10</span>), <span class="type">Seconds</span>(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><h3 id="6、DStream输出"><a href="#6、DStream输出" class="headerlink" title="6、DStream输出"></a>6、DStream输出</h3><blockquote><p>输出操作指定了对流数据经转化操作得到的数据所要执行的操作(例如把结果推入外部数据库或输出到屏幕上)。与RDD中的惰性求值类似，如果一个DStream及其派生出的DStream都没有被执行输出操作，那么这些DStream就都不会被求值。如果StreamingContext中没有设定输出操作，整个context就都不会启动。 </p><p><strong>输出操作如下：</strong></p><ul><li><p>（1）<code>print()：</code>在运行流程序的驱动结点上打印DStream中每一批次数据的最开始10个元素。这用于开发和调试。在Python API中，同样的操作叫print()。</p></li><li><p>（2）<code>saveAsTextFiles(prefix, [suffix])：</code>以text文件形式存储这个DStream的内容。每一批次的存储文件名基于参数中的prefix和suffix。”prefix-Time_IN_MS[.suffix]”. </p></li><li><p>（3）<code>saveAsObjectFiles(prefix, [suffix])：</code>以Java对象序列化的方式将Stream中的数据保存为 SequenceFiles . 每一批次的存储文件名基于参数中的为”prefix-TIME_IN_MS[.suffix]”. Python中目前不可用。</p></li><li><p>（4）<code>saveAsHadoopFiles(prefix, [suffix])：</code>将Stream中的数据保存为 Hadoop files. 每一批次的存储文件名基于参数中的为”prefix-TIME_IN_MS[.suffix]”。<br>Python API Python中目前不可用。</p></li><li><p>（5）<code>foreachRDD(func)：</code>这是最通用的输出操作，即将函数 func 用于产生于 stream的每一个RDD。其中 参数传入的函数func应该实现将每一个RDD中数据推送到外部系统，如将RDD存入文件或者通过网络将其写入数据库。注意：函数func在运行流应用的驱动中被执行，同时其中一般函数RDD操作从而强制其对于流RDD的运算。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">windowDStream.foreachRDD(rdd =&gt; &#123;</span><br><span class="line">  <span class="keyword">val</span> offsetRange: <span class="type">Array</span>[<span class="type">OffsetRange</span>] = rdd.asInstanceOf[<span class="type">HasOffsetRanges</span>].offsetRanges</span><br><span class="line">  <span class="keyword">val</span> maped: <span class="type">RDD</span>[(<span class="type">String</span>, <span class="type">String</span>)] = rdd.map(record =&gt; (record.key, record.value))</span><br><span class="line">  <span class="comment">//计算逻辑</span></span><br><span class="line">  maped.foreach(println)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//循环输出</span></span><br><span class="line">  println(<span class="string">&quot;************&quot;</span>+<span class="type">System</span>.currentTimeMillis()+<span class="string">&quot;************&quot;</span>)</span><br><span class="line">  <span class="keyword">for</span> (o &lt;- offsetRange) &#123;</span><br><span class="line">    println(<span class="string">s&quot;<span class="subst">$&#123;o.topic&#125;</span> <span class="subst">$&#123;o.partition&#125;</span> <span class="subst">$&#123;o.fromOffset&#125;</span> <span class="subst">$&#123;o.untilOffset&#125;</span>&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><p>通用的输出操作foreachRDD()，它用来对DStream中的RDD运行任意计算。这和transform() 有些类似，都可以让我们访问任意RDD。在foreachRDD()中，可以重用我们在Spark中实现的所有行动操作。</p><p>比如，常见的用例之一是把数据写到诸如MySQL的外部数据库中。 注意：</p><ul><li>（1）连接不能写在driver层面；</li><li>（2）如果写在foreach则每个RDD都创建，得不偿失；</li><li>（3）增加foreachPartition，在分区创建。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
            <tag> SparkStreaming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BigData--大数据技术之SparkSQL</title>
      <link href="/2020/09/03/BigData-%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BSparkSQL/"/>
      <url>/2020/09/03/BigData-%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E4%B9%8BSparkSQL/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="https://file.buildworld.cn/img/20200810132517.png"></p><h3 id="一、Spark-SQL概述"><a href="#一、Spark-SQL概述" class="headerlink" title="一、Spark SQL概述"></a>一、Spark SQL概述</h3><h4 id="1、DataFrame"><a href="#1、DataFrame" class="headerlink" title="1、DataFrame"></a>1、DataFrame</h4><blockquote><p>与RDD类似，DataFrame也是一个分布式数据容器。然而DataFrame更像传统数据库的二维表格，除了数据以外，还记录数据的结构信息，即schema。同时，与Hive类似，DataFrame也支持嵌套数据类型（struct、array和map）。从API易用性的角度上看，DataFrame API提供的是一套高层的关系操作，比函数式的RDD API要更加友好，门槛更低。</p></blockquote><h4 id="2、DataSet"><a href="#2、DataSet" class="headerlink" title="2、DataSet"></a>2、DataSet</h4><blockquote><ul><li>1）是<code>Dataframe API</code>的一个扩展，是Spark最新的数据抽象。</li><li>2）用户友好的API风格，既具有类型安全检查也具有Dataframe的查询优化特性。</li><li>3）Dataset支持编解码器，当需要访问非堆上的数据时可以避免反序列化整个对象，提高了效率。</li><li>4）样例类被用来在Dataset中定义数据的结构信息，样例类中每个属性的名称直接映射到DataSet中的字段名称。</li><li>5） Dataframe是Dataset的特列，<code>DataFrame=Dataset[Row]</code> ，所以可以通过as方法将Dataframe转换为Dataset。Row是一个类型，跟Car、Person这些的类型一样，所有的表结构信息我都用Row来表示。</li><li>6）DataSet是强类型的。比如可以有Dataset[Car]，Dataset[Person].</li><li>7）DataFrame只是知道字段，但是不知道字段的类型，所以在执行这些操作的时候是没办法在编译的时候检查是否类型失败的，比如你可以对一个String进行减法操作，在执行的时候才报错，而DataSet不仅仅知道字段，而且知道字段类型，所以有更严格的错误检查。就跟JSON对象和类对象之间的类比。</li></ul></blockquote><p><img src="https://file.buildworld.cn/img/20200810163552.png"></p><h3 id="二、SparkSQL程序"><a href="#二、SparkSQL程序" class="headerlink" title="二、SparkSQL程序"></a>二、SparkSQL程序</h3><h4 id="1、user-json"><a href="#1、user-json" class="headerlink" title="1、user.json"></a>1、user.json</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;id&quot;</span> : <span class="string">&quot;1201&quot;</span>, <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;satish&quot;</span>, <span class="attr">&quot;age&quot;</span> : <span class="string">&quot;25&quot;</span>&#125;</span><br><span class="line">&#123;<span class="attr">&quot;id&quot;</span> : <span class="string">&quot;1202&quot;</span>, <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;krishna&quot;</span>, <span class="attr">&quot;age&quot;</span> : <span class="string">&quot;28&quot;</span>&#125;</span><br><span class="line">&#123;<span class="attr">&quot;id&quot;</span> : <span class="string">&quot;1203&quot;</span>, <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;amith&quot;</span>, <span class="attr">&quot;age&quot;</span> : <span class="string">&quot;39&quot;</span>&#125;</span><br><span class="line">&#123;<span class="attr">&quot;id&quot;</span> : <span class="string">&quot;1204&quot;</span>, <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;javed&quot;</span>, <span class="attr">&quot;age&quot;</span> : <span class="string">&quot;23&quot;</span>&#125;</span><br><span class="line">&#123;<span class="attr">&quot;id&quot;</span> : <span class="string">&quot;1205&quot;</span>, <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;prudvi&quot;</span>, <span class="attr">&quot;age&quot;</span> : <span class="string">&quot;23&quot;</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="2、基本使用"><a href="#2、基本使用" class="headerlink" title="2、基本使用"></a>2、基本使用</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//设置配置</span></span><br><span class="line">  <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Spark SQL&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//创建SparkSession</span></span><br><span class="line">  <span class="keyword">val</span> spark = <span class="type">SparkSession</span></span><br><span class="line">    .builder()</span><br><span class="line">    .appName(<span class="string">&quot;Spark SQL basic example&quot;</span>)</span><br><span class="line">    .config(sparkConf)</span><br><span class="line">    .getOrCreate()</span><br><span class="line"></span><br><span class="line">  <span class="comment">//加载json数据</span></span><br><span class="line">  <span class="keyword">val</span> dataFrame = spark.read.json(<span class="string">&quot;data\\user.json&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//创建user视图</span></span><br><span class="line">  dataFrame.createOrReplaceTempView(<span class="string">&quot;user&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//执行SQL语句，并打印结果</span></span><br><span class="line">  spark.sql(<span class="string">&quot;select * from user where age &gt; 25&quot;</span>).show()</span><br><span class="line"></span><br><span class="line">  <span class="comment">//关闭</span></span><br><span class="line">  spark.stop</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、相互转换"><a href="#3、相互转换" class="headerlink" title="3、相互转换"></a>3、相互转换</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置配置</span></span><br><span class="line"><span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Spark SQL&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建SparkSession</span></span><br><span class="line"><span class="keyword">val</span> spark = <span class="type">SparkSession</span></span><br><span class="line">  .builder()</span><br><span class="line">  .appName(<span class="string">&quot;Spark SQL basic example&quot;</span>)</span><br><span class="line">  .config(sparkConf)</span><br><span class="line">  .getOrCreate()</span><br><span class="line"></span><br><span class="line"><span class="comment">//进行转换之前，需要引入隐式转换规则</span></span><br><span class="line"><span class="keyword">import</span> spark.implicits._</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建RDD</span></span><br><span class="line"><span class="keyword">val</span> rdd = spark.sparkContext.makeRDD(<span class="type">List</span>((<span class="number">1</span>, <span class="string">&quot;michong&quot;</span>, <span class="number">20</span>), (<span class="number">2</span>, <span class="string">&quot;qjzxzxd&quot;</span>, <span class="number">21</span>), (<span class="number">3</span>, <span class="string">&quot;米虫&quot;</span>, <span class="number">18</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换为DF</span></span><br><span class="line"><span class="keyword">val</span> df = rdd.toDF(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>)</span><br><span class="line">df.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换为DS</span></span><br><span class="line"><span class="keyword">val</span> ds = df.as[<span class="type">User</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换为DF</span></span><br><span class="line"><span class="keyword">val</span> df1 = ds.toDF()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 转换为RDD</span></span><br><span class="line"><span class="keyword">val</span> rdd1 = df1.rdd</span><br><span class="line">rdd1.foreach(row=&gt;&#123;</span><br><span class="line">  println(row.getString(<span class="number">1</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line">spark.stop</span><br></pre></td></tr></table></figure><h4 id="4、RDD和DataSet之间相互转换"><a href="#4、RDD和DataSet之间相互转换" class="headerlink" title="4、RDD和DataSet之间相互转换"></a>4、RDD和DataSet之间相互转换</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置配置</span></span><br><span class="line"><span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Spark SQL&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建SparkSession</span></span><br><span class="line"><span class="keyword">val</span> spark = <span class="type">SparkSession</span></span><br><span class="line">  .builder()</span><br><span class="line">  .appName(<span class="string">&quot;Spark SQL basic example&quot;</span>)</span><br><span class="line">  .config(sparkConf)</span><br><span class="line">  .getOrCreate()</span><br><span class="line"></span><br><span class="line"><span class="comment">//进行转换之前，需要引入隐式转换规则</span></span><br><span class="line"><span class="keyword">import</span> spark.implicits._</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建RDD</span></span><br><span class="line"><span class="keyword">val</span> rdd = spark.sparkContext.makeRDD(<span class="type">List</span>((<span class="number">1</span>, <span class="string">&quot;michong&quot;</span>, <span class="number">20</span>), (<span class="number">2</span>, <span class="string">&quot;qjzxzxd&quot;</span>, <span class="number">21</span>), (<span class="number">3</span>, <span class="string">&quot;米虫&quot;</span>, <span class="number">18</span>)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> userRDD = rdd.map&#123;</span><br><span class="line">  <span class="keyword">case</span> (id,name,age)=&gt;&#123;</span><br><span class="line">    <span class="type">User</span>(id,name,age)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//RDD转换为DataSet</span></span><br><span class="line"><span class="keyword">val</span> userDS = userRDD.toDS()</span><br><span class="line"></span><br><span class="line"><span class="comment">//Represents the content of the Dataset as an `RDD` of `T`.</span></span><br><span class="line"><span class="keyword">val</span> rdd1 = userDS.rdd</span><br><span class="line"></span><br><span class="line">rdd1.foreach(println)</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line">spark.stop</span><br></pre></td></tr></table></figure><h4 id="5、用户自定义聚合函数"><a href="#5、用户自定义聚合函数" class="headerlink" title="5、用户自定义聚合函数"></a>5、用户自定义聚合函数</h4><h5 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h5><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">hello4</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//设置配置</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Spark SQL&quot;</span>)</span><br><span class="line">    <span class="comment">//创建SparkSession</span></span><br><span class="line">    <span class="keyword">val</span> spark = <span class="type">SparkSession</span></span><br><span class="line">      .builder()</span><br><span class="line">      .appName(<span class="string">&quot;Spark SQL basic example&quot;</span>)</span><br><span class="line">      .config(sparkConf)</span><br><span class="line">      .getOrCreate()</span><br><span class="line">    <span class="comment">//创建聚合函数</span></span><br><span class="line">    <span class="keyword">val</span> udaf = <span class="keyword">new</span> <span class="type">MyAgeAvgFunction</span></span><br><span class="line">    spark.udf.register(<span class="string">&quot;avgAge&quot;</span>,udaf)</span><br><span class="line">    <span class="comment">//使用聚合函数</span></span><br><span class="line">    <span class="keyword">val</span> frame = spark.read.json(<span class="string">&quot;data/user.json&quot;</span>)</span><br><span class="line">    frame.createOrReplaceTempView(<span class="string">&quot;user&quot;</span>)</span><br><span class="line">    spark.sql(<span class="string">&quot;select avgAge(age) from user&quot;</span>).show</span><br><span class="line"></span><br><span class="line">    spark.stop</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明用户自定义聚合函数</span></span><br><span class="line"><span class="comment">// 1）继承UserDefinedAggregateFunction</span></span><br><span class="line"><span class="comment">// 2）实现方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAgeAvgFunction</span> <span class="keyword">extends</span> <span class="title">UserDefinedAggregateFunction</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 函数输入的数据结构</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">inputSchema</span></span>: <span class="type">StructType</span> = &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="type">StructType</span>().add(<span class="string">&quot;age&quot;</span>, <span class="type">LongType</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 计算时的数据结构</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">bufferSchema</span></span>: <span class="type">StructType</span> = &#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="type">StructType</span>().add(<span class="string">&quot;sum&quot;</span>, <span class="type">LongType</span>).add(<span class="string">&quot;count&quot;</span>, <span class="type">LongType</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 函数返回的数据类型</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">dataType</span></span>: <span class="type">DataType</span> = <span class="type">DoubleType</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 函数是否稳定</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">deterministic</span></span>: <span class="type">Boolean</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//计算之前的缓冲区的初始化</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">initialize</span></span>(buffer: <span class="type">MutableAggregationBuffer</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    buffer(<span class="number">0</span>) = <span class="number">0</span>L</span><br><span class="line">    buffer(<span class="number">1</span>) = <span class="number">0</span>L</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据查询结果更新缓冲区的数据</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">update</span></span>(buffer: <span class="type">MutableAggregationBuffer</span>, input: <span class="type">Row</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    buffer(<span class="number">0</span>) = buffer.getLong(<span class="number">0</span>) + input.getLong(<span class="number">0</span>)</span><br><span class="line">    buffer(<span class="number">1</span>) = buffer.getLong(<span class="number">1</span>) + <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 将多个节点的缓冲区合并</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>(buffer1: <span class="type">MutableAggregationBuffer</span>, buffer2: <span class="type">Row</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// sum</span></span><br><span class="line">    buffer1(<span class="number">0</span>) = buffer1.getLong(<span class="number">0</span>) + buffer2.getLong(<span class="number">0</span>)</span><br><span class="line">    <span class="comment">// count</span></span><br><span class="line">    buffer1(<span class="number">1</span>) = buffer1.getLong(<span class="number">1</span>) + buffer2.getLong(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 计算</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">evaluate</span></span>(buffer: <span class="type">Row</span>): <span class="type">Any</span> = &#123;</span><br><span class="line">    buffer.getLong(<span class="number">0</span>).toDouble / buffer.getLong(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="方式二（强类型）"><a href="#方式二（强类型）" class="headerlink" title="方式二（强类型）"></a>方式二（强类型）</h5><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.spark.<span class="type">SparkConf</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.&#123;<span class="type">DataFrame</span>, <span class="type">Dataset</span>, <span class="type">Encoder</span>, <span class="type">Encoders</span>, <span class="type">SparkSession</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.expressions.<span class="type">Aggregator</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">hello5</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">//设置配置</span></span><br><span class="line">    <span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Spark SQL&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建SparkSession</span></span><br><span class="line">    <span class="keyword">val</span> spark = <span class="type">SparkSession</span></span><br><span class="line">      .builder()</span><br><span class="line">      .appName(<span class="string">&quot;Spark SQL basic example&quot;</span>)</span><br><span class="line">      .config(sparkConf)</span><br><span class="line">      .getOrCreate()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 引入隐式转换</span></span><br><span class="line">    <span class="keyword">import</span> spark.implicits._</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建聚合函数</span></span><br><span class="line">    <span class="keyword">val</span> udaf = <span class="keyword">new</span> <span class="type">MyAgeAvgClassFunction</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//将聚合函数转化为查询列</span></span><br><span class="line">    <span class="keyword">val</span> avgCol = udaf.toColumn.name(<span class="string">&quot;avgAge&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用聚合函数</span></span><br><span class="line">    <span class="keyword">val</span> frame:<span class="type">DataFrame</span> = spark.read.json(<span class="string">&quot;data/user.json&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> userDS :<span class="type">Dataset</span>[<span class="type">UserBean</span>]= frame.as[<span class="type">UserBean</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">//应用函数</span></span><br><span class="line">    userDS.select(avgCol).show()</span><br><span class="line">    spark.stop</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">UserBean</span>(<span class="params">name: <span class="type">String</span>, age: <span class="type">BigInt</span></span>)</span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">AvgBuffer</span>(<span class="params">var sum: <span class="type">BigInt</span>, var count: <span class="type">Int</span></span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明用户自定义聚合函数(强类型)</span></span><br><span class="line"><span class="comment">// 1）继承Aggregator</span></span><br><span class="line"><span class="comment">// 2）实现方法</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyAgeAvgClassFunction</span> <span class="keyword">extends</span> <span class="title">Aggregator</span>[<span class="type">UserBean</span>, <span class="type">AvgBuffer</span>, <span class="type">Double</span>] </span>&#123;</span><br><span class="line">  <span class="comment">//初始化</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">zero</span></span>: <span class="type">AvgBuffer</span> = &#123;</span><br><span class="line">    <span class="type">AvgBuffer</span>(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 聚合数据</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @param b</span></span><br><span class="line"><span class="comment">   * @param a</span></span><br><span class="line"><span class="comment">   * @return</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">reduce</span></span>(b: <span class="type">AvgBuffer</span>, a: <span class="type">UserBean</span>): <span class="type">AvgBuffer</span> = &#123;</span><br><span class="line">    b.sum = b.sum + a.age</span><br><span class="line">    b.count = b.count + <span class="number">1</span></span><br><span class="line">    b</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 缓冲区合并操作</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @param b1</span></span><br><span class="line"><span class="comment">   * @param b2</span></span><br><span class="line"><span class="comment">   * @return</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">merge</span></span>(b1: <span class="type">AvgBuffer</span>, b2: <span class="type">AvgBuffer</span>): <span class="type">AvgBuffer</span> = &#123;</span><br><span class="line">    b1.sum = b1.sum + b2.sum</span><br><span class="line">    b1.count = b1.count + b2.count</span><br><span class="line">    b1</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 完成计算</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * @param reduction</span></span><br><span class="line"><span class="comment">   * @return</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">finish</span></span>(reduction: <span class="type">AvgBuffer</span>): <span class="type">Double</span> = &#123;</span><br><span class="line">    reduction.sum.toDouble / reduction.count</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">bufferEncoder</span></span>: <span class="type">Encoder</span>[<span class="type">AvgBuffer</span>] = <span class="type">Encoders</span>.product</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">outputEncoder</span></span>: <span class="type">Encoder</span>[<span class="type">Double</span>] = <span class="type">Encoders</span>.scalaDouble</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6、Spark连接MySQL数据库"><a href="#6、Spark连接MySQL数据库" class="headerlink" title="6、Spark连接MySQL数据库"></a>6、Spark连接MySQL数据库</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置配置</span></span><br><span class="line"><span class="keyword">val</span> sparkConf = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;Spark SQL&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建SparkSession</span></span><br><span class="line"><span class="keyword">val</span> spark = <span class="type">SparkSession</span></span><br><span class="line">  .builder()</span><br><span class="line">  .appName(<span class="string">&quot;Spark SQL basic example&quot;</span>)</span><br><span class="line">  .config(sparkConf)</span><br><span class="line">  .getOrCreate()</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> jdbcDF = spark.read</span><br><span class="line">  .format(<span class="string">&quot;jdbc&quot;</span>)</span><br><span class="line">  .option(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;jdbc:mysql://127.0.0.1:3306/qiniuyun?serverTimezone=CTT&amp;useUnicode=true&amp;characterEncoding=UTF8&quot;</span>)</span><br><span class="line">  .option(<span class="string">&quot;dbtable&quot;</span>, <span class="string">&quot;myfile&quot;</span>)</span><br><span class="line">  .option(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>)</span><br><span class="line">  .option(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;root&quot;</span>)</span><br><span class="line">  .load()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建视图</span></span><br><span class="line">jdbcDF.createOrReplaceTempView(<span class="string">&quot;myfile&quot;</span>)</span><br><span class="line"><span class="comment">// 查询出数据</span></span><br><span class="line">spark.sql(<span class="string">&quot;select * from myfile&quot;</span>).show</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
            <tag> SparkSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BigData--大数据分析引擎Spark</title>
      <link href="/2020/08/03/BigData-%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%BC%95%E6%93%8ESpark/"/>
      <url>/2020/08/03/BigData-%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%BC%95%E6%93%8ESpark/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一、Spark运行"><a href="#一、Spark运行" class="headerlink" title="一、Spark运行"></a>一、Spark运行</h2><h3 id="1、Spark内置模块"><a href="#1、Spark内置模块" class="headerlink" title="1、Spark内置模块"></a>1、Spark内置模块</h3><p><img src="https://file.buildworld.cn/img/20200803102434.png"></p><blockquote><ul><li><code>Spark Core</code>：实现了Spark的基本功能，包含任务调度、内存管理、错误恢复、与存储系统交互等模块。Spark Core中还包含了对弹性分布式数据集(Resilient Distributed DataSet，简称RDD)的API定义。 </li><li><code>Spark SQL</code>：是Spark用来操作结构化数据的程序包。通过Spark SQL，我们可以使用 SQL或者Apache Hive版本的SQL方言(HQL)来查询数据。Spark SQL支持多种数据源，比如Hive表、Parquet以及JSON等。 </li><li><code>Spark Streaming</code>：是Spark提供的对实时数据进行流式计算的组件。提供了用来操作数据流的API，并且与Spark Core中的 RDD API高度对应。 </li><li><code>Spark MLlib</code>：提供常见的机器学习(ML)功能的程序库。包括分类、回归、聚类、协同过滤等，还提供了模型评估、数据 导入等额外的支持功能。 </li><li><code>集群管理器</code>：Spark 设计为可以高效地在一个计算节点到数千个计算节点之间伸缩计 算。为了实现这样的要求，同时获得最大灵活性，Spark支持在各种集群管理器(Cluster Manager)上运行，包括Hadoop YARN、Apache Mesos，以及Spark自带的一个简易调度 器，叫作<strong>独立调度器</strong>。</li></ul></blockquote><h3 id="2、spark通用运行建议流程"><a href="#2、spark通用运行建议流程" class="headerlink" title="2、spark通用运行建议流程"></a>2、spark通用运行建议流程</h3><p><img src="https://file.buildworld.cn/img/20200726140437.png"></p><blockquote><ul><li>textFile(“input”)：读取本地文件input文件夹数据；</li><li>flatMap(_.split(“ “))：压平操作，按照空格分割符将一行数据映射成一个个单词；</li><li>map((_,1))：对每一个元素操作，将单词映射为元组；</li><li>reduceByKey(<em>+</em>)：按照key将值进行聚合，相加；</li><li>collect：将数据收集到Driver端展示。</li></ul></blockquote><h3 id="3、Spark和yarn联动"><a href="#3、Spark和yarn联动" class="headerlink" title="3、Spark和yarn联动"></a>3、Spark和yarn联动</h3><p><img src="https://file.buildworld.cn/img/20200726174442.png"></p><h2 id="二、RDD转换"><a href="#二、RDD转换" class="headerlink" title="二、RDD转换"></a>二、RDD转换</h2><h3 id="1、-Value类型"><a href="#1、-Value类型" class="headerlink" title="1、 Value类型"></a>1、 Value类型</h3><h4 id="1）map-func"><a href="#1）map-func" class="headerlink" title="1）map(func)"></a>1）map(func)</h4><blockquote><p>返回一个新的RDD，该RDD由每一个输入元素经过func函数转换后组成</p></blockquote><h4 id="2）mapPartitions-func"><a href="#2）mapPartitions-func" class="headerlink" title="2）mapPartitions(func)"></a>2）mapPartitions(func)</h4><blockquote><p>类似于map，但独立地在RDD的每一个分片上运行，因此在类型为T的RDD上运行时，func的函数类型必须是Iterator[T] =&gt; Iterator[U]。假设有N个元素，有M个分区，那么map的函数的将被调用N次,而mapPartitions被调用M次,一个函数一次处理所有分区。</p></blockquote><h4 id="3）mapPartitionsWithIndex-func"><a href="#3）mapPartitionsWithIndex-func" class="headerlink" title="3）mapPartitionsWithIndex(func)"></a>3）mapPartitionsWithIndex(func)</h4><blockquote><p>类似于mapPartitions，但func带有一个整数参数表示分片的索引值，因此在类型为T的RDD上运行时，func的函数类型必须是(Int, Interator[T]) =&gt; Iterator[U]；</p></blockquote><p><strong>map()和mapPartition()的区别</strong></p><blockquote><ul><li>map()：每次处理一条数据。</li><li>mapPartition()：每次处理一个分区的数据，这个分区的数据处理完后，原RDD中分区的数据才能释放，可能导致OOM。</li></ul></blockquote><h4 id="4）flatMap-func"><a href="#4）flatMap-func" class="headerlink" title="4）flatMap(func)"></a>4）flatMap(func)</h4><blockquote><p>类似于map，但是每一个输入元素可以被映射为0或多个输出元素（所以func应该返回一个序列，而不是单一元素）</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> config = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;WordCount&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(config)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> listRDD: <span class="type">RDD</span>[<span class="type">List</span>[<span class="type">Int</span>]] = sc.makeRDD(<span class="type">Array</span>(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>), <span class="type">List</span>(<span class="number">3</span>, <span class="number">4</span>)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> flatMapRDD = listRDD.flatMap(datas =&gt; datas)</span><br><span class="line"></span><br><span class="line">flatMapRDD.collect().foreach(println)</span><br></pre></td></tr></table></figure><h4 id="5）glom"><a href="#5）glom" class="headerlink" title="5）glom"></a>5）glom</h4><blockquote><p>将每一个分区形成一个数组，形成新的RDD类型时RDD[Array[T]]</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> config = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;WordCount&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(config)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> listRDD = sc.makeRDD(<span class="number">1</span> to <span class="number">16</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> flatMapRDD = listRDD.glom()</span><br><span class="line"></span><br><span class="line">flatMapRDD.collect().foreach(array=&gt;&#123;</span><br><span class="line">  println(array.mkString(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="6）groupBy-func"><a href="#6）groupBy-func" class="headerlink" title="6）groupBy(func)"></a>6）groupBy(func)</h4><blockquote><p>分组，按照传入函数的返回值进行分组。将相同的key对应的值放入一个迭代器。</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> config = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;WordCount&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(config)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> listRDD = sc.makeRDD(<span class="number">1</span> to <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> groupByRDD = listRDD.groupBy(i =&gt; i % <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">groupByRDD.collect().foreach(println)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印结果</span></span><br><span class="line">(<span class="number">0</span>,<span class="type">CompactBuffer</span>(<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">16</span>))</span><br><span class="line">(<span class="number">1</span>,<span class="type">CompactBuffer</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">15</span>))</span><br></pre></td></tr></table></figure><h4 id="7）filter-func"><a href="#7）filter-func" class="headerlink" title="7）filter(func)"></a>7）filter(func)</h4><blockquote><p>过滤。返回一个新的RDD，该RDD由经过func函数计算后返回值为true的输入元素组成。</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> config = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;WordCount&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(config)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> listRDD = sc.makeRDD(<span class="number">1</span> to <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> filterRDD = listRDD.filter(i =&gt; (i % <span class="number">2</span>) == <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">filterRDD.collect().foreach(println)</span><br></pre></td></tr></table></figure><h4 id="8）sample-withReplacement-fraction-seed"><a href="#8）sample-withReplacement-fraction-seed" class="headerlink" title="8）sample(withReplacement, fraction, seed)"></a>8）sample(withReplacement, fraction, seed)</h4><blockquote><p>以指定的随机种子随机抽样出数量为fraction的数据，withReplacement表示是抽出的数据是否放回，true为有放回的抽样，false为无放回的抽样，seed用于指定随机数生成器种子。</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> config = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;WordCount&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(config)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> listRDD = sc.makeRDD(<span class="number">1</span> to <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> sampleRDD = listRDD.sample(<span class="literal">false</span>, <span class="number">0.4</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">sampleRDD.collect().foreach(println)</span><br></pre></td></tr></table></figure><h4 id="9）distinct-numTasks"><a href="#9）distinct-numTasks" class="headerlink" title="9）distinct([numTasks]))"></a>9）distinct([numTasks]))</h4><blockquote><p>对源RDD进行去重后返回一个新的RDD。默认情况下，只有8个并行任务来操作，但是可以传入一个可选的numTasks参数改变它。</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> config = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;WordCount&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(config)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> listRDD = sc.makeRDD(<span class="number">1</span> to <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> distinctRDD = listRDD.distinct()</span><br><span class="line"></span><br><span class="line">distinctRDD.collect().foreach(println)</span><br></pre></td></tr></table></figure><h4 id="10）coalesce-numPartitions"><a href="#10）coalesce-numPartitions" class="headerlink" title="10）coalesce(numPartitions)"></a>10）coalesce(numPartitions)</h4><blockquote><p>缩减分区数，用于大数据集过滤后，提高小数据集的执行效率。</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> config = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;WordCount&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(config)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> listRDD = sc.makeRDD(<span class="number">1</span> to <span class="number">16</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">println(<span class="string">&quot;缩减分区前=&quot;</span> + listRDD.partitions.size)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> coalesceRDD = listRDD.coalesce(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">println(<span class="string">&quot;缩减分区后=&quot;</span> + coalesceRDD.partitions.size)</span><br></pre></td></tr></table></figure><h4 id="11）-repartition-numPartitions"><a href="#11）-repartition-numPartitions" class="headerlink" title="11） repartition(numPartitions)"></a>11） repartition(numPartitions)</h4><blockquote><p>根据分区数，重新通过网络随机洗牌所有数据。</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> config = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;WordCount&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(config)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> listRDD = sc.makeRDD(<span class="number">1</span> to <span class="number">16</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> repartitionRDD = listRDD.repartition(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">repartitionRDD.collect().foreach(println)</span><br></pre></td></tr></table></figure><p><strong>coalesce和repartition的区别</strong></p><ul><li><ol><li>coalesce重新分区，可以选择是否进行shuffle过程。由参数<code>shuffle: Boolean = false/true</code>决定。</li></ol></li><li><ol start="2"><li>repartition实际上是调用的coalesce，默认是进行shuffle的。源码如下：</li></ol></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">repartition</span></span>(numPartitions: <span class="type">Int</span>)(<span class="keyword">implicit</span> ord: <span class="type">Ordering</span>[<span class="type">T</span>] = <span class="literal">null</span>): <span class="type">RDD</span>[<span class="type">T</span>] = withScope &#123;</span><br><span class="line"> coalesce(numPartitions, shuffle = <span class="literal">true</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="12）sortBy-func-ascending-numTasks"><a href="#12）sortBy-func-ascending-numTasks" class="headerlink" title="12）sortBy(func,[ascending], [numTasks])"></a>12）sortBy(func,[ascending], [numTasks])</h4><blockquote><p>使用func先对数据进行处理，按照处理后的数据比较结果排序，默认为正序(从小到大)。</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> config = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;WordCount&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(config)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> listRDD = sc.makeRDD(<span class="number">1</span> to <span class="number">16</span>, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//安装除以2余数来排序</span></span><br><span class="line"><span class="keyword">val</span> sortByRDD = listRDD.sortBy(x=&gt;x%<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">sortByRDD.collect().foreach(println)</span><br></pre></td></tr></table></figure><h4 id="13）pipe-command-envVars"><a href="#13）pipe-command-envVars" class="headerlink" title="13）pipe(command, [envVars])"></a>13）pipe(command, [envVars])</h4><blockquote><p>管道，针对每个分区，都执行一个shell脚本，返回输出的RDD。</p></blockquote><h3 id="2、双Value类型"><a href="#2、双Value类型" class="headerlink" title="2、双Value类型"></a>2、双Value类型</h3><h4 id="1）union-otherDataset"><a href="#1）union-otherDataset" class="headerlink" title="1）union(otherDataset)"></a>1）union(otherDataset)</h4><blockquote><p>对源RDD和参数RDD求并集后返回一个新的RDD。</p></blockquote><h4 id="2）subtract-otherDataset"><a href="#2）subtract-otherDataset" class="headerlink" title="2）subtract (otherDataset)"></a>2）subtract (otherDataset)</h4><blockquote><p>计算差的一种函数，去除两个RDD中相同的元素，不同的RDD将保留下来。</p></blockquote><h4 id="3）intersection-otherDataset"><a href="#3）intersection-otherDataset" class="headerlink" title="3）intersection(otherDataset)"></a>3）intersection(otherDataset)</h4><blockquote><p>对源RDD和参数RDD求交集后返回一个新的RDD。</p></blockquote><h4 id="4）cartesian-otherDataset"><a href="#4）cartesian-otherDataset" class="headerlink" title="4）cartesian(otherDataset)"></a>4）cartesian(otherDataset)</h4><blockquote><p>笛卡尔积<strong>（尽量避免使用）</strong></p></blockquote><h4 id="5）zip-otherDataset"><a href="#5）zip-otherDataset" class="headerlink" title="5）zip(otherDataset)"></a>5）zip(otherDataset)</h4><blockquote><p>将两个RDD组合成Key/Value形式的RDD,这里默认两个RDD的partition数量以及元素数量都相同，否则会抛出异常。</p></blockquote><h3 id="3、Key-Value类型"><a href="#3、Key-Value类型" class="headerlink" title="3、Key-Value类型"></a>3、Key-Value类型</h3><h4 id="1）partitionBy"><a href="#1）partitionBy" class="headerlink" title="1）partitionBy"></a>1）partitionBy</h4><blockquote><p>对pairRDD进行分区操作，如果原有的partionRDD和现有的partionRDD是一致的话就不进行分区， 否则会生成ShuffleRDD，即会产生shuffle过程。</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> config = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;WordCount&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(config)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> listRDD = sc.makeRDD(<span class="type">List</span>((<span class="string">&quot;a&quot;</span>,<span class="number">1</span>),(<span class="string">&quot;b&quot;</span>,<span class="number">2</span>),(<span class="string">&quot;c&quot;</span>,<span class="number">3</span>)))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> partRDD = listRDD.partitionBy(<span class="keyword">new</span> <span class="type">MyPartitioner</span>(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">  partRDD.saveAsTextFile(<span class="string">&quot;output&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPartitioner</span>(<span class="params">partitions:<span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Partitioner</span></span>&#123;</span><br><span class="line">  <span class="comment">//设置分区数目</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">numPartitions</span></span>: <span class="type">Int</span> = &#123;</span><br><span class="line">    partitions</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//设置数据存放位置</span></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">getPartition</span></span>(key: <span class="type">Any</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2）groupByKey"><a href="#2）groupByKey" class="headerlink" title="2）groupByKey"></a>2）groupByKey</h4><blockquote><p>groupByKey也是对每个key进行操作，但只生成一个<code>sequence</code>。</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> config = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;WordCount&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(config)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> words = <span class="type">Array</span>(<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>, <span class="string">&quot;three&quot;</span>, <span class="string">&quot;three&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> wordPairsRDD = sc.parallelize(words).map(word =&gt; (word, <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> group = wordPairsRDD.groupByKey()</span><br><span class="line"></span><br><span class="line"><span class="comment">//将相同key对应值聚合到一个sequence中</span></span><br><span class="line">group.collect().foreach(println)</span><br><span class="line"><span class="comment">//计算相同key对应值的相加结果</span></span><br><span class="line">group.map(t=&gt;(t._1,t._2.sum)).foreach(println)</span><br></pre></td></tr></table></figure><h4 id="3）reduceByKey-func-numTasks"><a href="#3）reduceByKey-func-numTasks" class="headerlink" title="3）reduceByKey(func, [numTasks])"></a>3）reduceByKey(func, [numTasks])</h4><blockquote><p>在一个(K,V)的RDD上调用，返回一个(K,V)的RDD，使用指定的reduce函数，将相同key的值聚合到一起，reduce任务的个数可以通过第二个可选的参数来设置。</p></blockquote><p><strong>reduceByKey和groupByKey的区别</strong></p><blockquote><ul><li><ol><li>reduceByKey：按照key进行聚合，在shuffle之前有combine（预聚合）操作，返回结果是RDD[k,v].</li></ol></li><li><ol start="2"><li>groupByKey：按照key进行分组，直接进行shuffle。</li></ol></li><li><ol start="3"><li>开发指导：reduceByKey比groupByKey快，建议使用。但是需要注意是否会影响业务逻辑。</li></ol></li></ul></blockquote><p><img src="https://file.buildworld.cn/img/20200803194634.png"></p><h4 id="4）aggregateByKey"><a href="#4）aggregateByKey" class="headerlink" title="4）aggregateByKey"></a>4）aggregateByKey</h4><blockquote><p>参数：<code>(zeroValue:U,[partitioner: Partitioner]) (seqOp: (U, V) =&gt; U,combOp: (U, U) =&gt; U)</code></p><ul><li><ol><li>作用：在kv对的RDD中，，按key将value进行分组合并，合并时，将每个value和初始值作为seq函数的参数，进行计算，返回的结果作为一个新的kv对，然后再将结果按照key进行合并，最后将每个分组的value传递给combine函数进行计算（先将前两个value进行计算，将返回结果和下一个value传给combine函数，以此类推），将key与计算结果作为一个新的kv对输出。</li></ol></li><li><ol start="2"><li>参数描述：</li></ol></li></ul><p>（1）<code>zeroValue</code>：给每一个分区中的每一个key一个初始值；</p><p>（2）<code>seqOp</code>：函数用于在每一个分区中用初始值逐步迭代value；</p><p>（3）<code>combOp</code>：函数用于合并每个分区中的结果。</p></blockquote><p><img src="https://file.buildworld.cn/img/20200804105505.png"></p><p><strong>创建一个pairRDD，取出每个分区相同key对应值的最大值，然后相加</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> config = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;WordCount&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(config)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> rdd = sc.parallelize(<span class="type">List</span>((<span class="string">&quot;a&quot;</span>, <span class="number">3</span>), (<span class="string">&quot;a&quot;</span>, <span class="number">2</span>), (<span class="string">&quot;c&quot;</span>, <span class="number">4</span>), (<span class="string">&quot;b&quot;</span>, <span class="number">3</span>), (<span class="string">&quot;c&quot;</span>, <span class="number">6</span>), (<span class="string">&quot;c&quot;</span>, <span class="number">8</span>)), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">rdd.glom().collect().foreach(println)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> value = rdd.aggregateByKey(<span class="number">0</span>)(math.max(_, _), _ + _)</span><br><span class="line"></span><br><span class="line">value.collect().foreach(println)</span><br></pre></td></tr></table></figure><h4 id="5）foldByKey"><a href="#5）foldByKey" class="headerlink" title="5）foldByKey"></a>5）foldByKey</h4><blockquote><p>参数：<code>(zeroValue: V)(func: (V, V) =&gt; V): RDD[(K, V)]</code></p></blockquote><ul><li><ol><li>作用：aggregateByKey的简化操作，seqop和combop相同</li></ol></li><li><ol start="2"><li>需求：创建一个pairRDD，计算相同key对应值的相加结果</li></ol></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> agg = rdd.foldByKey(<span class="number">0</span>)(_+_)</span><br></pre></td></tr></table></figure><h4 id="6）combineByKey-C"><a href="#6）combineByKey-C" class="headerlink" title="6）combineByKey[C]"></a>6）combineByKey[C]</h4><blockquote><p>参数：<code>(createCombiner: V =&gt; C, mergeValue: (C, V) =&gt; C, mergeCombiners: (C, C) =&gt; C)</code> </p></blockquote><blockquote><ul><li><ol><li>作用：对相同K，把V合并成一个集合。</li></ol></li><li><ol start="2"><li>参数描述：</li></ol><p>（1）createCombiner: combineByKey() 会遍历分区中的所有元素，因此每个元素的键要么还没有遇到过，要么就和之前的某个元素的键相同。如果这是一个新的元素,combineByKey()会使用一个叫作createCombiner()的函数来创建那个键对应的累加器的初始值</p><p>（2）mergeValue: 如果这是一个在处理当前分区之前已经遇到的键，它会使用mergeValue()方法将该键的累加器对应的当前值与这个新的值进行合并</p><p>（3）mergeCombiners: 由于每个分区都是独立处理的， 因此对于同一个键可以有多个累加器。如果有两个或者更多的分区都有对应同一个键的累加器， 就需要使用用户提供的 mergeCombiners() 方法将各个分区的结果进行合并。</p></li></ul></blockquote><p><img src="https://file.buildworld.cn/img/20200804152509.png"></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> config = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;WordCount&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(config)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> input = sc.parallelize(<span class="type">Array</span>((<span class="string">&quot;a&quot;</span>, <span class="number">88</span>), (<span class="string">&quot;b&quot;</span>, <span class="number">95</span>), (<span class="string">&quot;a&quot;</span>, <span class="number">91</span>), (<span class="string">&quot;b&quot;</span>, <span class="number">93</span>), (<span class="string">&quot;a&quot;</span>, <span class="number">95</span>), (<span class="string">&quot;b&quot;</span>, <span class="number">98</span>)),<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> value = input.combineByKey(x =&gt; x, (x: <span class="type">Int</span>, y: <span class="type">Int</span>) =&gt; x + y, (x: <span class="type">Int</span>, y: <span class="type">Int</span>) =&gt; x + y)</span><br><span class="line"></span><br><span class="line">value.collect().foreach(println)</span><br></pre></td></tr></table></figure><h4 id="7）sortByKey-ascending-numTasks"><a href="#7）sortByKey-ascending-numTasks" class="headerlink" title="7）sortByKey([ascending], [numTasks])"></a>7）sortByKey([ascending], [numTasks])</h4><blockquote><p>作用：在一个(K,V)的RDD上调用，K必须实现Ordered接口，返回一个按照key进行排序的(K,V)的RDD</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> input = sc.parallelize(<span class="type">Array</span>((<span class="string">&quot;a&quot;</span>, <span class="number">88</span>), (<span class="string">&quot;b&quot;</span>, <span class="number">95</span>), (<span class="string">&quot;a&quot;</span>, <span class="number">91</span>), (<span class="string">&quot;b&quot;</span>, <span class="number">93</span>), (<span class="string">&quot;a&quot;</span>, <span class="number">95</span>), (<span class="string">&quot;b&quot;</span>, <span class="number">98</span>)),<span class="number">2</span>)</span><br><span class="line"><span class="keyword">val</span> value1 = input.sortByKey(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h4 id="8）mapValues"><a href="#8）mapValues" class="headerlink" title="8）mapValues"></a>8）mapValues</h4><blockquote><p>针对于(K,V)形式的类型只对V进行操作</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> config = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;WordCount&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(config)</span><br><span class="line"><span class="keyword">val</span> input = sc.parallelize(<span class="type">Array</span>((<span class="string">&quot;a&quot;</span>, <span class="number">88</span>), (<span class="string">&quot;b&quot;</span>, <span class="number">95</span>), (<span class="string">&quot;a&quot;</span>, <span class="number">91</span>), (<span class="string">&quot;b&quot;</span>, <span class="number">93</span>), (<span class="string">&quot;a&quot;</span>, <span class="number">95</span>), (<span class="string">&quot;b&quot;</span>, <span class="number">98</span>)), <span class="number">2</span>)</span><br><span class="line"><span class="keyword">val</span> value1 = input.mapValues(_ + <span class="number">100</span>)</span><br><span class="line">value1.collect().foreach(println)</span><br></pre></td></tr></table></figure><h4 id="9）join-otherDataset-numTasks"><a href="#9）join-otherDataset-numTasks" class="headerlink" title="9）join(otherDataset, [numTasks])"></a>9）join(otherDataset, [numTasks])</h4><blockquote><p>在类型为(K,V)和(K,W)的RDD上调用，返回一个相同key对应的所有元素对在一起的(K,(V,W))的RDD</p></blockquote><h4 id="10）cogroup-otherDataset-numTasks"><a href="#10）cogroup-otherDataset-numTasks" class="headerlink" title="10）cogroup(otherDataset, [numTasks])"></a>10）cogroup(otherDataset, [numTasks])</h4><blockquote><p>在类型为(K,V)和(K,W)的RDD上调用，返回一个(K,(Iterable<V>,Iterable<W>))类型的RDD</p></blockquote><h3 id="三、Action（行动算子）"><a href="#三、Action（行动算子）" class="headerlink" title="三、Action（行动算子）"></a>三、Action（行动算子）</h3><h4 id="1）reduce-func"><a href="#1）reduce-func" class="headerlink" title="1）reduce(func)"></a>1）reduce(func)</h4><blockquote><p>通过func函数聚集RDD中的所有元素，先聚合分区内数据，再聚合分区间数据。</p></blockquote><h4 id="2）collect"><a href="#2）collect" class="headerlink" title="2）collect()"></a>2）collect()</h4><blockquote><p>在驱动程序中，以数组的形式返回数据集的所有元素。</p></blockquote><h4 id="3）-count"><a href="#3）-count" class="headerlink" title="3） count()"></a>3） count()</h4><blockquote><p>返回RDD中元素的个数</p></blockquote><h4 id="4）first"><a href="#4）first" class="headerlink" title="4）first()"></a>4）first()</h4><blockquote><p>返回RDD中的第一个元素</p></blockquote><h4 id="5）take-n"><a href="#5）take-n" class="headerlink" title="5）take(n)"></a>5）take(n)</h4><blockquote><p>返回一个由RDD的前n个元素组成的数组</p></blockquote><h4 id="6）takeOrdered-n"><a href="#6）takeOrdered-n" class="headerlink" title="6）takeOrdered(n)"></a>6）takeOrdered(n)</h4><blockquote><p>返回该RDD排序后的前n个元素组成的数组</p></blockquote><h4 id="7）aggregate-num-func1-func2"><a href="#7）aggregate-num-func1-func2" class="headerlink" title="7）aggregate(num)(func1)(func2)"></a>7）aggregate(num)(func1)(func2)</h4><blockquote><ul><li><ol><li>参数：(zeroValue: U)(seqOp: (U, T) ⇒ U, combOp: (U, U) ⇒ U)</li></ol></li><li><ol start="2"><li>作用：aggregate函数将每个分区里面的元素通过seqOp和初始值进行聚合，然后用combine函数将每个分区的结果和初始值(zeroValue)进行combine操作。这个函数最终返回的类型不需要和RDD中元素类型一致。</li></ol></li></ul></blockquote><h4 id="8）fold-num-func"><a href="#8）fold-num-func" class="headerlink" title="8）fold(num)(func)"></a>8）fold(num)(func)</h4><blockquote><p>作用：折叠操作，aggregate的简化操作，seqop和combop一样。</p></blockquote><h4 id="9）saveAsTextFile-path"><a href="#9）saveAsTextFile-path" class="headerlink" title="9）saveAsTextFile(path)"></a>9）saveAsTextFile(path)</h4><blockquote><p>将数据集的元素以textfile的形式保存到HDFS文件系统或者其他支持的文件系统，对于每个元素，Spark将会调用toString方法，将它装换为文件中的文本</p></blockquote><h4 id="10）saveAsSequenceFile-path"><a href="#10）saveAsSequenceFile-path" class="headerlink" title="10）saveAsSequenceFile(path)"></a>10）saveAsSequenceFile(path)</h4><blockquote><p>将数据集中的元素以Hadoop sequencefile的格式保存到指定的目录下，可以使HDFS或者其他Hadoop支持的文件系统。</p></blockquote><h4 id="11）saveAsObjectFile-path"><a href="#11）saveAsObjectFile-path" class="headerlink" title="11）saveAsObjectFile(path)"></a>11）saveAsObjectFile(path)</h4><blockquote><p>用于将RDD中的元素序列化成对象，存储到文件中。</p></blockquote><h4 id="12）-countByKey"><a href="#12）-countByKey" class="headerlink" title="12） countByKey()"></a>12） countByKey()</h4><blockquote><p>针对(K,V)类型的RDD，返回一个(K,Int)的map，表示每一个key对应的元素个数。</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> rdd = sc.parallelize(<span class="type">List</span>((<span class="number">1</span>,<span class="number">3</span>),(<span class="number">1</span>,<span class="number">2</span>),(<span class="number">1</span>,<span class="number">4</span>),(<span class="number">2</span>,<span class="number">3</span>),(<span class="number">3</span>,<span class="number">6</span>),(<span class="number">3</span>,<span class="number">8</span>)),<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> total = rdd.countByKey()</span><br><span class="line"></span><br><span class="line">println(total)</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印结果</span></span><br><span class="line"><span class="type">Map</span>(<span class="number">3</span> -&gt; <span class="number">2</span>, <span class="number">1</span> -&gt; <span class="number">3</span>, <span class="number">2</span> -&gt; <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="13）-foreach-func"><a href="#13）-foreach-func" class="headerlink" title="13） foreach(func)"></a>13） foreach(func)</h4><blockquote><p>在数据集的每一个元素上，运行函数func进行更新。</p></blockquote><h3 id="四、RDD依赖关系"><a href="#四、RDD依赖关系" class="headerlink" title="四、RDD依赖关系"></a>四、RDD依赖关系</h3><h4 id="1）Lineage"><a href="#1）Lineage" class="headerlink" title="1）Lineage"></a>1）Lineage</h4><blockquote><p>RDD只支持粗粒度转换，即在大量记录上执行的单个操作。将创建RDD的一系列<code>Lineage</code>（血统）记录下来，以便恢复丢失的分区。RDD的<code>Lineage</code>会记录RDD的元数据信息和转换行为，当该RDD的部分分区数据丢失时，它可以根据这些信息来重新运算和恢复丢失的数据分区。</p></blockquote><h4 id="2）窄依赖"><a href="#2）窄依赖" class="headerlink" title="2）窄依赖"></a>2）窄依赖</h4><blockquote><p>窄依赖指的是每一个父RDD的Partition最多被子RDD的一个Partition使用.</p></blockquote><h4 id="3）宽依赖"><a href="#3）宽依赖" class="headerlink" title="3）宽依赖"></a>3）宽依赖</h4><blockquote><p>宽依赖指的是多个子RDD的Partition会依赖同一个父RDD的Partition，会引起shuffle.</p></blockquote><h4 id="4）DAG-Directed-Acyclic-Graph"><a href="#4）DAG-Directed-Acyclic-Graph" class="headerlink" title="4）DAG(Directed Acyclic Graph)"></a>4）DAG(Directed Acyclic Graph)</h4><blockquote><p>DAG(Directed Acyclic Graph)叫做有向无环图，原始的RDD通过一系列的转换就就形成了DAG，根据RDD之间的依赖关系的不同将DAG划分成不同的Stage，对于窄依赖，partition的转换处理在Stage中完成计算。对于宽依赖，由于有Shuffle的存在，只能在parent RDD处理完成后，才能开始接下来的计算，因此<strong>宽依赖是划分Stage的依据</strong>。</p></blockquote><p><img src="https://file.buildworld.cn/img/20200807164413.png"></p><h3 id="五、累加器"><a href="#五、累加器" class="headerlink" title="五、累加器"></a>五、累加器</h3><blockquote><p>累加器用来对信息进行聚合，通常在向 Spark传递函数时，比如使用 map() 函数或者用 filter() 传条件时，可以使用驱动器程序中定义的变量，但是集群中运行的每个任务都会得到这些变量的一份新的副本，更新这些副本的值也不会影响驱动器中的对应变量。如果我们想实现所有分片处理时更新共享变量的功能，那么累加器可以实现我们想要的效果。</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> config = <span class="keyword">new</span> <span class="type">SparkConf</span>().setMaster(<span class="string">&quot;local[*]&quot;</span>).setAppName(<span class="string">&quot;WordCount&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> sc = <span class="keyword">new</span> <span class="type">SparkContext</span>(config)</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> rdd: <span class="type">RDD</span>[<span class="type">Int</span>] = sc.makeRDD(<span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建累加器对象</span></span><br><span class="line"><span class="keyword">val</span> accumulator: <span class="type">LongAccumulator</span> = sc.longAccumulator</span><br><span class="line"></span><br><span class="line">rdd.foreach &#123;</span><br><span class="line">  <span class="keyword">case</span> i =&gt; &#123;</span><br><span class="line">    <span class="comment">//执行累加器的累加功能</span></span><br><span class="line">    accumulator.add(i)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取累加器保存的值</span></span><br><span class="line">println(accumulator.value)</span><br></pre></td></tr></table></figure><h4 id="自定义累加器"><a href="#自定义累加器" class="headerlink" title="自定义累加器"></a>自定义累加器</h4><blockquote><p>自定义累加器类型的功能在1.X版本中就已经提供了，但是使用起来比较麻烦，在2.0版本后，累加器的易用性有了较大的改进，而且官方还提供了一个新的抽象类：<code>AccumulatorV2</code>来提供更加友好的自定义类型累加器的实现方式。实现自定义类型累加器需要继承<code>AccumulatorV2</code>并至少覆写下例中出现的方法。</p></blockquote><h3 id="六、广播变量（调优策略）"><a href="#六、广播变量（调优策略）" class="headerlink" title="六、广播变量（调优策略）"></a>六、广播变量（调优策略）</h3><blockquote><p>广播变量用来高效分发较大的对象。向所有工作节点发送一个较大的<strong>只读</strong>值，以供一个或多个Spark操作使用。比如，如果你的应用需要向所有节点发送一个较大的只读查询表，甚至是机器学习算法中的一个很大的特征向量，广播变量用起来都很顺手。 在多个并行操作中使用同一个变量，但是 Spark会为每个任务分别发送。</p></blockquote><blockquote><p>使用广播变量的过程如下：</p><ul><li>(1) 通过对一个类型 T 的对象调用 SparkContext.broadcast 创建出一个 Broadcast[T] 对象。 任何可序列化的类型都可以这么实现。 </li><li>(2) 通过 value 属性访问该对象的值(在 Java 中为 value() 方法)。 </li><li>(3) 变量只会被发到各个节点一次，应作为只读值处理(修改这个值不会影响到别的节点)。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据利器--Scala语言学习(高级)</title>
      <link href="/2020/07/20/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%A9%E5%99%A8-Scala%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-%E9%AB%98%E7%BA%A7/"/>
      <url>/2020/07/20/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%A9%E5%99%A8-Scala%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0-%E9%AB%98%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Scala高级"><a href="#Scala高级" class="headerlink" title="Scala高级"></a>Scala高级</h2><h2 id="一、集合"><a href="#一、集合" class="headerlink" title="一、集合"></a>一、集合</h2><blockquote><p>Scala 的集合有三大类：<code>序列 Seq、集 Set、映射 Map</code>，所有的集合都扩展自 Iterable 特质，在 Scala 中集合有<strong>可变（mutable）</strong>和<strong>不可变（immutable）</strong>两种类型。</p></blockquote><p><img src="https://file.buildworld.cn/img/20200720092724.png"></p><blockquote><ul><li>1.Set、Map 是 Java 中也有的集合。</li><li>2.<code>Seq</code> 是 Java 没有的，我们发现 List 归属到 Seq 了,因此这里的 List 就和 java 不是同一个概念了。</li><li>3.我们前面的 for 循环有一个 1 to 3 ,就是 <code>IndexedSeq</code> 下的 <code>Vector</code>。</li><li>4.String 也是属于 <code>IndexeSeq</code>。</li><li>5.我们发现经典的数据结构比如 <code>Queue</code> 和 <code>Stack</code> 被归属到 <code>LinearSeq</code>。</li><li>6.大家注意 Scala 中的 Map 体系有一个 <code>SortedMap</code>,说明 Scala 的 Map 可以支持排序。</li><li>7.<code>IndexSeq</code> 和 <code>LinearSeq</code> 的区别[<strong>IndexSeq 是通过索引来查找和定位，因此速度快，比如 String 就是一个索引集合，通过索引即可定位</strong>] [<strong>LineaSeq 是线型的，即有头尾的概念，这种数据结构一般是通过遍历来查找，它的价值在于应用到一些。具体的应用场景 (电商网站, 大数据推荐系统 :最近浏览的 10 个商品)</strong>]</li></ul></blockquote><h3 id="1、数组"><a href="#1、数组" class="headerlink" title="1、数组"></a>1、数组</h3><h4 id="不可变数组"><a href="#不可变数组" class="headerlink" title="不可变数组"></a>不可变数组</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种创建方法</span></span><br><span class="line"><span class="keyword">val</span> num = <span class="keyword">new</span> <span class="type">Array</span>[<span class="type">Int</span>](<span class="number">5</span>)</span><br><span class="line"><span class="comment">//赋值,集合元素采用小括号访问</span></span><br><span class="line">num(<span class="number">1</span>) = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种创建方法,在定义数组时，直接赋值//使用 apply 方法创建数组对象</span></span><br><span class="line"><span class="keyword">val</span> num2 = <span class="type">Array</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br></pre></td></tr></table></figure><h4 id="可变数组"><a href="#可变数组" class="headerlink" title="可变数组"></a>可变数组</h4><p><strong>变长数组(声明泛型)</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> num = <span class="type">ArrayBuffer</span>[<span class="type">Any</span>](<span class="number">1</span>, <span class="string">&quot;michong&quot;</span>, <span class="number">3.14</span>)</span><br><span class="line"><span class="comment">//添加</span></span><br><span class="line">num.appendAll(<span class="string">&quot;hi&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> (i &lt;- num) &#123;</span><br><span class="line">  println(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">num.remove(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改</span></span><br><span class="line">num(<span class="number">0</span>) = <span class="string">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure><h4 id="相互转化"><a href="#相互转化" class="headerlink" title="相互转化"></a>相互转化</h4><blockquote><ul><li><ol><li><code>arr1.toBuffer</code> //定长数组转可变数组</li></ol></li><li><ol start="2"><li><code>arr2.toArray</code> //可变数组转定长数组</li></ol></li></ul></blockquote><h3 id="2、元组"><a href="#2、元组" class="headerlink" title="2、元组"></a>2、元组</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.buildworld.scala.day3</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">demo2</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建元组</span></span><br><span class="line">    <span class="keyword">val</span> tuple = (<span class="number">1</span>,<span class="number">2</span>,<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">    <span class="comment">//访问元组</span></span><br><span class="line">    <span class="comment">//1. 使用 _顺序号</span></span><br><span class="line">    println(tuple._2) <span class="comment">// &quot;hello&quot;</span></span><br><span class="line">    <span class="comment">//2. 使用</span></span><br><span class="line">    println(tuple.productElement(<span class="number">2</span>)) <span class="comment">//下标是从 0 开始计算</span></span><br><span class="line">    <span class="comment">//遍历元组</span></span><br><span class="line">    <span class="keyword">for</span>(i&lt;-tuple.productIterator)&#123;</span><br><span class="line">      println(i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Tuple3</span>[+<span class="type">T1</span>, +<span class="type">T2</span>, +<span class="type">T3</span>](<span class="params">_1: <span class="type">T1</span>, _2: <span class="type">T2</span>, _3: <span class="type">T3</span></span>) <span class="keyword">extends</span> <span class="title">Product3</span>[<span class="type">T1</span>, <span class="type">T2</span>, <span class="type">T3</span>] </span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span></span>: <span class="type">String</span> = <span class="string">&quot;(&quot;</span> + _1 + <span class="string">&quot;,&quot;</span> + _2 + <span class="string">&quot;,&quot;</span> + _3 + <span class="string">&quot;)&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、List"><a href="#3、List" class="headerlink" title="3、List"></a>3、List</h3><blockquote><ul><li><ol><li>List 默认为不可变的集合</li></ol></li><li><ol start="2"><li>List 在 scala 包对象声明的,因此不需要引入其它包也可以使用</li></ol></li><li><ol start="3"><li>val List = scala.collection.immutable.List</li></ol></li><li><ol start="4"><li>List 中可以放任何数据类型，比如 arr1 的类型为 List[Any]</li></ol></li><li><ol start="5"><li>如果希望得到一个空列表，可以使用 Nil 对象, 在 scala 包对象声明的,因此不需要引入其它包也可以使用</li></ol></li></ul></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">println(list )</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个空list</span></span><br><span class="line"><span class="keyword">val</span> list02 = <span class="type">Nil</span></span><br><span class="line">println(list02)</span><br><span class="line"></span><br><span class="line"><span class="comment">//在list后面添加元素</span></span><br><span class="line"><span class="keyword">val</span> list03 = list:+<span class="number">4</span></span><br><span class="line">println(list03)</span><br><span class="line"></span><br><span class="line"><span class="comment">//在list前面添加元素</span></span><br><span class="line"><span class="keyword">val</span> list04 = <span class="string">&quot;hi&quot;</span>+:list</span><br><span class="line">println(list04)</span><br><span class="line"></span><br><span class="line"><span class="comment">//符号::表示向集合中,新建集合添加元素。从右向左</span></span><br><span class="line"><span class="keyword">val</span> list5 = <span class="number">4</span> :: <span class="number">5</span> :: <span class="number">6</span> :: list :: <span class="type">Nil</span></span><br><span class="line">println(list5)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ::: 运算符是将集合中的每一个元素加入到空集合中去, ::: 左右两边需要时集合.</span></span><br><span class="line"><span class="keyword">val</span> list6 = <span class="number">4</span> :: <span class="number">5</span> :: <span class="number">6</span> :: list ::: <span class="type">Nil</span></span><br><span class="line">println(list6)</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="type">List</span>()</span><br><span class="line"><span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="type">List</span>(hi, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="type">List</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="type">List</span>(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><h4 id="列表ListBuffer"><a href="#列表ListBuffer" class="headerlink" title="列表ListBuffer"></a>列表ListBuffer</h4><p><strong>ListBuffer:ListBuffer 是可变的 list 集合，可以添加，删除元素,ListBuffer 属于序</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">demo4</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> list = <span class="type">ListBuffer</span>[<span class="type">Int</span>](<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">    list.addOne(<span class="number">4</span>)</span><br><span class="line">    list.append(<span class="number">5</span>)</span><br><span class="line">    println(list)</span><br><span class="line"></span><br><span class="line">    list += <span class="number">6</span></span><br><span class="line">    println(list)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//++ 表示的是加入的是集合中的各个元素</span></span><br><span class="line">    <span class="keyword">val</span> list2 = list ++ list</span><br><span class="line">    println(list2)</span><br><span class="line"></span><br><span class="line">    list2.remove(<span class="number">0</span>)</span><br><span class="line">    println(list2)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="type">ListBuffer</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</span><br><span class="line"><span class="type">ListBuffer</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"><span class="type">ListBuffer</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"><span class="type">ListBuffer</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br></pre></td></tr></table></figure><h3 id="4、队列"><a href="#4、队列" class="headerlink" title="4、队列"></a>4、队列</h3><blockquote><ul><li><ol><li>队列是一个有序列表，在底层可以用数组或是链表来实现。</li></ol></li><li><ol start="2"><li>其输入和输出要遵循先入先出的原则。即：先存入队列的数据，要先取出。后存入的要后取出。</li></ol></li><li><ol start="3"><li>在 Scala 中，由设计者直接给我们提供队列类型使用。</li></ol></li><li><ol start="4"><li>在 scala 中, 有 <code>scala.collection.mutable.Queue</code> 和 <code>scala.collection.immutable.Queue</code> , 一般来说，我们在开发中通常使用可变集合中的队列</li></ol></li></ul></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.collection.mutable</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">demo5</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建队列</span></span><br><span class="line">    <span class="keyword">val</span> q1  = <span class="keyword">new</span> mutable.<span class="type">Queue</span>[<span class="type">Int</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">//追加数据</span></span><br><span class="line">    q1+=<span class="number">1</span></span><br><span class="line">    q1+=<span class="number">2</span></span><br><span class="line">    println(q1)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加list</span></span><br><span class="line">    q1++=<span class="type">List</span>(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">    println(q1)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取出队列最前面的那个元素</span></span><br><span class="line">    println(q1.dequeue())</span><br><span class="line">    println(q1)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//队尾追加元素</span></span><br><span class="line">    q1.enqueue(<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>)</span><br><span class="line">    println(q1)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回队列的第一个元素</span></span><br><span class="line">    println(q1.head)</span><br><span class="line">    <span class="comment">//返回队列的最后一个元素</span></span><br><span class="line">    println(q1.last)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回除第一个元素以外的其他元素的队列</span></span><br><span class="line">    println(q1.tail)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="type">Queue</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="type">Queue</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="type">Queue</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="type">Queue</span>(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="type">Queue</span>(<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br></pre></td></tr></table></figure><h3 id="5、映射–Map"><a href="#5、映射–Map" class="headerlink" title="5、映射–Map"></a>5、映射–Map</h3><blockquote><ul><li><ol><li>Scala 中的 Map 和 Java 类似，也是一个散列表，它存储的内容也是键值对(key-value)映射，Scala 中<strong>不可变的 Map 是有序的</strong>，<strong>可变的 Map 是无序的</strong>。</li></ol></li><li><ol start="2"><li>Scala 中，有<code>可变 Map (scala.collection.mutable.Map)</code> 和 <code>不可变 Map(scala.collection.immutable.Map)</code>。</li></ol></li></ul></blockquote><h4 id="构建map"><a href="#构建map" class="headerlink" title="构建map"></a>构建map</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造不可变map，输入输出结果一致</span></span><br><span class="line"><span class="keyword">val</span> map1 = <span class="type">Map</span>(<span class="string">&quot;MiChong&quot;</span> -&gt; <span class="number">25</span>, <span class="string">&quot;Zz&quot;</span> -&gt; <span class="number">24</span>, <span class="string">&quot;Alice&quot;</span> -&gt; <span class="number">18</span>)</span><br><span class="line">println(map1)</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造可变map</span></span><br><span class="line"><span class="keyword">val</span> map2 = scala.collection.mutable.<span class="type">Map</span>(<span class="string">&quot;MiChong&quot;</span> -&gt; <span class="number">25</span>, <span class="string">&quot;Zz&quot;</span> -&gt; <span class="number">24</span>, <span class="string">&quot;Alice&quot;</span> -&gt; <span class="number">18</span>)</span><br><span class="line">println(map2)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建空的map</span></span><br><span class="line"><span class="keyword">val</span> map3 = <span class="keyword">new</span> mutable.<span class="type">HashMap</span>[<span class="type">String</span>,<span class="type">Int</span>]</span><br><span class="line">println(map3)</span><br><span class="line"></span><br><span class="line"><span class="comment">//对偶元组,即创建包含键值对的二元组</span></span><br><span class="line"><span class="keyword">val</span> map4 = mutable.<span class="type">Map</span>((<span class="string">&quot;A&quot;</span>,<span class="number">1</span>),(<span class="string">&quot;B&quot;</span>,<span class="number">2</span>),(<span class="string">&quot;C&quot;</span>,<span class="number">3</span>))</span><br><span class="line">println(map4(<span class="string">&quot;A&quot;</span>))</span><br></pre></td></tr></table></figure><h4 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">demo7</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> map1 = <span class="type">Map</span>(<span class="string">&quot;MiChong&quot;</span> -&gt; <span class="number">25</span>, <span class="string">&quot;Zz&quot;</span> -&gt; <span class="number">24</span>, <span class="string">&quot;Alice&quot;</span> -&gt; <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式1</span></span><br><span class="line">    <span class="comment">//    1) 如果 key 存在，则返回对应的值</span></span><br><span class="line">    <span class="comment">//    2) 如果 key 不存在，则抛出异常[java.util.NoSuchElementException]</span></span><br><span class="line">    println(map1(<span class="string">&quot;Zz&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式2、</span></span><br><span class="line">    <span class="comment">// 1.如果 key 存在，则返回 true</span></span><br><span class="line">    <span class="comment">// 2.如果 key 不存在，则返回 false</span></span><br><span class="line">    println(map1.contains(<span class="string">&quot;Zz&quot;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式3、通过 映射.get(键) 这样的调用返回一个 Option 对象，要么是 Some，要么是 None</span></span><br><span class="line">    <span class="comment">//  2) 如果 map.get(key) key 存在返回 some,如果 key 不存在，则返回 None</span></span><br><span class="line">    <span class="comment">//  3) 如果 map.get(key).get key 存在，返回 key 对应的值,否则，抛出异常 java.util.NoSuchElementException: None.get</span></span><br><span class="line">    println(map1.get(<span class="string">&quot;Zz&quot;</span>).get)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式4、getOrElse()</span></span><br><span class="line">    <span class="comment">//如果 key 存在，返回 key 对应的值。</span></span><br><span class="line">    <span class="comment">//如果 key 不存在，返回默认值。在 java 中底层有很多类似的操作。</span></span><br><span class="line">    println(map1.getOrElse(<span class="string">&quot;zz&quot;</span>,<span class="string">&quot;default&quot;</span>))</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改和添加"><a href="#修改和添加" class="headerlink" title="修改和添加"></a>修改和添加</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scala.collection.mutable</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">demo8</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> map1 = mutable.<span class="type">Map</span>(<span class="string">&quot;MiChong&quot;</span> -&gt; <span class="number">25</span>, <span class="string">&quot;Zz&quot;</span> -&gt; <span class="number">24</span>, <span class="string">&quot;Alice&quot;</span> -&gt; <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改和添加</span></span><br><span class="line">    <span class="comment">//1) map 是可变的，才能修改，否则报错</span></span><br><span class="line">    <span class="comment">//2) 如果 key 存在：则修改对应的值,key 不存在,等价于添加一个 key-val</span></span><br><span class="line">    map1(<span class="string">&quot;qjzxzxd&quot;</span>)= <span class="number">22</span></span><br><span class="line">    println(map1)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加多个元素</span></span><br><span class="line">    map1 +=(<span class="string">&quot;qjzxzxd&quot;</span>-&gt;<span class="number">1</span>,<span class="string">&quot;demo2&quot;</span>-&gt;<span class="number">2</span>)</span><br><span class="line">    println(map1)</span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.buildworld.scala.day3</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.collection.mutable</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">demo8</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> map1 = mutable.<span class="type">Map</span>(<span class="string">&quot;MiChong&quot;</span> -&gt; <span class="number">25</span>, <span class="string">&quot;Zz&quot;</span> -&gt; <span class="number">24</span>, <span class="string">&quot;Alice&quot;</span> -&gt; <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历map</span></span><br><span class="line">    <span class="keyword">for</span> ((k, v) &lt;- map1) &#123;</span><br><span class="line">      println(<span class="string">&quot;键：&quot;</span> + k + <span class="string">&quot;  值：&quot;</span> + v)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (k&lt;-map1.keys)&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(v&lt;-map1.values)&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、集–Set"><a href="#6、集–Set" class="headerlink" title="6、集–Set"></a>6、集–Set</h3><blockquote><p>默认情况下，Scala 使用的是不可变集合，如果你想使用可变集合，需要引用 <code>scala.collection.mutable.Set</code> 包</p></blockquote><h4 id="新建set"><a href="#新建set" class="headerlink" title="新建set"></a>新建set</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.buildworld.scala.day3</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> scala.collection.mutable</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">demo9</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//不可变</span></span><br><span class="line">    <span class="keyword">val</span> set1 = <span class="type">Set</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">    println(set1)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可变</span></span><br><span class="line">    <span class="keyword">val</span> set2 = mutable.<span class="type">Set</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="string">&quot;abc&quot;</span>)</span><br><span class="line">    println(set2)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="type">Set</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="type">HashSet</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, abc, <span class="number">4</span>)</span><br></pre></td></tr></table></figure><h4 id="添加set"><a href="#添加set" class="headerlink" title="添加set"></a>添加set</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可变</span></span><br><span class="line"><span class="keyword">val</span> set2 = mutable.<span class="type">Set</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="string">&quot;abc&quot;</span>)</span><br><span class="line">println(set2)</span><br><span class="line"></span><br><span class="line">set2.add(<span class="number">5</span>)</span><br><span class="line">set2 += <span class="number">6</span></span><br><span class="line">set2 +=(<span class="number">7</span>)</span><br><span class="line">println(set2)</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="type">HashSet</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, abc, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可变</span></span><br><span class="line"><span class="keyword">val</span> set2 = mutable.<span class="type">Set</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">&quot;abc&quot;</span>)</span><br><span class="line">println(set2)</span><br><span class="line"></span><br><span class="line">set2.add(<span class="number">5</span>)</span><br><span class="line">set2 += <span class="number">6</span></span><br><span class="line">set2 += (<span class="number">7</span>)</span><br><span class="line">println(set2)</span><br><span class="line"></span><br><span class="line">set2 -= <span class="number">2</span></span><br><span class="line">set2 -= (<span class="number">3</span>)</span><br><span class="line">set2.remove(<span class="number">4</span>)</span><br><span class="line">println(set2)</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="type">HashSet</span>(<span class="number">1</span>, abc, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>)</span><br></pre></td></tr></table></figure><h4 id="遍历-1"><a href="#遍历-1" class="headerlink" title="遍历"></a>遍历</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可变</span></span><br><span class="line"><span class="keyword">val</span> set2 = mutable.<span class="type">Set</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">&quot;abc&quot;</span>)</span><br><span class="line">println(set2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (x &lt;- set2) &#123;</span><br><span class="line">  println(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Set更多操作"><a href="#Set更多操作" class="headerlink" title="Set更多操作"></a>Set更多操作</h4><table><thead><tr><th align="center">序号</th><th>方法</th><th>描述</th></tr></thead><tbody><tr><td align="center">1</td><td>def +(elem: A): Set[A]</td><td>为集合添加新元素，并创建一个新的集合，除非元素已存在</td></tr><tr><td align="center">2</td><td>def -(elem: A): Set[A]</td><td>移除集合中的元素，并创建一个新的集合</td></tr><tr><td align="center">3</td><td>def contains(elem: A): Boolean</td><td>如果元素在集合中存在，返回 true，否则返回 false。</td></tr><tr><td align="center">4</td><td>def &amp;(that: Set[A]): Set[A]</td><td>返回两个集合的交集</td></tr><tr><td align="center">5</td><td>def &amp;~(that: Set[A]): Set[A]</td><td>返回两个集合的差集</td></tr><tr><td align="center">6</td><td>def ++(elems: A): Set[A]</td><td>合并两个集合</td></tr><tr><td align="center">7</td><td>def drop(n: Int): Set[A]]</td><td>返回丢弃前n个元素新集合</td></tr><tr><td align="center">8</td><td>def dropRight(n: Int): Set[A]</td><td>返回丢弃最后n个元素新集合</td></tr><tr><td align="center">9</td><td>def dropWhile(p: (A) =&gt; Boolean): Set[A]</td><td>从左向右丢弃元素，直到条件p不成立</td></tr><tr><td align="center">10</td><td>def max: A //演示下</td><td>查找最大元素</td></tr><tr><td align="center">11</td><td>def min: A //演示下</td><td>查找最小元素</td></tr><tr><td align="center">12</td><td>def take(n: Int): Set[A]</td><td>返回前 n 个元素</td></tr></tbody></table><h3 id="7、集合元素的映射-map-映射操作"><a href="#7、集合元素的映射-map-映射操作" class="headerlink" title="7、集合元素的映射-map 映射操作"></a>7、集合元素的映射-map 映射操作</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>)</span><br><span class="line">  <span class="comment">//map中传入一个方法，用于处理list中每个元素</span></span><br><span class="line">  <span class="keyword">val</span> list2 = list.map(f1)</span><br><span class="line">  println(list2)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="keyword">val</span> f2 = f1 _</span><br><span class="line">  println(f2(<span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span></span>(n:<span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">  n*<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8、flatmap-映射：flat-即压扁，压平，扁平化映射"><a href="#8、flatmap-映射：flat-即压扁，压平，扁平化映射" class="headerlink" title="8、flatmap 映射：flat 即压扁，压平，扁平化映射"></a>8、flatmap 映射：flat 即压扁，压平，扁平化映射</h3><blockquote><p>flatmap：flat 即压扁，压平，扁平化，效果就是将集合中的每个元素的子元素映射到某个函数并返回新的集合。</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> names = <span class="type">List</span>(<span class="string">&quot;MiChong&quot;</span>)</span><br><span class="line">  </span><br><span class="line">  println(names.flatMap(upper))</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upper</span></span>(string: <span class="type">String</span>):<span class="type">String</span>=&#123;</span><br><span class="line">  string.toUpperCase</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9、集合元素的过滤-filter"><a href="#9、集合元素的过滤-filter" class="headerlink" title="9、集合元素的过滤-filter"></a>9、集合元素的过滤-filter</h3><blockquote><p>filter：将符合要求的数据(筛选)放置到新的集合中</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">demo3</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//只保留A开头的单词</span></span><br><span class="line">    <span class="keyword">val</span> list  = <span class="type">List</span>(<span class="string">&quot;Ace&quot;</span>,<span class="string">&quot;Baby&quot;</span>,<span class="string">&quot;Zoom&quot;</span>)</span><br><span class="line">    println(list.filter(startA))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">startA</span></span>(string: <span class="type">String</span>): <span class="type">Boolean</span> =&#123;</span><br><span class="line">    <span class="keyword">if</span>(string.startsWith(<span class="string">&quot;A&quot;</span>)) <span class="literal">true</span> <span class="keyword">else</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="10、reduceLeft-化简"><a href="#10、reduceLeft-化简" class="headerlink" title="10、reduceLeft 化简"></a>10、reduceLeft 化简</h3><blockquote><p>化简：将 二元函数引用于集合中的函数,。</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">demo4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> list  = <span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">    println(list.reduceLeft(sum))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//执行相加程序</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(n1: <span class="type">Int</span>, n2: <span class="type">Int</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">    n1 + n2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="11、折叠–fold"><a href="#11、折叠–fold" class="headerlink" title="11、折叠–fold"></a>11、折叠–fold</h3><blockquote><ul><li><ol><li>fold 函数将上 一步返回的值作为函数的第一个参数继续传递参与运算，直到 list  中的所有元素被遍历。</li></ol></li><li><ol start="2"><li>可以把 <code>reduceLeft</code>  看做简化版的 <code>foldLeft</code></li></ol></li></ul></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">demo5</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">    println(list.foldLeft(<span class="number">5</span>)(minus)) <span class="comment">//从左到右</span></span><br><span class="line">    println(list.foldRight(<span class="number">5</span>)(minus))<span class="comment">//从右到左</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">minus</span></span>(n1:<span class="type">Int</span>,n2:<span class="type">Int</span>):<span class="type">Int</span>=&#123;</span><br><span class="line">    n1 - n2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="12、扫描–scan"><a href="#12、扫描–scan" class="headerlink" title="12、扫描–scan"></a>12、扫描–scan</h3><blockquote><p>扫描，即对做 某个集合的所有元素做 fold  操作，但是会把产生的存 所有中间结果放置于一个集合中保存 // 斐波那契</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">demo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> list = (<span class="number">1</span> to <span class="number">5</span>).scanLeft(<span class="number">5</span>)(minus)</span><br><span class="line">    println(list)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">minus</span></span>(n1:<span class="type">Int</span>,n2:<span class="type">Int</span>):<span class="type">Int</span>=&#123;</span><br><span class="line">    n1 - n2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果</span></span><br><span class="line"><span class="type">Vector</span>(<span class="number">5</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-5</span>, <span class="number">-10</span>)</span><br></pre></td></tr></table></figure><h2 id="二、模式匹配"><a href="#二、模式匹配" class="headerlink" title="二、模式匹配"></a>二、模式匹配</h2><blockquote><ul><li><ol><li>如果所有 case 都不匹配，那么会执行 <code>case _</code> 分支，类似于 Java 中 default 语句</li></ol></li><li><ol start="2"><li>如果所有 case 都不匹配，又没有写 case _ 分支，那么会抛出 <code>MatchError</code></li></ol></li><li><ol start="3"><li>每个 case 中，<strong>不用 break 语句</strong>，自动中断 case</li></ol></li><li><ol start="4"><li>可以在 match 中使用其它类型，而不仅仅是字符,可以是表达式</li></ol></li><li><ol start="5"><li><code>=&gt;</code> 等价于 java swtich 的 <code>:</code></li></ol></li><li><ol start="6"><li>=&gt; 后面的代码块到下一个 case， 是作为一个整体执行，可以使用{} 扩起来，也可以不扩。</li></ol></li></ul></blockquote><h3 id="1、守卫"><a href="#1、守卫" class="headerlink" title="1、守卫"></a>1、守卫</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (ch &lt;- <span class="string">&quot;+-3!&quot;</span>)&#123;</span><br><span class="line">  ch <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> &#x27;+&#x27; =&gt; println(ch)</span><br><span class="line">    <span class="keyword">case</span> &#x27;-&#x27; =&gt; println(ch)</span><br><span class="line">    <span class="comment">//case _ if ... 这里不是默认匹配, 表示忽略 ch ， 而是进行后面的 if 匹配.</span></span><br><span class="line">    <span class="keyword">case</span> _ <span class="keyword">if</span> ch.toString.equals(&#x27;<span class="number">3</span>&#x27;) =&gt;println(ch)</span><br><span class="line">    <span class="keyword">case</span> _ =&gt; println(<span class="string">&quot;end&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、匹配数组"><a href="#2、匹配数组" class="headerlink" title="2、匹配数组"></a>2、匹配数组</h3><blockquote><ul><li><ol><li><code>Array(0)</code> 匹配只有一个元素且为 0 的数组。</li></ol></li><li><ol start="2"><li><code>Array(x,y)</code> 匹配数组有两个元素，并将两个元素赋值为 x 和 y。当然可以依次类推 Array(x,y,z) 匹配数组有 3 个元素的等等….</li></ol></li><li><ol start="3"><li><code>Array(0,_*)</code> 匹配数组以 0 开始</li></ol></li></ul></blockquote><h3 id="3、匹配列表"><a href="#3、匹配列表" class="headerlink" title="3、匹配列表"></a>3、匹配列表</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (list &lt;- <span class="type">Array</span>(<span class="type">List</span>(<span class="number">0</span>), <span class="type">List</span>(<span class="number">1</span>, <span class="number">0</span>), <span class="type">List</span>(<span class="number">88</span>), <span class="type">List</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="type">List</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>))) &#123;</span><br><span class="line">  <span class="keyword">val</span> result = list <span class="keyword">match</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span> :: <span class="type">Nil</span> =&gt; <span class="string">&quot;0&quot;</span> <span class="comment">// 匹配的 List(0)</span></span><br><span class="line">    <span class="keyword">case</span> x :: y :: <span class="type">Nil</span> =&gt; x + <span class="string">&quot; &quot;</span> + y <span class="comment">// 匹配的是有两个元素的 List(x,y)</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span> :: tail =&gt; <span class="string">&quot;0 ...&quot;</span> <span class="comment">// 匹配 以 0 开头的后面有任意元素的 List</span></span><br><span class="line">    <span class="keyword">case</span> x :: <span class="type">Nil</span> =&gt; <span class="type">List</span>(x)</span><br><span class="line">    <span class="keyword">case</span> _ =&gt; <span class="string">&quot;something else&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、匹配元组"><a href="#4、匹配元组" class="headerlink" title="4、匹配元组"></a>4、匹配元组</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//请返回 (34, 89) =&gt; (89,34)</span></span><br><span class="line"><span class="keyword">for</span> (pair &lt;- <span class="type">Array</span>((<span class="number">0</span>, <span class="number">1</span>), (<span class="number">34</span>, <span class="number">89</span>), (<span class="number">1</span>, <span class="number">0</span>), (<span class="number">1</span>, <span class="number">1</span>), (<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>))) &#123;</span><br><span class="line">  <span class="keyword">val</span> result = pair <span class="keyword">match</span> &#123; <span class="comment">//</span></span><br><span class="line">    <span class="keyword">case</span> (<span class="number">0</span>, _) =&gt; <span class="string">&quot;0 ...&quot;</span> <span class="comment">// 表示匹配 0 开头的二元组</span></span><br><span class="line">    <span class="keyword">case</span> (y, <span class="number">0</span>) =&gt; y <span class="comment">//表示匹配 0 结尾的二元组</span></span><br><span class="line">    <span class="keyword">case</span> (x, y) =&gt; (y, x)</span><br><span class="line">    <span class="keyword">case</span> _ =&gt; <span class="string">&quot;other&quot;</span> <span class="comment">//.默认</span></span><br><span class="line">  &#125;</span><br><span class="line">  println(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、对象匹配"><a href="#5、对象匹配" class="headerlink" title="5、对象匹配"></a>5、对象匹配</h3><blockquote><ul><li><ol><li>构建对象时 apply 会被调用 ，比如 val n1 = Square(5)</li></ol></li><li><ol start="2"><li>当将 Square(n) 写在 case 后时[case Square(n) =&gt; xxx]，会默认调用 unapply 方法(对象提取器)</li></ol></li><li><ol start="3"><li>number 会被 传递给 def unapply(z: Double) 的 z 形参</li></ol></li><li><ol start="4"><li>如果返回的是 Some 集合，则 unapply 提取器返回的结果会返回给 n 这个形参</li></ol></li><li><ol start="5"><li>case 中对象的 unapply 方法(提取器)返回 some 集合则为匹配成功</li></ol></li><li><ol start="6"><li>返回 None 集合则为匹配失败</li></ol></li></ul></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 模式匹配使用：</span></span><br><span class="line">    <span class="keyword">val</span> number: <span class="type">Double</span> = <span class="number">36.0</span> <span class="comment">//Square(6.0)</span></span><br><span class="line">    <span class="comment">//说明</span></span><br><span class="line">    <span class="comment">//1. 当 number 去和 case Square(n) 时，会进行如下操作</span></span><br><span class="line">    <span class="comment">//2. 把 number 传递给 Square unapply(z: Double) 的 z</span></span><br><span class="line">    <span class="comment">//3. unapply 被调用，返回一个结果, 返回的结果和程序员的逻辑代码,比如 Some(math.sqrt(z))</span></span><br><span class="line">    <span class="comment">//4. 如果返回的结果是 Some 集合，则表示匹配成功 ,如果返回的是 None 则表示匹配失败</span></span><br><span class="line">    <span class="comment">//5. 如果匹配成功，就是将 Some(?) 的 值,赋给 case Square(n) 的 n</span></span><br><span class="line">    <span class="comment">//6. 这样就等价于将原来对象的构建参数，提取出来，我们将这个过程称为对象匹配, 这个使用很多.</span></span><br><span class="line">    number <span class="keyword">match</span> &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="type">Square</span>(n) =&gt; println(n) <span class="comment">// 6.0</span></span><br><span class="line">      <span class="keyword">case</span> _ =&gt; println(<span class="string">&quot;nothing matched&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//说明</span></span><br><span class="line"><span class="comment">//1. unapply 为对象提取器</span></span><br><span class="line"><span class="comment">//2. apply 对象构建器</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Square</span> </span>&#123; <span class="comment">//静态性质</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">unapply</span></span>(z: <span class="type">Double</span>): <span class="type">Option</span>[<span class="type">Double</span>] = &#123;</span><br><span class="line">    println(<span class="string">&quot;unapply 被调用 z =&quot;</span> + z) <span class="comment">// 36.0</span></span><br><span class="line">    <span class="type">Some</span>(math.sqrt(z)) <span class="comment">// Some(6.0)</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(z: <span class="type">Double</span>): <span class="type">Double</span> = z * z</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、样例类"><a href="#6、样例类" class="headerlink" title="6、样例类"></a>6、样例类</h3><blockquote><ul><li><ol><li>样例类仍然是类。</li></ol></li><li><ol start="2"><li>样例类用 case 关键字进行声明。</li></ol></li><li><ol start="3"><li>样例类是为模式匹配(对象)而优化的类。</li></ol></li><li><ol start="4"><li>构造器中的每一个参数都成为 val——除非它被显式地声明为 var（不建议这样做）。</li></ol></li><li><ol start="5"><li>在样例类对应的伴生对象中提供 apply 方法让你不用 new 关键字就能构造出相应的对象。</li></ol></li><li><ol start="6"><li>提供 unapply 方法让模式匹配可以工作。</li></ol></li><li><ol start="7"><li>将自动生成 toString、equals、hashCode 和 copy 方法(有点类似模板类，直接给生成，供程序员使用)。</li></ol></li><li><ol start="8"><li>除上述外，样例类和其他类完全一样。你可以添加方法和字段，扩展它们。</li></ol></li></ul></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Amount</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Dollar</span>(<span class="params">value: <span class="type">Double</span></span>) <span class="keyword">extends</span> <span class="title">Amount</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Currency 样例类</span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Currency</span>(<span class="params">value: <span class="type">Double</span>, unit: <span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Amount</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//NoAmount 样例类</span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">object</span> <span class="title">NoAmount</span> <span class="keyword">extends</span> <span class="title">Amount</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//样例类依然可以有自己的方法和属性</span></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params">name: <span class="type">String</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> age = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">cry</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">&quot;小狗汪汪叫~~&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、密封类"><a href="#7、密封类" class="headerlink" title="7、密封类"></a>7、密封类</h3><blockquote><ul><li><ol><li>如果想让 case 类的所有子类都必须在申明该类的相同的源文件中定义，可以将样例类的通用超类声明为<code>sealed</code>，这个超类称之为密封类。</li></ol></li><li><ol start="2"><li>密封就是不能在其他文件中定义/使用类。</li></ol></li></ul></blockquote><h2 id="三、函数式编程"><a href="#三、函数式编程" class="headerlink" title="三、函数式编程"></a>三、函数式编程</h2><h3 id="1、偏函数"><a href="#1、偏函数" class="headerlink" title="1、偏函数"></a>1、偏函数</h3><blockquote><p>在对符合某个条件，而不是所有情况 进行逻辑操作时，使用偏函数是一个不错的选择将包在大括号内的一组 case 语句封装为函数，我们称之为偏函数，它只对会作用于指定类型的参数或指定范围值的参数实施计算，超出范围的值会忽略.</p><p>偏函数在 Scala 中是一个特质 <code>PartialFunction</code></p></blockquote><blockquote><ul><li><ol><li>使用构建特质的实现类(使用的方式是 PartialFunction 的匿名子类)</li></ol></li><li><ol start="2"><li>PartialFunction 是个特质(看源码)</li></ol></li><li><ol start="3"><li>构建偏函数时，参数形式 [Any, Int]是泛型，第一个表示传入参数类型，第二个表示返回参数</li></ol></li><li><ol start="4"><li>当使用偏函数时，会遍历集合的所有元素，编译器执行流程时先执行 isDefinedAt()如果为 true ,就会执行 apply,构建一个新的 Int 对象返回</li></ol></li><li><ol start="5"><li>执行 isDefinedAt() 为 false 就过滤掉这个元素，即不构建新的 Int 对象.</li></ol></li><li><ol start="6"><li>map 函数不支持偏函数，因为 map 底层的机制就是所有循环遍历，无法过滤处理原来集合的元素</li></ol></li><li><ol start="7"><li>collect 函数支持偏函数</li></ol></li></ul></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">demo2</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="string">&quot;abc&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> function1 = <span class="keyword">new</span> <span class="type">PartialFunction</span>[<span class="type">Any</span>,<span class="type">Int</span>] &#123;</span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">isDefinedAt</span></span>(x: <span class="type">Any</span>): <span class="type">Boolean</span> = &#123;</span><br><span class="line">        <span class="comment">//判断x是否是int类型</span></span><br><span class="line">        x.isInstanceOf[<span class="type">Int</span>]</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(v1: <span class="type">Any</span>): <span class="type">Int</span> = &#123;</span><br><span class="line">        <span class="comment">//将是int类型的元素值+1,然后返回相加之后的值</span></span><br><span class="line">        v1.asInstanceOf[<span class="type">Int</span>] + <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用偏函数不能使用 map, 而是 collect</span></span><br><span class="line">    <span class="keyword">val</span> list2 = list.collect(function1)</span><br><span class="line">    println(list2)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>偏函数简化</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span></span>: <span class="type">PartialFunction</span>[<span class="type">Any</span>, <span class="type">Int</span>] = &#123;</span><br><span class="line">  <span class="keyword">case</span> i: <span class="type">Int</span> =&gt; i + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">println(list.collect(f2))</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2</span></span><br><span class="line"><span class="keyword">val</span> list = <span class="type">List</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">&quot;abc&quot;</span>)</span><br><span class="line"><span class="keyword">val</span> list3 = list.collect &#123;</span><br><span class="line">    <span class="keyword">case</span> i: <span class="type">Int</span> =&gt; i + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">println(list3)</span><br></pre></td></tr></table></figure><h3 id="2、匿名函数"><a href="#2、匿名函数" class="headerlink" title="2、匿名函数"></a>2、匿名函数</h3><blockquote><p>没有名字的函数就是匿名函数，可以通过 函数表达式，来设置匿名函数</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> add = (a: <span class="type">Int</span>, b: <span class="type">Int</span>) =&gt; a + b</span><br><span class="line">println(add(<span class="number">1</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure><h3 id="3、高阶函数"><a href="#3、高阶函数" class="headerlink" title="3、高阶函数"></a>3、高阶函数</h3><blockquote><p>能够接受函数作为参数的函数，叫做高阶函数 <code>(higher-order function)</code>。可使应用程序更加健壮。 高阶函数可以返回一个匿名函数。</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">demo3</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(minusxy(<span class="number">3</span>)(<span class="number">4</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">minusxy</span></span>(x: <span class="type">Int</span>) = &#123;</span><br><span class="line">    (y: <span class="type">Int</span>) =&gt; x - y</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、闭包"><a href="#4、闭包" class="headerlink" title="4、闭包"></a>4、闭包</h3><blockquote><p>基本介绍：闭包就是一个函数和与其相关的引用环境（变量/值）组合的一个整体(实体)。</p></blockquote><p><strong>f就是一个闭包</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">demo3</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> f = minusxy(<span class="number">10</span>)</span><br><span class="line">    println(f(<span class="number">2</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">minusxy</span></span>(x: <span class="type">Int</span>) = &#123;</span><br><span class="line">    (y: <span class="type">Int</span>) =&gt; x - y</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、函数柯里化-curry"><a href="#5、函数柯里化-curry" class="headerlink" title="5、函数柯里化(curry)"></a>5、函数柯里化(curry)</h3><blockquote><ul><li><ol><li>函数编程中，接受多个参数的函数都可以转化为接受单个参数的函数，这个转化过程就叫柯里化。</li></ol></li><li><ol start="2"><li>柯里化就是证明了函数只需要一个参数而已。其实我们刚才的学习过程中，已经涉及到了柯里化操作。</li></ol></li><li><ol start="3"><li>不用设立柯里化存在的意义这样的命题。柯里化就是以函数为主体这种思想发展的必然产生的结果。(即：柯里化是面向函数思想的必然产生结果)<br>传统方式, 函数/方法(变量)， 对象.方法(变量)<br>集合.函数(函数).函数(函数).函数(函数) //函数链</li></ol></li></ul></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eq</span></span>(s1: <span class="type">String</span>)(s2: <span class="type">String</span>):<span class="type">Boolean</span>=&#123;</span><br><span class="line">  s1.eq(s2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、控制抽象"><a href="#6、控制抽象" class="headerlink" title="6、控制抽象"></a>6、控制抽象</h3><blockquote><ul><li><ol><li>参数是函数</li></ol></li><li><ol start="2"><li>函数参数没有输入值也没有返回值</li></ol></li></ul></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">myRunThread</span></span>(f1: =&gt;<span class="type">Unit</span>)=&#123;</span><br><span class="line">    <span class="keyword">new</span> <span class="type">Thread</span>&#123;</span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">        f1</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;.start()</span><br><span class="line">  </span><br><span class="line">  myRunThread&#123;</span><br><span class="line">    println(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">    <span class="type">Thread</span>.sleep(<span class="number">2000</span>)</span><br><span class="line">    println(<span class="string">&quot;end&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、泛型"><a href="#四、泛型" class="headerlink" title="四、泛型"></a>四、泛型</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">demo2</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> value = <span class="keyword">new</span> <span class="type">IntMessage</span>[<span class="type">Int</span>](<span class="number">20</span>)</span><br><span class="line">    println(value.get)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在 Scala 定义泛型用[T]， s 为泛型的引用</span></span><br><span class="line">  <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span>[<span class="type">T</span>](<span class="params">s:<span class="type">T</span></span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span></span>:<span class="type">T</span> = s</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//可以构建 Int 类型的 Message</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">IntMessage</span>[<span class="type">Int</span>](<span class="params">msg:<span class="type">Int</span></span>) <span class="keyword">extends</span> <span class="title">Message</span>(<span class="params">msg</span>)</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//String 类型的 Message</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">StringMessage</span>[<span class="type">String</span>](<span class="params">msg:<span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">Message</span>(<span class="params">msg</span>)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1、上界、下界"><a href="#1、上界、下界" class="headerlink" title="1、上界、下界"></a>1、上界、下界</h3><p><strong>scala 中上界</strong><br>在 scala 里表示某个类型是 A 类型的子类型，也称上界或上限，使用 &lt;: 关键字，语法如下：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">T</span> &lt;:<span class="type">A</span>] <span class="comment">//A 是 T 的上界</span></span><br><span class="line"><span class="comment">//或用通配符:</span></span><br><span class="line">[_ &lt;:<span class="type">A</span>]</span><br></pre></td></tr></table></figure><p><strong>scala 中下界</strong><br>在 scala 的下界或下限，使用 &gt;: 关键字，语法如下：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="type">T</span> &gt;: <span class="type">A</span>] <span class="comment">//A 是 T 的下界,下限</span></span><br><span class="line"><span class="comment">//或用通配符:</span></span><br><span class="line">[_ &gt;:<span class="type">A</span>]</span><br></pre></td></tr></table></figure><h3 id="2、协变、逆变和不变"><a href="#2、协变、逆变和不变" class="headerlink" title="2、协变、逆变和不变"></a>2、协变、逆变和不变</h3><blockquote><p>Scala 的协变(+)，逆变(-)，协变 covariant、逆变 contravariant、不可变 invariant</p></blockquote><ul><li><ol><li>C[+T]：如果 A 是 B 的子类，那么 C[A]是 C[B]的子类，称为协变。</li></ol></li><li><ol start="2"><li>C[-T]：如果 A 是 B 的子类，那么 C[B]是 C[A]的子类，称为逆变。</li></ol></li><li><ol start="3"><li>C[T]：无论 A 和 B 是什么关系，C[A]和 C[B]没有从属关系。称为不变。</li></ol></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据利器--Scala语言学习(基础)</title>
      <link href="/2020/07/12/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%A9%E5%99%A8-Scala%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/07/12/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%88%A9%E5%99%A8-Scala%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Scala"><a href="#Scala" class="headerlink" title="Scala"></a>Scala</h2><blockquote><p>Scala combines object-oriented and functional programming in one concise, high-level language. Scala’s static types help avoid bugs in complex applications, and its JVM and JavaScript runtimes let you build high-performance systems with easy access to huge ecosystems of libraries.</p></blockquote><blockquote><p>给大家推荐一个在线的scala文档网站：<a href="https://static.runoob.com/download/Scala%E8%AF%AD%E8%A8%80%E8%A7%84%E8%8C%83.pdf">https://static.runoob.com/download/Scala%E8%AF%AD%E8%A8%80%E8%A7%84%E8%8C%83.pdf</a></p></blockquote><h3 id="1、Scala基本的程序结构说明"><a href="#1、Scala基本的程序结构说明" class="headerlink" title="1、Scala基本的程序结构说明"></a>1、Scala基本的程序结构说明</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对 scala 的基本的程序结构说明</span></span><br><span class="line"><span class="comment">//1. object 是一个关键字，表示一个伴生对象</span></span><br><span class="line"><span class="comment">//2. 如果该文件只出现了一个 object HelloScala 就会在编译后两个.class 文件</span></span><br><span class="line"><span class="comment">//3. 第一个文件是 HelloScala.class 这个表示他的伴生类，但是空的.</span></span><br><span class="line"><span class="comment">//4. 第 2 个文件是 HelloScala$.class 对应的是 object HelloScala,但是本质是调用它对应的一个静态属性 MODULE$</span></span><br><span class="line"><span class="comment">//5. 这两个文件的关系和 main 函数的入口关系一会分析</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">HelloScala</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 1. def 表示一个方法或者一个函数</span></span><br><span class="line">  <span class="comment">// 2. main 表示入口</span></span><br><span class="line">  <span class="comment">// 3. args: Array[String] 表示形参，args 是形参名 Array[String] 是形参类型表示一个 Array 数组</span></span><br><span class="line">  <span class="comment">// 4. :Unit 表示返回值类型为 Unit ，等价于 java 的 void</span></span><br><span class="line">  <span class="comment">// 5. = 表示 后面写的是函数体/方法体, 它还有返回值类型推导的作用</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]):<span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="comment">// 表示是 输出， 类似 System.out.println(&quot;hello, scala 世界!&quot;)</span></span><br><span class="line">    <span class="comment">// 在 scala 语句后，不需要带; //体现简洁</span></span><br><span class="line">    println(<span class="string">&quot;hello, scala 世界!&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、Scala-的数据类型一览图"><a href="#2、Scala-的数据类型一览图" class="headerlink" title="2、Scala 的数据类型一览图"></a>2、Scala 的数据类型一览图</h3><p><img src="https://file.buildworld.cn/img/20200712154042.png"></p><ul><li><ol><li><code>Any</code> 是所有类的根类型,即所有类的父类(基类)</li></ol></li><li><ol start="2"><li>在 <code>Scala</code>中类分为两个大的类型分支(<code>AnyVal</code> [<strong>值类型，即可以理解成就是 java 的基本数据类型</strong>],<code>AnyRef</code> 类型)</li></ol></li><li><ol start="3"><li>在 <code>AnyVal</code> 虽然叫值类型，但是仍然是<strong>类(对象)</strong></li></ol></li><li><ol start="4"><li>在 <code>Scala</code>中有两个特别的类型(<code>Null</code> ), 还有一个是 <code>Nothing</code></li></ol></li><li><ol start="5"><li><code>Null</code> 类型只有一个实例 <code>null</code>, 他是 <code>bottom class</code> ,是 <code>AnyRef</code> 的子类.</li></ol></li><li><ol start="6"><li><code>Nothing</code> 类型是所有类的子类， 它的价值是在于因为它是所有类的子类，就可以将 <code>Nothing</code> 类型的对象返回给任意的变量或者方法，比如案例</li></ol><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span></span>():<span class="type">Nothing</span>= &#123; <span class="comment">//表示 f1 方法就是没有正常的返回值，专门用于返回异常</span></span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="type">Exception</span>(<span class="string">&quot;异常发生&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><ol start="7"><li>在 <code>Scala</code>中仍然遵守 低精度的数据自动的转成高精度的数据类型。</li></ol></li><li><ol start="8"><li>在 <code>Scala</code>中，<code>Unit</code> 类型比较特殊，这个类型也只有一个实例 ()  </li></ol></li></ul><h4 id="Scala数据类型列表"><a href="#Scala数据类型列表" class="headerlink" title="Scala数据类型列表"></a>Scala数据类型列表</h4><table><thead><tr><th align="center">数据类型</th><th>描述</th></tr></thead><tbody><tr><td align="center">Byte</td><td>8位有符号补码整数。数值区间为 -128 到 127</td></tr><tr><td align="center">Short</td><td>16位有符号补码整数。数值区间为 -32768 到 32767</td></tr><tr><td align="center">Int</td><td>32位有符号补码整数。数值区间为 -2147483648 到 2147483647</td></tr><tr><td align="center">Long</td><td>64位有符号补码整数。数值区间为 -9223372036854775808 到 9223372036854775807</td></tr><tr><td align="center">Float</td><td>32 位 IEEE 754标准的单精度浮点数</td></tr><tr><td align="center">Double</td><td>64 位 IEEE 754标准的双精度浮点数</td></tr><tr><td align="center">Char</td><td>16位无符号Unicode字符, 区间值为 U+0000 到 U+FFFF</td></tr><tr><td align="center">String</td><td>字符序列</td></tr><tr><td align="center">Boolean</td><td>true或false</td></tr><tr><td align="center">Unit</td><td>表示无值，和其他语言中void等同。用作不返回任何结果的方法的结果类型。Unit只有一个实例值，写成()。</td></tr><tr><td align="center">Null</td><td><strong>null  可以赋值给任意引用类型(AnyRef)，但是不能赋值给值类型</strong></td></tr><tr><td align="center">Nothing</td><td>Nothing类型在Scala的类层级的最低端；它是任何其他类型的子类型。</td></tr><tr><td align="center">Any</td><td>Any是所有其他类的超类</td></tr><tr><td align="center">AnyRef</td><td>AnyRef类是Scala里所有引用类(reference class)的基类</td></tr></tbody></table><h3 id="3、函数式编程"><a href="#3、函数式编程" class="headerlink" title="3、函数式编程"></a>3、函数式编程</h3><h4 id="函数式编程基础"><a href="#函数式编程基础" class="headerlink" title="函数式编程基础"></a>函数式编程基础</h4><blockquote><ul><li><ol><li>函数定义/声明</li></ol></li><li><ol start="2"><li>函数运行机制</li></ol></li><li><ol start="3"><li>递归 [<strong>推荐编程者递归来解决问题, 算法基础, 邮差问题，最短路径，背包问题, 迷宫，回溯</strong> ]</li></ol></li><li><ol start="4"><li>过程</li></ol></li><li><ol start="5"><li>惰性函数和异常</li></ol></li></ul></blockquote><h4 id="函数式编程高级"><a href="#函数式编程高级" class="headerlink" title="函数式编程高级"></a>函数式编程高级</h4><blockquote><ul><li><ol><li>值函数(函数字面量)</li></ol></li><li><ol start="2"><li>高阶函数</li></ol></li><li><ol start="3"><li>闭包</li></ol></li><li><ol start="4"><li>应用函数</li></ol></li><li><ol start="5"><li>柯里化函数，抽象控制..</li></ol></li></ul></blockquote><p><strong>在 Scala 当中，函数是一等公民，像变量一样，既可以作为函数的参数使用，也可以将函数赋值给一个变量. ，函数的创建不用依赖于类或者对象，而在 Java 当中，函数的创建则要依赖于类、抽象类或者接口。</strong></p><h4 id="惰性函数"><a href="#惰性函数" class="headerlink" title="惰性函数"></a>惰性函数</h4><blockquote><p>当函数返回值被声明为 lazy 时，函数的执行将被推迟，直到我们首次对此取值，该函数才会执行。这种函数我们称之为惰性函数，在 Java 的某些框架代码中称之为懒加载(延迟加载）,Java中没有原生方法。</p></blockquote><ul><li><ol><li><code>lazy</code> 不能修饰 <code>var</code> 类型的变量</li></ol></li><li><ol start="2"><li>不但是在调用函数时，加了 <code>lazy</code> ,会导致函数的执行被推迟，我们在声明一个变量时，如果给声明了 <code>lazy</code> ,那么变量值得分配也会推迟。 比如 <code>lazy val i = 10</code></li></ol></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Demo1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">lazy</span> <span class="keyword">val</span> res = sum(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">6</span>)</span><br><span class="line">    println(res) <span class="comment">//使用res时，才会真正的开始计算</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sum</span></span>(args: <span class="type">Int</span>*): <span class="type">Int</span> = &#123;</span><br><span class="line">    <span class="keyword">var</span> res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (n &lt;- args) &#123;</span><br><span class="line">      res += n</span><br><span class="line">    &#125;</span><br><span class="line">    res</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//scala 中去掉所谓的 checked（编译） 异常</span></span><br><span class="line">    <span class="comment">//设计者认为，如果程序员编程时，认为某段代码可疑，就直接 try 并处理</span></span><br><span class="line">    <span class="comment">//说明</span></span><br><span class="line">    <span class="comment">//1. 如果代码可疑，使用 try 进行处理</span></span><br><span class="line">    <span class="comment">//2. 在 catch 中，可以有多个 case ，对可能的异常进行匹配</span></span><br><span class="line">    <span class="comment">//3. case ex: Exception =&gt; println(&quot;异常信息=&quot; + ex.getMessage)</span></span><br><span class="line">    <span class="comment">// (1) case 是一个关键字</span></span><br><span class="line">    <span class="comment">// (2) ex: Exception 异常的种类</span></span><br><span class="line">    <span class="comment">// (3) =&gt; 表明后的代码是对异常进行处理,如果处理的代码有多条语句可以&#123;&#125;扩起</span></span><br><span class="line">    <span class="comment">//4. 在 scala 中把范围小的异常放在后面，语法不会报错，但是不推荐</span></span><br><span class="line">    <span class="comment">//5. 如果捕获异常，代码即使出现异常，程序也不会崩溃。</span></span><br><span class="line">    </span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">10</span> /<span class="number">0</span></span><br><span class="line">  &#125;<span class="keyword">catch</span> &#123;</span><br><span class="line">    <span class="keyword">case</span> ex:<span class="type">ArithmeticException</span>=&gt;&#123;</span><br><span class="line">      println(<span class="string">&quot;异常：&quot;</span>+ex.getMessage)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> exception: <span class="type">Exception</span>=&gt;&#123;</span><br><span class="line">      println(exception.getMessage)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">    printf(<span class="string">&quot;完成&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Scala 提供了 <code>throws</code> 关键字来声明异常。可以使用方法定义声明异常。 它向调用者函数提供了此方法可能引发此异常的信息。 它有助于调用函数处理并将该代码包含在 try-catch 块中，以避免程序异常终止。在 scala 中，可以使用<code>@throws</code> 注释来声明异常</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@throws</span> (classOf[<span class="type">ArithmeticException</span>])</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function1</span></span>(): <span class="type">Unit</span> =&#123;</span><br><span class="line">  <span class="keyword">var</span> n = <span class="number">10</span>/<span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、Scala-构造器的基本语法"><a href="#4、Scala-构造器的基本语法" class="headerlink" title="4、Scala 构造器的基本语法"></a>4、Scala 构造器的基本语法</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">类名</span>(<span class="params"> 形参列表</span>) </span>&#123; <span class="comment">//  主构造器</span></span><br><span class="line"><span class="comment">//  类体</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">this</span></span>( 形参列表) &#123; <span class="comment">//  辅助构造器</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">this</span></span>( 形参列表) &#123; <span class="comment">// 辅助构造器可以有多个...</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="属性高级"><a href="#属性高级" class="headerlink" title="属性高级"></a>属性高级</h4><blockquote><ul><li><ol><li>Scala 类的主构造器的形参<code>未用任何修饰符修饰</code>，那么这个参数是局部变量。</li></ol></li><li><ol start="2"><li>如果参数使用 <code>val</code> 关键字声明，那么 Scala 会将参数作为类的私有的只读属性使用</li></ol></li><li><ol start="3"><li>如果参数使用 <code>var</code> 关键字声明，那么那么 Scala 会将参数作为类的成员属性使用,并会提供属性对应的xxx()[类似 getter]/xxx_$eq()[类似 setter]方法，即这时的成员属性是私有的，但是可读写。</li></ol></li></ul></blockquote><h4 id="Bean-属性"><a href="#Bean-属性" class="headerlink" title="Bean 属性"></a>Bean 属性</h4><blockquote><p>JavaBeans 规范定义了 Java 的属性是像 getXxx（）和 setXxx（）的方法。许多 Java 工具（框架）都依赖这个命名习惯。为了 Java 的互操作性。将 Scala 字段加<code>@BeanProperty</code> 时，这样会自动生成规范的 setXxx/getXxx 方法。这时可以使用 对象.setXxx() 和 对象.getXxx() 来调用属性。</p></blockquote><ul><li><ol><li>给某个属性加入<code>@BeanPropetry</code> 注解后，会生成 getXXX 和 setXXX 的方法</li></ol></li><li><ol start="2"><li>并且对 原来底层自动生成类似 xxx(),xxx_$eq()</li></ol></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">  <span class="meta">@BeanProperty</span> <span class="keyword">var</span> name: <span class="type">String</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="meta">@BeanProperty</span> <span class="keyword">var</span> age: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line">  <span class="meta">@BeanProperty</span> <span class="keyword">var</span> color: <span class="type">String</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(name: <span class="type">String</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>()</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span> </span>= <span class="string">s&quot;Cat(<span class="subst">$name</span>, <span class="subst">$age</span>, <span class="subst">$color</span>)&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、Scala-中包的可见性和访问修饰符的使用"><a href="#5、Scala-中包的可见性和访问修饰符的使用" class="headerlink" title="5、Scala 中包的可见性和访问修饰符的使用"></a>5、Scala 中包的可见性和访问修饰符的使用</h3><blockquote><ul><li><ol><li>当属性访问权限为默认时，从底层看属性是 private 的，但是因为提供了 xxx_$eq()[类似 setter]/xxx()[类似getter] 方法，因此从使用效果看是任何地方都可以访问)。</li></ol></li><li><ol start="2"><li>当方法访问权限为默认时，默认为 public 访问权限。</li></ol></li><li><ol start="3"><li><code>private</code> 为私有权限，只在类的内部和伴生对象中可用。</li></ol></li><li><ol start="4"><li><code>protected</code> 为受保护权限，scala  中受保护权限比 Java  中更严格 ， <strong>只能子类访问，问同包无法访问</strong> (编译器从语法层面控制)。</li></ol></li><li><ol start="5"><li><strong>在 scala 中没有 public 关键字</strong>,即不能用 public 显式的修饰属性和方法。</li></ol></li></ul></blockquote><p><strong>scala 设计者将访问的方式分成三大类: (1) 处处可以访问 public (2) 子类和伴生对象能访问 protected (3) 本类和伴生对象访问 private</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line"><span class="comment">//import 可以放在任何的地方，同时他的作用范围就是&#123;&#125; 块中</span></span><br><span class="line"><span class="comment">//import 如果使用到 3 次及以上，则可以放在文件前面,否则可以使用就近引入.</span></span><br><span class="line"><span class="keyword">import</span> scala.beans.<span class="type">BeanProperty</span></span><br><span class="line"><span class="meta">@BeanProperty</span> <span class="keyword">var</span> name : <span class="type">String</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Java 中如果想要导入包中所有的类，可以通过通配符*，Scala 中采用下 _</span></span><br><span class="line"><span class="comment">//如果不想要某个包中全部的类，而是其中的几个类，可以采用选取器,使用&#123;&#125; 括起来即可。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果有多个同名的类或者 trait 等，可以使用 scala 重命名的机制来解决.</span></span><br><span class="line"><span class="keyword">import</span> java.util.&#123; <span class="type">HashMap</span>=&gt;<span class="type">JavaHashMap</span>, <span class="type">List</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果某个冲突的类根本就不会用到，那么这个类可以直接隐藏掉</span></span><br><span class="line"><span class="keyword">import</span> java.util.&#123; <span class="type">HashMap</span>=&gt;_, _&#125; <span class="comment">// 含义为 引入 java.util 包的所有类，但是忽略 HahsMap 类</span></span><br></pre></td></tr></table></figure><h3 id="6、继承"><a href="#6、继承" class="headerlink" title="6、继承"></a>6、继承</h3><h4 id="重写方法"><a href="#重写方法" class="headerlink" title="重写方法"></a>重写方法</h4><p><strong>Scala 明确规定， 重写一个非抽象方法需要用 override  修饰符，调用超类的方法使用 super  关键字</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="keyword">var</span> student = <span class="keyword">new</span> student</span><br><span class="line">  student.name = <span class="string">&quot;michong&quot;</span></span><br><span class="line">  student.num = <span class="string">&quot;123123&quot;</span></span><br><span class="line"></span><br><span class="line">  student.getInfo()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> name: <span class="type">String</span> = _</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">getInfo</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">&quot;姓名：&quot;</span> + name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span> <span class="keyword">extends</span> <span class="title">person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> num: <span class="type">String</span> = _</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">getInfo</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">super</span>.getInfo()</span><br><span class="line">    println(<span class="string">&quot;学号：&quot;</span> + num)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Scala-中类型检查和转换"><a href="#Scala-中类型检查和转换" class="headerlink" title="Scala 中类型检查和转换"></a>Scala 中类型检查和转换</h4><p><strong>基本介绍</strong></p><blockquote><p>要测试某个对象是否属于某个给定的类，可以用 <code>isInstanceOf</code> 方法。用 <code>asInstanceOf</code> 方法将引用转换为子类的引用。<code>classOf</code> 获取对象的类名。</p></blockquote><ul><li><ol><li>classOf[String]就如同 Java 的 String.class 。</li></ol></li><li><ol start="2"><li>obj.isInstanceOf[T]就如同 Java 的 obj instanceof T 判断 obj 是不是 T 类型。</li></ol></li><li><ol start="3"><li>obj.asInstanceOf[T]就如同 Java 的(T)obj 将 obj 强转成 T 类型</li></ol></li></ul><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> student:person = <span class="keyword">new</span> student</span><br><span class="line">student.name = <span class="string">&quot;michong&quot;</span></span><br><span class="line">student.asInstanceOf[student].num = <span class="string">&quot;123123&quot;</span></span><br></pre></td></tr></table></figure><h4 id="var-重写抽象的-var-属性小结"><a href="#var-重写抽象的-var-属性小结" class="headerlink" title="var 重写抽象的 var 属性小结"></a>var 重写抽象的 var 属性小结</h4><blockquote><ul><li>一个属性没有初始化，那么这个属性就是抽象属性</li><li>抽象属性在编译成字节码文件时，属性并不会声明，但是会自动生成抽象方法，所以类必须声明为抽象类</li><li>如果是覆写一个父类的抽象属性，那么 <code>override</code> 关键字可省略 [原因：父类的抽象属性，生成的是抽象方法，因此就不涉及到方法重写的概念，因此 <code>override</code> 可省略]</li></ul></blockquote><h4 id="Scala-抽象类"><a href="#Scala-抽象类" class="headerlink" title="Scala 抽象类"></a>Scala 抽象类</h4><blockquote><ul><li><ol><li>抽象类不能被实例</li></ol></li><li><ol start="2"><li>抽象类不一定要包含 abstract 方法。也就是说,抽象类可以没有 abstract 方法</li></ol></li><li><ol start="3"><li>一旦类包含了抽象方法或者抽象属性,则这个类必须声明为 abstract</li></ol></li><li><ol start="4"><li>抽象方法不能有主体，不允许使用 abstract 修饰。</li></ol></li><li><ol start="5"><li>如果一个类继承了抽象类，则它必须实现抽象类的所有抽象方法和抽象属性，除非它自己也声明为 abstract类。【案例演示+反编译】</li></ol></li><li><ol start="6"><li>抽象方法和抽象属性不能使用 private、final 来修饰，因为这些关键字都是和重写/实现相违背的。</li></ol></li><li><ol start="7"><li>抽象类中可以有实现的方法.</li></ol></li><li><ol start="8"><li>子类重写抽象方法不需要 override，写上也不会错.</li></ol></li></ul></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name:<span class="type">String</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">student</span> <span class="keyword">extends</span> <span class="title">person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name:<span class="type">String</span>=<span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="匿名子类"><a href="#匿名子类" class="headerlink" title="匿名子类"></a>匿名子类</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">  <span class="comment">//抽象类，他不能实例化，我们可以通过匿名子类的方式创建一个实例</span></span><br><span class="line">  <span class="keyword">val</span> p = <span class="keyword">new</span> person &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="keyword">var</span> name: <span class="type">String</span> = <span class="string">&quot;123&quot;</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">info</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">      println(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  p.info()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name:<span class="type">String</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">info</span></span>()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7、伴生对象"><a href="#7、伴生对象" class="headerlink" title="7、伴生对象"></a>7、伴生对象</h3><blockquote><ul><li><ol><li>Scala 中伴生对象采用 <code>object</code> 关键字声明，伴生对象中声明的全是 “<code>静态</code>“内容，可以通过伴生对象名称直接调用。</li></ol></li><li><ol start="2"><li>伴生对象对应的类称之为伴生类，伴生对象的名称应该和伴生类名一致。</li></ol></li><li><ol start="3"><li>伴生对象中的属性和方法都可以通过伴生对象名直接调用访问</li></ol></li><li><ol start="4"><li>从语法角度来讲，所谓的伴生对象其实就是类的静态方法和静态变量的集合</li></ol></li><li><ol start="5"><li>从技术角度来讲，scala 还是没有生成静态的内容，只不过是将伴生对象生成了一个新的类，实现属性和方法的调用。[反编译看源码]</li></ol></li><li><ol start="6"><li>从底层原理看，伴生对象实现静态特性是依赖于 <code>public static final MODULE$</code> 实现的。</li></ol></li><li><ol start="7"><li> 伴生对象的声明应该和伴生类的声明在同一个源码文件中(如果不在同一个文件中会运行错误!)，但是如果没有伴生类，也就没有所谓的伴生对象了，所以放在哪里就无所谓了。</li></ol></li><li><ol start="8"><li>如果 class A 独立存在，那么 A 就是一个类， 如果 object A 独立存在，那么 A 就是一个”静态”性质的对象[即类对象], 在 object A 中声明的属性和方法可以通过 A.属性 和 A.方法 来实现调用</li></ol></li></ul></blockquote><p><strong>案例</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.buildworld.scala.day2</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">demo1</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> p1 = <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">&quot;michong&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> p2 = <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">&quot;qjzxzxd&quot;</span>)</span><br><span class="line">    <span class="keyword">val</span> p3 = <span class="keyword">new</span> <span class="type">Person</span>(<span class="string">&quot;米虫&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="type">Person</span>.joinGroup(p1)</span><br><span class="line">    <span class="type">Person</span>.joinGroup(p2)</span><br><span class="line">    <span class="type">Person</span>.joinGroup(p3)</span><br><span class="line"></span><br><span class="line">    <span class="type">Person</span>.showInfo()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">pname: <span class="type">String</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name: <span class="type">String</span> = pname</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">object</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> num: <span class="type">Int</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">joinGroup</span></span>(person: <span class="type">Person</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">      num += <span class="number">1</span></span><br><span class="line">      println(person.name + <span class="string">&quot;--加入组织&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">showInfo</span></span>(): <span class="type">Unit</span> =&#123;</span><br><span class="line">       println(<span class="string">&quot;当前&quot;</span>+num+<span class="string">&quot;人&quot;</span>)</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">say</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">      println(<span class="string">&quot;Say Hi&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8、特质-trait"><a href="#8、特质-trait" class="headerlink" title="8、特质(trait)"></a>8、特质(trait)</h3><h4 id="trait的声明"><a href="#trait的声明" class="headerlink" title="trait的声明"></a><strong>trait的声明</strong></h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">名</span> <span class="title">特质名</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">体</span> <span class="title">体</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>) <span class="class"><span class="keyword">trait</span> <span class="title">命名</span> <span class="title">一般首字母大写</span>.</span></span><br><span class="line"><span class="number">2</span>) 在 scala 中，java 中的接口可以当做特质使用</span><br></pre></td></tr></table></figure><p><strong>trait使用</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#没有父类</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">类名</span> <span class="keyword">extends</span> <span class="title">质</span> <span class="title">特质</span> 1 <span class="keyword">with</span> <span class="title">质</span> <span class="title">特质</span> 2 <span class="keyword">with</span> <span class="title">质</span> <span class="title">特质</span> 3 ..</span></span><br><span class="line">#有父类</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">类名</span> <span class="keyword">extends</span> <span class="title">父类</span> <span class="keyword">with</span> <span class="title">质</span> <span class="title">特质</span> 1 <span class="keyword">with</span> <span class="title">质</span> <span class="title">特质</span> 2 <span class="keyword">with</span>  </span></span><br></pre></td></tr></table></figure><h4 id="带有特质的对象，动态混入"><a href="#带有特质的对象，动态混入" class="headerlink" title="带有特质的对象，动态混入"></a><strong>带有特质的对象，动态混入</strong></h4><blockquote><ul><li><ol><li>除了可以在类声明时继承特质以外，还可以在构建对象时混入特质，扩展目标类的功能【反编译看动态混入本质】</li></ol></li><li><ol start="2"><li>此种方式也可以应用于对抽象类功能进行扩展</li></ol></li><li><ol start="3"><li>动态混入是 Scala 特有的方式（java 没有动态混入），可在不修改类声明/定义的情况下，扩展类的功能，非常的灵活，耦合性低 。</li></ol></li><li><ol start="4"><li>动态混入可以在不影响原有的继承关系的基础上，给指定的类扩展功能。[如何理解]</li></ol></li><li><ol start="5"><li>抽象类中有 抽象的方法，如何动态混入特质-&gt;可以，在创建实例时，实现抽象方法即可</li></ol></li></ul></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.buildworld.scala.day2</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">demo2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> c = <span class="keyword">new</span> <span class="type">C</span></span><br><span class="line">    c.getConnect(<span class="string">&quot;root&quot;</span>,<span class="string">&quot;123456&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 带有特质的对象，动态混入</span></span><br><span class="line">    <span class="keyword">val</span> b = <span class="keyword">new</span> <span class="type">B</span> <span class="keyword">with</span> <span class="type">Trait1</span>&#123;</span><br><span class="line">      <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">getConnect</span></span>(user: <span class="type">String</span>, pwd: <span class="type">String</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">        println(<span class="string">&quot;用户登录信息：user: &quot;</span>+user+<span class="string">&quot; pwd: &quot;</span>+pwd)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    b.getConnect(<span class="string">&quot;root&quot;</span>,<span class="string">&quot;123456&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">trait</span> <span class="title">Trait1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getConnect</span></span>(user:<span class="type">String</span>,pwd:<span class="type">String</span>): <span class="type">Unit</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span> <span class="keyword">with</span> <span class="title">Trait1</span></span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">getConnect</span></span>(user: <span class="type">String</span>, pwd: <span class="type">String</span>): <span class="type">Unit</span> = &#123;</span><br><span class="line">      println(<span class="string">&quot;用户登录信息：user: &quot;</span>+user+<span class="string">&quot; pwd: &quot;</span>+pwd)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">D</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">E</span> <span class="keyword">extends</span> <span class="title">D</span> <span class="keyword">with</span> <span class="title">Trait1</span></span>&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">getConnect</span></span>(user: <span class="type">String</span>, pwd: <span class="type">String</span>): <span class="type">Unit</span> = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="特质构造顺序"><a href="#特质构造顺序" class="headerlink" title="特质构造顺序"></a><strong>特质构造顺序</strong></h4><blockquote><p>特质也是有构造器的，构造器中的内容由“字段的初始化”和一些其他语句构成。具体实现请参考“特质叠加”</p></blockquote><ul><li><strong>第一种特质构造顺序(声明类的同时混入特质)</strong></li></ul><blockquote><ol><li>调用当前类的超类构造器</li><li>第一个特质的父特质构造器</li><li>第一个特质构造器</li><li>第二个特质构造器的父特质构造器, 如果已经执行过，就不再执行</li><li>第二个特质构造器</li><li>…….重复 4,5 的步骤(如果有第 3 个，第 4 个特质)</li></ol></blockquote><ul><li><strong>第 2 种特质构造顺序(在构建对象时，动态混入特质)</strong></li></ul><blockquote><ol><li>调用当前类的超类构造</li><li>当前类构造</li><li>第一个特质构造器的父特质构造器</li><li>第一个特质构造器.</li><li>第二个特质构造器的父特质构造器, 如果已经执行过，就不再执行</li><li>第二个特质构造器</li><li>……重复 5,6 的步骤(如果有第 3 个，第 4 个特质)</li></ol></blockquote><h4 id="自身类型"><a href="#自身类型" class="headerlink" title="自身类型"></a>自身类型</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#在<span class="type">Logger</span>中已经可以使用<span class="type">Exception</span>中的相关的方法了</span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Logger</span></span>&#123;</span><br><span class="line">  <span class="keyword">this</span>:<span class="type">Exception</span>=&gt;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">log</span></span>()=&#123;</span><br><span class="line">    println(getMessage)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#使用<span class="type">MyLogger</span>时先继承<span class="type">Exception</span>类</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyLogger</span> <span class="keyword">extends</span> <span class="title">Exception</span> <span class="keyword">with</span> <span class="title">Logger</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h4><blockquote><ul><li>方式 1<br>内部类如果想要访问外部类的属性，可以通过外部类对象访问。即：访问方式：<strong>外部类名.this.属性名</strong></li><li>方式 2<br>内部类如果想要访问外部类的属性，也可以通过外部类别名访问(推荐)。即：<strong>访问方式：外部类名别名.属性名</strong> 【外部类名.this 等价 外部类名别名】</li></ul></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AAA</span></span>&#123;</span><br><span class="line"></span><br><span class="line">  myOuter=&gt;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">InnerAAA</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用别名的方式来访问外部类的属性和方法，相当于 myouter 是一个外部类的实例 AAA.this</span></span><br><span class="line">    <span class="comment">//这时需要将外部类的属性和方法的定义/声明放在别名后</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test</span></span>(innerAAA: <span class="type">InnerAAA</span>): <span class="type">Unit</span> =&#123;</span><br><span class="line">      println(innerAAA)</span><br><span class="line"></span><br><span class="line">      println(myOuter.name)</span><br><span class="line">      println(myOuter.sal)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> name:<span class="type">String</span>=_</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> sal:<span class="type">Double</span>=_</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9、隐式转换"><a href="#9、隐式转换" class="headerlink" title="9、隐式转换"></a>9、隐式转换</h3><h4 id="隐式值"><a href="#隐式值" class="headerlink" title="隐式值"></a>隐式值</h4><blockquote><p>隐式值也叫隐式变量，将某个形参变量标记为 implicit，所以编译器会在方法省略隐式参数的情况下去搜索作用域内的隐式值作为缺省参数</p></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.buildworld.scala.day2</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">demo5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//隐式值</span></span><br><span class="line">    <span class="keyword">implicit</span> <span class="keyword">val</span> str1:<span class="type">String</span> = <span class="string">&quot;michong&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hello</span></span>(<span class="keyword">implicit</span> name:<span class="type">String</span>): <span class="type">Unit</span> =&#123;</span><br><span class="line">      println(name)</span><br><span class="line">    &#125;</span><br><span class="line">    hello</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="隐式类"><a href="#隐式类" class="headerlink" title="隐式类"></a>隐式类</h4><blockquote><ul><li><ol><li>其所带的 构造参数有且只能有一个</li></ol></li><li><ol start="2"><li>隐式类必须被定义在“类”或“伴生对象”或“包对象”里，即隐式类不能是顶级的(top-level objects)</li></ol></li><li><ol start="3"><li>隐式类不能是 case class（case class 在后续介绍样例类）</li></ol></li><li><ol start="4"><li>作用域内不能有与之相同名称的标识符</li></ol></li></ul></blockquote><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.buildworld.scala.day2</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">demo5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> db = <span class="keyword">new</span> <span class="type">MySql</span></span><br><span class="line">    db.add()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">  <span class="comment">//隐式类</span></span><br><span class="line">  <span class="keyword">implicit</span> <span class="class"><span class="keyword">class</span> <span class="title">DB</span>(<span class="params">val m :<span class="type">MySql</span></span>)</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span></span>(): <span class="type">Unit</span> =&#123;</span><br><span class="line">      println(<span class="string">&quot;添加&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">MySql</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="隐式函数"><a href="#隐式函数" class="headerlink" title="隐式函数"></a>隐式函数</h4><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.buildworld.scala.day2</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">demo4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//隐式函数</span></span><br><span class="line">    <span class="keyword">implicit</span> <span class="function"><span class="keyword">def</span> <span class="title">addDelete</span></span>(mySql: <span class="type">MySql</span>):<span class="type">DB</span>=&#123;</span><br><span class="line">       <span class="keyword">new</span> <span class="type">DB</span></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">var</span> db = <span class="keyword">new</span> <span class="type">MySql</span></span><br><span class="line">    db.delete()</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">MySql</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">DB</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span></span>(): <span class="type">Unit</span> =&#123;</span><br><span class="line">      println(<span class="string">&quot;删除数据！！！&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="隐式解析机制"><a href="#隐式解析机制" class="headerlink" title="隐式解析机制"></a>隐式解析机制</h4><blockquote><ul><li><ol><li>首先会在 当前代码作用域下查找隐式实体（隐式方法、隐式类、隐式对象）。(一般是这种情况)</li></ol></li><li><ol start="2"><li>如果第一条规则查找隐式实体失败，会继续在隐式参数的类型的作用域里查找。类型的作用域是指与该类型相关联的全部伴生模块，一个隐式实体的类型 T 它的查找范围如下( 第二种情况范围广且复杂在使用时，应当尽量避免出现)：</li></ol></li><li><p>a) 如果 T 被定义为 T with A with B with C,那么 A,B,C 都是 T 的部分，在 T 的隐式解析过程中，它们的伴生对象都会被搜索。</p></li><li><p>b) 如果 T 是参数化类型，那么类型参数和与类型参数相关联的部分都算作 T 的部分，比如 List[String]的隐式搜索会搜索 List 的伴生对象和 String 的伴生对象。</p></li><li><p>c) 如果 T 是一个单例类型 p.T，即 T 是属于某个 p 对象内，那么这个 p 对象也会被搜索。</p></li><li><p>d) 如果 T 是个类型注入 S#T，那么 S 和 T 都会被搜索。</p></li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BigData-Apache HBase数据库</title>
      <link href="/2020/07/09/BigData-Apache-HBase%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2020/07/09/BigData-Apache-HBase%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="HBase"><a href="#HBase" class="headerlink" title="HBase"></a>HBase</h2><h2 id="HBase-1"><a href="#HBase-1" class="headerlink" title="HBase"></a>HBase</h2><blockquote><p>Apache](<a href="https://www.apache.org/">https://www.apache.org/</a>) HBase™ is the <a href="https://hadoop.apache.org/">Hadoop</a> database, a distributed, scalable, big data store.</p></blockquote><h2 id="一、HBase原理"><a href="#一、HBase原理" class="headerlink" title="一、HBase原理"></a>一、HBase原理</h2><h3 id="1、数据模型"><a href="#1、数据模型" class="headerlink" title="1、数据模型"></a>1、数据模型</h3><h4 id="1-）-Name-Space"><a href="#1-）-Name-Space" class="headerlink" title="1 ） Name Space"></a>1 ） Name Space</h4><blockquote><p>命名空间，类似于关系型数据库的 DatabBase 概念，每个命名空间下有多个表。HBase有两个自带的命名空间，分别是 <code>hbase</code> 和 <code>default</code>，hbase 中存放的是 HBase 内置的表，default 表是用户默认使用的命名空间。</p></blockquote><h4 id="2-）-Region"><a href="#2-）-Region" class="headerlink" title="2 ） Region"></a>2 ） Region</h4><blockquote><p>类似于关系型数据库的表概念。不同的是，HBase 定义表时只需要声明列族即可，不需要声明具体的列。这意味着，往 HBase 写入数据时，字段可以动态、按需指定。因此，和关系型数据库相比，HBase 能够轻松应对字段变更的场景。</p></blockquote><h4 id="3-）-Row"><a href="#3-）-Row" class="headerlink" title="3 ） Row"></a>3 ） Row</h4><blockquote><p>HBase 表中的每行数据都由一个 <code>RowKey</code> 和多个  <code>Column</code>（列）组成，数据是按照 <code>RowKey</code>的字典顺序存储的，并且查询数据时只能根据 <code>RowKey</code> 进行检索，所以 <code>RowKey</code> 的设计十分重要。</p></blockquote><h4 id="4-）-Column"><a href="#4-）-Column" class="headerlink" title="4 ） Column"></a>4 ） Column</h4><blockquote><p>HBase 中的每个列都由 Column Family(列族)和 Column Qualifier（列限定符）进行限定，例如 <code>info：name，info：age</code>。建表时，只需指明列族，而列限定符无需预先定义。</p></blockquote><h3 id="2、HBase基础架构"><a href="#2、HBase基础架构" class="headerlink" title="2、HBase基础架构"></a>2、HBase基础架构</h3><p><img src="https://file.buildworld.cn/img/20200705133837.png"></p><h4 id="1-）-Region-Server"><a href="#1-）-Region-Server" class="headerlink" title="1 ） Region Server"></a>1 ） Region Server</h4><blockquote><p><code>Region Server</code> 为 Region 的管理者，其实现类为 <code>HRegionServer</code>，主要作用如下:<br>对于数据的操作：<code>get, put, delete</code>；<br>对于 Region 的操作：<code>splitRegion、compactRegion</code>。</p></blockquote><h3 id="2-）-Master"><a href="#2-）-Master" class="headerlink" title="2 ） Master"></a>2 ） Master</h3><blockquote><p><code>Master</code> 是所有 <code>Region Server</code> 的管理者，其实现类为 <code>HMaster</code>，主要作用如下：<br>对于表的操作：<code>create, delete, alter</code><br>对于<code>RegionServer</code>的操作：分配<code>regions</code>到每个<code>RegionServer</code>，监控每个<code>RegionServer</code>的状态，负载均衡和故障转移。</p></blockquote><h4 id="3-）-Zookeeper"><a href="#3-）-Zookeeper" class="headerlink" title="3 ） Zookeeper"></a>3 ） Zookeeper</h4><blockquote><p><code>HBase</code> 通过 <code>Zookeeper</code> 来做 Master 的高可用、<code>RegionServer</code> 的监控、元数据的入口以及集群配置的维护等工作。</p></blockquote><h4 id="4-）-HDFS"><a href="#4-）-HDFS" class="headerlink" title="4 ） HDFS"></a>4 ） HDFS</h4><blockquote><p><code>HDFS</code> 为 <code>HBase</code> 提供最终的底层数据存储服务，同时为 <code>HBase</code> 提供高可用的支持。</p></blockquote><h3 id="3、HBase架构详解"><a href="#3、HBase架构详解" class="headerlink" title="3、HBase架构详解"></a>3、HBase架构详解</h3><p><img src="https://file.buildworld.cn/img/20200706133638.png"></p><h4 id="1）StoreFile"><a href="#1）StoreFile" class="headerlink" title="1）StoreFile"></a>1）StoreFile</h4><blockquote><p>保存实际数据的物理文件，<code>StoreFile</code> 以 <code>HFile</code> 的形式存储在 HDFS 上。每个 <code>Store</code> 会有一个或多个 <code>StoreFile（HFile</code>），数据在每个 <code>StoreFile</code> 中都是有序的。</p></blockquote><h4 id="2）MemStore"><a href="#2）MemStore" class="headerlink" title="2）MemStore"></a>2）MemStore</h4><blockquote><p>写缓存，由于 <code>HFile</code> 中的数据要求是有序的，所以数据是先存储在 <code>MemStore</code> 中，排好序后，等到达刷写时机才会刷写到 <code>HFile</code>，每次刷写都会形成一个新的 <code>HFile</code>。 </p></blockquote><h4 id="3）WAL（Write-Ahead-logfile）"><a href="#3）WAL（Write-Ahead-logfile）" class="headerlink" title="3）WAL（Write-Ahead logfile）"></a>3）WAL（Write-Ahead logfile）</h4><blockquote><p>由于数据要经 <code>MemStore</code> 排序后才能刷写到 <code>HFile</code>，但把数据保存在内存中会有很高的概率导致数据丢失，为了解决这个问题，数据会先写在一个叫做 <code>Write-Ahead logfile</code> 的文件中，然后再写入 <code>MemStore</code> 中。所以在系统出现故障的时候，数据可以通过这个日志文件重建。<strong>（HLog）</strong></p></blockquote><h3 id="4、HBase写流程"><a href="#4、HBase写流程" class="headerlink" title="4、HBase写流程"></a>4、HBase写流程</h3><p><img src="https://file.buildworld.cn/img/20200706193753.png"></p><blockquote><ul><li>1）<code>Client</code> 先访问 <code>zookeeper</code>，获取 <code>hbase:meta</code> 表位于哪个 <code>Region Server</code>。 </li><li>2）访问对应的 <code>Region Server</code>，获取 <code>hbase:meta</code> 表，根据读请求的 <code>namespace:table/rowkey</code>，查询出目标数据位于哪个 <code>Region Server</code> 中的哪个 <code>Region</code> 中。并将该 <code>table</code> 的 <code>region</code> 信息以及 <code>meta</code> 表的位置信息缓存在客户端的 <code>meta cache</code>，方便下次访问。</li><li>3）与目标 <code>Region Server</code> 进行通讯；</li><li>4）将数据顺序写入（追加）到 WAL； </li><li>5）将数据写入对应的 <code>MemStore</code>，数据会在 <code>MemStore</code> 进行排序； </li><li>6）向客户端发送 <code>ack</code>； </li><li>7）等达到 <code>MemStore</code> 的刷写时机后，将数据刷写到 <code>HFile</code>。</li></ul></blockquote><h3 id="5、读流程"><a href="#5、读流程" class="headerlink" title="5、读流程"></a>5、读流程</h3><p><img src="https://file.buildworld.cn/img/20200706223000.png"></p><blockquote><ul><li>1）<code>Client</code> 先访问 <code>zookeeper</code>，获取 <code>hbase:meta</code> 表位于哪个 <code>Region Server</code>。 </li><li>2）访问对应的 <code>Region Server</code>，获取 <code>hbase:meta</code> 表，根据读请求的 <code>namespace:table/rowkey</code>，查询出目标数据位于哪个 <code>Region Server</code> 中的哪个 <code>Region</code> 中。并将该 <code>table</code> 的 <code>region</code> 信息以及 <code>meta</code> 表的位置信息缓存在客户端的 <code>meta cache</code>，方便下次访问。</li><li>3）与目标 <code>Region Server</code> 进行通讯；</li><li>4）分别在 <code>Block Cache</code>（读缓存），<code>MemStore</code> 和 <code>Store File（HFile）</code>中查询目标数据，并将查到的所有数据进行合并。此处所有数据是指同一条数据的不同版本<code>（time stamp）</code>或者不同的类型<code>（Put/Delete）</code>。</li><li>5） 将从文件中查询到的数据块（Block，HFile 数据存储单元，默认大小为 64KB）缓存到<code>Block Cache</code>。 </li><li>6）将合并后的最终结果返回给客户端。</li></ul></blockquote><p><strong>内存和磁盘同时读取，但是将两个数据进行对比，返回时间戳大的数据，所以说HBase读取比写入要慢得多</strong></p><h3 id="6、StoreFile-Compaction"><a href="#6、StoreFile-Compaction" class="headerlink" title="6、StoreFile Compaction"></a>6、<strong>StoreFile Compaction</strong></h3><blockquote><p><code>Compaction</code> 分为两种，分别是 <code>Minor Compaction</code> 和 <code>Major Compaction</code>。<code>Minor Compaction</code>会将临近的若干个较小的 <code>HFile</code> 合并成一个较大的 <code>HFile</code>，但<strong>不会清理过期和删除的数据</strong>。<code>Major Compaction</code> 会将一个 <code>Store</code> 下的所有的 <code>HFile</code> 合并成一个大 <code>HFile</code>，并且<strong>会清理掉过期和删除的数据</strong>。 </p></blockquote><p><img src="https://ae01.alicdn.com/kf/Hfc24467fbef54cd39b2f87d5a53bd52cs.jpg"></p><h2 id="二、HBase-API使用（Java）"><a href="#二、HBase-API使用（Java）" class="headerlink" title="二、HBase API使用（Java）"></a>二、HBase API使用（Java）</h2><h3 id="1、添加依赖"><a href="#1、添加依赖" class="headerlink" title="1、添加依赖"></a>1、添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.hbase<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hbase-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、Java调用"><a href="#2、Java调用" class="headerlink" title="2、Java调用"></a>2、Java调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.buildworld.hbase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.client.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.hbase.util.Bytes;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MiChong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-07-09 19:03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Connection connection = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Admin admin = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//1、获取配置文件信息</span></span><br><span class="line">        Configuration configuration = HBaseConfiguration.create();</span><br><span class="line">        configuration.set(<span class="string">&quot;hbase.zookeeper.quorum&quot;</span>, <span class="string">&quot;hadoop102,hadoop103,hadoop104&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//2、创建连接对象</span></span><br><span class="line">            connection = ConnectionFactory.createConnection(configuration);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3、创建Admin对象</span></span><br><span class="line">            admin = connection.getAdmin();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (admin != <span class="keyword">null</span>) &#123;</span><br><span class="line">            admin.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">            connection.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、判断表是否存在</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isTabExist</span><span class="params">(String tableName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//3、判断表是否存在</span></span><br><span class="line">        <span class="keyword">boolean</span> exists = admin.tableExists(TableName.valueOf(tableName));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> exists;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2、创建表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createTable</span><span class="params">(String tableName, String... cfs)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断参数是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (cfs.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请设置&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断表是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (isTabExist(tableName)) &#123;</span><br><span class="line">            System.out.println(tableName + <span class="string">&quot;表已经存在&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建表描述器</span></span><br><span class="line">        HTableDescriptor hTableDescriptor = <span class="keyword">new</span> HTableDescriptor(TableName.valueOf(tableName));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String cf : cfs) &#123;</span><br><span class="line">            <span class="comment">//创建列族描述器</span></span><br><span class="line">            HColumnDescriptor hColumnDescriptor = <span class="keyword">new</span> HColumnDescriptor(cf);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//添加具体的列族信息</span></span><br><span class="line">            hTableDescriptor.addFamily(hColumnDescriptor);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建表</span></span><br><span class="line">        admin.createTable(hTableDescriptor);</span><br><span class="line">        System.out.println(tableName + <span class="string">&quot;表创建成功！&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3、删除表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dropTable</span><span class="params">(String tableName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1、判断表是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (!isTabExist(tableName)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;要删除的表不存在！！！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2、使表下线</span></span><br><span class="line">        admin.disableTable(TableName.valueOf(tableName));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、删除表</span></span><br><span class="line">        admin.deleteTable(TableName.valueOf(tableName));</span><br><span class="line"></span><br><span class="line">        System.out.println(tableName + <span class="string">&quot;表删除成功！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4、创建命名空间</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createNameSpace</span><span class="params">(String ns)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建命名空间描述器</span></span><br><span class="line">        NamespaceDescriptor build = NamespaceDescriptor.create(ns).build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建命名空间</span></span><br><span class="line">            admin.createNamespace(build);</span><br><span class="line">            System.out.println(ns + <span class="string">&quot;命名空间已经创建完成！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NamespaceExistException ne) &#123;</span><br><span class="line">            System.out.println(ns + <span class="string">&quot;命名空间已经存在！！！&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5、往表里面插入数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putData</span><span class="params">(String tableName, String rowKey, String cf, String cn, String value)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取表对象</span></span><br><span class="line">        Table table = connection.getTable(TableName.valueOf(tableName));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建put对象</span></span><br><span class="line">        Put put = <span class="keyword">new</span> Put(Bytes.toBytes(rowKey));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给put对象赋值</span></span><br><span class="line">        put.addColumn(Bytes.toBytes(cf), Bytes.toBytes(cn), Bytes.toBytes(value));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//插入数据</span></span><br><span class="line">        table.put(put);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        table.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6、获取数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getData</span><span class="params">(String tableName, String rowKey, String cf, String cn)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、获取表对象</span></span><br><span class="line">        Table table = connection.getTable(TableName.valueOf(tableName));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、创建Get对象</span></span><br><span class="line">        Get get = <span class="keyword">new</span> Get(Bytes.toBytes(rowKey));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置获取指定族的值</span></span><br><span class="line">        <span class="comment">//get.addFamily(Bytes.toBytes(cf));</span></span><br><span class="line">        <span class="comment">//获取指定族和指定列的值</span></span><br><span class="line">        get.addColumn(Bytes.toBytes(cf), Bytes.toBytes(cn));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、获取数据</span></span><br><span class="line">        Result result = table.get(get);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、解析result</span></span><br><span class="line">        Cell[] cells = result.rawCells();</span><br><span class="line">        <span class="keyword">for</span> (Cell cell : cells) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;CF:&quot;</span> + Bytes.toString(CellUtil.cloneFamily(cell))</span><br><span class="line">                    + <span class="string">&quot; --CN:&quot;</span> + Bytes.toString(CellUtil.cloneQualifier(cell))</span><br><span class="line">                    + <span class="string">&quot; --Value:&quot;</span> + Bytes.toString(CellUtil.cloneValue(cell)));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        table.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//7、获取数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">scanTable</span><span class="params">(String tableName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、获取表对象</span></span><br><span class="line">        Table table = connection.getTable(TableName.valueOf(tableName));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、获取扫描器</span></span><br><span class="line">        Scan scan = <span class="keyword">new</span> Scan(Bytes.toBytes(<span class="string">&quot;1001&quot;</span>));</span><br><span class="line"></span><br><span class="line">        ResultScanner scanner = table.getScanner(scan);</span><br><span class="line">        <span class="keyword">for</span> (Result result : scanner) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Cell cell : result.rawCells()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;CF:&quot;</span> + Bytes.toString(CellUtil.cloneFamily(cell))</span><br><span class="line">                        + <span class="string">&quot; --CN:&quot;</span> + Bytes.toString(CellUtil.cloneQualifier(cell))</span><br><span class="line">                        + <span class="string">&quot; --Value:&quot;</span> + Bytes.toString(CellUtil.cloneValue(cell)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        table.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//8、删除数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteData</span><span class="params">(String tableName, String rowKey, String cf, String cn)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Table table = connection.getTable(TableName.valueOf(tableName));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//构建删除对象</span></span><br><span class="line">        Delete delete = <span class="keyword">new</span> Delete(Bytes.toBytes(rowKey));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//删除指定的列族</span></span><br><span class="line">        <span class="comment">//delete.addFamily(Bytes.toBytes(cf));</span></span><br><span class="line">        delete.addColumns(Bytes.toBytes(cf), Bytes.toBytes(cn));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行删除操作</span></span><br><span class="line">        table.delete(delete);</span><br><span class="line"></span><br><span class="line">        table.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1、测试表是否存在</span></span><br><span class="line">        <span class="comment">// System.out.println(isTabExist(&quot;student&quot;));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、创建表测试</span></span><br><span class="line">        <span class="comment">//createTable(&quot;idea:java&quot;, &quot;class&quot;, &quot;desc&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、删除表测试</span></span><br><span class="line">        <span class="comment">//dropTable(&quot;teacher&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//4、测试命名空间创建</span></span><br><span class="line">        <span class="comment">//createNameSpace(&quot;idea&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//5、测试插入如数据</span></span><br><span class="line">        <span class="comment">//putData(&quot;student&quot;,&quot;1003&quot;,&quot;info&quot;,&quot;name&quot;,&quot;michong&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//6、获取表数据</span></span><br><span class="line">        <span class="comment">//getData(&quot;student&quot;, &quot;1001&quot;, &quot;info&quot;, &quot;sex&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//7、扫描表</span></span><br><span class="line">        <span class="comment">//scanTable(&quot;student&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//8、测试删除</span></span><br><span class="line">        deleteData(<span class="string">&quot;student&quot;</span>, <span class="string">&quot;1002&quot;</span>, <span class="string">&quot;info&quot;</span>, <span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HBase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BCI-EEG脑电数据处理</title>
      <link href="/2020/07/07/BCI-EEG%E8%84%91%E7%94%B5%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
      <url>/2020/07/07/BCI-EEG%E8%84%91%E7%94%B5%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="EEG脑电数据处理"><a href="#EEG脑电数据处理" class="headerlink" title="EEG脑电数据处理"></a>EEG脑电数据处理</h2><blockquote><p>脑电波（Electroencephalogram,EEG）是一种使用电生理指标记录大脑活动的方法，大脑在活动时，大量神经元同步发生的突触后电位经总和后形成的。它记录大脑活动时的电波变化，是脑神经细胞的电生理活动在大脑皮层或头皮表面的总体反映。脑机接<br>口（BCI），是一种通过检测中枢神经系统活动并将其转化为人工输出，来替代、修复、增强、补充或者改善中枢神经系统的正常输出，从而改变中枢神经系统与内外环境之间的交互作用的技术。</p></blockquote><h3 id="一、十大基本步骤"><a href="#一、十大基本步骤" class="headerlink" title="一、十大基本步骤"></a>一、十大基本步骤</h3><h4 id="1、-定位通道位置"><a href="#1、-定位通道位置" class="headerlink" title="1、 定位通道位置"></a>1、 定位通道位置</h4><blockquote><p>将EEG数据加载进eeglab之后，<code>eeglab</code>能够读取到的仅仅是每一个通道的名称和数值，但是它并不知道这个通道是位于头皮上的什么地方，因此我们需要加载进一个跟记录数据时相匹配的通道位置信息</p></blockquote><blockquote><p>eeglab中默认的文件是 <strong>standard-10-5-cap385(<a href="https://mp.weixin.qq.com/s?__biz=MzU5NjU4OTc4MA==&mid=2247484433&idx=1&sn=1d4bba3c10192920d8255d899a6d8f28&chksm=fe6129aac916a0bc648142cb3a53c0679cd1c03a21c20553bba0b4858c613cd6dd0e73e8b727&scene=21#wechat_redirect">国际10-5系统</a>)</strong></p></blockquote><h4 id="2、删除无用通道"><a href="#2、删除无用通道" class="headerlink" title="2、删除无用通道"></a>2、删除无用通道</h4><blockquote><p>在<strong>EEGLAB</strong>中预处理数据的时候，使用<code>ICA</code>方式去除眼电成分，这种方式可以不用眼电通道数据的参与就可以进行。</p></blockquote><h4 id="3、滤波"><a href="#3、滤波" class="headerlink" title="3、滤波"></a>3、滤波</h4><blockquote><p>滤波分为<code>高通滤波</code>，<code>低通滤波</code>，<code>带通滤波</code>和<code>凹陷滤波</code>。</p></blockquote><ul><li><strong>高通滤波</strong>是指，高于某个频率的信号可以通过，而低于这个频率的信号会被衰减过滤掉。而<strong>低通滤波</strong>则相反，指的是低于某个频率的信号可以通过，而高于这个频率的信号则相反。所以，在输入数值的时候，高通滤波要输入的是一个较小的数字，而低通滤波则是输入一个较大的数字。这可能跟我们的第一反应有点相悖。因此，也可以用它们的英文叫法来辨别，高通<code>high-pass</code>，低通<code>low-pass</code>，英文看起来就更为直观了。</li><li><strong>带通滤波</strong>，指的是在某个频率段范围内的信号可以通过，而这个频率段范围以外的信号会被衰减过滤掉，就相当于同时做了高通滤波和低通滤波。</li><li><strong>凹陷滤波</strong>，指的是在某个频率范围内的信号会被衰减过滤掉，而这个频率范围以外的信号会被保留下来。这个操作通常是用来去除50Hz市电的干扰。我国的50Hz，因此在收集到的信号中，会有一个非常强烈的50Hz频段的信号存在，这就可以用凹陷滤波来去掉。</li></ul><h4 id="4、分段"><a href="#4、分段" class="headerlink" title="4、分段"></a>4、分段</h4><blockquote><p>数据打上<strong>mark</strong>，将数据切分为一段一段，在这些范围以外的的数据，直接去除。</p><p>一般的ERP分段在事件前200毫秒到事件后1000毫秒这个时间段就足够了，因为几乎所有的ERP成分，都是在1秒以内产生的。但是如果后期还要做时频分析的话，则需要将分段时间拉长，扩大到事件前1秒到事件后2秒这个时间段内，因为时频分析的算法，要求数据要有一定的长度。</p></blockquote><h4 id="5、基线校正"><a href="#5、基线校正" class="headerlink" title="5、基线校正"></a>5、基线校正</h4><blockquote><p>被试被认为是处于一个相对平静的状态，此时的脑电活动代表了一个平静状态下的脑电活动，将这段时间内的脑电活动当做成一个基线。</p><p>一般来说，都是以分段中，事件之前这段时间来作为基线的，比如分段为-200毫秒到1000毫秒，那就将所有的数据，减去前200毫米以内数据的均值。</p><p>基线校正的第二个作用是<strong>防止数据漂移带来的影响</strong>。有时候因为某些原因，我们采集到的数据，会呈现一个逐渐缓慢向上漂移的趋势，而在分完段之后，由于向上飘的影响，每一段数据的起点将不在同一个地方，也会使得这段数据的绝对波幅变高。而基线校正就可以校正这种漂移带来的影响，让每一段数据都拥有一个差不多的起点。</p></blockquote><h4 id="6、重参考"><a href="#6、重参考" class="headerlink" title="6、重参考"></a>6、重参考</h4><blockquote><ul><li>首先要解释的是参考的定义。我们看到采集之后的数据是一个个的数值，但这个数值是什么意思呢，就是电极所在位置跟参考电极之间的电位差。</li><li>一般在脑电记录的时候会采用的参考电极有鼻尖参考，cz或头顶中央参考，还有单侧乳突参考，乳突就是耳朵后面一小块突起的区域。我们所看到的每个通道的数值，其实就是指这个通道跟参考通道之间的电位差。</li><li>在分析数据的时候，有时候我们会想要转换参考点的位置。因为不同位置的参考，会对数据造成一定的影响。比如记录时采用的是cz或头顶中央参考，那么自然地，距离cz点较近的电极点，记录到的电位差会非常小，而离得远的电极记录到的电位差就自然会大一点，这种大与小的差异，并不是由认知活动产生的，而是由记录方式产生的。又比如，单侧乳突参考，那脑袋左边的电极点跟右边的电极点，也会存在着记录方式不同产生的电位差不同。</li><li>常用的一些参考位置有双侧乳突平均参考，指将两个乳突数据的平均值作为参考数据，或者是全脑平均参考，指的是将全脑所有数据的均值作为参考数据的方法，不过使用全脑平均参考的时候要注意，眼电数据不要纳入其中，因为眼电数据的波动起伏非常大，很容易对数据造成比较大的干扰。</li></ul></blockquote><h4 id="7、降低采样率"><a href="#7、降低采样率" class="headerlink" title="7、降低采样率"></a>7、降低采样率</h4><blockquote><ul><li>采样率的单位是Hz，指的是一秒内要记录多少个数据点的意思，比如原始数据的采样率是1000Hz的话，就是代表一秒内有1000个数据点。</li><li>在后期分析的时候，我们有时候会想要降低采样率，比如降到500Hz或者250Hz。这样做最大的好处其实就是减小数据量，以提高计算速度，没有其他的作用了。所以这一步并不是必须的。</li><li>但降低采样率需要注意两点，<strong>一是降低采样率要在滤波之后</strong>。因为降低采样率会使我们丢失高频信息，使高频信息变得扭曲，所以最好在保留了我们感兴趣波段之后再去降低采样率，这样可以保证信号最大程度不会失真。<strong>二是有一个采样定理，</strong>理论上来说，我们的采样率必须是我们想要分析的波段的两倍，比如我们想要分析60Hz的波，那数据采样率为120Hz就足够了。实际上，建议采样率最好在分析波段的三到四倍。</li></ul></blockquote><h4 id="8、插值坏导"><a href="#8、插值坏导" class="headerlink" title="8、插值坏导"></a>8、插值坏导</h4><blockquote><ul><li>在做完上述这些处理之后，可以保存一下数据。因为在这之前的操作，是每个被试都需要做的基础操作，后期我们可以通过代码来实现批处理。而在这之后的操作，是需要根据每个被试的具体情况具体分析去处理的，因此只能一个个做，不能进行批处理。</li><li>从这一步开始可以说是真正的去除伪迹的过程了。去伪迹大体分为两种，<code>横向操作</code>和<code>纵向操作</code>，<strong>横向即对通道进行校正操作，对数据不好的导联进行插值处理，纵向是指挑出数据不好的trials，删除掉。</strong>建议是先横向处理后再纵向剔除，尽量保留下更多的trials数。</li><li>EEGLAB中插值坏导有两种方式，<strong>一种是以某通道周围几个通道的数据的平均值，来替代这个通道的数据，这种直接通过代码实现即可。</strong> <strong>另外一种是EEGLAB里内置的一种算法实现</strong>，具体换算是什么过程我也不太清楚，但是我问过贾会宾老师，他是推荐使用第二种方法。原因在于，我们记录的是头皮脑电，头是一个球体，因此直接用周围数据的均值来代替这种方法有点粗糙，而EEGLAB内置的方法则会考虑到容积传导效应，以及近的点和远的点贡献的权重不同来进行插值，因此会更加有效。</li></ul></blockquote><h4 id="9、独立主成分分析"><a href="#9、独立主成分分析" class="headerlink" title="9、独立主成分分析"></a>9、独立主成分分析</h4><p><strong><a href="https://mp.weixin.qq.com/s?__biz=MzU5NjU4OTc4MA==&mid=2247486858&idx=1&sn=abb9ba31da1264ca1f2d5a690ee04b4d&chksm=fe612031c916a927a710161d50ac9e5c8969b02141c5952c739e4689d61f59bbdf8e391f7186&scene=21#wechat_redirect">如何识别ICA成分</a></strong></p><blockquote><p>这是一个很有用但也很难的方法，我并不是十分清楚它的原理，只能大概理解，也只能大概描述一下。前面说过，我们记录到的是头皮脑电，脑电帽上划出了一个个的点来表示位置，但是我们在<code>FPz</code>点记录到的数据，就真的是<code>FPz</code>点这个位置头皮下方的区域所产生的电活动？不一定。做过实验的都知道，眨眼会产生影响，左右看会产生影响，帽子戴得太紧导致肌肉紧张也会产生影响，还有左右的<code>FP1，FP2</code>处产生的电活动也会影响到<code>FPz</code>，甚至在离它最远的Oz点下方产生的电活动，也有可能对前方<code>FPz</code>点产生微弱的影响。因为真正的电活动产生于头皮下方颅骨内部，它经过了这么一层又一层的传播之后，不同源的电活动肯定会相互影响，从而导致某个记录点记录到的数据，混合了很多不同成分的电活动。而独立主成分分析，就是要对记录点的数据做一个逆运算，把每个记录点的数据， 分解成一个又一个的成分组成。然后我们再从中剔除掉伪迹成分，比如眨眼的成分，肌肉紧张的成分等，从而得到一个相对干净的数据。</p></blockquote><h4 id="10、剔除坏段"><a href="#10、剔除坏段" class="headerlink" title="10、剔除坏段"></a>10、剔除坏段</h4><blockquote><ul><li>预处理到了这一步，已经接近于完成了。最后一个步骤就是要剔除掉波幅超过100微幅的trial(要求严格一点也可以定位80)，因为波幅起伏这么大的活动，已经不是由认知活动引起的了，肯定是由于其他的动作引起的，所以可以直接剔除掉。</li><li>这一步操作一定要在插值坏导和ICA去除眼电成分之后再做，因为有可能被试眨眼比较频繁，那这么操作下来，有可能就需要删掉接近一半的trials数了，删掉的trials数太多，这个数据也就废了。所以要将它留到最后一步才做，同时，这个操作也能用来检查我们前两步操作是否足够有效。</li></ul></blockquote><h3 id="二、ICA-独立成分分析"><a href="#二、ICA-独立成分分析" class="headerlink" title="二、ICA(独立成分分析)"></a>二、ICA(独立成分分析)</h3><p><strong>ICA是一种分离线性混合源的技术。例如，我们可以尝试混合然后分开两个源。</strong></p><p><a href="https://labeling.ucsd.edu/tutorial/labels">ICA判断网站</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzU5NjU4OTc4MA==&mid=2247485932&idx=1&sn=8749bfe4967f60de387fe7f9ba38be62&chksm=fe612457c916ad41df8ec9f2890458d86ca4ac7df44c360a4e77234e6a26115e40c957cf979a&scene=21#wechat_redirect">结合matlab代码案例解释ICA独立成分分析原理</a></p><h4 id="1、ICA假设"><a href="#1、ICA假设" class="headerlink" title="1、ICA假设"></a>1、ICA假设</h4><blockquote><p>基于ICA的伪影校正可以通过线性分解从EEG数据中分离并去除多种伪影。ICA方法基于以下假设：</p><ul><li>1）在头皮上记录的时间序列是时间上独立的大脑和伪迹活动的空间稳定混合物，</li><li>2）并且大脑，头皮和身体不同部位产生的电势之和为在电极上呈线性关系，</li><li>3）从源到电极的传播延迟可以忽略不计</li></ul></blockquote><h4 id="2、ICA特性"><a href="#2、ICA特性" class="headerlink" title="2、ICA特性"></a>2、ICA特性</h4><blockquote><ul><li>ICA只能分离线性混合的源。</li><li>由于ICA处理的是点云，因此改变点的绘制顺序(EEG中的时间点顺序)对算法的结果几乎没有影响。</li><li>改变通道顺序(例如在EEG中交换电极位置)也不会影响算法的结果。对于脑电信号来说，该算法对电极位置没有先验知识，ICA分量在大多数情况下可以被解析为一个等效偶极子，这证明了ICA能够分离出皮层同步化的致密区域。</li><li> 由于独立分量分析通过最大化源的非高斯性来分离源，所以完美的高斯源是不能被分离的。</li><li> 即使信息源不是独立的，独立分量分析也能找到一个最大独立空间。</li></ul></blockquote><h3 id="三、共空间模式-Common-Spatial-Pattern-CSP"><a href="#三、共空间模式-Common-Spatial-Pattern-CSP" class="headerlink" title="三、共空间模式(Common Spatial Pattern, CSP)"></a>三、共空间模式(Common Spatial Pattern, CSP)</h3><p><a href="https://mp.weixin.qq.com/s?__biz=MzU5NjU4OTc4MA==&mid=2247486495&idx=1&sn=3bb4aa2415bf9c48947f700db3a1a69e&chksm=fe6121a4c916a8b2a585a5e3d10aa38d6e578726e77403efabfb05c14d5855a6916ad7b9e93e&scene=21#wechat_redirect">详细介绍地址</a></p><blockquote><p><code>共空间模式（Common Spatial Pattern, CSP）</code>是一种对两分类任务下的空域滤波特征提取算法，能够从多通道的脑机接口数据里面提取出每一类的空间分布成分。公共空间模式算法的基本原理是利用矩阵的对角化，找到一组最优空间滤波器进行投影，使得两类信号的方差值差异最大化，从而得到具有较高区分度的特征向量。</p></blockquote><h4 id="1、CSP发展史"><a href="#1、CSP发展史" class="headerlink" title="1、CSP发展史"></a>1、CSP发展史</h4><p><img src="https://file.buildworld.cn/img/37d37a272098ac16bee4514f24235efe_640_wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1.png" alt="共空间模式（CSP）的研究概况"></p><blockquote><p>由于不同特征的信息包含在信号的不同频段中，因此考虑EEG信号，可以将其分离到不同的特定频段进行分析。在当前研究的特征提取和特征分类算法中，<code>CSP</code>是性能最好和应用最广泛的特征提取方法。<code>CSP</code>将当前数据转换到另一个新的空间，使得类间数据的方差最大化，类内的方差最小化。</p></blockquote><blockquote><p>通常，在运动想象EEG信号分类中，<code>CSP</code>算法往往选择宽频段（4-40HZ）来进行信号处理。研究表明，这个宽频段包含了大多数的运动想象相关的信息，同时，也包含着其他冗余信息，所以不少研究工作重点考虑这个宽频段的选择最佳问题，以此来改善CSP的分类性能。在提出的<code>共空间频谱模式（CSSP）</code>中，<code>有限脉冲响应（FIR）滤波器</code>在<code>CSP滤波器</code>的基础上进行了优化，通过插入时间延迟τ来实现，该时间延迟τ允许单独调谐频率滤波器，评估若干样本点的时间延迟τ值，并且使用10倍交叉验证来选择最佳值。使用带通滤波器对信号进行滤波，然后进行空间滤波和特征提取。实验结果显示CSSP改进了性能。提出的<code>共稀疏频谱空间模式（CSSSP）</code>进一步改进了CSSP方法，其找到所有信道共用的频谱模式，而非CSSP为每个信道找到不同的频谱模式。</p></blockquote><blockquote><p>已经提出的<code>子带公空间模式（SBCSP）</code>，其中在多个子带处对运动图像EEG信号进行滤波，并且从每个子带提取CSP特征。为了减小子带的维数，<code>线性判别分析（LDA）</code>分别应用于每个子带的特征，并融合在一起以进行分类。 SBCSP实现了比CSP，CSSP和CSSSP更高的分类精度。然而，SBCSP忽略了从不同子带获得的CSP特征的可能关联，因此提出了<code>滤波器组CSP（FBCSP）</code>来解决该问题。 FBCSP计算来自多个子带的CSP特征的互信息，以便选择最具辨识性的特征，所选特征使用支持向量机（SVM）分类器进行分类。 FBCSP的表现优于SBCSP，然而，它仍然使用了若干子带，这些子带依然会带来不少的计算成本的增加。所以提出<code>DFBCSP</code>来解决这个问题，DFBCSP利用单信道（C3，C4或Cz）频带功率的Fisher比（FR）来从多个重叠子频带中选择最具判别性的子频带。然后为每个子带提取CSP特征，并使用SVM分类器进行分类。与SBCSP和FBCSP相比，<strong>DFBCSP实现了更高的分类准确度和更低的计算成本。</strong></p></blockquote><h4 id="DFBCSP框架"><a href="#DFBCSP框架" class="headerlink" title="DFBCSP框架"></a>DFBCSP框架</h4><p><img src="https://file.buildworld.cn/img/e2fc1833625a49db3fba73dec5c9f5e0_640_wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1.png" alt="DFBCSP框架"></p><blockquote><p>考虑<code>DFBCSP</code>的优劣，因此提出了一种改进的<code>DFBCSP</code>方法来解决这些问题。首先，使用从使用所有通道数据生成的特征计算的互信息，而不是像在<code>DFBCSP-FR</code>中那样使用单通道频带功率的FR，来选择能够产生最佳结果的频带。而不使用仅使用单个信道频带功率和FR作为选择子频带（<code>DFBCSP-FR</code>）的方法。这是因为EEG信号主要受噪声污染。因此，如果用于计算FR的单个信道被噪声破坏，则选择出来的频段将会影响分类器的分类精度。这导致选择的子带往往不是最有效的子带，因为可能选择了具有冗余信息的子带。因此，文章建议利用所有可用信道数据通过利用互信息来选择最具判别性的子带，以便获得最佳结果。与使用用于频带选择的单信道信息相比，使用所有信道数据进行频带选择减少了选择具有冗余信息的子频带的机会。</p><p>其次，文章不再像在DFBCSP-FR中那样仅使用来自重叠子带的CSP特征，而是结合利用宽带CSP和CSSP的特征信息，文章引入了7-30Hz的单个宽带以及在4-30Hz范围内的12个重叠子带，带宽为4Hz并且重叠2Hz。</p></blockquote><p><strong>改进DFBCSP算法的详细流程框图</strong></p><p><img src="https://file.buildworld.cn/img/604a420080a816a842b035414e8e6e6e_640_wx_fmt=png&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1.png" alt="改进DFBCSP算法的详细流程框图"></p><h3 id="四、EEG信号特征提取算法-MI方向"><a href="#四、EEG信号特征提取算法-MI方向" class="headerlink" title="四、EEG信号特征提取算法(MI方向)"></a>四、EEG信号特征提取算法(MI方向)</h3><p><strong>EEG信号特征提取就是以脑电信号作为源信号，确定各种参数并以此为向量组成表征信号特征的特征向量。</strong></p><blockquote><p>特征參数主要包括<code>时域信号(如幅值)</code>和<code>频域信号(如频率)</code>两大类，相应的特征提取方法也分为<code>时域法</code>、<code>频域法</code> 和<code>时-频域</code>方法。</p></blockquote><h4 id="1、频域分析"><a href="#1、频域分析" class="headerlink" title="1、频域分析"></a>1、频域分析</h4><blockquote><p>频域分析方法主要是<strong>基于EEG信号各频段功率、相干</strong>等。</p></blockquote><blockquote><p>这类方法是建立在假设EEG信号具有平稳特性的基础上，同时只是考虑信号的频域信息，忽略信号在时间上的分辨率。在EEG信号研究中，常用的频域分析方法包括<code>功率谱估计</code>(<code>直接法和间接法</code>)。</p><p><strong>运动想象EEG信号</strong>的<code>ERD</code>和<code>ERS</code>现象只出现在特定频率范围，比如<code>8-12Hz 的Mu波</code>和<code>18-26Hz 的Beta 波</code>。因此，通过功率谱等谱分析方法，也可以有效地从EEG提取中特征。其中比较出名的方法有自回归功率谱分析、双谱分析法等。</p></blockquote><h4 id="2、时域分析"><a href="#2、时域分析" class="headerlink" title="2、时域分析"></a>2、时域分析</h4><blockquote><p>时域分析方法则主要分析EEG，如<code>幅度</code>、<code>均值</code>、<code>方差</code>、<code>偏歪度</code>、<code>峭度</code>等。</p></blockquote><blockquote><p>这类方法主要是利用EEG波形的性质，如波幅、均值、方差、偏歪度和峭度等对临床EEG记录进行观察分析。在EEG信号研究中，常用的时域分析方法有：<code>过零点分析</code>、<code>直方图分析</code>、<code>方差分析</code>、<code>相关分析</code>、<code>峰值检测</code>、<code>波形参数分析</code>和<code>波形识别</code>等。</p></blockquote><h4 id="3、空域方法："><a href="#3、空域方法：" class="headerlink" title="3、空域方法："></a>3、空域方法：</h4><blockquote><p>这是近年运动想象领域比较通用的特征提取方法，主要通过设计空域滤波器对EEG 的多通道空间分布进行处理，提取可分的特征。包括：<code>共空域模式法（Common spatialpattern，CSP）</code>，以及基于CSP改进的方法。</p></blockquote><p><strong>基于CSP改进的方法包括：</strong></p><ul><li><p>1.时空滤波的共空谱模式（Common spatio-spectralpattern, CSSP）；</p></li><li><p>2.共稀疏谱空模式（Common sparse spectral spatial pattern，CSSSP）；</p></li><li><p>3.正则化公用空间模式（Regularized Common Spatial Pattern, RCSP)等。</p></li></ul><h4 id="4、小波模糊熵的特征提取方法"><a href="#4、小波模糊熵的特征提取方法" class="headerlink" title="4、小波模糊熵的特征提取方法"></a>4、小波模糊熵的特征提取方法</h4><blockquote><p>鉴于脑电信号的非线性特性和运动想象时的节律特性，提出了小波模糊熵的特征提取方法，利用小波变换将EEG信号进行小波分解，得到对应运动想象EEG信号的alpha和beta节律，然后采用模糊熵方法提取特征。</p></blockquote><h4 id="5、常使用的特征提取方法："><a href="#5、常使用的特征提取方法：" class="headerlink" title="5、常使用的特征提取方法："></a>5、常使用的特征提取方法：</h4><ul><li>自回归(auto regressive, AR)</li><li>傅里叶变换(Fourier transform,FT)</li><li>表面拉普拉斯(surface-Laplacian)变换</li><li>小波变换(Wavelet transform,WT)</li></ul><p><strong>快速傅里叶变换(Fast Fourier transform, FFT)</strong></p><blockquote><p>经典的FFT在分析确定信号和平稳信号时很有效，但在分析突变信号的频谱时具有一定的局限性。对于alpha波、beta波等脑电基本节律，功率谱分析或FFT等方法可以从频域中直接提取出特征。</p></blockquote><p><strong>稀疏傅里叶变换(Sparse Fourier transform, SFT)</strong></p><blockquote><p>SFT是时间窗内信号特征的平均，时间窗里信号越短，获得的时间分辨率就越高。该方法在一定程度上克服了FFT不具有的局部分析能力的缺陷，在某些信号处理中有一定的作用。</p></blockquote><p><strong>自适应自回归(Adaptive Auto Regressive ,AAR)</strong></p><blockquote><p>AAR模型参数方法随每一样本点的输入而改变，能够很好地反映大脑的状态。不过，该方法更适合分析平稳的脑电信号，对包含高度非平稳信号的运动想象EEG，该模型是有局限性的。</p></blockquote><p><strong>小波变换(Wavelettransform, WT)</strong></p><blockquote><p>小波变换在低频时的时间分辨率较低，而频率分辨率较高；在高频时的时间分辨率较高，而频率分辨率较低，正符合低频信号变化緩慢而高频信号变化较快的特点。因此小波分析比傅里叶变换和短时傅里叶变换更适合分析非平稳的脑电信号。</p></blockquote><p>我的博客即将同步至腾讯云+社区，邀请大家一同入驻：<a href="https://cloud.tencent.com/developer/support-plan?invite_code=2zy5g5eac5kwc">https://cloud.tencent.com/developer/support-plan?invite_code=2zy5g5eac5kwc</a></p>]]></content>
      
      
      <categories>
          
          <category> 脑机交互 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BCI </tag>
            
            <tag> EEG </tag>
            
            <tag> ICA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BigData-消息队列框架Apache Kafka入门、原理解析</title>
      <link href="/2020/07/02/BigData-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E6%A1%86%E6%9E%B6Apache-Kafka/"/>
      <url>/2020/07/02/BigData-%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E6%A1%86%E6%9E%B6Apache-Kafka/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Kafka–消息队列框架"><a href="#Kafka–消息队列框架" class="headerlink" title="Kafka–消息队列框架"></a>Kafka–消息队列框架</h2><h3 id="1、Kafka-基础架构"><a href="#1、Kafka-基础架构" class="headerlink" title="1、Kafka 基础架构"></a>1、<strong>Kafka</strong> 基础架构</h3><p><img src="https://file.buildworld.cn/img/20200907111151.png"></p><blockquote><p>1）<strong>Producer</strong> ：消息生产者，就是向kafka broker发消息的客户端；<br>2）<strong>Consumer</strong> ：消息消费者，向kafka broker取消息的客户端；<br>3）<strong>Consumer Group （CG）</strong>：消费者组，由多个consumer组成。<code>消费者组内每个消费者负责消费不同分区的数据，一个分区只能由一个消费者消费；消费者组之间互不影响。</code>所有的消费者都属于某个消费者组，即消费者组是逻辑上的一个订阅者。<br>4）<strong>Broker ：</strong>一台kafka服务器就是一个broker。一个集群由多个broker组成。一个broker可以容纳多个topic。<br>5）<strong>Topic</strong> ：可以理解为一个队列，<code>生产者和消费者面向的都是一个topic</code>；<br>6）<strong>Partition</strong>：为了实现扩展性，一个非常大的topic可以分布到多个broker（即服务器）上，<strong>一个topic可以分为多个partition</strong>，每个partition是一个有序的队列；<br>7）<strong>Replica</strong>：副本，为保证集群中的某个节点发生故障时，<strong>该节点上的partition数据不丢失，且kafka仍然能够继续工作</strong>，kafka提供了副本机制，一个topic的每个分区都有若干个副本，一个leader和若干个follower。<br>8）<strong>leader</strong>：每个分区多个副本的“主”，生产者发送数据的对象，以及消费者消费数据的对象都是leader。<br>9）<strong>follower</strong>：每个分区多个副本中的“从”，实时从leader中同步数据，保持和leader数据的同步。leader发生故障时，某个follower会成为新的follower。</p></blockquote><h3 id="2、-Kafka-命令行操作"><a href="#2、-Kafka-命令行操作" class="headerlink" title="2、 Kafka 命令行操作"></a>2、 <strong>Kafka</strong> 命令行操作</h3><h4 id="0）启动kafka"><a href="#0）启动kafka" class="headerlink" title="0）启动kafka"></a>0）启动kafka</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop102 kafka]$ /opt/module/kafka/bin/kafka-server-start.sh -daemon /opt/module/kafka/config/server.properties</span><br></pre></td></tr></table></figure><h4 id="1）查看所有的topic"><a href="#1）查看所有的topic" class="headerlink" title="1）查看所有的topic"></a>1）查看所有的topic</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop102 bin]$ kafka-topics.sh --list --zookeeper hadoop102:2181</span><br></pre></td></tr></table></figure><h4 id="2）创建topic"><a href="#2）创建topic" class="headerlink" title="2）创建topic"></a>2）创建topic</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop102 kafka]$ bin/kafka-topics.sh --zookeeper hadoop102:2181 --create --replication-factor 3 --partitions 1 --topic first</span><br></pre></td></tr></table></figure><blockquote><p>选项说明：</p><p><code>--topic</code> 定义topic名</p><p><code>--replication-factor</code>  定义副本数</p><p><code>--partitions</code>  定义分区数</p></blockquote><h4 id="3）删除"><a href="#3）删除" class="headerlink" title="3）删除"></a>3）删除</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop102 kafka]$ bin/kafka-topics.sh --zookeeper hadoop102:2181 --delete --topic first</span><br></pre></td></tr></table></figure><p><strong>需要server.properties中设置delete.topic.enable=true否则只是标记删除。</strong></p><h4 id="4）发送消息"><a href="#4）发送消息" class="headerlink" title="4）发送消息"></a>4）发送消息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop102 bin]$ kafka-console-producer.sh --broker-list hadoop102:9092 --topic first</span><br></pre></td></tr></table></figure><h4 id="5）消费消息"><a href="#5）消费消息" class="headerlink" title="5）消费消息"></a>5）消费消息</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop103 kafka]$ kafka-console-consumer.sh --bootstrap-server hadoop102:9092 --from-beginning --topic first</span><br></pre></td></tr></table></figure><p><strong>--from-beginning：会把主题中以往所有的数据都读取出来。</strong></p><h4 id="6）查看某个topic详情"><a href="#6）查看某个topic详情" class="headerlink" title="6）查看某个topic详情"></a>6）查看某个topic详情</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop104 kafka]$ kafka-topics.sh --describe --topic first --zookeeper hadoop102:2181</span><br></pre></td></tr></table></figure><h4 id="7）修改分区"><a href="#7）修改分区" class="headerlink" title="7）修改分区"></a>7）修改分区</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop104 kafka]$ kafka-topics.sh --alter --topic first --zookeeper hadoop102:2181 --partitions 6</span><br></pre></td></tr></table></figure><h3 id="3、Kafka-工作流程"><a href="#3、Kafka-工作流程" class="headerlink" title="3、Kafka 工作流程"></a>3、<strong>Kafka</strong> 工作流程</h3><p><img src="https://file.buildworld.cn/img/20200702172047.png"></p><blockquote><p><code>Kafka</code>中消息是以<code>topic</code>进行分类的，生产者生产消息，消费者消费消息，都是面向<code>topic</code>的。</p><p><code>topic</code>是逻辑上的概念，而<code>partition</code>是物理上的概念，每个<code>partition</code>对应于一个<code>log</code>文件，该<code>log</code>文件中存储的就是<code>producer</code>生产的数据。<code>Producer</code>生产的数据会被不断追加到该<code>log</code>文件末端，且每条数据都有自己的<code>offset</code>。消费者组中的每个消费者，都会实时记录自己消费到了哪个<code>offset</code>，以便出错恢复时，从上次的位置继续消费。</p></blockquote><h3 id="4、Kafka文件存储机制"><a href="#4、Kafka文件存储机制" class="headerlink" title="4、Kafka文件存储机制"></a>4、Kafka文件存储机制</h3><p><img src="https://file.buildworld.cn/img/20200702193119.png"></p><blockquote><p>由于生产者生产的消息会不断追加到log文件末尾，为防止log文件过大导致数据定位效率低下，Kafka采取了<strong>分片和索引</strong>机制，将每个<code>partition</code>分为多个<code>segment</code>。每个<code>segment</code>对应两个文件——“<code>.index</code>”文件和“<code>.log</code>”文件。这些文件位于一个文件夹下，该文件夹的命名规则为：<code>topic名称+分区序号</code>。例如，first这个topic有三个分区，则其对应的文件夹为first-0,first-1,first-2。</p></blockquote><h3 id="5、Kafka-生产者"><a href="#5、Kafka-生产者" class="headerlink" title="5、Kafka 生产者"></a>5、Kafka 生产者</h3><h4 id="1）分区原因："><a href="#1）分区原因：" class="headerlink" title="1）分区原因："></a>1）分区原因：</h4><ul><li>（1） <strong>方便在集群中扩展</strong>，每个 Partition 可以通过调整以适应它所在的机器，而一个 topic又可以有多个 Partition 组成，因此整个集群就可以适应任意大小的数据了；</li><li>（2） <strong>可以提高并发</strong>，因为可以以 Partition 为单位读写了。</li></ul><h4 id="2）数据可靠保证"><a href="#2）数据可靠保证" class="headerlink" title="2）数据可靠保证"></a>2）数据可靠保证</h4><p><img src="https://file.buildworld.cn/img/20200703102441.png"></p><h5 id="（1）ack"><a href="#（1）ack" class="headerlink" title="（1）ack"></a>（1）ack</h5><blockquote><p>Topic的每个partition收到producer发送的数据后，  都需要向producer发送<code>ack</code>（<code>acknowledgement</code> 确认收到），如果producer 收到 ack，就会进行下一轮的发送，否则重新发送数据。</p></blockquote><h5 id="（2）in-sync-replica-set-ISR"><a href="#（2）in-sync-replica-set-ISR" class="headerlink" title="（2）in-sync replica set (ISR)"></a>（2）in-sync replica set (ISR)</h5><blockquote><p>Leader 维护了一个动态的 <code>in-sync replica set (ISR)</code>，意为和 leader 保持同步的 follower 集合。当 ISR 中的 follower 完成数据的同步之后，leader 就会给 follower 发送 ack。如果follower长 时 间 未 向 leader 同 步 数 据 ， 则 该 follower 将 被 踢 出 ISR ， 该 时 间 阈 值 由<code>replica.lag.time.max.ms</code> 参数设定。Leader 发生故障之后，就会从 ISR 中选举新的 leader。</p></blockquote><p><strong>ack关系数据丢不丢失的问题，ISR关系数据一致性和存储问题</strong></p><h3 id="6、Kafka消费者"><a href="#6、Kafka消费者" class="headerlink" title="6、Kafka消费者"></a>6、Kafka消费者</h3><h4 id="1）消费方式"><a href="#1）消费方式" class="headerlink" title="1）消费方式"></a>1）消费方式</h4><blockquote><p>消费者采用<code>pull（拉）</code>模式从broker中读取数据。</p><p><code>push（推）</code>模式难以适应消费速率不同的消费者！</p><p>如果kafka没有数据，消费者可能陷入到循环中，一直返回空数据。</p></blockquote><h4 id="2）分配策略"><a href="#2）分配策略" class="headerlink" title="2）分配策略"></a>2）分配策略</h4><ul><li>RoundRobin</li><li>Range（默认的）</li></ul><h4 id="3）offset"><a href="#3）offset" class="headerlink" title="3）offset"></a>3）offset</h4><blockquote><p>下图是记录在zookeeper中的数据结构</p></blockquote><p><img src="https://file.buildworld.cn/img/20200703152929.png"></p><h3 id="7、kafka事务"><a href="#7、kafka事务" class="headerlink" title="7、kafka事务"></a>7、kafka事务</h3><h4 id="1）Producer-事务"><a href="#1）Producer-事务" class="headerlink" title="1）Producer  事务"></a>1）Producer  事务</h4><blockquote><p>为了实现跨分区跨会话的事务，需要引入一个全局唯一的 <strong>Transaction ID（客户端给予的）</strong>，并将 <code>Producer</code>获得的<code>PID</code>和<code>Transaction ID</code>绑定。这样当Producer重启后就可以通过正在进行的TransactionID 获得原来的 PID。</p><p>为了管理 Transaction，Kafka 引入了一个新的组件 <code>Transaction Coordinator</code>。Producer 就是通过和 Transaction Coordinator 交互获得 Transaction ID 对应的任务状态。TransactionCoordinator 还负责将事务所有写入 Kafka 的一个内部 Topic，这样即使整个服务重启，由于事务状态得到保存，进行中的事务状态可以得到恢复，从而继续进行。</p></blockquote><h4 id="2）Consumer"><a href="#2）Consumer" class="headerlink" title="2）Consumer"></a>2）Consumer</h4><blockquote><p>由于 <code>Consumer</code> 可以通过 <code>offset</code> 访问任意信息，而且不同的 <code>Segment File</code> 生命周期不同，同一事务的消息可能会出现重启后被删除的情况。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> Apache </tag>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BigData--Apache Flume框架</title>
      <link href="/2020/07/01/BigData-Flume%E6%A1%86%E6%9E%B6/"/>
      <url>/2020/07/01/BigData-Flume%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Flume进阶"><a href="#Flume进阶" class="headerlink" title="Flume进阶"></a>Flume进阶</h2><h3 id="1、Flume基本框架"><a href="#1、Flume基本框架" class="headerlink" title="1、Flume基本框架"></a>1、Flume基本框架</h3><p><img src="https://file.buildworld.cn/img/20200701104704.png"></p><p><strong>1. Event</strong></p><p><code>Event</code> 是 Flume NG 数据传输的基本单元。类似于 JMS 和消息系统中的消息。一个 Event 由标题和正文组成：前者是键/值映射，后者是任意字节数组。</p><p><strong>2. Source</strong></p><p>数据收集组件，从外部数据源收集数据，并存储到 Channel 中。</p><p><strong>Source类型</strong></p><ul><li>（1）监控后台日志：exec</li><li>（2）监控后台产生日志的端口：netcat</li></ul><p><strong>3. Channel</strong></p><p><code>Channel</code> 是源和接收器之间的管道，用于临时存储数据。可以是内存或持久化的文件系统：</p><ul><li><code>Memory Channel</code> : 使用内存，优点是速度快，但数据可能会丢失 (如突然宕机)；</li><li><code>File Channel</code> : 使用持久化的文件系统，优点是能保证数据不丢失，但是速度慢。</li></ul><p><strong>4. Sink</strong></p><p><code>Sink</code> 的主要功能从 <code>Channel</code> 中读取 <code>Event</code> ，并将其存入外部存储系统或将其转发到下一个<code>Source</code> ，成功后再从 <code>Channel</code> 中移除 <code>Event</code> 。</p><p><strong>5. Agent</strong></p><p>是一个独立的 (JVM) 进程，包含 <code>Source</code> 、 <code>Channel</code> 、 <code>Sink</code> 等组件。</p><h3 id="2、Flume事务"><a href="#2、Flume事务" class="headerlink" title="2、Flume事务"></a>2、Flume事务</h3><p><img src="https://file.buildworld.cn/img/20200701104347.png"></p><blockquote><p><strong>Flume 的事务机制（类似数据库的事务机制）</strong>：Flume 使用两个独立的事务分别负责从<code>Soucrce</code> 到 <code>Channel</code>，以及从 <code>Channel</code> 到 <code>Sink</code> 的事件传递。比如 <code>spooling directory source</code> 为文件的每一行创建一个事件，一旦事务中所有的事件全部传递到 <code>Channel</code> 且提交成功，那么 <code>Soucrce</code> 就将该文件标记为完成。同理，事务以类似的方式处理从 <code>Channel</code> 到 <code>Sink</code> 的传递过程，如果因为某种原因使得事件无法记录，那么事务将会回滚。且所有的事件都会保持到 <code>Channel</code> 中，等待重新传递。</p></blockquote><h3 id="3、Flume-Agent-内部原理"><a href="#3、Flume-Agent-内部原理" class="headerlink" title="3、Flume Agent 内部原理"></a>3、<strong>Flume Agent</strong> 内部原理</h3><p><img src="https://file.buildworld.cn/img/20200701113850.png"></p><p><strong>重要组件：</strong> </p><p><strong>1）ChannelSelector</strong> </p><p><code>ChannelSelector</code> 的作用就是选出 <code>Event</code> 将要被发往哪个 <code>Channel</code>。其共有两种类型，分别是 <code>Replicating</code>（复制）和 <code>Multiplexing</code>（多路复用）。</p><p><code>ReplicatingSelector</code> 会将同一个 <code>Event</code> 发往所有的 <code>Channel</code>，<code>Multiplexing</code> 会根据相应的原则，将不同的 <code>Event</code> 发往不同的 <code>Channel</code>。 </p><p><strong>2）SinkProcessor</strong> </p><p><code>SinkProcessor</code> 共 有 三 种 类 型 ， 分 别 是 <code>DefaultSinkProcessor</code> 、<code>LoadBalancingSinkProcessor</code> 和 <code>FailoverSinkProcessor</code></p><p><code>DefaultSinkProcessor</code> 对 应 的 是 单 个 的 <code>Sink</code> ， <code>LoadBalancingSinkProcessor</code> 和 <code>FailoverSinkProcessor</code> 对应的是 <code>Sink Group</code>，<code>LoadBalancingSinkProcessor</code> 可以实现负载均衡的功能，<code>FailoverSinkProcessor</code> 可以实现故障转移的功能。</p><h3 id="4、Flume-拓扑结构"><a href="#4、Flume-拓扑结构" class="headerlink" title="4、Flume 拓扑结构"></a>4、<strong>Flume</strong> 拓扑结构</h3><h4 id="（1）、简单串联"><a href="#（1）、简单串联" class="headerlink" title="（1）、简单串联"></a>（1）、简单串联</h4><p><img src="https://file.buildworld.cn/img/20200701145041.png"></p><blockquote><p>这种模式是将多个 <code>flume</code> 顺序连接起来了，从最初的 <code>source</code> 开始到最终 <code>sink</code> 传送的目的存储系统。此模式不建议桥接过多的 <code>flume</code> 数量，<code>flume</code> 数量过多不仅会影响传输速率，而且一旦传输过程中某个节点 flume 宕机，会影响整个传输系统。</p></blockquote><h4 id="（2）、复制和多路复用"><a href="#（2）、复制和多路复用" class="headerlink" title="（2）、复制和多路复用"></a>（2）、复制和多路复用</h4><p><img src="https://file.buildworld.cn/img/20200701145300.png"></p><blockquote><p><code>Flume</code> 支持将事件流向一个或者多个目的地。这种模式可以将相同数据复制到多个<code>channel</code> 中，或者将不同数据分发到不同的 <code>channel</code> 中，<code>sink</code> 可以选择传送到不同的目的地。</p></blockquote><h4 id="（3）、负载均衡和故障转移"><a href="#（3）、负载均衡和故障转移" class="headerlink" title="（3）、负载均衡和故障转移"></a>（3）、负载均衡和故障转移</h4><p><img src="https://file.buildworld.cn/img/20200701145526.png"></p><blockquote><p><code>Flume</code>支持使用将多个<code>sink</code>逻辑上分到一个<code>sink</code>组，<code>sink</code>组配合不同的<code>SinkProcessor</code>可以实现负载均衡和错误恢复的功能。</p></blockquote><h4 id="4-、聚合"><a href="#4-、聚合" class="headerlink" title="(4)、聚合"></a>(4)、聚合</h4><p><img src="https://file.buildworld.cn/img/20200701145800.png"></p><blockquote><p>这种模式是我们最常见的，也非常实用，日常 web 应用通常分布在上百个服务器，大者甚至上千个、上万个服务器。产生的日志，处理起来也非常麻烦。用 <code>flume</code> 的这种组合方式能很好的解决这一问题，每台服务器部署一个 <code>flume</code> 采集日志，传送到一个集中收集日志的<code>flume</code>，再由此 <code>flume</code> 上传到 <code>hdfs</code>、<code>hive</code>、<code>hbase</code> 等，进行日志分析。 </p></blockquote><h3 id="5、-Flume-参数调优"><a href="#5、-Flume-参数调优" class="headerlink" title="5、 Flume 参数调优"></a>5、 <strong>Flume</strong> 参数调优</h3><h4 id="（1）-Source"><a href="#（1）-Source" class="headerlink" title="（1）. Source"></a>（1）. Source</h4><blockquote><p>增加 <code>Source</code> 个（使用 <code>Tair Dir Source</code> 时可增加 <code>FileGroups</code> 个数）可以增大 Source 的读取数据的能力。例如：当某一个目录产生的文件过多时需要将这个文件目录拆分成多个文件目录，同时配置好多个 Source 以保证 Source 有足够的能力获取到新产生的数据。</p></blockquote><blockquote><p><code>batchSize</code> 参数决定 Source 一次批量运输到 Channel 的 event 条数，适当调大这个参数可以提高 Source 搬运 Event 到 Channel 时的性能。</p></blockquote><h4 id="（2）-Channel"><a href="#（2）-Channel" class="headerlink" title="（2）. Channel"></a>（2）. Channel</h4><blockquote><p><code>type</code> 选择 memory 时 Channel 的性能最好，但是如果 Flume 进程意外挂掉可能会丢失数据。type 选择 file 时 Channel 的容错性更好，但是性能上会比 memory channel 差。</p></blockquote><blockquote><p>使用 <code>file Channel</code> 时 <code>dataDirs</code> 配置多个不同盘下的目录可以提高性能。</p></blockquote><blockquote><p><code>Capacity</code> 参数决定 <code>Channel</code> 可容纳最大的 <code>event</code> 条数。<code>transactionCapacity</code> 参数决定每次 Source 往 channel 里面写的最大 event 条数和每次 Sink 从 channel 里面读的最大 event条数。<strong>transactionCapacity 需要大于 Source 和 Sink 的 batchSize 参数。</strong></p></blockquote><h4 id="（3）-Sink"><a href="#（3）-Sink" class="headerlink" title="（3）. Sink"></a>（3）. Sink</h4><blockquote><p>增加 <code>Sink</code> 的个数可以增加 Sink 消费 event 的能力。Sink 也不是越多越好够用就行，过多的 Sink 会占用系统资源，造成系统资源不必要的浪费。</p></blockquote><blockquote><p><code>batchSize</code> 参数决定 Sink 一次批量从 Channel 读取的 event 条数，适当调大这个参数可以提高 Sink 从 Channel 搬出 event 的性能。</p></blockquote><h3 id="6、Flume-的-Channel-Selectors"><a href="#6、Flume-的-Channel-Selectors" class="headerlink" title="6、Flume 的 Channel Selectors"></a>6、<strong>Flume</strong> <strong>的</strong> Channel Selectors</h3><p><img src="https://file.buildworld.cn/img/20200701190722.png"></p>]]></content>
      
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> Flume </tag>
            
            <tag> Apache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BCI--Python-EEG工具库MNE</title>
      <link href="/2020/06/12/BCI-Python-EEG%E5%B7%A5%E5%85%B7%E5%BA%93MNE/"/>
      <url>/2020/06/12/BCI-Python-EEG%E5%B7%A5%E5%85%B7%E5%BA%93MNE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Python-EEG工具库MNE"><a href="#Python-EEG工具库MNE" class="headerlink" title="Python-EEG工具库MNE"></a>Python-EEG工具库MNE</h2><h3 id="一、环境配置"><a href="#一、环境配置" class="headerlink" title="一、环境配置"></a>一、环境配置</h3><h4 id="安装MNE-python"><a href="#安装MNE-python" class="headerlink" title="安装MNE-python"></a>安装MNE-python</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -U mne</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mne</span><br><span class="line"><span class="keyword">from</span> mne.datasets <span class="keyword">import</span> sample</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># sample的存放地址，下面语法是从网络中获取数据集</span></span><br><span class="line"><span class="comment"># data_path = sample.data_path()</span></span><br><span class="line"><span class="comment"># 该fif文件存放地址</span></span><br><span class="line">fname = <span class="string">&#x27;F:/data/MNE-sample-data/MEG/sample/sample_audvis_raw.fif&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">如果上述给定的地址中存在该文件，则直接加载本地文件，</span></span><br><span class="line"><span class="string">如果不存在则在网上下载改数据</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">raw = mne.io.read_raw_fif(fname)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">案例：</span></span><br><span class="line"><span class="string">获取10-20秒内的良好的MEG数据</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># 根据type来选择 那些良好的MEG信号(良好的MEG信号，通过设置exclude=&quot;bads&quot;) channel,</span></span><br><span class="line"><span class="string">结果为 channels所对应的的索引</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">picks = mne.pick_types(raw.info, meg=<span class="literal">True</span>, exclude=<span class="string">&#x27;bads&#x27;</span>)</span><br><span class="line">t_idx = raw.time_as_index([<span class="number">10.</span>, <span class="number">20.</span>])</span><br><span class="line">data, times = raw[picks, t_idx[<span class="number">0</span>]:t_idx[<span class="number">1</span>]]</span><br><span class="line">plt.plot(times,data.T)</span><br><span class="line">plt.title(<span class="string">&quot;Sample channels&quot;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><ul><li>出现下面的图片，说明环境搭建成功了</li></ul><p><img src="https://file.buildworld.cn/img/20200611205438.png"></p><h3 id="二、MNE中数据结构Raw及其用法简介"><a href="#二、MNE中数据结构Raw及其用法简介" class="headerlink" title="二、MNE中数据结构Raw及其用法简介"></a>二、MNE中数据结构Raw及其用法简介</h3><p><strong>Raw对象主要用来存储连续型数据，核心数据为n_channels和times,也包含Info对象。</strong></p><h4 id="1、打开raw数据"><a href="#1、打开raw数据" class="headerlink" title="1、打开raw数据"></a>1、打开raw数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 引入python库</span></span><br><span class="line"><span class="keyword">import</span> mne</span><br><span class="line"><span class="keyword">from</span> mne.datasets <span class="keyword">import</span> sample</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment"># sample的存放地址，下面为从网络地址下载</span></span><br><span class="line"><span class="comment">#data_path = sample.data_path()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开本地的数据，该fif文件存放地址</span></span><br><span class="line">fname = data_path + <span class="string">&#x27;/MEG/sample/sample_audvis_raw.fif&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">如果上述给定的地址中存在该文件，则直接加载本地文件，</span></span><br><span class="line"><span class="string">如果不存在则在网上下载改数据</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">raw = mne.io.read_raw_fif(fname)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通常raw的数据访问方式如下：</span></span><br><span class="line">data, times = raw[picks, time_slice]</span><br><span class="line"></span><br><span class="line"><span class="comment"># picks:是根据条件挑选出来的索引；</span></span><br><span class="line"><span class="comment"># time_slice:时间切片</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 想要获取raw中所有数据，以下两种方式均可：</span></span><br><span class="line">data,times=raw[:]</span><br><span class="line">data,times=raw[:,:]</span><br></pre></td></tr></table></figure><h4 id="2、sfreq：采样频率"><a href="#2、sfreq：采样频率" class="headerlink" title="2、sfreq：采样频率"></a>2、sfreq：采样频率</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">sfreq：采样频率</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">raw返回所选信道以及时间段内的数据和时间点，</span></span><br><span class="line"><span class="string">分别赋值给data以及times（即raw对象返回的是两个array）</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">sfreq=raw.info[<span class="string">&#x27;sfreq&#x27;</span>]</span><br><span class="line">data,times=raw[:<span class="number">5</span>,<span class="built_in">int</span>(sfreq*<span class="number">1</span>):<span class="built_in">int</span>(sfreq*<span class="number">3</span>)]</span><br><span class="line">plt.plot(times,data.T)</span><br><span class="line">plt.title(<span class="string">&quot;Sample channels&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://file.buildworld.cn/img/20200612101529.png"></p><h4 id="3、绘制各通道的功率谱密度"><a href="#3、绘制各通道的功率谱密度" class="headerlink" title="3、绘制各通道的功率谱密度"></a>3、绘制各通道的功率谱密度</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">raw.plot_psd()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://file.buildworld.cn/img/20200612101711.png"></p><h4 id="4、绘制SSP矢量图"><a href="#4、绘制SSP矢量图" class="headerlink" title="4、绘制SSP矢量图"></a>4、绘制SSP矢量图</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">raw.plot_projs_topomap()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://file.buildworld.cn/img/20200612101820.png"></p><h4 id="5、绘制通道频谱图作为topography"><a href="#5、绘制通道频谱图作为topography" class="headerlink" title="5、绘制通道频谱图作为topography"></a>5、绘制通道频谱图作为topography</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">raw.plot_psd_topo()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://file.buildworld.cn/img/20200612102005.png"></p><h4 id="6、绘制电极位置"><a href="#6、绘制电极位置" class="headerlink" title="6、绘制电极位置"></a>6、绘制电极位置</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">raw.plot_sensors()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://file.buildworld.cn/img/20200612102107.png"></p><h3 id="三、MNE从头创建Raw对象"><a href="#三、MNE从头创建Raw对象" class="headerlink" title="三、MNE从头创建Raw对象"></a>三、MNE从头创建Raw对象</h3><h4 id="1、简单介绍"><a href="#1、简单介绍" class="headerlink" title="1、简单介绍"></a>1、简单介绍</h4><p><strong>在实际过程中，有时需要从头构建数据来创建Raw对象。</strong><br><strong>方式：通过<code>mne.io.RawArray</code>类来手动创建Raw</strong></p><blockquote><p>注：使用mne.io.RawArray创建Raw对象时，其构造函数只接受矩阵和info对象。</p></blockquote><p>数据对应的单位：</p><ul><li><code>V: eeg, eog, seeg, emg, ecg, bio, ecog</code></li><li><code>T: mag</code></li><li><code>T/m: grad</code></li><li><code>M: hbo, hbr</code></li><li><code>Am: dipole</code></li><li><code>AU: misc</code></li></ul><p>构建一个Raw对象时，需要准备两种数据，一种是<strong>data</strong>数据，一种是<strong>Info</strong>数据，</p><p>data数据是一个二维数据，形状为<code>(n_channels,n_times)</code></p><h4 id="2、包装数据"><a href="#2、包装数据" class="headerlink" title="2、包装数据"></a>2、包装数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">生成一个大小为5x1000的二维随机数据</span></span><br><span class="line"><span class="string">其中5代表5个通道，1000代表times</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">data = np.random.randn(<span class="number">5</span>,<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">创建info结构,</span></span><br><span class="line"><span class="string">内容包括：通道名称和通道类型</span></span><br><span class="line"><span class="string">设置采样频率为:sfreq=100</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">info = mne.create_info(</span><br><span class="line">    ch_names=[<span class="string">&#x27;MEG1&#x27;</span>,<span class="string">&#x27;MEG2&#x27;</span>,<span class="string">&#x27;EEG1&#x27;</span>,<span class="string">&#x27;EEG2&#x27;</span>,<span class="string">&#x27;EOG&#x27;</span>],</span><br><span class="line">    ch_types=[<span class="string">&#x27;grad&#x27;</span>,<span class="string">&#x27;grad&#x27;</span>,<span class="string">&#x27;eeg&#x27;</span>,<span class="string">&#x27;eeg&#x27;</span>,<span class="string">&#x27;eog&#x27;</span>],</span><br><span class="line">    sfreq=<span class="number">100</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">custom_raw = mne.io.RawArray(data,info)</span><br></pre></td></tr></table></figure><h4 id="3、对图形进行缩放"><a href="#3、对图形进行缩放" class="headerlink" title="3、对图形进行缩放"></a>3、对图形进行缩放</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">对图形进行缩放</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">对于实际的EEG / MEG数据，应使用不同的比例因子。</span></span><br><span class="line"><span class="string">对通道eeg、grad，eog的数据进行2倍缩小</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">scalings = &#123;<span class="string">&#x27;eeg&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;grad&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;eog&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#scalings = &#x27;auto&#x27; 设置自动缩放</span></span><br><span class="line"></span><br><span class="line">custom_raw.plot(n_channels=<span class="number">5</span>,</span><br><span class="line">                scalings=scalings,</span><br><span class="line">                title=<span class="string">&#x27;Data from arrays&#x27;</span>,</span><br><span class="line">                show=<span class="literal">True</span>,</span><br><span class="line">                block=<span class="literal">True</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://file.buildworld.cn/img/20200612110956.png"></p><h3 id="四、MNE中数据结构Epoch"><a href="#四、MNE中数据结构Epoch" class="headerlink" title="四、MNE中数据结构Epoch"></a>四、MNE中数据结构Epoch</h3><p><strong>从连续的脑电图信号中提取一些特定时间窗口的信号，这些时间窗口可以称作为<code>epochs</code>.</strong></p><h4 id="1、创建Epochs对象方式有三种："><a href="#1、创建Epochs对象方式有三种：" class="headerlink" title="1、创建Epochs对象方式有三种："></a>1、创建Epochs对象方式有三种：</h4><ul><li>(1)通过Raw对象和事件事件点(event times)-</li><li>(2)通过读取.fif文件数据生成Epoch对象</li><li>(3)通过mne.EpochsArray从头创建Epoch对象</li></ul><h4 id="2、读取fif文件创建Epoch对象"><a href="#2、读取fif文件创建Epoch对象" class="headerlink" title="2、读取fif文件创建Epoch对象"></a>2、读取fif文件创建Epoch对象</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">步骤：</span><br><span class="line"><span class="number">1</span>）读取fif文件，构建raw对象;</span><br><span class="line"><span class="number">2</span>）创建event对象；</span><br><span class="line"><span class="number">3</span>）创建epoch对象；</span><br><span class="line"><span class="number">4</span>）对epoch进行叠加平均得到evoked对象；</span><br><span class="line"><span class="number">5</span>）绘制evoked。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> mne</span><br><span class="line"><span class="keyword">from</span> mne <span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">from</span> mne.datasets <span class="keyword">import</span> sample</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从网络中下载</span></span><br><span class="line">data_path = sample.data_path()</span><br><span class="line"></span><br><span class="line">raw_fname = data_path + <span class="string">&#x27;/MEG/sample/sample_audvis_filt-0-40_raw.fif&#x27;</span></span><br><span class="line">event_fname = data_path + <span class="string">&#x27;/MEG/sample/sample_audvis_filt-0-40_raw-eve.fif&#x27;</span></span><br><span class="line">event_id, tmin, tmax = <span class="number">1</span>, -<span class="number">0.2</span>, <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取fif文件,创建raw对象</span></span><br><span class="line">raw = io.read_raw_fif(raw_fname)</span><br><span class="line"><span class="comment"># 读取包含event的fif文件，创建event对象</span></span><br><span class="line">events = mne.read_events(event_fname)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"> 挑选通道:EEG + MEG - bad channels </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">raw.info[<span class="string">&#x27;bads&#x27;</span>] += [<span class="string">&#x27;MEG 2443&#x27;</span>, <span class="string">&#x27;EEG 053&#x27;</span>]  <span class="comment"># bads + 2 more</span></span><br><span class="line">picks = mne.pick_types(raw.info, meg=<span class="literal">True</span>, eeg=<span class="literal">False</span>, stim=<span class="literal">True</span>, eog=<span class="literal">True</span>,</span><br><span class="line">                       exclude=<span class="string">&#x27;bads&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取Epoch数据</span></span><br><span class="line">epochs = mne.Epochs(raw, events, event_id, tmin, tmax, proj=<span class="literal">True</span>,</span><br><span class="line">                    picks=picks, baseline=(<span class="literal">None</span>, <span class="number">0</span>), preload=<span class="literal">True</span>,</span><br><span class="line">                    reject=<span class="built_in">dict</span>(grad=<span class="number">4000e-13</span>, mag=<span class="number">4e-12</span>, eog=<span class="number">150e-6</span>))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">对epochs数据进行求平均获取诱发响应</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">evoked = epochs.average()</span><br><span class="line"></span><br><span class="line">evoked.plot(time_unit=<span class="string">&#x27;s&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://file.buildworld.cn/img/20200612134440.png">                             </p><h4 id="3、从头创建Epoch对象"><a href="#3、从头创建Epoch对象" class="headerlink" title="3、从头创建Epoch对象"></a>3、从头创建Epoch对象</h4><p><strong>Epochs对象是一种将连续数据表示为时间段集合的方法</strong></p><blockquote><p>方式：利用<code>mne.EpochsArray</code>创建Epochs对象，创建时直接构建numpy数组即可，数组的形状必须是<code>(n_epochs, n_chans, n_times)</code></p></blockquote><p><strong>数据对应的单位：</strong></p><ul><li>V: eeg, eog, seeg, emg, ecg, bio, ecog</li><li>T: mag</li><li>T/m: grad</li><li>M: hbo, hbr</li><li>Am: dipole</li><li>AU: misc</li></ul><h5 id="第一步：构建数据"><a href="#第一步：构建数据" class="headerlink" title="第一步：构建数据"></a>第一步：构建数据</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">第一步：构建数据</span><br><span class="line"></span><br><span class="line">构建一个大小为10x5x200的三维数组，数组中数据是随机数；</span><br><span class="line">第一维数据表示：<span class="number">10</span> epochs</span><br><span class="line">第二维数据表示：<span class="number">5</span> channels</span><br><span class="line">第三维数据表示：<span class="number">2</span> seconds per epoch</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 采样频率</span></span><br><span class="line">sfreq = <span class="number">100</span></span><br><span class="line">data = np.random.randn(<span class="number">10</span>, <span class="number">5</span>, sfreq * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个info结构</span></span><br><span class="line">info = mne.create_info(</span><br><span class="line">    ch_names=[<span class="string">&#x27;MEG1&#x27;</span>, <span class="string">&#x27;MEG2&#x27;</span>, <span class="string">&#x27;EEG1&#x27;</span>, <span class="string">&#x27;EEG2&#x27;</span>, <span class="string">&#x27;EOG&#x27;</span>],</span><br><span class="line">    ch_types=[<span class="string">&#x27;grad&#x27;</span>, <span class="string">&#x27;grad&#x27;</span>, <span class="string">&#x27;eeg&#x27;</span>, <span class="string">&#x27;eeg&#x27;</span>, <span class="string">&#x27;eog&#x27;</span>],</span><br><span class="line">    sfreq=sfreq</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="第二步：构建events"><a href="#第二步：构建events" class="headerlink" title="第二步：构建events"></a>第二步：构建events</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">在创建Epochs对象时，必须提供一个<span class="string">&quot;events&quot;</span>数组，</span><br><span class="line"></span><br><span class="line">事件(event)描述的是某一种波形(症状)的起始点，其为一个三元组，形状为(n_events,<span class="number">3</span>):</span><br><span class="line">第一列元素以整数来描述的事件起始采样点；</span><br><span class="line">第二列元素对应的是当前事件来源的刺激通道(stimulus channel)的先前值(previous value),该值大多数情况是<span class="number">0</span>；</span><br><span class="line">第三列元素表示的是该event的<span class="built_in">id</span>。</span><br><span class="line"></span><br><span class="line">events = np.array([</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">0</span>, <span class="number">2</span>],</span><br><span class="line">    [<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">3</span>, <span class="number">0</span>, <span class="number">2</span>],</span><br><span class="line">    [<span class="number">4</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">5</span>, <span class="number">0</span>, <span class="number">2</span>],</span><br><span class="line">    [<span class="number">6</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">7</span>, <span class="number">0</span>, <span class="number">2</span>],</span><br><span class="line">    [<span class="number">8</span>, <span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">    [<span class="number">9</span>, <span class="number">0</span>, <span class="number">2</span>],</span><br><span class="line">])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">设置事件的<span class="built_in">id</span></span><br><span class="line"></span><br><span class="line">如果是<span class="built_in">dict</span>，则以后可以使用这些键访问关联的事件。示例：<span class="built_in">dict</span>（听觉=<span class="number">1</span>，视觉=<span class="number">3</span>）</span><br><span class="line">如果是<span class="built_in">int</span>，将创建一个<span class="built_in">id</span>为string的<span class="built_in">dict</span>。</span><br><span class="line">如果是列表，则使用列表中指定ID的所有事件。</span><br><span class="line">如果没有，则所有事件都将与一起使用，并使用与事件<span class="built_in">id</span>整数对应的字符串整数名称创建<span class="built_in">dict</span>。</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建event id，受试者或者微笑或者皱眉</span></span><br><span class="line">event_id = <span class="built_in">dict</span>(smiling=<span class="number">1</span>, frowning=<span class="number">2</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">tmin:event开始前的时间，如果未指定，则默认为0</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment"># 设置事件开始前时间为-0.1s</span></span><br><span class="line">tmin = -<span class="number">0.1</span></span><br></pre></td></tr></table></figure><h5 id="第三步：创建epochs对象"><a href="#第三步：创建epochs对象" class="headerlink" title="第三步：创建epochs对象"></a>第三步：创建epochs对象</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">利用mne.EpochsArray创建epochs对象</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">custom_epochs = mne.EpochsArray(data, info, events, tmin, event_id)</span><br><span class="line"><span class="built_in">print</span>(custom_epochs)</span><br><span class="line"><span class="comment"># 绘制</span></span><br><span class="line">_ = custom_epochs[<span class="string">&#x27;smiling&#x27;</span>].average().plot(time_unit=<span class="string">&#x27;s&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://file.buildworld.cn/img/20200612153814.png"></p><h4 id="4、查看epoch对象"><a href="#4、查看epoch对象" class="headerlink" title="4、查看epoch对象"></a>4、查看epoch对象</h4><p><strong>epochs对象类似于mne.io.Raw对象，也具有info属性和event属性。</strong></p><p><strong>可以通过下面两种方式来查看epoch内的event相关信息</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(epochs.events[:<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(epochs.event_id)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(epochs[<span class="number">1</span>:<span class="number">5</span>])</span><br><span class="line"><span class="built_in">print</span>(epochs[<span class="string">&#x27;Auditory/Right&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索</span></span><br><span class="line"><span class="built_in">print</span>(epochs[<span class="string">&#x27;Right&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(epochs[<span class="string">&#x27;Right&#x27;</span>, <span class="string">&#x27;Left&#x27;</span>])</span><br></pre></td></tr></table></figure><h4 id="5、epoch平均叠加"><a href="#5、epoch平均叠加" class="headerlink" title="5、epoch平均叠加"></a>5、epoch平均叠加</h4><p><strong>通过调用<code>mne.Epochs.average()</code>方法可返回Evoked对象，average()方法可以通过参数指定需要的信道。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ev_right = epochs[<span class="string">&#x27;Right&#x27;</span>].average()</span><br><span class="line">ev_left = epochs[<span class="string">&#x27;Left&#x27;</span>].average()</span><br><span class="line"></span><br><span class="line">f, axs = plt.subplots(<span class="number">3</span>, <span class="number">2</span>, figsize=(<span class="number">10</span>, <span class="number">5</span>))</span><br><span class="line">_ = f.suptitle(<span class="string">&#x27;Left / Right auditory&#x27;</span>, fontsize=<span class="number">20</span>)</span><br><span class="line">_ = ev_left.plot(axes=axs[:, <span class="number">0</span>], show=<span class="literal">False</span>, time_unit=<span class="string">&#x27;s&#x27;</span>)</span><br><span class="line">_ = ev_right.plot(axes=axs[:, <span class="number">1</span>], show=<span class="literal">False</span>, time_unit=<span class="string">&#x27;s&#x27;</span>)</span><br><span class="line">plt.tight_layout()</span><br></pre></td></tr></table></figure><p><img src="https://file.buildworld.cn/img/20200612162428.png"></p><h4 id="6、Epoch对象中的元数据-metadata"><a href="#6、Epoch对象中的元数据-metadata" class="headerlink" title="6、Epoch对象中的元数据(metadata)"></a>6、Epoch对象中的元数据(metadata)</h4><p>有时候使用<code>mne</code>的<code>metadata</code>属性来存储相关数据特别有用，metadata使用<code>pandas.DataFrame</code>来封装数据。其中每一行对应一个epoch，每一列对应一个epoch的元数据属性。列必须包含字符串、整数或浮点数。</p><h4 id="7、Epochs数据可视化"><a href="#7、Epochs数据可视化" class="headerlink" title="7、Epochs数据可视化"></a>7、Epochs数据可视化</h4><p><code>mne.Epochs.plot()</code>提供了一个交互式浏览器，当与关键字<code>block = True</code>结合使用时，允许手动拒绝。这将阻止脚本执行，直到关闭浏览器窗口。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">加载数据，如果本地无该数据,</span></span><br><span class="line"><span class="string">则从网络中下载</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">data_path = op.join(mne.datasets.sample.data_path(), <span class="string">&#x27;MEG&#x27;</span>, <span class="string">&#x27;sample&#x27;</span>)</span><br><span class="line"></span><br><span class="line">raw = mne.io.read_raw_fif(</span><br><span class="line">    op.join(data_path, <span class="string">&#x27;sample_audvis_filt-0-40_raw.fif&#x27;</span>), preload=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># 设置event ID</span></span><br><span class="line">event_id = &#123;<span class="string">&#x27;auditory/left&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;auditory/right&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;visual/left&#x27;</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="string">&#x27;visual/right&#x27;</span>: <span class="number">4</span>, <span class="string">&#x27;smiley&#x27;</span>: <span class="number">5</span>, <span class="string">&#x27;button&#x27;</span>: <span class="number">32</span>&#125;</span><br><span class="line">events = mne.find_events(raw)</span><br><span class="line">epochs = mne.Epochs(raw, events, event_id=event_id, tmin=-<span class="number">0.2</span>, tmax=<span class="number">.5</span>,</span><br><span class="line">                    preload=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绘制epochs</span></span><br><span class="line">epochs.plot(block=<span class="literal">True</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://ae01.alicdn.com/kf/Hbd1728d2d0894d548c1a0ca2da6ed73fr.jpg"></p><p><strong>顶部的数字表示epoch的事件id。底部的数字是各个epoch的运行编号。</strong></p><h3 id="五、Evoked结构"><a href="#五、Evoked结构" class="headerlink" title="五、Evoked结构"></a>五、Evoked结构</h3><p><strong>Evoked potential(EP</strong>)诱发电位或诱发反应是指在出现诸如闪光或纯音之类的刺激后，从人类或其他动物的神经系统，特别是大脑的特定部分记录的特定模式的电位。不同形式和类型的刺激会产生不同类型的电位。</p><p>诱发电位振幅往往较低，从小于1微伏到数微伏不等，而脑电图为数十微伏，肌电图为毫伏，心电图通常接近20毫伏。为了在EEG、ECG、EMG等生物信号和环境噪声的背景下解决这些低幅度电位，通常需要对信号进行平均。<strong>信号被时间锁定在刺激上，大部分噪声是随机产生的，这样就可以通过对重复响应来平均掉噪声。</strong></p><p><strong>诱发电位(Evoked)结构主要用于存储实验期间的平均数据</strong>，在MNE中，创建Evoked对象通常使用<code>mne.Epochs.average()</code>来平均epochs数据来实现。</p>]]></content>
      
      
      <categories>
          
          <category> 脑机交互 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BCI </tag>
            
            <tag> Python </tag>
            
            <tag> MNE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BCI--脑电基础整理</title>
      <link href="/2020/06/10/BCI-%E8%84%91%E7%94%B5%E5%9F%BA%E7%A1%80%E6%95%B4%E7%90%86/"/>
      <url>/2020/06/10/BCI-%E8%84%91%E7%94%B5%E5%9F%BA%E7%A1%80%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="脑电基础整理"><a href="#脑电基础整理" class="headerlink" title="脑电基础整理"></a>脑电基础整理</h2><p><strong>脑机接口（BCI）</strong>，是一种通过检测中枢神经系统活动并将其转化为人工输出，来替代、修复、增强、补充或者改善中枢神经系统的正常输出，从而改变中枢神经系统与内外环境之间的交互作用的技术。脑机接口技术通过置于头皮或颅内的电极等传感器采集脑神经活动信号，经过信号处理、特征提取、模式识别等过程，可获知人的控制意图、认知或心理状态、神经系统疾病状态等信息，为运动、语言等功能残缺的患者提供新的控制、交流通道或康复手段，也可为健康人群提供更多信息输出通道。随着脑电信号采集技术与信号处理技术的发展成熟，脑机接口技术已逐渐走入临床应用，在诸如中风、注意力缺陷等脑损伤或其他神经系统疾病患者的临床康复中表现出色，为高位截瘫、肌萎缩性侧索硬化症等运动功能障碍患者提供新的运动功能替代方案，为情绪、疲劳、意识状态等的检测和识别提供客观指标。</p><h3 id="一、采集脑电信号的四种技术"><a href="#一、采集脑电信号的四种技术" class="headerlink" title="一、采集脑电信号的四种技术"></a>一、采集脑电信号的四种技术</h3><h4 id="1、脑电图-Electroencephalography-EEG"><a href="#1、脑电图-Electroencephalography-EEG" class="headerlink" title="1、脑电图(Electroencephalography,EEG)"></a>1、脑电图(Electroencephalography,EEG)</h4><p><strong>脑电图</strong>通过电极记录大脑的电活动，电极通常嵌入电极帽中。这种电极帽通常需要 5 分钟才能安装在用户身上并调节电极以获得良好的信号。脑电图系统相对便宜且便携，是 BCI 研究中最常见的神经影像学方法。</p><img src="https://ae01.alicdn.com/kf/H9d2bf4ace5bc4372932e4b2647ebfbecI.jpg" style="zoom:120%;" /><h4 id="2、皮层脑电图（Electrocorticography-ECoG）"><a href="#2、皮层脑电图（Electrocorticography-ECoG）" class="headerlink" title="2、皮层脑电图（Electrocorticography, ECoG）"></a>2、皮层脑电图（Electrocorticography, ECoG）</h4><p><strong>皮层脑电图</strong>涉及到通过外科手术将电极植入大脑表面来记录电活动。相对于 EEG 传感器，ECoG 传感器具有更好的空间分辨率，能够准确检测脑电图电极不可见的高频脑活动。电极一旦植入，就可以准备用于 BCI 或其他任务，而无需在每次使用前进行准备。</p><h4 id="3、深度电极-Depth-electrode"><a href="#3、深度电极-Depth-electrode" class="headerlink" title="3、深度电极(Depth electrode)"></a>3、深度电极(Depth electrode)</h4><p>**深度电极(Depth electrode)**记录使用通过外科手术植入大脑的电极。这种方法具有类似于 ECoG 的吸引人的特性，但记录的是来自一小群神经元的活动。因此，这两种方法提供了大脑活动的不同图景。</p><h4 id="4、功能磁共振成像-FunctionalMagnetic-Resonance-Imaging-fMRI"><a href="#4、功能磁共振成像-FunctionalMagnetic-Resonance-Imaging-fMRI" class="headerlink" title="4、功能磁共振成像(FunctionalMagnetic Resonance Imaging, fMRI)"></a>4、功能磁共振成像(FunctionalMagnetic Resonance Imaging, fMRI)</h4><p><strong>功能磁共振成像</strong>不能测量电活动，而是用来测量与不同精神活动相关的大脑血流变化。而这些变化不能像上面三种方法那样用时间精度来检测。fMRI 系统需要非常强大的磁场，因此要花费昂贵且不便于携带。</p><p><img src="https://ae01.alicdn.com/kf/H16206fdcfb4548059e51de516e2b7492W.jpg"></p><h3 id="二、大脑布罗德曼分区系统"><a href="#二、大脑布罗德曼分区系统" class="headerlink" title="二、大脑布罗德曼分区系统"></a>二、大脑布罗德曼分区系统</h3><blockquote><p>布罗德曼分区是一个根据细胞结构将大脑皮层划分为一系列解剖区域的系统。神经解剖学中所谓细胞结构（Cytoarchitecture），是指在染色的脑组织中观察到的神经元的组织方式。</p></blockquote><p><strong>大脑半球外侧面的布罗德曼分区</strong></p><p><img src="https://ae01.alicdn.com/kf/H80d11821245b474d81ad4e4342ae9fc0v.jpg" alt="大脑半球外侧面的布罗德曼分区"></p><p><strong>大脑半球内侧面的布罗德曼分区</strong></p><p><img src="https://ae01.alicdn.com/kf/H759a4eb6677e40a1aae01258ab7642e89.jpg"></p><ul><li><p>黄色部位是 <strong>额叶</strong>，主要功能：思维，计划和中央执行职能；运动执行；</p></li><li><p>绿色部位是 <strong>顶叶</strong>，主要功能：体感知觉，视觉和体空间信息的整合；</p></li><li><p>红色部位是 <strong>颞叶</strong>，主要功能：语言功能和听觉感知，参与长期记忆和情感；</p></li><li><p>青色部位是 <strong>枕叶</strong>，主要功能：视觉感知和处理。</p></li></ul><h3 id="三、稳态视觉诱发电位-SSVEP"><a href="#三、稳态视觉诱发电位-SSVEP" class="headerlink" title="三、稳态视觉诱发电位 SSVEP"></a>三、稳态视觉诱发电位 SSVEP</h3><p>诱发电位主要有<strong>视觉诱发电位</strong>、<strong>听觉诱发电位</strong>以及<strong>触觉诱发电位</strong>三种。视觉诱发电位由于简单、方便被广泛应用于脑电信号的研究中。当视觉收到光或者图形闪烁等刺激时，脑电信号的电位会发生变化，这些电位的变化就是<code>视觉诱发电位(Visual Evoked Potential, VEP)</code>。</p><h4 id="1、视觉诱发电位可以大致分为三类："><a href="#1、视觉诱发电位可以大致分为三类：" class="headerlink" title="1、视觉诱发电位可以大致分为三类："></a>1、视觉诱发电位可以大致分为三类：</h4><ul><li>瞬时视觉诱发电位（Transient Visual EvokedPotential， TVEP）;</li><li>稳态视觉诱发电位（Steady-State Visual EvokedPotential, SSVEP）;</li><li>伪随机码视觉诱发电位。</li></ul><h4 id="2、SSVEP-信号原理与基础"><a href="#2、SSVEP-信号原理与基础" class="headerlink" title="2、SSVEP 信号原理与基础"></a>2、SSVEP 信号原理与基础</h4><p>关于 SSVEP 信号的原理，主流观点认为大脑里分布的各种神经网络都有其固有的谐振频率，在正常状态下，这些神经网络都是互不同步的，也是杂乱无章，没有规律的，此时的脑电信号是自发脑电。当施加一个恒定频率的外界视觉刺激时，与刺激频率或谐波频率相一致的神经网络就会产生谐振，导致大脑的电位活动在刺激频率或谐波频率处出现明显变化，由此产生 SSVEP 信号。</p><p><strong>基于 SSVEP 信号的 BCI 系统就是通过检测枕叶视觉区的 EEG 信号来判断大脑的思维活动。</strong></p><p>当人体受到一个固定频率的闪烁或者变换模式的视觉刺激时，大脑皮层的电位活动将被调制，从而产生一个连续的且与刺激频率有关（刺激频率的基频或倍频处）的响应，这个响应具有和视觉刺激类似的周期性节律，即为**稳态视觉诱发电位(SSVEP)**。SSVEP 信号表现在 EEG 脑电信号中则是在功率谱中能在刺激频率或谐波上出现谱峰。通过分析检测谱峰处对应的频率，即能检测到受试者视觉注视的刺激源，从而能识别受试者的意图。</p><p>在使用视觉刺激装置来获取 SSVEP 信号时，在大脑皮层中与枕叶视觉区有关的脑电通道主要有六个（P03,P0Z,P04,01,0Z,02）</p><p><img src="https://ae01.alicdn.com/kf/H44e9c152fad149eb839ca9e2171abf70R.jpg"></p><h4 id="3、获取-SSVEP-信号要注意的点"><a href="#3、获取-SSVEP-信号要注意的点" class="headerlink" title="3、获取 SSVEP 信号要注意的点"></a>3、获取 SSVEP 信号要注意的点</h4><ul><li>（1）能诱发 SSVEP 幅度随频率变化的响应曲线大致可以分为三个区域:<code>低频区(4~15Hz), 中频区(15~30Hz), 高频区(30~60Hz)</code>。不稳定的频率无法诱发稳定的 SSVEP 信号，将严重影响对信号识别的准确率，因此稳定的刺激频率是必须的。</li><li>（2）不同人的 SSVEP 信号幅值不尽相同，对相同频率的响应敏感程度也存在差异，同时，由于谐波成分的存在，要尽量避免一个刺激频率是另一个刺激频率的整数倍，否则将容易引起识别错误的情况。</li><li>（3）诱发 SSVEP 信号的刺激源要具有友好性，满足受试者对于舒适性的要求，刺激频率过高或是刺激强度过大容易导致视觉疲劳而影响视力健康，甚至会诱发癫痫样脑电活动。</li></ul><img src="https://ae01.alicdn.com/kf/Ha4554517d6f34265b26a7bcf39756e22R.jpg" style="zoom:120%;" /><h3 id="四、10-20-国际标准导联系统"><a href="#四、10-20-国际标准导联系统" class="headerlink" title="四、10-20 国际标准导联系统"></a>四、10-20 国际标准导联系统</h3><h4 id="1、系统介绍"><a href="#1、系统介绍" class="headerlink" title="1、系统介绍"></a>1、系统介绍</h4><p><strong>10-20 系统电极放置法</strong>是国际脑电图学会规定的标准电极放置法。额极中点至鼻根的距离和枕点至枕外粗隆的距离各占此连线全长的 10％，其余各点均以此连线全长的 20％相隔，如下图所示。因此命名为 10-20 系统。</p><blockquote><p>奇数表示大脑左侧，偶数表示大脑右侧。左右侧各取 8 个电极，加上前后位上的额中点（Fz）、中央点（Cz）、顶点（Pz）以及两个耳电极共 21 个电极。</p></blockquote><p><img src="https://ae01.alicdn.com/kf/Ha523e4f5264c4f71af3e51d6c022830ch.jpg"></p><p>10-20 系统的电极位置主要以颅骨为参照，并不因个人头围或头型的差异而有所不同。10-20 系统电极位置描述如下：</p><ul><li><p><strong>前后矢状线</strong>：从鼻根至枕外粗隆取一连线，在此线上，由前至后标出 5 个点，依次命名为：额极中点（Fpz）、额中点（Fz）、中央点（Cz）、顶点（Pz）、枕点（Oz）。额极中点至鼻根的距离和枕点至枕外粗隆的距离各占此连线全长的 10％，其余各点均以此连线全长的 20％相隔。</p></li><li><p><strong>横位</strong>：从左耳前点（耳屏前颧弓根凹陷处）通过中央点至右耳前点取一连线，在此连线的左右两侧对称标出左颞中（T3）、右颞中（T4）、左中央（C3）、右中央（C4）。T3、T4 点与耳前点的距离各占此线全长的 10％，其余各点（包括 Cz 点）均以此连线全长的 20％相隔。</p></li><li><p><strong>侧位</strong>：从 Fpz 点向后通过 T3、T4 点至枕点分别取左右侧连线，在左右侧连线上由前至后对称地标出左额极（Fp1 ）、右额极（Fp2 ）、左前颞（F7）、右前颞（F8）、左后颞（T5）、右后颞（T6）、左枕（O1）、右枕（O2）各点。Fp1 、Fp2 点至额极中点（Fpz ）的距离与 O1、O2 点至 Oz 点的距离各占此连线全长的 10％，其余各点（包括 T3、T4）均以此连线全长的 20％相隔。</p></li><li><p>其余的左额（F3）、右额（F4）点分别位于 Fp1、Fp2 与 C3、C4 点的中间；左顶（P3）、右顶（P4）点分别位于 C3、C4 与 O1、O2 点的中间。</p></li></ul><h4 id="2、10-20-系统中数字与字母"><a href="#2、10-20-系统中数字与字母" class="headerlink" title="2、10-20 系统中数字与字母"></a>2、10-20 系统中数字与字母</h4><h5 id="（1）数字代表的含义："><a href="#（1）数字代表的含义：" class="headerlink" title="（1）数字代表的含义："></a>（1）数字代表的含义：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">左脑单数，右脑双数；</span><br><span class="line"></span><br><span class="line">/代表中间，例：C3/T3就是指两点之间的中间地点；</span><br><span class="line"></span><br><span class="line">-代表涵盖两点或相连的所有点，例：C3-T3代表涵盖这两点；</span><br></pre></td></tr></table></figure><h5 id="（2）字母代表的含义："><a href="#（2）字母代表的含义：" class="headerlink" title="（2）字母代表的含义："></a>（2）字母代表的含义：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">F: 额叶(Frontal lobe)</span><br><span class="line"></span><br><span class="line">Fp:前额叶（Frontal poles）</span><br><span class="line"></span><br><span class="line">T: 颞叶（Temporal lobes）</span><br><span class="line"></span><br><span class="line">O: 枕叶（Occipital lobes）</span><br><span class="line"></span><br><span class="line">P: 顶叶（Parietal lobes）</span><br><span class="line"></span><br><span class="line">C: 中心部（Central） 或感觉运动皮层（sensorimotorcortex）</span><br><span class="line"></span><br><span class="line">Z: 零点（zero）即左右脑中心</span><br></pre></td></tr></table></figure><h3 id="五、运动想象系统"><a href="#五、运动想象系统" class="headerlink" title="五、运动想象系统"></a>五、运动想象系统</h3><h4 id="1、系统介绍-1"><a href="#1、系统介绍-1" class="headerlink" title="1、系统介绍"></a>1、系统介绍</h4><p><strong>运动想象系统的生理基础</strong>是：当人在想象躯体不同部位的运动时，会相应的激活大脑的不同功能区域，从而产生具有不同特性的脑电信号。而所谓的不同特性指的是<strong>事件相关去同步化（Event-related desynchronization，ERD）</strong>和<strong>事件相关同步化（Event-relatedsynchronization，ERS）</strong>现象。</p><p><strong>当人在想象运动时，大脑皮层相关的区域会出现特定频率振幅减小，能量下降的情况，这就是 ERD；而当人在想象运动结束或者进入大脑静息状态时，大脑皮层相关区域则会出现振幅增加，能量增加的情况，这就是 ERS。</strong></p><p>而 ERD 和 ERS 只会在 EEG 的特定频率范围内出现，比如 8-12Hz 的<strong>Mu 波</strong>以及 18-26Hz 的<strong>Beta 波</strong>。</p><img src="https://file.buildworld.cn/img/14ec0be1f43b90b03b842e99427ba0c1_640_wx_fmt=png&amp;tp=webp&amp;wxfrom=5&amp;wx_lazy=1&amp;wx_co=1.webp" style="zoom:150%;" /><p>上图详解：想象左手右手运动的<strong>ERD 现象</strong>。当想象左手运动时，大脑皮层右侧(<strong>C4 电极</strong>附近) 出现 ERD 现象，相关区域能量减小；当想象右手运动时，大脑皮层左侧（<strong>C3 电极</strong>附近）出现 ERD 现象，相关区域能量减小。</p><p><strong>运动想象系统是指对想象运动产生的 EEG 信号进行解码，从而获知被试的运动意图，将相应的控制命令传给外接设备，达到人机交互的目的。</strong></p><h4 id="2、脑电信号的节律波"><a href="#2、脑电信号的节律波" class="headerlink" title="2、脑电信号的节律波"></a>2、脑电信号的节律波</h4><p>两种分类方法：</p><p><strong>分类方法一</strong>：以 Schwab 频率来划分的话，一般分为三类：<code>慢波、中间快波和快波</code>。</p><ul><li>1）慢波包括 0.5-3Hz 范围的 delta 波、4-7Hz 的 theta 波和 8-13Hz 的 alpha 波；</li><li>2）中间快波为频率在 14-17Hz 范围的波；</li><li>3）快波包括 18-30Hz 的 beta 波、31Hz 以上的为 gama 波。</li></ul><p><strong>分类方法二</strong>：Walter 分类，共有以下五种分类：</p><ul><li>a.频率在 0.5-3.5Hz 范围内为 delta 波，</li><li>b.频率在 4-7Hz 范围内为 theta 波，</li><li>c.频率在 8-13Hz 范围内为 alpha，</li><li>d.频率在 14-25Hz 范围内为 beta 波，</li><li>e.频率在 26Hz 以上的为 gama 波，</li></ul><p><strong>特别要注意的是这里对频率在 10Hz 左右的波称为节律。</strong></p><h4 id="3、特征提取算法"><a href="#3、特征提取算法" class="headerlink" title="3、特征提取算法"></a>3、特征提取算法</h4><p><strong>（1）时域方法</strong>：这是比较早期的 EEG 信号处理方法，主要通过提取 EEG 的波形特征，比如振幅、方差、波峰等，对 EEG 信号进行分析；</p><p><strong>（2）频域方法</strong>：运动想象 EEG 信号的 ERD 和 ERS 现象只出现在特定频率范围，比如 8-12Hz 的 Mu 波和 18-26Hz 的 Beta 波。因此，通过功率谱等谱分析方法，也可以有效地从 EEG 提取中特征。其中比较出名的方法有自回归功率谱分析、双谱分析法等；</p><p><strong>（3）空域方法</strong>：这是近年运动想象领域比较通用的特征提取方法，主要通过设计空域滤波器对 EEG 的多通道空间分布进行处理，提取可分的特征。包括：<code>共空域模式法（Common spatialpattern，CSP）</code>，以及基于 CSP 改进的方法。</p><p><strong>基于 CSP 改进的方法包括：</strong></p><ul><li><p><code>时空滤波的共空谱模式（Common spatio-spectralpattern, CSSP）</code>；</p></li><li><p><code>共稀疏谱空模式（Common sparse spectral spatial pattern，CSSSP）</code>；</p></li><li><p><code>正则化公用空间模式（Regularized Common Spatial Pattern, RCSP)</code>等。</p></li></ul><p><strong>（4）小波模糊熵的特征提取方法</strong>鉴于脑电信号的非线性特性和运动想象时的节律特性，提出了<strong>小波模糊熵的特征提取方法</strong>，利用小波变换将 EEG 信号进行小波分解，得到对应运动想象 EEG 信号的 alpha 和 beta 节律，然后采用模糊熵方法提取特征。</p><h4 id="4、分类识别算法"><a href="#4、分类识别算法" class="headerlink" title="4、分类识别算法"></a>4、分类识别算法</h4><p><strong>(1)LDA 分类器</strong></p><p>LDA 分类器(LinearDiscriminant Analysis，LDA)是一种简单高效的线性分类器，将数据往低维度方向投影，使得投影后的数据具有类内方差最小，类间方差最大的特性。也即是投影后同一类别的数据尽可能接近，不同类别的数据尽可能分开。最后在最可分的数据上通过简单的阈值设置进行分类。LDA 是运动想象系统中最常用的分类器，在历届的脑机接口竞赛中都被许多参赛者使用。近年来，结合运动想象的特点，许多基于 LDA 的改进方法也被提出来，比如自适应 LDA、贝叶斯 LDA 等，并且都取得了很好的分类性能。</p><p><strong>(2)SVM 分类器</strong></p><p>支持向量机分类器(SVM)是机器学习里典型的分类器，通过构建一个最优的分割超平面，从而将两类数据尽可能的区分开。SVM 在运动想象系统中也被广泛的使用，除此之外，SVM 在 P300、稳态视觉诱发电位（Steady state visuallyevoked potentials，SSVEP）脑机接口系统中也广泛使用。</p><p><strong>(3)贝叶斯分类器</strong></p><p>贝叶斯分类器是利用贝叶斯公式计算出样本属于各个类别的后验概率，然后最大后验概率所对应的类别则为该样本的类别。贝叶斯分类器也广泛的使用于运动想象系统，对特征进行分类。</p><p><strong>(4)人工神经网络</strong></p><p>人工神经网络是利用大脑神经元结构和信息传递机理，在此基础上建立大规模的具有自适应能力的网络系统，并且通过拓扑结构连接，按照大型规模的并行方式排列而成。人工神经网络适合非线性分析问题，并且具有较强的学习和归纳能力，自适应性强。人工神经网络的模式有很多种，目前常用的人工神经网络有：感知器、多层感知器、BP 神经网络、RBF 神经网络等。</p><p><strong>(5)聚类分类器</strong></p><p>聚类分析是一种具有探索性质的模式分类方法，在分类时不依赖于任何关于分类的先验知识，而是采用相似度量的方法，对具有相同或相似特征的样本进行分类。聚类分析在分类时需要确定一种聚类准则来评价聚类方法的好坏，常用的聚类准则有<code>误差平方和</code>、<code>类间距离和</code>、<code>离散度</code>等。聚类方法有很多种，常见的方法有：<code>层次聚类</code>、<code>动态聚类法</code>和<code>决策树聚类法</code>等。由于聚类为线性分类器，<strong>它在脑电信号分类中的缺点是对脑电信号的特征要求很高，难以处理复杂的分类问题，容易造成分辨率低。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 脑机交互 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BCI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BigData--Hive数据仓库工具</title>
      <link href="/2020/06/08/BigData-Hive%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E5%B7%A5%E5%85%B7/"/>
      <url>/2020/06/08/BigData-Hive%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Hive"><a href="#Hive" class="headerlink" title="Hive"></a>Hive</h2><h3 id="一、Hive入门"><a href="#一、Hive入门" class="headerlink" title="一、Hive入门"></a>一、Hive入门</h3><h4 id="1、Hive功能"><a href="#1、Hive功能" class="headerlink" title="1、Hive功能"></a>1、Hive功能</h4><p><img src="https://file.buildworld.cn/img/20200608124512.png"></p><ul><li>1）Hive处理的数据存储在HDFS</li><li>2）Hive分析数据底层的实现是MapReduce</li><li>3）执行程序运行在Yarn上</li></ul><h4 id="2、Hive的优缺点"><a href="#2、Hive的优缺点" class="headerlink" title="2、Hive的优缺点"></a>2、Hive的优缺点</h4><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><ul><li>（1) 操作接口采用类SQL语法，提供快速开发的能力（简单、容易上手）。</li><li>（2) 避免了去写MapReduce，减少开发人员的学习成本。</li><li>（3) Hive的执行延迟比较高，因此Hive常用于数据分析，对实时性要求不高的场合。</li><li>（4) Hive优势在于处理大数据，对于处理小数据没有优势，因为Hive的执行延迟比较高。</li><li>（5) Hive支持用户自定义函数，用户可以根据自己的需求来实现自己的函数。</li></ul><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><ul><li>（1）迭代式算法无法表达</li><li>（2）数据挖掘方面不擅长，由于MapReduce数据处理流程的限制，效率更高的算法却无法实现。</li><li>（3）Hive自动生成的MapReduce作业，通常情况下不够智能化</li><li>（4）Hive调优比较困难，粒度较粗</li></ul><h4 id="3、Hive架构"><a href="#3、Hive架构" class="headerlink" title="3、Hive架构"></a>3、Hive架构</h4><p><img src="https://file.buildworld.cn/img/20200613100142.png"></p><ul><li>（1）<strong>解析器（SQL Parser）</strong>：将SQL字符串转换成抽象语法树AST，这一步一般都用第三方工具库完成，比如antlr；对AST进行语法分析，比如表是否存在、字段是否存在、SQL语义是否有误。</li><li>（2）<strong>编译器（Physical Plan）：</strong>将AST编译生成逻辑执行计划。</li><li>（3）<strong>优化器（Query Optimizer）：</strong>对逻辑执行计划进行优化。</li><li>（4）<strong>执行器（Execution）：</strong>把逻辑执行计划转换成可以运行的物理计划。对于Hive来说，就是MR/Spark。</li></ul><h4 id="4、Hive的运行机制"><a href="#4、Hive的运行机制" class="headerlink" title="4、Hive的运行机制"></a>4、Hive的运行机制</h4><p><strong>Hive通过给用户提供的一系列交互接口，接收到用户的<code>指令(SQL)</code>，使用自己的<code>Driver</code>，结合<code>元数据(MetaStore)</code>，将这些指令翻译成MapReduce，提交到Hadoop中执行，最后，将执行返回的结果输出到用户交互接口。</strong></p><p><img src="https://file.buildworld.cn/img/20200613102931.png"></p><h3 id="二、Hive数据类型"><a href="#二、Hive数据类型" class="headerlink" title="二、Hive数据类型"></a>二、Hive数据类型</h3><h4 id="1、基本数据类型"><a href="#1、基本数据类型" class="headerlink" title="1、基本数据类型"></a>1、基本数据类型</h4><table><thead><tr><th align="center">Hive数据类型</th><th align="center">Java数据类型</th><th>长度</th><th>例子</th></tr></thead><tbody><tr><td align="center">TINYINT</td><td align="center">byte</td><td>1byte有符号整数</td><td>20</td></tr><tr><td align="center">SMALINT</td><td align="center">short</td><td>2byte有符号整数</td><td>20</td></tr><tr><td align="center"><strong>INT</strong></td><td align="center">int</td><td>4byte有符号整数</td><td>20</td></tr><tr><td align="center"><strong>BIGINT</strong></td><td align="center">long</td><td>8byte有符号整数</td><td>20</td></tr><tr><td align="center">BOOLEAN</td><td align="center">boolean</td><td>布尔类型，true或者false</td><td>TRUE  FALSE</td></tr><tr><td align="center">FLOAT</td><td align="center">float</td><td>单精度浮点数</td><td>3.14159</td></tr><tr><td align="center"><strong>DOUBLE</strong></td><td align="center">double</td><td>双精度浮点数</td><td>3.14159</td></tr><tr><td align="center"><strong>STRING</strong></td><td align="center">string</td><td>字符系列。可以指定字符集。可以使用单引号或者双引号。</td><td>‘now is the time’ “for all good men”</td></tr><tr><td align="center">TIMESTAMP</td><td align="center"></td><td>时间类型</td><td></td></tr><tr><td align="center">BINARY</td><td align="center"></td><td>字节数组</td><td></td></tr></tbody></table><h4 id="2、集合数据类型"><a href="#2、集合数据类型" class="headerlink" title="2、集合数据类型"></a>2、集合数据类型</h4><table><thead><tr><th align="center">数据类型</th><th>描述</th><th align="left">语法示例</th></tr></thead><tbody><tr><td align="center">STRUCT</td><td>和c语言中的struct类似，都可以通过“点”符号访问元素内容。例如，如果某个列的数据类型是STRUCT{first STRING, last STRING},那么第1个元素可以通过字段.first来引用。</td><td align="left">struct()例如struct&lt;street:string, city:string&gt;</td></tr><tr><td align="center">MAP</td><td>MAP是一组键-值对元组集合，使用数组表示法可以访问数据。例如，如果某个列的数据类型是MAP，其中键-&gt;值对是’first’-&gt;’John’和’last’-&gt;’Doe’，那么可以通过字段名[‘last’]获取最后一个元素</td><td align="left">map()例如map&lt;string, int&gt;</td></tr><tr><td align="center">ARRAY</td><td>数组是一组具有相同类型和名称的变量的集合。这些变量称为数组的元素，每个数组元素都有一个编号，编号从零开始。例如，数组值为[‘John’, ‘Doe’]，那么第2个元素可以通过数组名[1]进行引用。</td><td align="left">Array()例如array<string></td></tr></tbody></table><h4 id="3、类型转化"><a href="#3、类型转化" class="headerlink" title="3、类型转化"></a>3、类型转化</h4><blockquote><p>Hive的原子数据类型是可以进行隐式转换的，类似于Java的类型转换，例如某表达式使用<code>INT</code>类型，<code>TINYINT</code>会自动转换为<code>INT</code>类型，但是Hive不会进行反向转化，例如，某表达式使用TINYINT类型，INT不会自动转换为TINYINT类型，它会返回错误，除非使用<code>CAST</code>操作。</p></blockquote><ul><li>（1）任何整数类型都可以隐式地转换为一个范围更广的类型，如TINYINT可以转换成INT，INT可以转换成BIGINT。</li><li>（2）所有整数类型、FLOAT和STRING类型都可以隐式地转换成DOUBLE。</li><li>（3）TINYINT、SMALLINT、INT都可以转换为FLOAT。</li><li>（4）BOOLEAN类型不可以转换为任何其它的类型。</li></ul><h3 id="三、DDL数据定义"><a href="#三、DDL数据定义" class="headerlink" title="三、DDL数据定义"></a>三、DDL数据定义</h3><p>​    </p><h4 id="1、建表语法"><a href="#1、建表语法" class="headerlink" title="1、建表语法"></a>1、建表语法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">CREATE [EXTERNAL] TABLE [IF NOT EXISTS] table_name </span><br><span class="line"></span><br><span class="line">[(col_name data_type [COMMENT col_comment], ...)] </span><br><span class="line"></span><br><span class="line">[COMMENT table_comment] </span><br><span class="line"></span><br><span class="line">[PARTITIONED BY (col_name data_type [COMMENT col_comment], ...)] </span><br><span class="line"></span><br><span class="line">[CLUSTERED BY (col_name, col_name, ...) </span><br><span class="line"></span><br><span class="line">[SORTED BY (col_name [ASC|DESC], ...)] INTO num_buckets BUCKETS] </span><br><span class="line"></span><br><span class="line">[ROW FORMAT row_format] </span><br><span class="line"></span><br><span class="line">[STORED AS file_format] </span><br><span class="line"></span><br><span class="line">[LOCATION hdfs_path]</span><br><span class="line"></span><br><span class="line">[TBLPROPERTIES (property_name=property_value, ...)]</span><br><span class="line"></span><br><span class="line">[AS select_statement]</span><br></pre></td></tr></table></figure><ul><li>（1）CREATE TABLE 创建一个指定名字的表。如果相同名字的表已经存在，则抛出异常；用户可以用 IF NOT EXISTS 选项来忽略这个异常。</li><li>（2）EXTERNAL关键字可以让用户创建一个外部表，在建表的同时可以指定一个指向实际数据的路径（LOCATION），在删除表的时候，内部表的元数据和数据会被一起删除，而外部表只删除元数据，不删除数据。</li><li>（3）COMMENT：为表和列添加注释。</li><li>（4）PARTITIONED BY创建分区表</li><li>（5）CLUSTERED BY创建分桶表</li><li>（6）SORTED BY不常用，对桶中的一个或多个列另外排序</li><li>（7）ROW FORMAT </li></ul><p>DELIMITED [FIELDS TERMINATED BY char] [COLLECTION ITEMS TERMINATED BY char]</p><pre><code>[MAP KEYS TERMINATED BY char] [LINES TERMINATED BY char] </code></pre><p>  | SERDE serde_name [WITH SERDEPROPERTIES (property_name=property_value, property_name=property_value, …)]</p><p>用户在建表的时候可以自定义SerDe或者使用自带的SerDe。如果没有指定ROW FORMAT 或者ROW FORMAT DELIMITED，将会使用自带的SerDe。在建表的时候，用户还需要为表指定列，用户在指定表的列的同时也会指定自定义的SerDe，Hive通过SerDe确定表的具体的列的数据。</p><p>SerDe是Serialize/Deserilize的简称， hive使用Serde进行行对象的序列与反序列化。</p><ul><li>（8）STORED AS指定存储文件类型</li></ul><p>常用的存储文件类型：SEQUENCEFILE（二进制序列文件）、TEXTFILE（文本）、RCFILE（列式存储格式文件）</p><p>如果文件数据是纯文本，可以使用STORED AS TEXTFILE。如果数据需要压缩，使用 STORED AS SEQUENCEFILE。</p><ul><li>（9）LOCATION ：指定表在HDFS上的存储位置。</li><li>（10）AS：后跟查询语句，根据查询结果创建表。</li><li>（11）LIKE允许用户复制现有的表结构，但是不复制数据。</li></ul><h4 id="2、管理表与外部表的互相转换"><a href="#2、管理表与外部表的互相转换" class="headerlink" title="2、管理表与外部表的互相转换"></a>2、管理表与外部表的互相转换</h4><ul><li>（1）查询表的类型</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; desc formatted student2;</span><br><span class="line"></span><br><span class="line">Table Type:       MANAGED_TABLE</span><br></pre></td></tr></table></figure><ul><li>（2）修改内部表student2为外部表</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table student2 set tblproperties(&#x27;EXTERNAL&#x27;=&#x27;TRUE&#x27;);</span><br></pre></td></tr></table></figure><ul><li>（3）查询表的类型</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; desc formatted student2;</span><br><span class="line"></span><br><span class="line">Table Type:       EXTERNAL_TABLE</span><br></pre></td></tr></table></figure><ul><li>（4）修改外部表student2为内部表</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table student2 set tblproperties(&#x27;EXTERNAL&#x27;=&#x27;FALSE&#x27;);</span><br></pre></td></tr></table></figure><ul><li>（5）查询表的类型</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hive (default)&gt; desc formatted student2;</span><br><span class="line"></span><br><span class="line">Table Type:       MANAGED_TABLE</span><br></pre></td></tr></table></figure><p><strong>注意：(‘EXTERNAL’=’TRUE’)和(‘EXTERNAL’=’FALSE’)为固定写法，区分大小写！</strong></p><h3 id="四、DML数据操作"><a href="#四、DML数据操作" class="headerlink" title="四、DML数据操作"></a>四、DML数据操作</h3><h4 id="1、数据导入"><a href="#1、数据导入" class="headerlink" title="1、数据导入"></a>1、数据导入</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">hive&gt;</span><span class="bash"> load data [<span class="built_in">local</span>] inpath <span class="string">&#x27;/opt/module/datas/student.txt&#x27;</span> [overwrite] into table student [partition (partcol1=val1,…)];</span></span><br></pre></td></tr></table></figure><ul><li>（1）**load data:**表示加载数据</li><li>（2）**local:**表示从本地加载数据到hive表；否则从HDFS加载数据到hive表</li><li>（3）**inpath:**表示加载数据的路径</li><li>（4）**overwrite:**表示覆盖表中已有数据，否则表示追加</li><li>（5）**into table:**表示加载到哪张表</li><li>（6）**student:**表示具体的表</li><li>（7）**partition:**表示上传到指定分区</li></ul><h3 id="五、查询"><a href="#五、查询" class="headerlink" title="五、查询"></a>五、查询</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[WITH CommonTableExpression (, CommonTableExpression)*]  (Note: Only available</span><br><span class="line"> starting with Hive 0.13.0)</span><br><span class="line">SELECT [ALL | DISTINCT] select_expr, select_expr, ...</span><br><span class="line"> FROM table_reference</span><br><span class="line"> [WHERE where_condition]</span><br><span class="line"> [GROUP BY col_list]</span><br><span class="line"> [ORDER BY col_list]</span><br><span class="line"> [CLUSTER BY col_list</span><br><span class="line">  | [DISTRIBUTE BY col_list] [SORT BY col_list]</span><br><span class="line"> ]</span><br><span class="line"> [LIMIT number]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BigData--Zookeeper介绍和使用</title>
      <link href="/2020/06/07/BigData-Zookeeper%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/06/07/BigData-Zookeeper%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="开启Zookeeper"><a href="#开启Zookeeper" class="headerlink" title="开启Zookeeper"></a>开启Zookeeper</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@hadoop102 zookeeper-3.4.10]# /opt/module/zookeeper-3.4.10/bin/zkServer.sh start</span><br><span class="line">[root@hadoop103 zookeeper-3.4.10]# /opt/module/zookeeper-3.4.10/bin/zkServer.sh start</span><br><span class="line">[root@hadoop104 zookeeper-3.4.10]# /opt/module/zookeeper-3.4.10/bin/zkServer.sh start</span><br></pre></td></tr></table></figure><h4 id="查看状态"><a href="#查看状态" class="headerlink" title="查看状态"></a>查看状态</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/module/zookeeper-3.4.10/bin/zkServer.sh status</span><br></pre></td></tr></table></figure><h4 id="停止Zookeeper"><a href="#停止Zookeeper" class="headerlink" title="停止Zookeeper"></a>停止Zookeeper</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/opt/module/zookeeper-3.4.10/bin/zkServer.sh stop</span><br></pre></td></tr></table></figure><h3 id="1、Zookeeper工作机制"><a href="#1、Zookeeper工作机制" class="headerlink" title="1、Zookeeper工作机制"></a>1、Zookeeper工作机制</h3><p><img src="https://file.buildworld.cn/img/20200606173824.png"></p><h3 id="2、Zookeeper特点"><a href="#2、Zookeeper特点" class="headerlink" title="2、Zookeeper特点"></a>2、Zookeeper特点</h3><p><img src="https://file.buildworld.cn/img/20200606174415.png"></p><ul><li>1）Zookeeper：一个领导者（Leader），多个跟随者（Follower）组成的集群。</li><li><strong>2）集群中只要有半数以上节点存活，Zookeeper集群就能正常服务。</strong></li><li>3）全局数据一致：每个Server保存一份相同的数据副本，Client无论连接到哪个Server，数据都是一致的。</li><li>4）更新请求顺序进行，来自同一个Client的更新请求按其发送顺序依次执行。</li><li>5）数据更新原子性，一次数据更新要么成功，要么失败。</li><li>6）实时性，在一定时间范围内，Client能读到最新数据。</li></ul><h3 id="3、客户端命令"><a href="#3、客户端命令" class="headerlink" title="3、客户端命令"></a>3、客户端命令</h3><table><thead><tr><th>命令基本语法</th><th>功能描述</th></tr></thead><tbody><tr><td>help</td><td>显示所有操作命令</td></tr><tr><td>ls path [watch]</td><td>使用 ls 命令来查看当前znode中所包含的内容</td></tr><tr><td>ls2 path [watch]</td><td>查看当前节点数据并能看到更新次数等数据</td></tr><tr><td>create</td><td>普通创建-s  含有序列-e  临时（重启或者超时消失）</td></tr><tr><td>get path [watch]</td><td>获得节点的值</td></tr><tr><td>set</td><td>设置节点的具体值</td></tr><tr><td>stat</td><td>查看节点状态</td></tr><tr><td>delete</td><td>删除节点</td></tr><tr><td>rmr</td><td>递归删除节点</td></tr></tbody></table><h3 id="4、Java相关开发"><a href="#4、Java相关开发" class="headerlink" title="4、Java相关开发"></a>4、Java相关开发</h3><h4 id="1）POM文件设置"><a href="#1）POM文件设置" class="headerlink" title="1）POM文件设置"></a>1）POM文件设置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.zookeeper/zookeeper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.zookeeper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zookeeper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2）Java代码使用"><a href="#2）Java代码使用" class="headerlink" title="2）Java代码使用"></a>2）Java代码使用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.buildworld.zookeeper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.CreateMode;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.KeeperException;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooDefs;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.ZooKeeper;</span><br><span class="line"><span class="keyword">import</span> org.apache.zookeeper.data.Stat;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MiChong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-06-07 14:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ZkClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ZooKeeper zkClient;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONNECT_URL = <span class="string">&quot;192.168.162.102:2181,192.168.162.103:2181,192.168.162.104:2181&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SESSION_TIME_OUT = <span class="number">2000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    ** 创建客户端</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        zkClient = <span class="keyword">new</span> ZooKeeper(CONNECT_URL, SESSION_TIME_OUT, (e) -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;命令执行完成回调！&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取目录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> KeeperException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ls</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">        List&lt;String&gt; children = zkClient.getChildren(<span class="string">&quot;/&quot;</span>, event -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;目录获取完成！&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (String path : children) &#123;</span><br><span class="line">            System.out.println(path);</span><br><span class="line">        &#125;</span><br><span class="line">        Thread.sleep(Long.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建目录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> KeeperException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">        String path = zkClient.create(<span class="string">&quot;/Idea&quot;</span>,</span><br><span class="line">                <span class="string">&quot;234567&quot;</span>.getBytes(),</span><br><span class="line">                ZooDefs.Ids.CREATOR_ALL_ACL,</span><br><span class="line">                CreateMode.EPHEMERAL);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;创建的路径：&quot;</span>+path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取指定目录下面的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> KeeperException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] data = zkClient.getData(<span class="string">&quot;/test&quot;</span>, <span class="keyword">true</span>, <span class="keyword">new</span> Stat());</span><br><span class="line">        String s = <span class="keyword">new</span> String(data);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> KeeperException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">        Stat stat = zkClient.setData(<span class="string">&quot;/test&quot;</span>, <span class="string">&quot;hello world&quot;</span>.getBytes(), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] data = zkClient.getData(<span class="string">&quot;/test&quot;</span>, <span class="keyword">true</span>, stat);</span><br><span class="line">        String s = <span class="keyword">new</span> String(data);</span><br><span class="line">        System.out.println(<span class="string">&quot;更新之后的数据：&quot;</span>+s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取节点状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> KeeperException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stat</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">        Stat exists = zkClient.exists(<span class="string">&quot;/test&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (exists == <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;节点不存在！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(exists.getDataLength());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> KeeperException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> <span class="keyword">throws</span> KeeperException, InterruptedException </span>&#123;</span><br><span class="line">        Stat exists = zkClient.exists(<span class="string">&quot;/test&quot;</span>, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">if</span> (exists != <span class="keyword">null</span>)&#123;</span><br><span class="line">            zkClient.delete(<span class="string">&quot;/test&quot;</span>,exists.getVersion());</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;节点不存在！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、Zookeeper内部原理"><a href="#5、Zookeeper内部原理" class="headerlink" title="5、Zookeeper内部原理"></a>5、Zookeeper内部原理</h3><h4 id="1）节点类型"><a href="#1）节点类型" class="headerlink" title="1）节点类型"></a>1）节点类型</h4><p><img src="https://file.buildworld.cn/img/20200607122957.png"></p><h4 id="2）Stat结构体"><a href="#2）Stat结构体" class="headerlink" title="2）Stat结构体"></a>2）Stat结构体</h4><ul><li>1）czxid-创建节点的事务zxid</li></ul><p><strong>每次修改ZooKeeper状态都会收到一个zxid形式的时间戳，也就是ZooKeeper事务ID。</strong><br><strong>事务ID是ZooKeeper中所有修改总的次序。每个修改都有唯一的zxid，如果zxid1小于zxid2，那么zxid1在zxid2之前发生。</strong></p><ul><li>2）ctime - znode被创建的毫秒数(从1970年开始)</li><li>3）mzxid - znode最后更新的事务zxid</li><li>4）mtime - znode最后修改的毫秒数(从1970年开始)</li><li>5）pZxid-znode最后更新的子节点zxid</li><li>6）cversion - znode子节点变化号，znode子节点修改次数</li><li>7）dataversion - znode数据变化号</li><li>8）aclVersion - znode访问控制列表的变化号</li><li>9）ephemeralOwner- 如果是临时节点，这个是znode拥有者的session id。如果不是临时节点则是0。</li><li>10）dataLength- znode的数据长度</li><li>11）numChildren - znode子节点数量</li></ul><h4 id="3）监听原理"><a href="#3）监听原理" class="headerlink" title="3）监听原理"></a>3）监听原理</h4><p><img src="https://file.buildworld.cn/img/20200607165333.png"></p><h4 id="4）选举机制"><a href="#4）选举机制" class="headerlink" title="4）选举机制"></a>4）选举机制</h4><ul><li>（1）半数机制：集群中半数以上机器存活，集群可用。所以Zookeeper适合安装奇数台服务器。</li><li>（2）Zookeeper虽然在配置文件中并没有指定Master和Slave。但是，Zookeeper工作时，是有一个节点为Leader，其他则为Follower，Leader是通过内部的选举机制临时产生的。</li><li>（3）以一个简单的例子来说明整个选举的过程。</li></ul><p><strong>选举流程</strong></p><p><img src="https://file.buildworld.cn/img/20200607171940.png"></p><p>（1）服务器1启动，发起一次选举。服务器1投自己一票。此时服务器1票数一票，不够半数以上（3票），选举无法完成，服务器1状态保持为LOOKING；</p><p>（2）服务器2启动，再发起一次选举。服务器1和2分别投自己一票并交换选票信息：此时服务器1发现服务器2的ID比自己目前投票推举的（服务器1）大，更改选票为推举服务器2。此时服务器1票数0票，服务器2票数2票，没有半数以上结果，选举无法完成，服务器1，2状态保持LOOKING</p><p>（3）服务器3启动，发起一次选举。此时服务器1和2都会更改选票为服务器3。此次投票结果：服务器1为0票，服务器2为0票，服务器3为3票。此时服务器3的票数已经超过半数，服务器3当选Leader。服务器1，2更改状态为FOLLOWING，服务器3更改状态为LEADING；</p><p>（4）服务器4启动，发起一次选举。此时服务器1，2，3已经不是LOOKING状态，不会更改选票信息。交换选票信息结果：服务器3为3票，服务器4为1票。此时服务器4服从多数，更改选票信息为服务器3，并更改状态为FOLLOWING；</p><p>（5）服务器5启动，同4一样当小弟。</p><h4 id="5）写数据流程"><a href="#5）写数据流程" class="headerlink" title="5）写数据流程"></a>5）写数据流程</h4><p><img src="https://file.buildworld.cn/img/20200607172236.png"></p>]]></content>
      
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BigData--Yarn资源调度器</title>
      <link href="/2020/06/03/BigData-Yarn%E8%B5%84%E6%BA%90%E8%B0%83%E5%BA%A6%E5%99%A8/"/>
      <url>/2020/06/03/BigData-Yarn%E8%B5%84%E6%BA%90%E8%B0%83%E5%BA%A6%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Yarn资源调度器"><a href="#Yarn资源调度器" class="headerlink" title="Yarn资源调度器"></a>Yarn资源调度器</h2><p><strong>YARN主要由<code>ResourceManager</code>、<code>NodeManager</code>、<code>ApplicationMaster</code>和<code>Container</code>等组件构成</strong></p><h3 id="1、YARN架构"><a href="#1、YARN架构" class="headerlink" title="1、YARN架构"></a>1、YARN架构</h3><p><img src="https://file.buildworld.cn/img/20200603135942.png"></p><h3 id="2、YARN工作机制"><a href="#2、YARN工作机制" class="headerlink" title="2、YARN工作机制"></a>2、YARN工作机制</h3><p><img src="https://file.buildworld.cn/img/image-20200603142713125.png"></p><h4 id="工作机制详解"><a href="#工作机制详解" class="headerlink" title="工作机制详解"></a>工作机制详解</h4><ul><li><p>​    （1）MR程序提交到客户端所在的节点。</p></li><li><p>​    （2）<code>YarnRunner</code>向<code>ResourceManager</code>申请一个<code>Application</code>。</p></li><li><p>​    （3）RM将该应用程序的资源路径返回给<code>YarnRunner</code>。</p></li><li><p>​    （4）该程序将运行所需资源提交到HDFS上。</p></li><li><p>​    （5）程序资源提交完毕后，申请运行<code>mrAppMaster</code>。</p></li><li><p>​    （6）RM将用户的请求初始化成一个Task。</p></li><li><p>​    （7）其中一个<code>NodeManager</code>领取到Task任务。</p></li><li><p>​    （8）该<code>NodeManager</code>创建容器<code>Container</code>，并产生MRAppmaster。</p></li><li><p>​    （9）<code>Container</code>从HDFS上拷贝资源到本地。</p></li><li><p>​    （10）<code>MRAppmaster</code>向RM 申请运行<code>MapTask</code>资源。</p></li><li><p>​    （11）RM将运行<code>MapTask</code>任务分配给另外两个<code>NodeManager</code>，另两个<code>NodeManager</code>分别领取任务并创建容器。</p></li><li><p>​    （12）MR向两个接收到任务的<code>NodeManager</code>发送程序启动脚本，这两个<code>NodeManager</code>分别启动<code>MapTask</code>，<code>MapTask</code>对数据分区排序。</p></li><li><p>​    （13）<code>MrAppMaster</code>等待所有<code>MapTask</code>运行完毕后，向RM申请容器，运行<code>ReduceTask</code>。</p></li><li><p>​    （14）<code>ReduceTask</code>向<code>MapTask</code>获取相应分区的数据。</p></li><li><p>​    （15）程序运行完毕后，<code>MR</code>会向<code>RM</code>申请注销自己。</p></li></ul><h3 id="3、作业提交"><a href="#3、作业提交" class="headerlink" title="3、作业提交"></a>3、作业提交</h3><h4 id="1）作业提交过程之YARN"><a href="#1）作业提交过程之YARN" class="headerlink" title="1）作业提交过程之YARN"></a>1）作业提交过程之YARN</h4><p><img src="https://file.buildworld.cn/img/image-20200603142713125.png"></p><p><strong>提交作业详解</strong></p><h5 id="（1）作业提交"><a href="#（1）作业提交" class="headerlink" title="（1）作业提交"></a>（1）作业提交</h5><ul><li>第1步：Client调用<code>job.waitForCompletion</code>方法，向整个集群提交MapReduce作业。</li><li>第2步：Client向RM申请一个作业id。</li><li>第3步：RM给Client返回该job资源的提交路径和作业id。</li><li>第4步：Client提交jar包、切片信息和配置文件到指定的资源提交路径。</li><li>第5步：Client提交完资源后，向RM申请运行<code>MrAppMaster</code>。</li></ul><h5 id="（2）作业初始化"><a href="#（2）作业初始化" class="headerlink" title="（2）作业初始化"></a>（2）作业初始化</h5><ul><li>第6步：当RM收到Client的请求后，将该job添加到容量调度器中。</li><li>第7步：某一个空闲的NM领取到该Job。</li><li>第8步：该NM创建<code>Container</code>，并产生<code>MRAppmaster</code>。</li><li>第9步：下载Client提交的资源到本地。</li></ul><h5 id="（3）任务分配"><a href="#（3）任务分配" class="headerlink" title="（3）任务分配"></a>（3）任务分配</h5><ul><li>第10步：<code>MrAppMaster</code>向RM申请运行多个MapTask任务资源。</li><li>第11步：RM将运行<code>MapTask</code>任务分配给另外两个<code>NodeManager</code>，另两个<code>NodeManager</code>分别领取任务并创建容器。</li></ul><h5 id="（4）任务运行"><a href="#（4）任务运行" class="headerlink" title="（4）任务运行"></a>（4）任务运行</h5><ul><li>第12步：MR向两个接收到任务的<code>NodeManager</code>发送程序启动脚本，这两个<code>NodeManager</code>分别启动<code>MapTask</code>，<code>MapTask</code>对数据分区排序。</li><li>第13步：<code>MrAppMaster</code>等待所有<code>MapTask</code>运行完毕后，向RM申请容器，运行<code>ReduceTask</code>。</li><li>第14步：<code>ReduceTask</code>向<code>MapTask</code>获取相应分区的数据。</li><li>第15步：程序运行完毕后，MR会向RM申请注销自己。</li></ul><h5 id="（5）进度和状态更新"><a href="#（5）进度和状态更新" class="headerlink" title="（5）进度和状态更新"></a>（5）进度和状态更新</h5><p>YARN中的任务将其进度和状态(包括counter)返回给应用管理器, 客户端每秒(通过<code>mapreduce.client.progressmonitor.pollinterval</code>设置)向应用管理器请求进度更新, 展示给用户。</p><h5 id="（6）作业完成"><a href="#（6）作业完成" class="headerlink" title="（6）作业完成"></a>（6）作业完成</h5><p>除了向应用管理器请求作业进度外, 客户端每5秒都会通过调用<code>waitForCompletion()</code>来检查作业是否完成。时间间隔可以通过<code>mapreduce.client.completion.pollinterva</code>l来设置。作业完成之后, 应用管理器和Container会清理工作状态。作业的信息会被作业历史服务器存储以备之后用户核查。</p><h4 id="2）作业提交过程之MapReduce"><a href="#2）作业提交过程之MapReduce" class="headerlink" title="2）作业提交过程之MapReduce"></a>2）作业提交过程之MapReduce</h4><p><img src="https://file.buildworld.cn/img/20200603145736.png"></p><h3 id="4、资源调度器"><a href="#4、资源调度器" class="headerlink" title="4、资源调度器"></a>4、资源调度器</h3><p><strong>Hadoop作业调度器主要有三种：<code>FIFO</code>、<code>Capacity Scheduler</code>和<code>Fair Scheduler</code>。</strong></p><h4 id="1）先进先出调度器（FIFO）"><a href="#1）先进先出调度器（FIFO）" class="headerlink" title="1）先进先出调度器（FIFO）"></a>1）先进先出调度器（FIFO）</h4><p><img src="https://file.buildworld.cn/img/20200603152207.png"></p><h4 id="2）容量调度器（Capacity-Scheduler）"><a href="#2）容量调度器（Capacity-Scheduler）" class="headerlink" title="2）容量调度器（Capacity Scheduler）"></a>2）容量调度器（Capacity Scheduler）</h4><p><img src="https://file.buildworld.cn/img/20200603153023.png"></p><ul><li>1、支持多个队列，每个队列可配置一定的资源量，每个队列采用FIFO调度策略。</li><li>2、为了防止同一个用户的作业独占队列中的资源，该调度器会对同一用户提交的作业所占资源量进行限定。</li><li>3、首先，计算每个队列中正在运行的任务数与其应该分得的计算资源之间的比值，选择一个该比值最小的队列——最闲的。</li><li>4、其次，按照作业优先级和提交时间顺序，同时考虑用户资源量限制和内存限制对队列内任务排序。</li><li>5、三个队列同时按照任务的先后顺序依次执行，比如，job11、job21和job31分别排在队列最前面，先运行，也是并行运行。</li></ul><h4 id="3）公平调度器（Fair-Scheduler）"><a href="#3）公平调度器（Fair-Scheduler）" class="headerlink" title="3）公平调度器（Fair Scheduler）"></a>3）公平调度器（Fair Scheduler）</h4><p><img src="https://file.buildworld.cn/img/20200603154212.png"></p><p><strong>支持多队列多用户，每个队列中的资源量可以配置，同一队列中的作业公平共享队列中所有资源。</strong></p><p><strong>在同一个队列中，job的资源缺额越大，越先获得资源优先执行。作业是按照缺额的高低来先后执行的，而且可以看到上图有多个作业同时运行。</strong></p>]]></content>
      
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> Yarn </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BigData--Hadoop数据压缩</title>
      <link href="/2020/06/03/BigData-Hadoop%E6%95%B0%E6%8D%AE%E5%8E%8B%E7%BC%A9/"/>
      <url>/2020/06/03/BigData-Hadoop%E6%95%B0%E6%8D%AE%E5%8E%8B%E7%BC%A9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Hadoop数据压缩"><a href="#Hadoop数据压缩" class="headerlink" title="Hadoop数据压缩"></a>Hadoop数据压缩</h2><h3 id="1、MR支持的压缩编码"><a href="#1、MR支持的压缩编码" class="headerlink" title="1、MR支持的压缩编码"></a>1、MR支持的压缩编码</h3><table><thead><tr><th>压缩格式</th><th>hadoop自带？</th><th>算法</th><th>文件扩展名</th><th>是否可切分</th><th>换成压缩格式后，原来的程序是否需要修改</th></tr></thead><tbody><tr><td>DEFLATE</td><td>是，直接使用</td><td>DEFLATE</td><td>.deflate</td><td>否</td><td>和文本处理一样，不需要修改</td></tr><tr><td>Gzip</td><td>是，直接使用</td><td>DEFLATE</td><td>.gz</td><td>否</td><td>和文本处理一样，不需要修改</td></tr><tr><td>bzip2</td><td>是，直接使用</td><td>bzip2</td><td>.bz2</td><td>是</td><td>和文本处理一样，不需要修改</td></tr><tr><td>LZO</td><td>否，需要安装</td><td>LZO</td><td>.lzo</td><td>是</td><td>需要建索引，还需要指定输入格式</td></tr><tr><td>Snappy</td><td>否，需要安装</td><td>Snappy</td><td>.snappy</td><td>否</td><td>和文本处理一样，不需要修改</td></tr></tbody></table><p><strong>Hadoop引入的编码/解码器</strong></p><table><thead><tr><th>压缩格式</th><th>对应的编码/解码器</th></tr></thead><tbody><tr><td>DEFLATE</td><td>org.apache.hadoop.io.compress.DefaultCodec</td></tr><tr><td>gzip</td><td>org.apache.hadoop.io.compress.GzipCodec</td></tr><tr><td>bzip2</td><td>org.apache.hadoop.io.compress.BZip2Codec</td></tr><tr><td>LZO</td><td>com.hadoop.compression.lzo.LzopCodec</td></tr><tr><td>Snappy</td><td>org.apache.hadoop.io.compress.SnappyCodec</td></tr></tbody></table><p><strong>压缩性能的比较</strong></p><table><thead><tr><th>压缩算法</th><th>原始文件大小</th><th>压缩文件大小</th><th>压缩速度</th><th>解压速度</th></tr></thead><tbody><tr><td>gzip</td><td>8.3GB</td><td>1.8GB</td><td>17.5MB/s</td><td>58MB/s</td></tr><tr><td>bzip2</td><td>8.3GB</td><td>1.1GB</td><td>2.4MB/s</td><td>9.5MB/s</td></tr><tr><td>LZO</td><td>8.3GB</td><td>2.9GB</td><td>49.3MB/s</td><td>74.6MB/s</td></tr></tbody></table><h3 id="2、数据压缩位置"><a href="#2、数据压缩位置" class="headerlink" title="2、数据压缩位置"></a>2、数据压缩位置</h3><p><img src="https://file.buildworld.cn/img/20200603100027.png"></p><h3 id="3、压缩参数配置"><a href="#3、压缩参数配置" class="headerlink" title="3、压缩参数配置"></a>3、压缩参数配置</h3><table><thead><tr><th>参数</th><th>默认值</th><th>阶段</th><th>建议</th></tr></thead><tbody><tr><td>io.compression.codecs  （在core-site.xml中配置）</td><td>org.apache.hadoop.io.compress.DefaultCodec, org.apache.hadoop.io.compress.GzipCodec, org.apache.hadoop.io.compress.BZip2Codec</td><td>输入压缩</td><td>Hadoop使用文件扩展名判断是否支持某种编解码器</td></tr><tr><td>mapreduce.map.output.compress（在mapred-site.xml中配置）</td><td>false</td><td>mapper输出</td><td>这个参数设为true启用压缩</td></tr><tr><td>mapreduce.map.output.compress.codec（在mapred-site.xml中配置）</td><td>org.apache.hadoop.io.compress.DefaultCodec</td><td>mapper输出</td><td>企业多使用LZO或Snappy编解码器在此阶段压缩数据</td></tr><tr><td>mapreduce.output.fileoutputformat.compress（在mapred-site.xml中配置）</td><td>false</td><td>reducer输出</td><td>这个参数设为true启用压缩</td></tr><tr><td>mapreduce.output.fileoutputformat.compress.codec（在mapred-site.xml中配置）</td><td>org.apache.hadoop.io.compress. DefaultCodec</td><td>reducer输出</td><td>使用标准工具或者编解码器，如gzip和bzip2</td></tr><tr><td>mapreduce.output.fileoutputformat.compress.type（在mapred-site.xml中配置）</td><td>RECORD</td><td>reducer输出</td><td>SequenceFile输出使用的压缩类型：NONE和BLOCK</td></tr></tbody></table><h3 id="4、压缩实操"><a href="#4、压缩实操" class="headerlink" title="4、压缩实操"></a>4、压缩实操</h3><h4 id="1）数据流的压缩和解压缩"><a href="#1）数据流的压缩和解压缩" class="headerlink" title="1）数据流的压缩和解压缩"></a>1）数据流的压缩和解压缩</h4><p><strong><code>CompressionCodec</code>有两个方法可以用于轻松地压缩或解压缩数据。</strong></p><p>要想对正在被写入一个输出流的数据进行压缩，我们可以使用<code>createOutputStream(OutputStreamout)</code>方法创建一个<code>CompressionOutputStream</code>，将其以压缩格式写入底层的流。</p><p>相反，要想对从输入流读取而来的数据进行解压缩，则调用<code>createInputStream(InputStreamin)</code>函数，从而获得一个<code>CompressionInputStream</code>，从而从底层的流读取未压缩的数据。</p><h4 id="2）Map输出端采用压缩"><a href="#2）Map输出端采用压缩" class="headerlink" title="2）Map输出端采用压缩"></a>2）Map输出端采用压缩</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.mapreduce.compress;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.compress.BZip2Codec;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.compress.CompressionCodec;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.compress.GzipCodec;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCountDriver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启map端输出压缩</span></span><br><span class="line">configuration.setBoolean(<span class="string">&quot;mapreduce.map.output.compress&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 设置map端输出压缩方式</span></span><br><span class="line">configuration.setClass(<span class="string">&quot;mapreduce.map.output.compress.codec&quot;</span>, BZip2Codec.class, CompressionCodec.class);</span><br><span class="line"></span><br><span class="line">Job job = Job.getInstance(configuration);</span><br><span class="line"></span><br><span class="line">job.setJarByClass(WordCountDriver.class);</span><br><span class="line"></span><br><span class="line">job.setMapperClass(WordCountMapper.class);</span><br><span class="line">job.setReducerClass(WordCountReducer.class);</span><br><span class="line"></span><br><span class="line">job.setMapOutputKeyClass(Text.class);</span><br><span class="line">job.setMapOutputValueClass(IntWritable.class);</span><br><span class="line"></span><br><span class="line">job.setOutputKeyClass(Text.class);</span><br><span class="line">job.setOutputValueClass(IntWritable.class);</span><br><span class="line"></span><br><span class="line">FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">System.exit(result ? <span class="number">1</span> : <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3）Reduce输出端采用压缩"><a href="#3）Reduce输出端采用压缩" class="headerlink" title="3）Reduce输出端采用压缩"></a>3）Reduce输出端采用压缩</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.mapreduce.compress;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.compress.BZip2Codec;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.compress.DefaultCodec;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.compress.GzipCodec;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.compress.Lz4Codec;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.compress.SnappyCodec;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCountDriver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">Configuration configuration = <span class="keyword">new</span> Configuration();</span><br><span class="line"></span><br><span class="line">Job job = Job.getInstance(configuration);</span><br><span class="line"></span><br><span class="line">job.setJarByClass(WordCountDriver.class);</span><br><span class="line"></span><br><span class="line">job.setMapperClass(WordCountMapper.class);</span><br><span class="line">job.setReducerClass(WordCountReducer.class);</span><br><span class="line"></span><br><span class="line">job.setMapOutputKeyClass(Text.class);</span><br><span class="line">job.setMapOutputValueClass(IntWritable.class);</span><br><span class="line"></span><br><span class="line">job.setOutputKeyClass(Text.class);</span><br><span class="line">job.setOutputValueClass(IntWritable.class);</span><br><span class="line"></span><br><span class="line">FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置reduce端输出压缩开启</span></span><br><span class="line">FileOutputFormat.setCompressOutput(job, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置压缩的方式</span></span><br><span class="line">    FileOutputFormat.setOutputCompressorClass(job, BZip2Codec.class); </span><br><span class="line"><span class="comment">//    FileOutputFormat.setOutputCompressorClass(job, GzipCodec.class); </span></span><br><span class="line"><span class="comment">//    FileOutputFormat.setOutputCompressorClass(job, DefaultCodec.class); </span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">boolean</span> result = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">System.exit(result?<span class="number">1</span>:<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BigData--MapReduce进阶(二)之工作机制</title>
      <link href="/2020/06/01/BigData-MapReduce%E8%BF%9B%E9%98%B6-%E4%BA%8C-%E4%B9%8B%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/"/>
      <url>/2020/06/01/BigData-MapReduce%E8%BF%9B%E9%98%B6-%E4%BA%8C-%E4%B9%8B%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="MapReduce进阶"><a href="#MapReduce进阶" class="headerlink" title="MapReduce进阶"></a>MapReduce进阶</h2><h3 id="一、MapReduce工作流程"><a href="#一、MapReduce工作流程" class="headerlink" title="一、MapReduce工作流程"></a>一、MapReduce工作流程</h3><h4 id="1、工作流程（1）"><a href="#1、工作流程（1）" class="headerlink" title="1、工作流程（1）"></a>1、工作流程（1）</h4><p><img src="https://file.buildworld.cn/img/20200527100132.png"></p><h4 id="2、工作流程（2）"><a href="#2、工作流程（2）" class="headerlink" title="2、工作流程（2）"></a>2、工作流程（2）</h4><p><img src="https://file.buildworld.cn/img/20200527100328.png"></p><p><strong>shuffle是从第七步开始的到第十六步结束的，下面是shuffle过程详解</strong></p><ul><li>1）MapTask收集我们的map()方法输出的kv对，放到内存缓冲区中</li><li>2）从内存缓冲区不断溢出本地磁盘文件，可能会溢出多个文件</li><li>3）多个溢出文件会被合并成大的溢出文件</li><li>4）在溢出过程及合并的过程中，都要调用Partitioner进行分区和针对key进行排序</li><li>5）ReduceTask根据自己的分区号，去各个MapTask机器上取相应的结果分区数据</li><li>6）ReduceTask会取到同一个分区的来自不同MapTask的结果文件，ReduceTask会将这些文件再进行合并（归并排序）</li><li>7）合并成大文件后，Shuffle的过程也就结束了，后面进入ReduceTask的逻辑运算过程（从文件中取出一个一个的键值对Group，调用用户自定义的reduce()方法）</li></ul><h3 id="二、Shuffle机制"><a href="#二、Shuffle机制" class="headerlink" title="二、Shuffle机制"></a>二、Shuffle机制</h3><p><strong>Map方法之后，Reduce方法之前的数据处理过程称之为Shuffle。</strong></p><h4 id="1、Shuffle机制流程图"><a href="#1、Shuffle机制流程图" class="headerlink" title="1、Shuffle机制流程图"></a>1、Shuffle机制流程图</h4><p><img src="https://file.buildworld.cn/img/20200527140654.png"></p><h4 id="2、Partition分区"><a href="#2、Partition分区" class="headerlink" title="2、Partition分区"></a>2、Partition分区</h4><h5 id="1）自定义Partitioner步骤"><a href="#1）自定义Partitioner步骤" class="headerlink" title="1）自定义Partitioner步骤"></a>1）自定义Partitioner步骤</h5><ul><li>（1）自定义类继承<code>Partitioner</code>，重写<code>getPartition()</code>方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.buildworld.mapreduce.partition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.buildworld.mapreduce.flow.FlowBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Partitioner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MiChong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-05-27 14:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPartitioner</span> <span class="keyword">extends</span> <span class="title">Partitioner</span>&lt;<span class="title">Text</span>, <span class="title">FlowBean</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPartition</span><span class="params">(Text text, FlowBean flowBean, <span class="keyword">int</span> numPartitions)</span> </span>&#123;</span><br><span class="line">        String phone = text.toString();</span><br><span class="line">        <span class="keyword">switch</span> (phone.substring(<span class="number">0</span>, <span class="number">3</span>)) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;136&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;137&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;138&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;139&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>（2）在Job驱动中，设置自定义<code>Partitioner</code> </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">job.setPartitionerClass(MyPartitioner.class);</span><br></pre></td></tr></table></figure><ul><li>（3）自定义<code>Partition</code>后，要根据自定义<code>Partitioner</code>的逻辑设置相应数量的<code>ReduceTask</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">job.setNumReduceTasks(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><h5 id="2）分区总结"><a href="#2）分区总结" class="headerlink" title="2）分区总结"></a>2）分区总结</h5><ul><li>（1）如果<code>ReduceTask</code>的数量&gt; <code>getPartition</code>的结果数，则会多产生几个空的输出文件part-r-000xx；</li><li>（2）如果1&lt;<code>ReduceTask</code>的数量&lt;<code>getPartition</code>的结果数，则有一部分分区数据无处安放，会Exception；</li><li>（3）如果<code>ReduceTask</code>的数量=1，则不管MapTask端输出多少个分区文件，最终结果都交给这一个<code>ReduceTask</code>，最终也就只会产生一个结果文件 part-r-00000；</li><li>（4）分区号必须从零开始，逐一累加。</li></ul><h4 id="3、WritableComparable排序"><a href="#3、WritableComparable排序" class="headerlink" title="3、WritableComparable排序"></a>3、WritableComparable排序</h4><p><strong>Bean对象实现<code>WritableComparable</code>几口，重写<code>compareTo（）</code>方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.buildworld.mapreduce.writablecomparable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.WritableComparable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.DataInput;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutput;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MiChong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-05-24 18:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 必须实现Writable接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowBean</span> <span class="keyword">implements</span> <span class="title">WritableComparable</span>&lt;<span class="title">FlowBean</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> upFlow;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> downFlow;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sumFlow;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此处实现自定义排序</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(FlowBean o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Long.compare(o.sumFlow, <span class="keyword">this</span>.sumFlow);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、Combiner合并"><a href="#4、Combiner合并" class="headerlink" title="4、Combiner合并"></a>4、Combiner合并</h4><ul><li><p>（1）Combiner是MR程序中Mapper和Reducer之外的一种组件。</p></li><li><p>（2）Combiner组件的父类就是Reducer。</p></li><li><p>（3）Combiner和Reducer的区别在于运行的位置</p><p><strong>Combiner是在每一个MapTask所在的节点运行;</strong></p><p><strong>Reducer是接收全局所有Mapper的输出结果；</strong></p></li><li><p>（4）Combiner的意义就是对每一个MapTask的输出进行局部汇总，以减小网络传输量。</p></li><li><p>（5）Combiner能够应用的前提是不能影响最终的业务逻辑，而且，Combiner的输出kv应该跟Reducer的输入kv类型要对应起来。</p></li></ul><h5 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h5><p><strong>自定义一个Combiner继承Reducer，重写Reduce方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordcountCombiner</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>,<span class="title">IntWritable</span>&gt;</span>&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values,Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 1 汇总操作</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(IntWritable v :values)&#123;</span><br><span class="line">count += v.get();</span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">// 2 写出</span></span><br><span class="line">context.write(key, <span class="keyword">new</span> IntWritable(count));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在Job驱动类中设置</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">job.setCombinerClass(WordcountCombiner.class);</span><br></pre></td></tr></table></figure><h4 id="5、GroupingComparator分组"><a href="#5、GroupingComparator分组" class="headerlink" title="5、GroupingComparator分组"></a>5、GroupingComparator分组</h4><ul><li>（1）自定义类继承<code>WritableComparator</code></li><li>（2）重写<code>compare()</code>方法</li><li>（3）创建一个构造将比较对象的类传给父类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.buildworld.mapreduce.groupCompa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.WritableComparable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.WritableComparator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MiChong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-05-30 13:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderComparator</span> <span class="keyword">extends</span> <span class="title">WritableComparator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">OrderComparator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(OrderBean.class, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(WritableComparable a, WritableComparable b)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        OrderBean oa = (OrderBean) a;</span><br><span class="line">        OrderBean ob = (OrderBean) b;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> oa.getOrderId().compareTo(ob.getOrderId());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、MapTask工作机制"><a href="#三、MapTask工作机制" class="headerlink" title="三、MapTask工作机制"></a>三、MapTask工作机制</h3><p><img src="https://file.buildworld.cn/img/20200530195503.png"></p><ul><li>（1）<strong>Read阶段</strong>：MapTask通过用户编写的RecordReader，从输入InputSplit中解析出一个个key/value。</li><li>（2）<strong>Map阶段</strong>：该节点主要是将解析出的key/value交给用户编写map()函数处理，并产生一系列新的key/value。</li><li>（3）<strong>Collect收集阶段</strong>：在用户编写map()函数中，当数据处理完成后，一般会调用OutputCollector.collect()输出结果。在该函数内部，它会将生成的key/value分区（调用Partitioner），并写入一个环形内存缓冲区中。</li><li>（4）<strong>Spill阶段</strong>：即“溢写”，当环形缓冲区满后，MapReduce会将数据写到本地磁盘上，生成一个临时文件。需要注意的是，将数据写入本地磁盘之前，先要对数据进行一次本地排序，并在必要时对数据进行合并、压缩等操作。</li></ul><p><strong>溢写阶段详情：</strong></p><p>​    步骤1：利用快速排序算法对缓存区内的数据进行排序，排序方式是，先按照分区编号Partition进行排序，然后按照key进行排序。这样，经过排序后，数据以分区为单位聚集在一起，且同一分区内所有数据按照key有序。</p><p>​    步骤2：按照分区编号由小到大依次将每个分区中的数据写入任务工作目录下的临时文件output/spillN.out（N表示当前溢写次数）中。如果用户设置了Combiner，则写入文件之前，对每个分区中的数据进行一次聚集操作。</p><p>​    步骤3：将分区数据的元信息写到内存索引数据结构SpillRecord中，其中每个分区的元信息包括在临时文件中的偏移量、压缩前数据大小和压缩后数据大小。如果当前内存索引大小超过1MB，则将内存索引写到文件output/spillN.out.index中。  </p><ul><li>（<strong>5）Combine阶段：</strong>当所有数据处理完成后，MapTask对所有临时文件进行一次合并，以确保最终只会生成一个数据文件。</li></ul><p>​    当所有数据处理完后，MapTask会将所有临时文件合并成一个大文件，并保存到文件output/file.out中，同时生成相应的索引文件output/file.out.index。</p><p>​    在进行文件合并过程中，MapTask以分区为单位进行合并。对于某个分区，它将采用多轮递归合并的方式。每轮合并io.sort.factor（默认10）个文件，并将产生的文件重新加入待合并列表中，对文件排序后，重复以上过程，直到最终得到一个大文件。</p><p>​    让每个MapTask最终只生成一个数据文件，可避免同时打开大量文件和同时读取大量小文件产生的随机读取带来的开销。</p><h3 id="四、ReduceTask工作机制"><a href="#四、ReduceTask工作机制" class="headerlink" title="四、ReduceTask工作机制"></a>四、ReduceTask工作机制</h3><h4 id="1、工作机制"><a href="#1、工作机制" class="headerlink" title="1、工作机制"></a>1、工作机制</h4><p><img src="https://file.buildworld.cn/img/20200530204504.png"></p><ul><li>（1）<strong>Copy阶段</strong>：ReduceTask从各个MapTask上远程拷贝一片数据，并针对某一片数据，如果其大小超过一定阈值，则写到磁盘上，否则直接放到内存中。</li><li>（2）<strong>Merge阶段：</strong>在远程拷贝数据的同时，ReduceTask启动了两个后台线程对内存和磁盘上的文件进行合并，以防止内存使用过多或磁盘上文件过多。</li><li>（3）<strong>Sort阶段：</strong>按照MapReduce语义，用户编写reduce()函数输入数据是按key进行聚集的一组数据。为了将key相同的数据聚在一起，Hadoop采用了基于排序的策略。由于各个MapTask已经实现对自己的处理结果进行了局部排序，因此，ReduceTask只需对所有数据进行一次归并排序即可。</li><li>（4）<strong>Reduce阶段：</strong>reduce()函数将计算结果写到HDFS上。</li></ul><h4 id="2、设置ReduceTask并行度（个数）"><a href="#2、设置ReduceTask并行度（个数）" class="headerlink" title="2、设置ReduceTask并行度（个数）"></a>2、设置ReduceTask并行度（个数）</h4><blockquote><p>educeTask的并行度同样影响整个Job的执行并发度和执行效率，但与MapTask的并发数由切片数决定不同，ReduceTask数量的决定是可以直接手动设置：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认值是1，手动设置为4</span></span><br><span class="line">job.setNumReduceTasks(<span class="number">4</span>);</span><br></pre></td></tr></table></figure><h3 id="五、OutputFormat数据输出"><a href="#五、OutputFormat数据输出" class="headerlink" title="五、OutputFormat数据输出"></a>五、OutputFormat数据输出</h3><h4 id="1、OutputFormat接口实现类"><a href="#1、OutputFormat接口实现类" class="headerlink" title="1、OutputFormat接口实现类"></a>1、OutputFormat接口实现类</h4><ul><li>文本输出<code>TextOutputFormat</code></li></ul><p> 默认的输出格式是TextOutputFormat，它把每条记录写为文本行。它的键和值可以是任意类型，因为TextOutputFormat调用toString()方法把它们转换为字符串。</p><ul><li><code>SequenceFileOutputFormat</code></li></ul><p> 将SequenceFileOutputFormat输出作为后续 MapReduce任务的输入，这便是一种好的输出格式，因为它的格式紧凑，很容易被压缩。</p><ul><li>自定义<code>OutputFormat</code></li></ul><p>根据用户需求，自定义实现输出。</p><h4 id="2、自定义OutputFormat使用场景及步骤"><a href="#2、自定义OutputFormat使用场景及步骤" class="headerlink" title="2、自定义OutputFormat使用场景及步骤"></a>2、自定义OutputFormat使用场景及步骤</h4><ul><li><p>（1）自定义一个类继承FileOutputFormat。</p></li><li><p>（2）改写RecordWriter，具体改写输出数据的方法write()。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.buildworld.mapreduce.outputformat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FSDataOutputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IOUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.RecordWriter;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.TaskAttemptContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MiChong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-05-31 16:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRecordWriter</span> <span class="keyword">extends</span> <span class="title">RecordWriter</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FSDataOutputStream atguigu;</span><br><span class="line">    <span class="keyword">private</span> FSDataOutputStream other;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(TaskAttemptContext job)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String dir = job.getConfiguration().get(FileOutputFormat.OUTDIR);</span><br><span class="line">        FileSystem fileSystem = FileSystem.get(job.getConfiguration());</span><br><span class="line">        atguigu = fileSystem.create(<span class="keyword">new</span> Path(dir+<span class="string">&quot;/my.log&quot;</span>));</span><br><span class="line">        other = fileSystem.create(<span class="keyword">new</span> Path(dir+<span class="string">&quot;/others.log&quot;</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将KV写出，每对KV调用一次</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(LongWritable key, Text value)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        String out = value.toString() + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (out.contains(<span class="string">&quot;atguigu&quot;</span>)) &#123;</span><br><span class="line">            atguigu.write(out.getBytes());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            other.write(out.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">(TaskAttemptContext context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        IOUtils.closeStream(atguigu);</span><br><span class="line">        IOUtils.closeStream(other);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="六、Join应用"><a href="#六、Join应用" class="headerlink" title="六、Join应用"></a>六、Join应用</h3><h4 id="1、Reduce-Join"><a href="#1、Reduce-Join" class="headerlink" title="1、Reduce Join"></a>1、Reduce Join</h4><p><img src="https://file.buildworld.cn/img/20200601111718.png"></p><h4 id="2、Map-Join"><a href="#2、Map-Join" class="headerlink" title="2、Map Join"></a>2、Map Join</h4><ul><li>1．使用场景</li></ul><p><strong>Map Join适用于一张表十分小、一张表很大的场景。</strong></p><ul><li>2．优点</li></ul><p>思考：在Reduce端处理过多的表，非常容易产生数据倾斜。怎么办？</p><blockquote><p>在Map端缓存多张表，提前处理业务逻辑，这样增加Map端业务，减少Reduce端数据的压力，尽可能的减少数据倾斜。</p></blockquote><ul><li>3．具体办法：采用DistributedCache</li></ul><p>​    <strong>（1）在Mapper的setup阶段，将文件读取到缓存集合中。</strong></p><p>​    <strong>（2）在驱动函数中加载缓存。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.net.URI;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓存普通文件到Task运行节点。</span></span><br><span class="line">job.addCacheFile(<span class="keyword">new</span> URI(<span class="string">&quot;file:///e:/cache/pd.txt&quot;</span>));</span><br></pre></td></tr></table></figure><h3 id="七、MapReduce开发总结"><a href="#七、MapReduce开发总结" class="headerlink" title="七、MapReduce开发总结"></a>七、MapReduce开发总结</h3><h4 id="1．输入数据接口：InputFormat"><a href="#1．输入数据接口：InputFormat" class="headerlink" title="1．输入数据接口：InputFormat"></a>1．输入数据接口：InputFormat</h4><ul><li>（1）默认使用的实现类是：<code>TextInputFormat</code> </li><li>（2）<code>TextInputFormat</code>的功能逻辑是：一次读一行文本，然后将该行的起始偏移量作为key，行内容作为value返回。</li><li>（3）<code>KeyValueTextInputFormat</code>每一行均为一条记录，被分隔符分割为key，value。默认分隔符是tab（\t）。</li><li>（4）<code>NlineInputFormat</code>按照指定的行数N来划分切片。</li><li>（5）<code>CombineTextInputFormat</code>可以把多个小文件合并成一个切片处理，提高处理效率。</li><li>（6）用户还可以自定义<code>InputFormat</code>。</li></ul><h4 id="2．逻辑处理接口：Mapper"><a href="#2．逻辑处理接口：Mapper" class="headerlink" title="2．逻辑处理接口：Mapper"></a>2．逻辑处理接口：Mapper</h4><p><strong>用户根据业务需求实现其中三个方法：map()   setup()   cleanup ()</strong> </p><h4 id="3．Partitioner分区"><a href="#3．Partitioner分区" class="headerlink" title="3．Partitioner分区"></a>3．Partitioner分区</h4><ul><li>（1）有默认实现 HashPartitioner，逻辑是根据key的哈希值和numReduces来返回一个分区号；key.hashCode()&amp;Integer.MAXVALUE % numReduces</li><li>（2）如果业务上有特别的需求，可以自定义分区。</li></ul><h4 id="4．Comparable排序"><a href="#4．Comparable排序" class="headerlink" title="4．Comparable排序"></a>4．Comparable排序</h4><ul><li>（1）当我们用自定义的对象作为key来输出时，就必须要实现WritableComparable接口，重写其中的compareTo()方法。</li><li>（2）部分排序：对最终输出的每一个文件进行内部排序。</li><li>（3）全排序：对所有数据进行排序，通常只有一个Reduce。</li><li>（4）二次排序：排序的条件有两个。</li></ul><h4 id="5．Combiner合并"><a href="#5．Combiner合并" class="headerlink" title="5．Combiner合并"></a>5．Combiner合并</h4><p><code>Combiner</code>合并可以提高程序执行效率，减少IO传输。但是使用时必须不能影响原有的业务处理结果。</p><h4 id="6．Reduce端分组：GroupingComparator"><a href="#6．Reduce端分组：GroupingComparator" class="headerlink" title="6．Reduce端分组：GroupingComparator"></a>6．Reduce端分组：GroupingComparator</h4><p>在<code>Reduce</code>端对key进行分组。应用于：在接收的key为bean对象时，想让一个或几个字段相同（全部字段比较不相同）的key进入到同一个reduce方法时，可以采用分组排序。</p><h4 id="7．逻辑处理接口：Reducer"><a href="#7．逻辑处理接口：Reducer" class="headerlink" title="7．逻辑处理接口：Reducer"></a>7．逻辑处理接口：Reducer</h4><p>用户根据业务需求实现其中三个方法：<code>reduce()   setup()   cleanup ()</code> </p><h4 id="8．输出数据接口：OutputFormat"><a href="#8．输出数据接口：OutputFormat" class="headerlink" title="8．输出数据接口：OutputFormat"></a>8．输出数据接口：OutputFormat</h4><ul><li>（1）默认实现类是TextOutputFormat，功能逻辑是：将每一个KV对，向目标文本文件输出一行。</li><li>（2）将SequenceFileOutputFormat输出作为后续 MapReduce任务的输入，这便是一种好的输出格式，因为它的格式紧凑，很容易被压缩。</li><li>（3）用户还可以自定义OutputFormat。</li></ul>]]></content>
      
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> MapReduce </tag>
            
            <tag> Shuffle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BigData--MapReduce进阶(一)之框架原理</title>
      <link href="/2020/05/26/BigData-MapReduce%E8%BF%9B%E9%98%B6-%E4%B8%80-%E4%B9%8B%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%90%86/"/>
      <url>/2020/05/26/BigData-MapReduce%E8%BF%9B%E9%98%B6-%E4%B8%80-%E4%B9%8B%E6%A1%86%E6%9E%B6%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="MapReduce进阶-一-–框架原理"><a href="#MapReduce进阶-一-–框架原理" class="headerlink" title="MapReduce进阶(一)–框架原理"></a>MapReduce进阶(一)–框架原理</h2><h4 id="1、InputFormat"><a href="#1、InputFormat" class="headerlink" title="1、InputFormat"></a>1、InputFormat</h4><p><strong>MapReduce数据流</strong><img src="https://file.buildworld.cn/img/20200525102001.png" alt="MapReduce数据流"></p><h4 id="2、MapTask并行度决定机制"><a href="#2、MapTask并行度决定机制" class="headerlink" title="2、MapTask并行度决定机制"></a>2、MapTask并行度决定机制</h4><p><strong>数据块：</strong>Block是HDFS物理上把数据分成一块一块。</p><p><strong>数据切片：</strong>数据切片只是在逻辑上对输入进行分片，并不会在磁盘上将其切分成片进行存储。</p><ul><li>1）一个Job的Map阶段并行度由客户端在提交Job时的切片数决定</li><li>2）每一个Split切片分配一个MapTask并行实例处理</li><li>3）默认情况下，切片大小=BlockSize</li><li>4）切片时不考虑数据集整体，而是逐个针对每一个文件单独切片                              </li></ul><h4 id="3、Job提交流程源码解析"><a href="#3、Job提交流程源码解析" class="headerlink" title="3、Job提交流程源码解析"></a>3、Job提交流程源码解析</h4><p><img src="https://file.buildworld.cn/img/20200525144602.png"></p><h4 id="4、FileInputFormat切片源码解析-input-getSplits-job"><a href="#4、FileInputFormat切片源码解析-input-getSplits-job" class="headerlink" title="4、FileInputFormat切片源码解析(input.getSplits(job))"></a>4、FileInputFormat切片源码解析(input.getSplits(job))</h4><h5 id="1）源码解析"><a href="#1）源码解析" class="headerlink" title="1）源码解析"></a>1）源码解析</h5><p><img src="https://file.buildworld.cn/img/20200525145028.png">   </p><h5 id="2）切片机制"><a href="#2）切片机制" class="headerlink" title="2）切片机制"></a>2）切片机制</h5><ul><li>（1）简单地按照文件的内容长度进行切片</li><li>（2）切片大小，默认等于Block大小</li><li>（3）切片时不考虑数据集整体，而是逐个针对每一个文件单独切片</li></ul><h5 id="3）切片大小的参数配置"><a href="#3）切片大小的参数配置" class="headerlink" title="3）切片大小的参数配置"></a>3）切片大小的参数配置</h5><p><img src="https://file.buildworld.cn/img/20200525152428.png"></p><h4 id="5、小文件切片–CombineTextInputFormat切片机制"><a href="#5、小文件切片–CombineTextInputFormat切片机制" class="headerlink" title="5、小文件切片–CombineTextInputFormat切片机制"></a>5、小文件切片–CombineTextInputFormat切片机制</h4><p><strong>生成切片过程包括：虚拟存储过程和切片过程二部分。</strong></p><p><img src="https://file.buildworld.cn/img/20200525152901.png"></p><h5 id="（1）虚拟存储过程："><a href="#（1）虚拟存储过程：" class="headerlink" title="（1）虚拟存储过程："></a>（1）虚拟存储过程：</h5><blockquote><p>将输入目录下所有文件大小，依次和设置的<code>setMaxInputSplitSize</code>值比较，如果不大于设置的最大值，逻辑上划分一个块。如果输入文件大于设置的最大值且大于两倍，那么以最大值切割一块；当剩余数据大小超过设置的最大值且不大于最大值2倍，此时将文件均分成2个虚拟存储块（防止出现太小切片）。</p></blockquote><h5 id="（2）切片过程："><a href="#（2）切片过程：" class="headerlink" title="（2）切片过程："></a>（2）切片过程：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">（a）判断虚拟存储的文件大小是否大于setMaxInputSplitSize值，大于等于则单独形成一个切片。</span><br><span class="line"></span><br><span class="line">（b）如果不大于则跟下一个虚拟存储文件进行合并，共同形成一个切片。</span><br><span class="line"></span><br><span class="line">（c）测试举例：有4个小文件大小分别为1.7M、5.1M、3.4M以及6.8M这四个小文件，则虚拟存储之后形成6个文件块，大小分别为：1.7M，（2.55M、2.55M），3.4M以及（3.4M、3.4M）</span><br><span class="line">最终会形成3个切片，大小分别为：（1.7+2.55）M，（2.55+3.4）M，（3.4+3.4）M</span><br></pre></td></tr></table></figure><h4 id="6、自定义InputFormat"><a href="#6、自定义InputFormat" class="headerlink" title="6、自定义InputFormat"></a>6、自定义InputFormat</h4><p><img src="https://file.buildworld.cn/img/20200526173913.png"></p><h5 id="1-WholeFileInputFormat-继承FileInputFormat"><a href="#1-WholeFileInputFormat-继承FileInputFormat" class="headerlink" title="1) WholeFileInputFormat 继承FileInputFormat"></a>1) WholeFileInputFormat 继承FileInputFormat</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.buildworld.mapreduce.inputformat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.BytesWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.InputSplit;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.JobContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.RecordReader;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.TaskAttemptContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MiChong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-05-25 16:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WholeFileInputFormat</span> <span class="keyword">extends</span> <span class="title">FileInputFormat</span>&lt;<span class="title">Text</span>, <span class="title">BytesWritable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isSplitable</span><span class="params">(JobContext context, Path filename)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RecordReader&lt;Text, BytesWritable&gt; <span class="title">createRecordReader</span><span class="params">(InputSplit split, TaskAttemptContext context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> WholeFileRecordReader();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2）自定义RecordReader–WholeFileRecordReader"><a href="#2）自定义RecordReader–WholeFileRecordReader" class="headerlink" title="2）自定义RecordReader–WholeFileRecordReader"></a>2）自定义RecordReader–WholeFileRecordReader</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.buildworld.mapreduce.inputformat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FSDataInputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FSDataOutputStream;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.FileSystem;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.BytesWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IOUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapred.FileSplit;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.InputSplit;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.RecordReader;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.TaskAttemptContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MiChong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-05-25 16:15</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 自定义RecordReader，处理一个文件，把这个文件直接读成 一个KV值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WholeFileRecordReader</span> <span class="keyword">extends</span> <span class="title">RecordReader</span>&lt;<span class="title">Text</span>, <span class="title">BytesWritable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> notRead = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">private</span> Text key = <span class="keyword">new</span> Text();</span><br><span class="line">    <span class="keyword">private</span> BytesWritable value = <span class="keyword">new</span> BytesWritable();</span><br><span class="line">    <span class="keyword">private</span> FSDataInputStream inputStream;</span><br><span class="line">    <span class="keyword">private</span> Path path;</span><br><span class="line">    <span class="keyword">private</span> FileSplit fs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化方法，框架会在开始的时候调用一次</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> split</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> context</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(InputSplit split, TaskAttemptContext context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//转换切片类型到文件切片</span></span><br><span class="line">        fs = (FileSplit) split;</span><br><span class="line">        <span class="comment">//通过切片获取路径</span></span><br><span class="line">        path = fs.getPath();</span><br><span class="line">        <span class="comment">//通过路径获取文件系统</span></span><br><span class="line">        FileSystem fileSystem = path.getFileSystem(context.getConfiguration());</span><br><span class="line">        <span class="comment">//开流</span></span><br><span class="line">        inputStream = fileSystem.open(path);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 读取下一组KV值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 如果读到了，返回true，读完了，返回False</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">nextKeyValue</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (notRead) &#123;</span><br><span class="line">            <span class="comment">// 具体读文件的过程</span></span><br><span class="line">            <span class="comment">//读key</span></span><br><span class="line">            key.set(fs.getPath().toString());</span><br><span class="line"></span><br><span class="line">            <span class="comment">//读value</span></span><br><span class="line">            <span class="keyword">byte</span>[] buf = <span class="keyword">new</span> <span class="keyword">byte</span>[(<span class="keyword">int</span>) fs.getLength()];</span><br><span class="line">            inputStream.read(buf);</span><br><span class="line">            value.set(buf, <span class="number">0</span>, buf.length);</span><br><span class="line"></span><br><span class="line">            notRead = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取到当前的key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Text <span class="title">getCurrentKey</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前读到的Value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前Value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> BytesWritable <span class="title">getCurrentValue</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前数据读取的进度</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前进度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getProgress</span><span class="params">()</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> notRead ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭资源</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        IOUtils.closeStream(inputStream);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> MapReduce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BigData--MapReduce入门</title>
      <link href="/2020/05/24/BigData-MapReduce%E5%85%A5%E9%97%A8/"/>
      <url>/2020/05/24/BigData-MapReduce%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="MapReduce入门"><a href="#MapReduce入门" class="headerlink" title="MapReduce入门"></a>MapReduce入门</h2><h3 id="一、MapReduce概述"><a href="#一、MapReduce概述" class="headerlink" title="一、MapReduce概述"></a>一、MapReduce概述</h3><p><strong>MapReduce是一个分布式运算程序的编程框架，是用户开发“基于Hadoop的数据分析应用”的核心框架</strong>。</p><p><strong>MapReduce核心功能是将用户编写的业务逻辑代码和自带默认组件整合成一个完整的分布式运算程序，并发运行在一个Hadoop集群上。</strong></p><h4 id="1、优点"><a href="#1、优点" class="headerlink" title="1、优点"></a>1、优点</h4><ul><li>MapReduce易于编程</li><li>良好的扩展性</li><li>高容错性</li><li>适合海量数据的离线处理</li></ul><h4 id="2、缺点"><a href="#2、缺点" class="headerlink" title="2、缺点"></a>2、缺点</h4><ul><li>不擅长实时计算，无法像MySQL一样，在毫秒或者秒级内返回结果。</li><li>不擅长流式计算，MapReduce的输入数据是静态。</li><li>不擅长DAG(有向图)计算，如果每个MapReduce作业的输出结果都写入到磁盘，会造成大量的磁盘IO，导致性能非常的低下。</li></ul><h4 id="3、MapReduce核心编程思想"><a href="#3、MapReduce核心编程思想" class="headerlink" title="3、MapReduce核心编程思想"></a>3、MapReduce核心编程思想</h4><p><img src="https://file.buildworld.cn/img/20200524104738.png"></p><ul><li>1）分布式的运算程序往往需要分成至少2个阶段。</li><li>2）第一个阶段的<code>MapTask</code>并发实例，完全并行运行，互不相干。</li><li>3）第二个阶段的<code>ReduceTask</code>并发实例互不相干，但是他们的数据依赖于上一个阶段的所有<code>MapTask</code>并发实例的输出。</li><li>4）MapReduce编程模型只能包含一个Map阶段和一个Reduce阶段，如果用户的业务逻辑非常复杂，那就只能多个MapReduce程序，串行运行。</li></ul><h4 id="4、MapReduce进程"><a href="#4、MapReduce进程" class="headerlink" title="4、MapReduce进程"></a>4、MapReduce进程</h4><p><strong>一个完整的MapReduce程序在分布式运行时有三类实例进程：</strong></p><ul><li><p>1）<code>MrAppMaster</code>：负责整个程序的过程调度及状态协调。</p></li><li><p>2）<code>MapTask</code>：负责Map阶段的整个数据处理流程</p></li><li><p>3）<code>ReduceTask</code>：负责Reduce阶段的整个数据处理流程。</p></li></ul><h4 id="5、MapReduce编程规范"><a href="#5、MapReduce编程规范" class="headerlink" title="5、MapReduce编程规范"></a>5、MapReduce编程规范</h4><h5 id="1-Mapper阶段"><a href="#1-Mapper阶段" class="headerlink" title="1) Mapper阶段"></a>1) Mapper阶段</h5><p>  <img src="https://file.buildworld.cn/img/20200524111628.png"></p><h5 id="2）Reducer阶段"><a href="#2）Reducer阶段" class="headerlink" title="2）Reducer阶段"></a>2）Reducer阶段</h5><p><img src="https://file.buildworld.cn/img/20200524111651.png"></p><h5 id="3）Driver阶段"><a href="#3）Driver阶段" class="headerlink" title="3）Driver阶段"></a>3）Driver阶段</h5><p><strong>用于提交封装了MapReduce程序相关运行参数的job对象。</strong></p><h3 id="二、WordCount案例实操"><a href="#二、WordCount案例实操" class="headerlink" title="二、WordCount案例实操"></a>二、WordCount案例实操</h3><p><strong>主要实现的是对文件中单词出现频率的分析，统计出单词出现的次数，这也是官方的示例教程</strong></p><h4 id="1、WcMapper-，负责数据的切分"><a href="#1、WcMapper-，负责数据的切分" class="headerlink" title="1、WcMapper ，负责数据的切分"></a>1、WcMapper ，负责数据的切分</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.buildworld.mapreduce.wordcount;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.LongWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MiChong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-05-24 11:32</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WcMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">LongWritable</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Text word = <span class="keyword">new</span> Text();</span><br><span class="line">    <span class="keyword">private</span> IntWritable one = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(LongWritable key, Text value, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 拿到这行数据</span></span><br><span class="line">        String line = value.toString();</span><br><span class="line">        <span class="comment">//按照空格切分数据</span></span><br><span class="line">        String[] words = line.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="comment">//遍历数组</span></span><br><span class="line">        <span class="keyword">for</span> (String word : words) &#123;</span><br><span class="line">            <span class="keyword">this</span>.word.set(word);</span><br><span class="line">            context.write(<span class="keyword">this</span>.word, <span class="keyword">this</span>.one);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、WcReducer-负责数据的统计"><a href="#2、WcReducer-负责数据的统计" class="headerlink" title="2、WcReducer,负责数据的统计"></a>2、WcReducer,负责数据的统计</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.buildworld.mapreduce.wordcount;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MiChong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-05-24 11:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WcReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> IntWritable total = <span class="keyword">new</span> IntWritable();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Context context)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//累加</span></span><br><span class="line">        <span class="keyword">for</span> (IntWritable value : values) &#123;</span><br><span class="line">            sum += value.get();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//包装结果并输出</span></span><br><span class="line">        total.set(sum);</span><br><span class="line">        context.write(key, <span class="keyword">this</span>.total);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、WcDriver，代码相对固定，负责提交我们的Job"><a href="#3、WcDriver，代码相对固定，负责提交我们的Job" class="headerlink" title="3、WcDriver，代码相对固定，负责提交我们的Job"></a>3、WcDriver，代码相对固定，负责提交我们的Job</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.buildworld.mapreduce.wordcount;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.FileInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MiChong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-05-24 11:33</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WcDriver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// 1、获取一个job实例</span></span><br><span class="line">        Job job = Job.getInstance(<span class="keyword">new</span> Configuration());</span><br><span class="line">        <span class="comment">// 2、设置类路径</span></span><br><span class="line">        job.setJarByClass(WcDriver.class);</span><br><span class="line">        <span class="comment">// 3、设置Mapper和Reducer</span></span><br><span class="line">        job.setMapperClass(WcMapper.class);</span><br><span class="line">        job.setReducerClass(WcReducer.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、设置Mapper和Reducer输出类型</span></span><br><span class="line">        job.setMapOutputKeyClass(Text.class);</span><br><span class="line">        job.setMapOutputValueClass(IntWritable.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5 设置最终输出kv类型</span></span><br><span class="line">        job.setOutputKeyClass(Text.class);</span><br><span class="line">        job.setOutputValueClass(IntWritable.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//6、设置输入输出数据</span></span><br><span class="line">        FileInputFormat.setInputPaths(job, <span class="keyword">new</span> Path(args[<span class="number">0</span>]));</span><br><span class="line">        FileOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7、提交我们的job</span></span><br><span class="line">        <span class="keyword">boolean</span> b = job.waitForCompletion(<span class="keyword">true</span>);</span><br><span class="line">        System.exit(b ? <span class="number">0</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、Hadoop序列化"><a href="#三、Hadoop序列化" class="headerlink" title="三、Hadoop序列化"></a>三、Hadoop序列化</h3><p><strong>不可以使用Java自带的序列化，要使用自定义bean对象实现序列化接口（Writable）</strong></p><h4 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.buildworld.mapreduce.flow;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Writable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.DataInput;</span><br><span class="line"><span class="keyword">import</span> java.io.DataOutput;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> MiChong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020-05-24 18:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 必须实现Writable接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowBean</span> <span class="keyword">implements</span> <span class="title">Writable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> upFlow;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> downFlow;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sumFlow;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反序列化时，需要反射调用空参构造函数，所以必须有空参构造</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlowBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">long</span> upFlow, <span class="keyword">long</span> downFlow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.upFlow = upFlow;</span><br><span class="line">        <span class="keyword">this</span>.downFlow = downFlow;</span><br><span class="line">        <span class="keyword">this</span>.sumFlow = upFlow + downFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getUpFlow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> upFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUpFlow</span><span class="params">(<span class="keyword">long</span> upFlow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.upFlow = upFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDownFlow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> downFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDownFlow</span><span class="params">(<span class="keyword">long</span> downFlow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.downFlow = downFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getSumFlow</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sumFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSumFlow</span><span class="params">(<span class="keyword">long</span> sumFlow)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sumFlow = sumFlow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最后会按照下面的格式显示在输出文件中</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 要想把结果显示在文件中，需要重写toString()，可用”\t”分开，方便后续用。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;FlowBean&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;upFlow=&quot;</span> + upFlow +</span><br><span class="line">                <span class="string">&quot;, downFlow=&quot;</span> + downFlow +</span><br><span class="line">                <span class="string">&quot;, sumFlow=&quot;</span> + sumFlow +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写序列化方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     *注意反序列化的顺序和序列化的顺序完全一致</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> out 框架给我们提供的数据出口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(DataOutput out)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        out.writeLong(upFlow);</span><br><span class="line">        out.writeLong(downFlow);</span><br><span class="line">        out.writeLong(sumFlow);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写反序列化方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 注意反序列化的顺序和序列化的顺序完全一致</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> in 框架给我们提供的数据来源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFields</span><span class="params">(DataInput in)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        upFlow = in.readLong();</span><br><span class="line">        downFlow = in.readLong();</span><br><span class="line">        sumFlow = in.readLong();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> MapReduce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BigData--Hadoop2.x新特性之HA</title>
      <link href="/2020/05/23/BigData-Hadoop2-x%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8BHA/"/>
      <url>/2020/05/23/BigData-Hadoop2-x%E6%96%B0%E7%89%B9%E6%80%A7%E4%B9%8BHA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="HDFS-HA高可用"><a href="#HDFS-HA高可用" class="headerlink" title="HDFS HA高可用"></a>HDFS HA高可用</h2><blockquote><p>Hadoop2.X的两大新特性：YARN和HA</p></blockquote><h3 id="1、概述"><a href="#1、概述" class="headerlink" title="1、概述"></a>1、概述</h3><p><strong>HA即High Available,高可用的意思</strong></p><ul><li><p>NameNode主要在以下两个方面影响HDFS集群</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">NameNode机器发生意外，如宕机，集群将无法使用，直到管理员重启</span><br><span class="line"></span><br><span class="line">NameNode机器需要升级，包括软件、硬件升级，此时集群也将无法使用</span><br><span class="line"></span><br><span class="line">HDFS HA功能通过配置Active/Standby两个NameNodes实现在集群中对NameNode的热备来解决上述问题。如果出现故障，如机器崩溃或机器需要升级维护，这时可通过此种方式将NameNode很快的切换到另外一台机器。</span><br></pre></td></tr></table></figure></li></ul><h3 id="2、HDFS-HA工作机制"><a href="#2、HDFS-HA工作机制" class="headerlink" title="2、HDFS-HA工作机制"></a>2、HDFS-HA工作机制</h3><blockquote><p>通过双NameNode消除单点故障</p></blockquote><h3 id="3、HDFS-HA工作要点"><a href="#3、HDFS-HA工作要点" class="headerlink" title="3、HDFS-HA工作要点"></a>3、HDFS-HA工作要点</h3><ul><li>元数据管理方式需要改变</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">内存中各自保存一份元数据；</span><br><span class="line"></span><br><span class="line">Edits日志只有Active状态的NameNode节点可以做写操作；</span><br><span class="line"></span><br><span class="line">两个NameNode都可以读取Edits；</span><br><span class="line"></span><br><span class="line">共享的Edits放在一个共享存储中管理（qjournal和NFS两个主流实现）；</span><br></pre></td></tr></table></figure><ul><li>需要一个状态管理功能模块</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">实现了一个zkfailover，常驻在每一个namenode所在的节点，每一个zkfailover负责监控自己所在NameNode节点，利用zk进行状态标识，当需要进行状态切换时，由zkfailover来负责切换，切换时需要防止brain split现象的发生。</span><br></pre></td></tr></table></figure><ul><li><p>必须保证两个NameNode之间能够ssh无密码登录</p></li><li><p>隔离（Fence），即同一时刻仅仅有一个NameNode对外提供服务</p></li></ul><h3 id="4、HDFS-HA自动故障转移工作机制"><a href="#4、HDFS-HA自动故障转移工作机制" class="headerlink" title="4、HDFS-HA自动故障转移工作机制"></a>4、HDFS-HA自动故障转移工作机制</h3><h4 id="1）HA的自动故障转移依赖于ZooKeeper的以下功能："><a href="#1）HA的自动故障转移依赖于ZooKeeper的以下功能：" class="headerlink" title="1）HA的自动故障转移依赖于ZooKeeper的以下功能："></a>1）HA的自动故障转移依赖于ZooKeeper的以下功能：</h4><p><strong>故障检测</strong>：每个NameNode在ZooKeeper中维护了一个持久会话，如果机器崩溃，ZooKeeper中的会话将终止，ZooKeeper通知另一个NameNode需要触发故障转移。</p><p><strong>现役NameNode选择：</strong>ooKeeper提供了一个简单的机制用于唯一的选择一个节点为active状态。如果目前现役NameNode崩溃，另一个节点可能从ZooKeeper获得特殊的排外锁以表明它应该成为现役NameNode。</p><h4 id="2）ZKFC"><a href="#2）ZKFC" class="headerlink" title="2）ZKFC"></a>2）ZKFC</h4><blockquote><p>ZKFC是自动故障转移中的另一个新组件，是ZooKeeper的客户端，也监视和管理NameNode的状态。每个运行NameNode的主机也运行了一个ZKFC进程，ZKFC负责：</p></blockquote><p><strong>健康监测：</strong>ZKFC使用一个健康检查命令定期地ping与之在相同主机的NameNode，只要该NameNode及时地回复健康状态，ZKFC认为该节点是健康的。如果该节点崩溃，冻结或进入不健康状态，健康监测器标识该节点为非健康的。</p><p><strong>ZooKeeper会话管理：</strong>当本地NameNode是健康的，ZKFC保持一个在ZooKeeper中打开的会话。如果本地NameNode处于active状态，ZKFC也保持一个特殊的znode锁，该锁使用了ZooKeeper对短暂节点的支持，如果会话终止，锁节点将自动删除。</p><p><strong>基于ZooKeeper的选择：</strong>如果本地NameNode是健康的，且ZKFC发现没有其它的节点当前持有znode锁，它将为自己获取该锁。如果成功，则它已经赢得了选择，并负责运行故障转移进程以使它的本地NameNode为Active。故障转移进程与前面描述的手动故障转移相似，首先如果必要保护之前的现役NameNode，然后本地NameNode转换为Active状态。</p><h4 id="HDFS-HA故障转移机制流程图"><a href="#HDFS-HA故障转移机制流程图" class="headerlink" title="HDFS-HA故障转移机制流程图"></a>HDFS-HA故障转移机制流程图</h4><p><img src="https://file.buildworld.cn/img/20200523093038.png"></p><h3 id="5、YARN-HA工作机制"><a href="#5、YARN-HA工作机制" class="headerlink" title="5、YARN-HA工作机制"></a>5、YARN-HA工作机制</h3><p><img src="https://file.buildworld.cn/img/20200523162851.png"></p><h3 id="6、HDFS-Federation架构设计"><a href="#6、HDFS-Federation架构设计" class="headerlink" title="6、HDFS Federation架构设计"></a>6、HDFS Federation架构设计</h3><h4 id="1、NameNode架构局限性"><a href="#1、NameNode架构局限性" class="headerlink" title="1、NameNode架构局限性"></a>1、NameNode架构局限性</h4><ul><li>（1）Namespace（命名空间）的限制</li><li>（2）隔离问题</li><li>（3）性能的瓶颈</li></ul><h4 id="2、HDFS-Federation架构设计"><a href="#2、HDFS-Federation架构设计" class="headerlink" title="2、HDFS Federation架构设计"></a>2、HDFS Federation架构设计</h4><p><img src="https://file.buildworld.cn/img/20200523221153.png"></p><p><strong>不同应用可以使用不同NameNode进行数据管理,Hadoop生态系统中，不同的框架使用不同的NameNode进行管理NameSpace。（隔离性）</strong></p>]]></content>
      
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> HDFS </tag>
            
            <tag> YARN </tag>
            
            <tag> HA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BigData--Hadoop技术</title>
      <link href="/2020/05/22/BigData%E4%B9%8BHadoop%E6%8A%80%E6%9C%AF/"/>
      <url>/2020/05/22/BigData%E4%B9%8BHadoop%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一、Hadoop组成"><a href="#一、Hadoop组成" class="headerlink" title="一、Hadoop组成"></a>一、Hadoop组成</h2><p><img src="http://myfile.buildworld.cn/Hadoop%E7%BB%84%E6%88%90.png" alt="image"></p><h3 id="1、HDFS架构"><a href="#1、HDFS架构" class="headerlink" title="1、HDFS架构"></a>1、HDFS架构</h3><ul><li>1）NameNode（nn）：存储文件的元数据，如文件名，文件目录结构，文件属性（生成时间、副本数、文件权限），以及每个文件的块列表和块所在的DataNode等</li><li>2）DataNode(dn)：在本地文件系统存储文件块数据，以及块数据的校验和。</li><li>3）Secondary NameNode(2nn)：用来监控HDFS状态的辅助后台程序，每隔一段时间获取HDFS元数据的快照</li></ul><h3 id="2、YARN架构"><a href="#2、YARN架构" class="headerlink" title="2、YARN架构"></a>2、YARN架构</h3><p><img src="http://myfile.buildworld.cn/YARN%E6%9E%B6%E6%9E%84.png" alt="image"></p><h3 id="3、MapReduce架构"><a href="#3、MapReduce架构" class="headerlink" title="3、MapReduce架构"></a>3、MapReduce架构</h3><ul><li>1）Map阶段并行处理输入数据</li><li>2）Reduce阶段对Map结果进行汇总<br><img src="http://myfile.buildworld.cn/mapreduce.png" alt="image"></li></ul><h3 id="4、大数据技术生态体系"><a href="#4、大数据技术生态体系" class="headerlink" title="4、大数据技术生态体系"></a>4、大数据技术生态体系</h3><p><img src="https://file.buildworld.cn/img/20200522094812.png"></p><h2 id="二、HDFS-Hadoop-Distribution-File-System"><a href="#二、HDFS-Hadoop-Distribution-File-System" class="headerlink" title="二、HDFS(Hadoop Distribution File System)"></a>二、HDFS(Hadoop Distribution File System)</h2><h3 id="1、优点"><a href="#1、优点" class="headerlink" title="1、优点"></a>1、优点</h3><p><img src="http://myfile.buildworld.cn/hdfs%E4%BC%98%E7%82%B9.png" alt="image"></p><h3 id="2、缺点"><a href="#2、缺点" class="headerlink" title="2、缺点"></a>2、缺点</h3><p><img src="http://myfile.buildworld.cn/hdfs%E7%BC%BA%E7%82%B9.png" alt="image"></p><h3 id="3、组织架构"><a href="#3、组织架构" class="headerlink" title="3、组织架构"></a>3、组织架构</h3><p><img src="http://myfile.buildworld.cn/hdfs%E7%BB%84%E7%BB%87%E6%9E%B6%E6%9E%84.png" alt="image"><br><img src="http://myfile.buildworld.cn/hdfs%E7%BB%84%E7%BB%87%E6%9E%B6%E6%9E%842.png" alt="image"></p><h2 id="三、HDFS的数据流"><a href="#三、HDFS的数据流" class="headerlink" title="三、HDFS的数据流"></a>三、HDFS的数据流</h2><h3 id="1、HDFS写数据流程"><a href="#1、HDFS写数据流程" class="headerlink" title="1、HDFS写数据流程"></a>1、HDFS写数据流程</h3><p><img src="https://file.buildworld.cn/img/20200521213715.png"></p><ul><li>1）客户端通过Distributed FileSystem模块向NameNode请求上传文件，NameNode检查目标文件是否已存在，父目录是否存在。</li><li>2）NameNode返回是否可以上传。</li><li>3）客户端请求第一个 Block上传到哪几个DataNode服务器上。</li><li>4）NameNode返回3个DataNode节点，分别为dn1、dn2、dn3。</li><li>5）客户端通过FSDataOutputStream模块请求dn1上传数据，dn1收到请求会继续调用dn2，然后dn2调用dn3，将这个通信管道建立完成。</li><li>6）dn1、dn2、dn3逐级应答客户端。</li><li>7）客户端开始往dn1上传第一个Block（先从磁盘读取数据放到一个本地内存缓存），以Packet为单位，dn1收到一个Packet就会传给dn2，dn2传给dn3；dn1每传一个packet会放入一个应答队列等待应答。</li><li>8）当一个Block传输完成之后，客户端再次请求NameNode上传第二个Block的服务器。（重复执行3-7步）。</li></ul><h3 id="2、HDFS读数据流程"><a href="#2、HDFS读数据流程" class="headerlink" title="2、HDFS读数据流程"></a>2、HDFS读数据流程</h3><p><img src="https://file.buildworld.cn/img/20200521213817.png"></p><h3 id="3、网络拓扑-节点距离计算"><a href="#3、网络拓扑-节点距离计算" class="headerlink" title="3、网络拓扑-节点距离计算"></a>3、网络拓扑-节点距离计算</h3><blockquote><p>节点距离：两个节点到达最近的共同祖先的距离总和。</p></blockquote><h3 id="常用命令实操"><a href="#常用命令实操" class="headerlink" title="常用命令实操"></a>常用命令实操</h3><p>（0）启动Hadoop集群（方便后续的测试）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ sbin/start-dfs.sh</span><br><span class="line">[atguigu@hadoop103 hadoop-2.7.2]$ sbin/start-yarn.sh</span><br></pre></td></tr></table></figure><p>（1）-help：输出这个命令参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -help rm</span><br></pre></td></tr></table></figure><p>（2）-ls: 显示目录信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -ls /</span><br></pre></td></tr></table></figure><p>（3）-mkdir：在HDFS上创建目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -mkdir -p /sanguo/shuguo</span><br></pre></td></tr></table></figure><p>（4）-moveFromLocal：从本地剪切粘贴到HDFS</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ touch kongming.txt</span><br><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs  -moveFromLocal  ./kongming.txt  /sanguo/shuguo</span><br></pre></td></tr></table></figure><p>（5）-appendToFile：追加一个文件到已经存在的文件末尾</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ touch liubei.txt</span><br><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ vi liubei.txt</span><br></pre></td></tr></table></figure><p>输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">san gu mao lu</span><br><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -appendToFile liubei.txt /sanguo/shuguo/kongming.txt</span><br></pre></td></tr></table></figure><p>（6）-cat：显示文件内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -cat /sanguo/shuguo/kongming.txt</span><br></pre></td></tr></table></figure><p>（7）-chgrp 、-chmod、-chown：Linux文件系统中的用法一样，修改文件所属权限</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs  -chmod  666  /sanguo/shuguo/kongming.txt</span><br><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs  -chown  atguigu:atguigu   /sanguo/shuguo/kongming.txt</span><br></pre></td></tr></table></figure><p>（8）-copyFromLocal：从本地文件系统中拷贝文件到HDFS路径去</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -copyFromLocal README.txt /</span><br></pre></td></tr></table></figure><p>（9）-copyToLocal：从HDFS拷贝到本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -copyToLocal /sanguo/shuguo/kongming.txt ./</span><br></pre></td></tr></table></figure><p>（10）-cp ：从HDFS的一个路径拷贝到HDFS的另一个路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -cp /sanguo/shuguo/kongming.txt /zhuge.txt</span><br></pre></td></tr></table></figure><p>（11）-mv：在HDFS目录中移动文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -mv /zhuge.txt /sanguo/shuguo/</span><br></pre></td></tr></table></figure><p>（12）-get：等同于copyToLocal，就是从HDFS下载文件到本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -get /sanguo/shuguo/kongming.txt ./</span><br></pre></td></tr></table></figure><p>（13）-getmerge：合并下载多个文件，比如HDFS的<br>目录 /user/atguigu/test下有多个文件:log.1, log.2,log.3,…</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -getmerge /user/atguigu/test/* ./zaiyiqi.txt</span><br></pre></td></tr></table></figure><p>（14）-put：等同于copyFromLocal</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -put ./zaiyiqi.txt /user/atguigu/test/</span><br></pre></td></tr></table></figure><p>（15）-tail：显示一个文件的末尾</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -tail /sanguo/shuguo/kongming.txt</span><br></pre></td></tr></table></figure><p>（16）-rm：删除文件或文件夹</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -rm /user/atguigu/test/jinlian2.txt</span><br></pre></td></tr></table></figure><p>（17）-rmdir：删除空目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -mkdir /test</span><br><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -rmdir /test</span><br></pre></td></tr></table></figure><p>（18）-du统计文件夹的大小信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -du -s -h /user/atguigu/test</span><br><span class="line">2.7 K  /user/atguigu/test</span><br><span class="line"></span><br><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -du  -h /user/atguigu/test</span><br><span class="line">1.3 K  /user/atguigu/test/README.txt</span><br><span class="line">15     /user/atguigu/test/jinlian.txt</span><br><span class="line">1.4 K  /user/atguigu/test/zaiyiqi.txt</span><br></pre></td></tr></table></figure><p>（19）-setrep：设置HDFS中文件的副本数量</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[atguigu@hadoop102 hadoop-2.7.2]$ hadoop fs -setrep 10 /sanguo/shuguo/kongming.txt</span><br></pre></td></tr></table></figure><p><strong>假设有数据中心d1机架r1中的节点n1。该节点可以表示为/d1/r1/n1。</strong></p><p><img src="https://file.buildworld.cn/img/20200521221124.png"></p><h2 id="四、NN-amp-amp-2NN"><a href="#四、NN-amp-amp-2NN" class="headerlink" title="四、NN &amp;&amp; 2NN"></a>四、NN &amp;&amp; 2NN</h2><h3 id="1、NameNode工作机制"><a href="#1、NameNode工作机制" class="headerlink" title="1、NameNode工作机制"></a>1、NameNode工作机制</h3><p><strong>NameNode中的元数据是存储在哪里的？</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    首先，我们做个假设，如果存储在NameNode节点的磁盘中，因为经常需要进行随机访问，还有响应客户请求，必然是效率过低。</span><br><span class="line">因此，元数据需要存放在内存中。但如果只存在内存中，一旦断电，元数据丢失，整个集群就无法工作了。因此产生在磁盘中备份元数据的FsImage。</span><br><span class="line"></span><br><span class="line">    这样又会带来新的问题，当在内存中的元数据更新时，如果同时更新FsImage，就会导致效率过低，但如果不更新，就会发生一致性问题，</span><br><span class="line">一旦NameNode节点断电，就会产生数据丢失。因此，引入Edits文件(只进行追加操作，效率很高)。每当元数据有更新或者添加元数据时，</span><br><span class="line">修改内存中的元数据并追加到Edits中。这样，一旦NameNode节点断电，可以通过FsImage和Edits的合并，合成元数据。</span><br><span class="line"></span><br><span class="line">    但是，如果长时间添加数据到Edits中，会导致该文件数据过大，效率降低，而且一旦断电，恢复元数据需要的时间过长。</span><br><span class="line">因此，需要定期进行FsImage和Edits的合并，如果这个操作由NameNode节点完成，又会效率过低。因此，引入一个新的节点SecondaryNamenode，</span><br><span class="line">专门用于FsImage和Edits的合并。</span><br></pre></td></tr></table></figure><p><strong>Fsimage：NameNode内存中元数据序列化后形成的文件。</strong><br><strong>Edits：记录客户端更新元数据信息的每一步操作（可通过Edits运算出元数据）。</strong></p><h5 id="下图为NN和2NN工作机制"><a href="#下图为NN和2NN工作机制" class="headerlink" title="下图为NN和2NN工作机制"></a>下图为NN和2NN工作机制</h5><p><img src="http://myfile.buildworld.cn/NameNode%E5%B7%A5%E4%BD%9C%E6%9C%BA%E5%88%B6.png" alt="NN和2NN工作机制">  </p><h2 id="五、DataNode"><a href="#五、DataNode" class="headerlink" title="五、DataNode"></a>五、DataNode</h2><h3 id="1、DataNode工作机制"><a href="#1、DataNode工作机制" class="headerlink" title="1、DataNode工作机制"></a>1、DataNode工作机制</h3><p><img src="https://file.buildworld.cn/img/20200522143452.png"></p><h3 id="2、数据完整性"><a href="#2、数据完整性" class="headerlink" title="2、数据完整性"></a>2、数据完整性</h3><ul><li>1）当DataNode读取Block的时候，它会计算CheckSum。</li><li>2）如果计算后的CheckSum，与Block创建时值不一样，说明Block已经损坏。</li><li>3）Client读取其他DataNode上的Block。</li><li>4）DataNode在其文件创建后周期验证CheckSum。</li></ul><p><img src="https://file.buildworld.cn/img/20200522152850.png"></p>]]></content>
      
      
      <categories>
          
          <category> BigData </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
            <tag> HDFS </tag>
            
            <tag> YARN </tag>
            
            <tag> MapReduce </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TensorFlow2.X学习笔记(8)--TensorFlow高阶API之构建模型、训练模型</title>
      <link href="/2020/05/19/TensorFlow2-X%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-8-TensorFlow%E9%AB%98%E9%98%B6API%E4%B9%8B%E6%9E%84%E5%BB%BA%E6%A8%A1%E5%9E%8B%E3%80%81%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B/"/>
      <url>/2020/05/19/TensorFlow2-X%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-8-TensorFlow%E9%AB%98%E9%98%B6API%E4%B9%8B%E6%9E%84%E5%BB%BA%E6%A8%A1%E5%9E%8B%E3%80%81%E8%AE%AD%E7%BB%83%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一、构建模型"><a href="#一、构建模型" class="headerlink" title="一、构建模型"></a>一、构建模型</h2><ul><li><strong>使用Sequential按层顺序构建模型</strong></li><li><strong>使用函数式API构建任意结构模型</strong></li><li><strong>继承Model基类构建自定义模型。</strong></li></ul><h3 id="1、Sequential按层顺序创建模型（方便，网络显示清晰）"><a href="#1、Sequential按层顺序创建模型（方便，网络显示清晰）" class="headerlink" title="1、Sequential按层顺序创建模型（方便，网络显示清晰）"></a>1、Sequential按层顺序创建模型（方便，网络显示清晰）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">tf.keras.backend.clear_session()</span><br><span class="line"></span><br><span class="line">model = models.Sequential()</span><br><span class="line"></span><br><span class="line">model.add(layers.Embedding(MAX_WORDS,<span class="number">7</span>,input_length=MAX_LEN))</span><br><span class="line">model.add(layers.Conv1D(filters = <span class="number">64</span>,kernel_size = <span class="number">5</span>,activation = <span class="string">&quot;relu&quot;</span>))</span><br><span class="line">model.add(layers.MaxPool1D(<span class="number">2</span>))</span><br><span class="line">model.add(layers.Conv1D(filters = <span class="number">32</span>,kernel_size = <span class="number">3</span>,activation = <span class="string">&quot;relu&quot;</span>))</span><br><span class="line">model.add(layers.MaxPool1D(<span class="number">2</span>))</span><br><span class="line">model.add(layers.Flatten())</span><br><span class="line">model.add(layers.Dense(<span class="number">1</span>,activation = <span class="string">&quot;sigmoid&quot;</span>))</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;Nadam&#x27;</span>,</span><br><span class="line">            loss=<span class="string">&#x27;binary_crossentropy&#x27;</span>,</span><br><span class="line">            metrics=[<span class="string">&#x27;accuracy&#x27;</span>,<span class="string">&quot;AUC&quot;</span>])</span><br><span class="line"></span><br><span class="line">model.summary()</span><br></pre></td></tr></table></figure><h3 id="2、函数式API创建任意结构模型"><a href="#2、函数式API创建任意结构模型" class="headerlink" title="2、函数式API创建任意结构模型"></a>2、函数式API创建任意结构模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">tf.keras.backend.clear_session()</span><br><span class="line"></span><br><span class="line">inputs = layers.Input(shape=[MAX_LEN])</span><br><span class="line">x  = layers.Embedding(MAX_WORDS,<span class="number">7</span>)(inputs)</span><br><span class="line"></span><br><span class="line">branch1 = layers.SeparableConv1D(<span class="number">64</span>,<span class="number">3</span>,activation=<span class="string">&quot;relu&quot;</span>)(x)</span><br><span class="line">branch1 = layers.MaxPool1D(<span class="number">3</span>)(branch1)</span><br><span class="line">branch1 = layers.SeparableConv1D(<span class="number">32</span>,<span class="number">3</span>,activation=<span class="string">&quot;relu&quot;</span>)(branch1)</span><br><span class="line">branch1 = layers.GlobalMaxPool1D()(branch1)</span><br><span class="line"></span><br><span class="line">branch2 = layers.SeparableConv1D(<span class="number">64</span>,<span class="number">5</span>,activation=<span class="string">&quot;relu&quot;</span>)(x)</span><br><span class="line">branch2 = layers.MaxPool1D(<span class="number">5</span>)(branch2)</span><br><span class="line">branch2 = layers.SeparableConv1D(<span class="number">32</span>,<span class="number">5</span>,activation=<span class="string">&quot;relu&quot;</span>)(branch2)</span><br><span class="line">branch2 = layers.GlobalMaxPool1D()(branch2)</span><br><span class="line"></span><br><span class="line">branch3 = layers.SeparableConv1D(<span class="number">64</span>,<span class="number">7</span>,activation=<span class="string">&quot;relu&quot;</span>)(x)</span><br><span class="line">branch3 = layers.MaxPool1D(<span class="number">7</span>)(branch3)</span><br><span class="line">branch3 = layers.SeparableConv1D(<span class="number">32</span>,<span class="number">7</span>,activation=<span class="string">&quot;relu&quot;</span>)(branch3)</span><br><span class="line">branch3 = layers.GlobalMaxPool1D()(branch3)</span><br><span class="line"></span><br><span class="line">concat = layers.Concatenate()([branch1,branch2,branch3])</span><br><span class="line">outputs = layers.Dense(<span class="number">1</span>,activation = <span class="string">&quot;sigmoid&quot;</span>)(concat)</span><br><span class="line"></span><br><span class="line">model = models.Model(inputs = inputs,outputs = outputs)</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;Nadam&#x27;</span>,</span><br><span class="line">            loss=<span class="string">&#x27;binary_crossentropy&#x27;</span>,</span><br><span class="line">            metrics=[<span class="string">&#x27;accuracy&#x27;</span>,<span class="string">&quot;AUC&quot;</span>])</span><br><span class="line"></span><br><span class="line">model.summary()</span><br></pre></td></tr></table></figure><h3 id="3、Model子类化创建自定义模型"><a href="#3、Model子类化创建自定义模型" class="headerlink" title="3、Model子类化创建自定义模型"></a>3、Model子类化创建自定义模型</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先自定义一个残差模块，为自定义Layer</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResBlock</span>(<span class="params">layers.Layer</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, kernel_size, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(ResBlock, self).__init__(**kwargs)</span><br><span class="line">        self.kernel_size = kernel_size</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span>(<span class="params">self,input_shape</span>):</span></span><br><span class="line">        self.conv1 = layers.Conv1D(filters=<span class="number">64</span>,kernel_size=self.kernel_size,</span><br><span class="line">                                   activation = <span class="string">&quot;relu&quot;</span>,padding=<span class="string">&quot;same&quot;</span>)</span><br><span class="line">        self.conv2 = layers.Conv1D(filters=<span class="number">32</span>,kernel_size=self.kernel_size,</span><br><span class="line">                                   activation = <span class="string">&quot;relu&quot;</span>,padding=<span class="string">&quot;same&quot;</span>)</span><br><span class="line">        self.conv3 = layers.Conv1D(filters=input_shape[-<span class="number">1</span>],</span><br><span class="line">                                   kernel_size=self.kernel_size,activation = <span class="string">&quot;relu&quot;</span>,padding=<span class="string">&quot;same&quot;</span>)</span><br><span class="line">        self.maxpool = layers.MaxPool1D(<span class="number">2</span>)</span><br><span class="line">        <span class="built_in">super</span>(ResBlock,self).build(input_shape) <span class="comment"># 相当于设置self.built = True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span>(<span class="params">self, inputs</span>):</span></span><br><span class="line">        x = self.conv1(inputs)</span><br><span class="line">        x = self.conv2(x)</span><br><span class="line">        x = self.conv3(x)</span><br><span class="line">        x = layers.Add()([inputs,x])</span><br><span class="line">        x = self.maxpool(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">    <span class="comment">#如果要让自定义的Layer通过Functional API 组合成模型时可以序列化，需要自定义get_config方法。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_config</span>(<span class="params">self</span>):</span>  </span><br><span class="line">        config = <span class="built_in">super</span>(ResBlock, self).get_config()</span><br><span class="line">        config.update(&#123;<span class="string">&#x27;kernel_size&#x27;</span>: self.kernel_size&#125;)</span><br><span class="line">        <span class="keyword">return</span> config</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 测试ResBlock</span></span><br><span class="line">resblock = ResBlock(kernel_size = <span class="number">3</span>)</span><br><span class="line">resblock.build(input_shape = (<span class="literal">None</span>,<span class="number">200</span>,<span class="number">7</span>))</span><br><span class="line">resblock.compute_output_shape(input_shape=(<span class="literal">None</span>,<span class="number">200</span>,<span class="number">7</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义模型，实际上也可以使用Sequential或者FunctionalAPI</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ImdbModel</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(ImdbModel, self).__init__()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span>(<span class="params">self,input_shape</span>):</span></span><br><span class="line">        self.embedding = layers.Embedding(MAX_WORDS,<span class="number">7</span>)</span><br><span class="line">        self.block1 = ResBlock(<span class="number">7</span>)</span><br><span class="line">        self.block2 = ResBlock(<span class="number">5</span>)</span><br><span class="line">        self.dense = layers.Dense(<span class="number">1</span>,activation = <span class="string">&quot;sigmoid&quot;</span>)</span><br><span class="line">        <span class="built_in">super</span>(ImdbModel,self).build(input_shape)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        x = self.embedding(x)</span><br><span class="line">        x = self.block1(x)</span><br><span class="line">        x = self.block2(x)</span><br><span class="line">        x = layers.Flatten()(x)</span><br><span class="line">        x = self.dense(x)</span><br><span class="line">        <span class="keyword">return</span>(x)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 测试</span></span><br><span class="line">tf.keras.backend.clear_session()</span><br><span class="line"></span><br><span class="line">model = ImdbModel()</span><br><span class="line">model.build(input_shape =(<span class="literal">None</span>,<span class="number">200</span>))</span><br><span class="line">model.summary()</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;Nadam&#x27;</span>,</span><br><span class="line">            loss=<span class="string">&#x27;binary_crossentropy&#x27;</span>,</span><br><span class="line">            metrics=[<span class="string">&#x27;accuracy&#x27;</span>,<span class="string">&quot;AUC&quot;</span>])</span><br></pre></td></tr></table></figure><h2 id="二、训练模型"><a href="#二、训练模型" class="headerlink" title="二、训练模型"></a>二、训练模型</h2><p><strong>模型的训练主要有内置fit方法、内置tran_on_batch方法、自定义训练循环。</strong></p><h3 id="1、内置fit方法"><a href="#1、内置fit方法" class="headerlink" title="1、内置fit方法"></a>1、内置fit方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">tf.keras.backend.clear_session()</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_model</span>():</span></span><br><span class="line"></span><br><span class="line">    model = models.Sequential()</span><br><span class="line">    model.add(layers.Embedding(MAX_WORDS,<span class="number">7</span>,input_length=MAX_LEN))</span><br><span class="line">    model.add(layers.Conv1D(filters = <span class="number">64</span>,kernel_size = <span class="number">5</span>,activation = <span class="string">&quot;relu&quot;</span>))</span><br><span class="line">    model.add(layers.MaxPool1D(<span class="number">2</span>))</span><br><span class="line">    model.add(layers.Conv1D(filters = <span class="number">32</span>,kernel_size = <span class="number">3</span>,activation = <span class="string">&quot;relu&quot;</span>))</span><br><span class="line">    model.add(layers.MaxPool1D(<span class="number">2</span>))</span><br><span class="line">    model.add(layers.Flatten())</span><br><span class="line">    model.add(layers.Dense(CAT_NUM,activation = <span class="string">&quot;softmax&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span>(model)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compile_model</span>(<span class="params">model</span>):</span></span><br><span class="line">    model.<span class="built_in">compile</span>(optimizer=optimizers.Nadam(),</span><br><span class="line">                loss=losses.SparseCategoricalCrossentropy(),</span><br><span class="line">                metrics=[metrics.SparseCategoricalAccuracy(),metrics.SparseTopKCategoricalAccuracy(<span class="number">5</span>)]) </span><br><span class="line">    <span class="keyword">return</span>(model)</span><br><span class="line"></span><br><span class="line">model = create_model()</span><br><span class="line">model.summary()</span><br><span class="line">model = compile_model(model)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建模型</span></span><br><span class="line">history = model.fit(ds_train,validation_data = ds_test,epochs = <span class="number">10</span>)</span><br></pre></td></tr></table></figure><h3 id="2、内置train-on-batch方法"><a href="#2、内置train-on-batch方法" class="headerlink" title="2、内置train_on_batch方法"></a>2、内置train_on_batch方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_model</span>(<span class="params">model,ds_train,ds_valid,epoches</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> tf.<span class="built_in">range</span>(<span class="number">1</span>,epoches+<span class="number">1</span>):</span><br><span class="line">        model.reset_metrics()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 在后期降低学习率</span></span><br><span class="line">        <span class="keyword">if</span> epoch == <span class="number">5</span>:</span><br><span class="line">            model.optimizer.lr.assign(model.optimizer.lr/<span class="number">2.0</span>)</span><br><span class="line">            tf.<span class="built_in">print</span>(<span class="string">&quot;Lowering optimizer Learning Rate...\n\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> x, y <span class="keyword">in</span> ds_train:</span><br><span class="line">            train_result = model.train_on_batch(x, y)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> x, y <span class="keyword">in</span> ds_valid:</span><br><span class="line">            valid_result = model.test_on_batch(x, y,reset_metrics=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> epoch%<span class="number">1</span> ==<span class="number">0</span>:</span><br><span class="line">            printbar()</span><br><span class="line">            tf.<span class="built_in">print</span>(<span class="string">&quot;epoch = &quot;</span>,epoch)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;train:&quot;</span>,<span class="built_in">dict</span>(<span class="built_in">zip</span>(model.metrics_names,train_result)))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;valid:&quot;</span>,<span class="built_in">dict</span>(<span class="built_in">zip</span>(model.metrics_names,valid_result)))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">            </span><br><span class="line"><span class="comment"># 构建模型</span></span><br><span class="line">train_model(model,ds_train,ds_test,<span class="number">10</span>)</span><br></pre></td></tr></table></figure><h3 id="3、自定义训练循环"><a href="#3、自定义训练循环" class="headerlink" title="3、自定义训练循环"></a>3、自定义训练循环</h3><p><strong>自定义训练循环无需编译模型，直接利用优化器根据损失函数反向传播迭代参数，拥有最高的灵活性。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">optimizer = optimizers.Nadam()</span><br><span class="line">loss_func = losses.SparseCategoricalCrossentropy()</span><br><span class="line"></span><br><span class="line">train_loss = metrics.Mean(name=<span class="string">&#x27;train_loss&#x27;</span>)</span><br><span class="line">train_metric = metrics.SparseCategoricalAccuracy(name=<span class="string">&#x27;train_accuracy&#x27;</span>)</span><br><span class="line"></span><br><span class="line">valid_loss = metrics.Mean(name=<span class="string">&#x27;valid_loss&#x27;</span>)</span><br><span class="line">valid_metric = metrics.SparseCategoricalAccuracy(name=<span class="string">&#x27;valid_accuracy&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_step</span>(<span class="params">model, features, labels</span>):</span></span><br><span class="line">    <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">        predictions = model(features,training = <span class="literal">True</span>)</span><br><span class="line">        loss = loss_func(labels, predictions)</span><br><span class="line">    gradients = tape.gradient(loss, model.trainable_variables)</span><br><span class="line">    optimizer.apply_gradients(<span class="built_in">zip</span>(gradients, model.trainable_variables))</span><br><span class="line"></span><br><span class="line">    train_loss.update_state(loss)</span><br><span class="line">    train_metric.update_state(labels, predictions)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">valid_step</span>(<span class="params">model, features, labels</span>):</span></span><br><span class="line">    predictions = model(features)</span><br><span class="line">    batch_loss = loss_func(labels, predictions)</span><br><span class="line">    valid_loss.update_state(batch_loss)</span><br><span class="line">    valid_metric.update_state(labels, predictions)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_model</span>(<span class="params">model,ds_train,ds_valid,epochs</span>):</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> tf.<span class="built_in">range</span>(<span class="number">1</span>,epochs+<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> features, labels <span class="keyword">in</span> ds_train:</span><br><span class="line">            train_step(model,features,labels)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> features, labels <span class="keyword">in</span> ds_valid:</span><br><span class="line">            valid_step(model,features,labels)</span><br><span class="line"></span><br><span class="line">        logs = <span class="string">&#x27;Epoch=&#123;&#125;,Loss:&#123;&#125;,Accuracy:&#123;&#125;,Valid Loss:&#123;&#125;,Valid Accuracy:&#123;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> epoch%<span class="number">1</span> ==<span class="number">0</span>:</span><br><span class="line">            printbar()</span><br><span class="line">            tf.<span class="built_in">print</span>(tf.strings.<span class="built_in">format</span>(logs,</span><br><span class="line">            (epoch,train_loss.result(),train_metric.result(),valid_loss.result(),valid_metric.result())))</span><br><span class="line">            tf.<span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        train_loss.reset_states()</span><br><span class="line">        valid_loss.reset_states()</span><br><span class="line">        train_metric.reset_states()</span><br><span class="line">        valid_metric.reset_states()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建模型</span></span><br><span class="line">train_model(model,ds_train,ds_test,<span class="number">10</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TensorFlow2.X学习笔记(7)--TensorFlow中阶API之losses、metrics、optimizers、callbacks</title>
      <link href="/2020/05/18/TensorFlow2-X%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-7-TensorFlow%E4%B8%AD%E9%98%B6API%E4%B9%8Blosses%E3%80%81metrics%E3%80%81optimizers%E3%80%81callbacks/"/>
      <url>/2020/05/18/TensorFlow2-X%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-7-TensorFlow%E4%B8%AD%E9%98%B6API%E4%B9%8Blosses%E3%80%81metrics%E3%80%81optimizers%E3%80%81callbacks/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一、损失函数"><a href="#一、损失函数" class="headerlink" title="一、损失函数"></a>一、损失函数</h2><p><strong>一般来说，监督学习的目标函数由损失函数和正则化项组成。（Objective = Loss + Regularization）</strong></p><ul><li>对于二分类模型，通常使用的是二元交叉熵损失函数 binary_crossentropy。</li><li>对于多分类模型，如果label是类别序号编码的，则使用类别交叉熵损失函数 categorical_crossentropy。如果label进行了one-hot编码，则需要使用稀疏类别交叉熵损失函数 sparse_categorical_crossentropy。</li></ul><h3 id="1、内置损失函数"><a href="#1、内置损失函数" class="headerlink" title="1、内置损失函数"></a>1、内置损失函数</h3><p><strong>内置的损失函数一般有类的实现和函数的实现两种形式。</strong></p><blockquote><p>常用的内置损失函数</p></blockquote><ul><li><code>mean_squared_error</code>（平方差误差损失，用于回归，简写为 mse, 类实现形式为 MeanSquaredError 和 MSE）</li><li><code>mean_absolute_error</code> (绝对值误差损失，用于回归，简写为 mae, 类实现形式为 MeanAbsoluteError 和 MAE)</li><li><code>mean_absolute_percentage_error</code> (平均百分比误差损失，用于回归，简写为 mape, 类实现形式为 MeanAbsolutePercentageError 和 MAPE)</li><li><code>Huber</code>(Huber损失，只有类实现形式，用于回归，介于mse和mae之间，对异常值比较鲁棒，相对mse有一定的优势)</li><li><code>binary_crossentropy</code>(二元交叉熵，用于二分类，类实现形式为 BinaryCrossentropy)</li><li><code>categorical_crossentropy</code>(类别交叉熵，用于多分类，要求label为onehot编码，类实现形式为 CategoricalCrossentropy)</li><li><code>sparse_categorical_crossentropy</code>(稀疏类别交叉熵，用于多分类，要求label为序号编码形式，类实现形式为 SparseCategoricalCrossentropy)</li><li><code>hinge</code>(合页损失函数，用于二分类，最著名的应用是作为支持向量机SVM的损失函数，类实现形式为 Hinge)</li><li>kld(相对熵损失，也叫KL散度，常用于最大期望算法EM的损失函数，两个概率分布差异的一种信息度量。<code>类实现形式为</code> KLDivergence 或 KLD)</li><li><code>cosine_similarity</code>(余弦相似度，可用于多分类，类实现形式为 CosineSimilarity)</li></ul><h3 id="2、-自定义损失函数"><a href="#2、-自定义损失函数" class="headerlink" title="2、 自定义损失函数"></a>2、 自定义损失函数</h3><blockquote><p>自定义损失函数接收两个张量<code>y_true</code>,<code>y_pred</code>作为输入参数，并输出一个标量作为损失函数值。</p></blockquote><h4 id="函数形式"><a href="#函数形式" class="headerlink" title="函数形式"></a>函数形式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">focal_loss</span>(<span class="params">gamma=<span class="number">2.</span>, alpha=<span class="number">.25</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">focal_loss_fixed</span>(<span class="params">y_true, y_pred</span>):</span></span><br><span class="line">        pt_1 = tf.where(tf.equal(y_true, <span class="number">1</span>), y_pred, tf.ones_like(y_pred))</span><br><span class="line">        pt_0 = tf.where(tf.equal(y_true, <span class="number">0</span>), y_pred, tf.zeros_like(y_pred))</span><br><span class="line">        loss = -tf.<span class="built_in">sum</span>(alpha * tf.<span class="built_in">pow</span>(<span class="number">1.</span> - pt_1, gamma) * tf.log(<span class="number">1e-07</span>+pt_1)) \</span><br><span class="line">           -tf.<span class="built_in">sum</span>((<span class="number">1</span>-alpha) * tf.<span class="built_in">pow</span>( pt_0, gamma) * tf.log(<span class="number">1.</span> - pt_0 + <span class="number">1e-07</span>))</span><br><span class="line">        <span class="keyword">return</span> loss</span><br><span class="line">    <span class="keyword">return</span> focal_loss_fixed</span><br></pre></td></tr></table></figure><h4 id="类形式"><a href="#类形式" class="headerlink" title="类形式"></a>类形式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FocalLoss</span>(<span class="params">losses.Loss</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,gamma=<span class="number">2.0</span>,alpha=<span class="number">0.25</span></span>):</span></span><br><span class="line">        self.gamma = gamma</span><br><span class="line">        self.alpha = alpha</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span>(<span class="params">self,y_true,y_pred</span>):</span></span><br><span class="line"></span><br><span class="line">        pt_1 = tf.where(tf.equal(y_true, <span class="number">1</span>), y_pred, tf.ones_like(y_pred))</span><br><span class="line">        pt_0 = tf.where(tf.equal(y_true, <span class="number">0</span>), y_pred, tf.zeros_like(y_pred))</span><br><span class="line">        loss = -tf.<span class="built_in">sum</span>(self.alpha * tf.<span class="built_in">pow</span>(<span class="number">1.</span> - pt_1, self.gamma) * tf.log(<span class="number">1e-07</span>+pt_1)) \</span><br><span class="line">           -tf.<span class="built_in">sum</span>((<span class="number">1</span>-self.alpha) * tf.<span class="built_in">pow</span>( pt_0, self.gamma) * tf.log(<span class="number">1.</span> - pt_0 + <span class="number">1e-07</span>))</span><br><span class="line">        <span class="keyword">return</span> loss</span><br></pre></td></tr></table></figure><h2 id="二、评估指标metrics"><a href="#二、评估指标metrics" class="headerlink" title="二、评估指标metrics"></a>二、评估指标metrics</h2><p><strong>损失函数除了作为模型训练时候的优化目标，也能够作为模型好坏的一种评价指标。</strong></p><h3 id="1、常用的内置评估指标"><a href="#1、常用的内置评估指标" class="headerlink" title="1、常用的内置评估指标"></a>1、常用的内置评估指标</h3><ul><li><code>MeanSquaredError</code>（平方差误差，用于回归，可以简写为MSE，函数形式为mse）</li><li><code>MeanAbsoluteError</code> (绝对值误差，用于回归，可以简写为MAE，函数形式为mae)</li><li><code>MeanAbsolutePercentageError</code> (平均百分比误差，用于回归，可以简写为MAPE，函数形式为mape)</li><li><code>RootMeanSquaredError</code> (均方根误差，用于回归)</li><li><code>Accuracy</code> (准确率，用于分类，可以用字符串”Accuracy”表示，Accuracy=(TP+TN)/(TP+TN+FP+FN)，要求y_true和y_pred都为类别序号编码)</li><li><code>Precision</code> (精确率，用于二分类，Precision = TP/(TP+FP))</li><li><code>Recall</code> (召回率，用于二分类，Recall = TP/(TP+FN))</li><li><code>TruePositives</code> (真正例，用于二分类)</li><li><code>TrueNegatives</code> (真负例，用于二分类)</li><li><code>FalsePositives</code> (假正例，用于二分类)</li><li><code>FalseNegatives</code> (假负例，用于二分类)</li><li><code>AUC</code>(ROC曲线(TPR vs FPR)下的面积，用于二分类，直观解释为随机抽取一个正样本和一个负样本，正样本的预测值大于负样本的概率)</li><li><code>CategoricalAccuracy</code>（分类准确率，与Accuracy含义相同，要求y_true(label)为onehot编码形式）</li><li><code>SparseCategoricalAccuracy</code> (稀疏分类准确率，与Accuracy含义相同，要求y_true(label)为序号编码形式)</li><li><code>MeanIoU</code> (Intersection-Over-Union，常用于图像分割)</li><li><code>TopKCategoricalAccuracy</code> (多分类TopK准确率，要求y_true(label)为onehot编码形式)</li><li><code>SparseTopKCategoricalAccuracy</code> (稀疏多分类TopK准确率，要求y_true(label)为序号编码形式)</li><li><code>Mean</code> (平均值)</li><li><code>Sum</code> (求和)</li></ul><h3 id="2、自定义评估指标"><a href="#2、自定义评估指标" class="headerlink" title="2、自定义评估指标"></a>2、自定义评估指标</h3><p><strong>KS指标适合二分类问题，其计算方式为 <code>KS=max(TPR-FPR).</code></strong></p><blockquote><p>TPR=TP/(TP+FN) , FPR = FP/(FP+TN)</p><p>TPR曲线实际上就是正样本的累积分布曲线(CDF)，FPR曲线实际上就是负样本的累积分布曲线(CDF)。</p></blockquote><p><strong>KS指标就是正样本和负样本累积分布曲线差值的最大值。</strong></p><h4 id="函数形式的自定义评估指标"><a href="#函数形式的自定义评估指标" class="headerlink" title="函数形式的自定义评估指标"></a>函数形式的自定义评估指标</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#函数形式的自定义评估指标</span></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ks</span>(<span class="params">y_true,y_pred</span>):</span></span><br><span class="line">    y_true = tf.reshape(y_true,(-<span class="number">1</span>,))</span><br><span class="line">    y_pred = tf.reshape(y_pred,(-<span class="number">1</span>,))</span><br><span class="line">    length = tf.shape(y_true)[<span class="number">0</span>]</span><br><span class="line">    t = tf.math.top_k(y_pred,k = length,<span class="built_in">sorted</span> = <span class="literal">False</span>)</span><br><span class="line">    y_pred_sorted = tf.gather(y_pred,t.indices)</span><br><span class="line">    y_true_sorted = tf.gather(y_true,t.indices)</span><br><span class="line">    cum_positive_ratio = tf.truediv(</span><br><span class="line">        tf.cumsum(y_true_sorted),tf.reduce_sum(y_true_sorted))</span><br><span class="line">    cum_negative_ratio = tf.truediv(</span><br><span class="line">        tf.cumsum(<span class="number">1</span> - y_true_sorted),tf.reduce_sum(<span class="number">1</span> - y_true_sorted))</span><br><span class="line">    ks_value = tf.reduce_max(tf.<span class="built_in">abs</span>(cum_positive_ratio - cum_negative_ratio)) </span><br><span class="line">    <span class="keyword">return</span> ks_value</span><br><span class="line"></span><br><span class="line">y_true = tf.constant([[<span class="number">1</span>],[<span class="number">1</span>],[<span class="number">1</span>],[<span class="number">0</span>],[<span class="number">1</span>],[<span class="number">1</span>],[<span class="number">1</span>],[<span class="number">0</span>],[<span class="number">0</span>],[<span class="number">0</span>],[<span class="number">1</span>],[<span class="number">0</span>],[<span class="number">1</span>],[<span class="number">0</span>]])</span><br><span class="line">y_pred = tf.constant([[<span class="number">0.6</span>],[<span class="number">0.1</span>],[<span class="number">0.4</span>],[<span class="number">0.5</span>],[<span class="number">0.7</span>],[<span class="number">0.7</span>],[<span class="number">0.7</span>],</span><br><span class="line">                      [<span class="number">0.4</span>],[<span class="number">0.4</span>],[<span class="number">0.5</span>],[<span class="number">0.8</span>],[<span class="number">0.3</span>],[<span class="number">0.5</span>],[<span class="number">0.3</span>]])</span><br><span class="line">tf.<span class="built_in">print</span>(ks(y_true,y_pred))</span><br></pre></td></tr></table></figure><h4 id="类形式的自定义评估指标"><a href="#类形式的自定义评估指标" class="headerlink" title="类形式的自定义评估指标"></a>类形式的自定义评估指标</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#类形式的自定义评估指标</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KS</span>(<span class="params">metrics.Metric</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name = <span class="string">&quot;ks&quot;</span>, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(KS,self).__init__(name=name,**kwargs)</span><br><span class="line">        self.true_positives = self.add_weight(</span><br><span class="line">            name = <span class="string">&quot;tp&quot;</span>,shape = (<span class="number">101</span>,), initializer = <span class="string">&quot;zeros&quot;</span>)</span><br><span class="line">        self.false_positives = self.add_weight(</span><br><span class="line">            name = <span class="string">&quot;fp&quot;</span>,shape = (<span class="number">101</span>,), initializer = <span class="string">&quot;zeros&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @tf.function</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_state</span>(<span class="params">self,y_true,y_pred</span>):</span></span><br><span class="line">        y_true = tf.cast(tf.reshape(y_true,(-<span class="number">1</span>,)),tf.<span class="built_in">bool</span>)</span><br><span class="line">        y_pred = tf.cast(<span class="number">100</span>*tf.reshape(y_pred,(-<span class="number">1</span>,)),tf.int32)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> tf.<span class="built_in">range</span>(<span class="number">0</span>,tf.shape(y_true)[<span class="number">0</span>]):</span><br><span class="line">            <span class="keyword">if</span> y_true[i]:</span><br><span class="line">                self.true_positives[y_pred[i]].assign(</span><br><span class="line">                    self.true_positives[y_pred[i]]+<span class="number">1.0</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.false_positives[y_pred[i]].assign(</span><br><span class="line">                    self.false_positives[y_pred[i]]+<span class="number">1.0</span>)</span><br><span class="line">        <span class="keyword">return</span> (self.true_positives,self.false_positives)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @tf.function</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">result</span>(<span class="params">self</span>):</span></span><br><span class="line">        cum_positive_ratio = tf.truediv(</span><br><span class="line">            tf.cumsum(self.true_positives),tf.reduce_sum(self.true_positives))</span><br><span class="line">        cum_negative_ratio = tf.truediv(</span><br><span class="line">            tf.cumsum(self.false_positives),tf.reduce_sum(self.false_positives))</span><br><span class="line">        ks_value = tf.reduce_max(tf.<span class="built_in">abs</span>(cum_positive_ratio - cum_negative_ratio)) </span><br><span class="line">        <span class="keyword">return</span> ks_value</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">y_true = tf.constant([[<span class="number">1</span>],[<span class="number">1</span>],[<span class="number">1</span>],[<span class="number">0</span>],[<span class="number">1</span>],[<span class="number">1</span>],[<span class="number">1</span>],[<span class="number">0</span>],[<span class="number">0</span>],[<span class="number">0</span>],[<span class="number">1</span>],[<span class="number">0</span>],[<span class="number">1</span>],[<span class="number">0</span>]])</span><br><span class="line">y_pred = tf.constant([[<span class="number">0.6</span>],[<span class="number">0.1</span>],[<span class="number">0.4</span>],[<span class="number">0.5</span>],[<span class="number">0.7</span>],[<span class="number">0.7</span>],</span><br><span class="line">                      [<span class="number">0.7</span>],[<span class="number">0.4</span>],[<span class="number">0.4</span>],[<span class="number">0.5</span>],[<span class="number">0.8</span>],[<span class="number">0.3</span>],[<span class="number">0.5</span>],[<span class="number">0.3</span>]])</span><br><span class="line"></span><br><span class="line">myks = KS()</span><br><span class="line">myks.update_state(y_true,y_pred)</span><br><span class="line">tf.<span class="built_in">print</span>(myks.result())</span><br></pre></td></tr></table></figure><h2 id="三、优化器optimizers"><a href="#三、优化器optimizers" class="headerlink" title="三、优化器optimizers"></a>三、优化器optimizers</h2><h3 id="1、优化器"><a href="#1、优化器" class="headerlink" title="1、优化器"></a>1、优化器</h3><p><strong>优化器主要使用<code>apply_gradients</code>方法传入变量和对应梯度从而来对给定变量进行迭代，或者直接使用minimize方法对目标函数进行迭代优化。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用optimizer.apply_gradients</span></span><br><span class="line">optimizer = tf.keras.optimizers.SGD(learning_rate=<span class="number">0.01</span>)  </span><br><span class="line"><span class="keyword">while</span> tf.constant(<span class="literal">True</span>): </span><br><span class="line">        <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">            y = a*tf.<span class="built_in">pow</span>(x,<span class="number">2</span>) + b*x + c</span><br><span class="line">        dy_dx = tape.gradient(y,x)</span><br><span class="line">        optimizer.apply_gradients(grads_and_vars=[(dy_dx,x)])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用model.fit</span></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer = </span><br><span class="line">              tf.keras.optimizers.SGD(learning_rate=<span class="number">0.01</span>),loss = myloss)</span><br><span class="line">history = model.fit(tf.zeros((<span class="number">100</span>,<span class="number">2</span>)),</span><br><span class="line">                    tf.ones(<span class="number">100</span>),batch_size = <span class="number">1</span>,epochs = <span class="number">10</span>)  <span class="comment">#迭代1000次</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用optimizer.minimize</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span>(<span class="params">epoch = <span class="number">1000</span></span>):</span>  </span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> tf.<span class="built_in">range</span>(epoch):  </span><br><span class="line">        optimizer.minimize(f,[x])</span><br><span class="line">    tf.<span class="built_in">print</span>(<span class="string">&quot;epoch = &quot;</span>,optimizer.iterations)</span><br><span class="line">    <span class="keyword">return</span>(f())</span><br></pre></td></tr></table></figure><h3 id="2、内置优化器"><a href="#2、内置优化器" class="headerlink" title="2、内置优化器"></a>2、内置优化器</h3><p>深度学习优化算法大概经历了 SGD -&gt; SGDM -&gt; NAG -&gt;Adagrad -&gt; Adadelta(RMSprop) -&gt; Adam -&gt; Nadam 这样的发展历程。</p><p>在keras.optimizers子模块中，它们基本上都有对应的类的实现。</p><ul><li><code>SGD</code>, 默认参数为纯SGD, 设置momentum参数不为0实际上变成SGDM, 考虑了一阶动量, 设置 nesterov为True后变成NAG，即 Nesterov Acceleration Gradient，在计算梯度时计算的是向前走一步所在位置的梯度。</li><li><code>Adagrad</code>, 考虑了二阶动量，对于不同的参数有不同的学习率，即自适应学习率。缺点是学习率单调下降，可能后期学习速率过慢乃至提前停止学习。</li><li><code>RMSprop</code>, 考虑了二阶动量，对于不同的参数有不同的学习率，即自适应学习率，对Adagrad进行了优化，通过指数平滑只考虑一定窗口内的二阶动量。</li><li><code>Adadelta</code>, 考虑了二阶动量，与RMSprop类似，但是更加复杂一些，自适应性更强。</li><li><code>Adam</code>, 同时考虑了一阶动量和二阶动量，可以看成RMSprop上进一步考虑了Momentum。</li><li><code>Nadam</code>, 在Adam基础上进一步考虑了 Nesterov Acceleration。</li></ul><h2 id="四、回调函数callbacks"><a href="#四、回调函数callbacks" class="headerlink" title="四、回调函数callbacks"></a>四、回调函数callbacks</h2><p>tf.keras的回调函数实际上是一个类，一般是在model.fit时作为参数指定，用于控制在训练过程开始或者在训练过程结束，在每个epoch训练开始或者训练结束，在每个batch训练开始或者训练结束时执行一些操作，例如收集一些日志信息，改变学习率等超参数，提前终止训练过程等等。</p><h3 id="1、内置回调函数"><a href="#1、内置回调函数" class="headerlink" title="1、内置回调函数"></a>1、内置回调函数</h3><ul><li><code>BaseLogger</code>： 收集每个epoch上metrics在各个batch上的平均值，对stateful_metrics参数中的带中间状态的指标直接拿最终值无需对各个batch平均，指标均值结果将添加到logs变量中。该回调函数被所有模型默认添加，且是第一个被添加的。</li><li><code>History</code>： 将BaseLogger计算的各个epoch的metrics结果记录到history这个dict变量中，并作为model.fit的返回值。该回调函数被所有模型默认添加，在BaseLogger之后被添加。</li><li><code>EarlyStopping</code>： 当被监控指标在设定的若干个epoch后没有提升，则提前终止训练。</li><li><code>TensorBoard</code>： 为Tensorboard可视化保存日志信息。支持评估指标，计算图，模型参数等的可视化。</li><li><code>ModelCheckpoint</code>： 在每个epoch后保存模型。</li><li><code>ReduceLROnPlateau</code>：如果监控指标在设定的若干个epoch后没有提升，则以一定的因子减少学习率。</li><li><code>TerminateOnNaN</code>：如果遇到loss为NaN，提前终止训练。</li><li><code>LearningRateScheduler</code>：学习率控制器。给定学习率lr和epoch的函数关系，根据该函数关系在每个epoch前调整学习率。</li><li><code>CSVLogger</code>：将每个epoch后的logs结果记录到CSV文件中。</li><li><code>ProgbarLogger</code>：将每个epoch后的logs结果打印到标准输出流中。</li></ul><h3 id="2、自定义回调函数"><a href="#2、自定义回调函数" class="headerlink" title="2、自定义回调函数"></a>2、自定义回调函数</h3><p><strong>可以使用<code>callbacks.LambdaCallback</code>编写较为简单的回调函数，也可以通过对<code>callbacks.Callback</code>子类化编写更加复杂的回调函数逻辑。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TensorFlow2.X学习笔记(6)--TensorFlow中阶API之特征列、激活函数、模型层</title>
      <link href="/2020/05/06/TensorFlow2-X%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-6-TensorFlow%E4%B8%AD%E9%98%B6API%E4%B9%8B%E7%89%B9%E5%BE%81%E5%88%97%E3%80%81%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%E3%80%81%E6%A8%A1%E5%9E%8B%E5%B1%82/"/>
      <url>/2020/05/06/TensorFlow2-X%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-6-TensorFlow%E4%B8%AD%E9%98%B6API%E4%B9%8B%E7%89%B9%E5%BE%81%E5%88%97%E3%80%81%E6%BF%80%E6%B4%BB%E5%87%BD%E6%95%B0%E3%80%81%E6%A8%A1%E5%9E%8B%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="一、特征列feature-column"><a href="#一、特征列feature-column" class="headerlink" title="一、特征列feature_column"></a>一、特征列feature_column</h2><p><strong>特征列</strong>通常用于对结构化数据实施特征工程时候使用，图像或者文本数据一般不会用到特征列。使用特征列可以将类别特征转换为one-hot编码特征，将连续特征构建分桶特征，以及对多个特征生成交叉特征等等。</p><p><img src="https://ae01.alicdn.com/kf/H4620790c4c0747b9831a51822c0361ffi.jpg"></p><p><strong>注意：所有的Catogorical Column类型最终都要通过indicator_column转换成Dense Column类型才能传入模型！</strong></p><ul><li><code>numeric_column</code> 数值列，最常用。</li><li><code>bucketized_column</code> 分桶列，由数值列生成，可以由一个数值列出多个特征，one-hot编码。</li><li><code>categorical_column_with_identity</code> 分类标识列，one-hot编码，相当于分桶列每个桶为1个整数的情况。</li><li><code>categorical_column_with_vocabulary_list</code> 分类词汇列，one-hot编码，由list指定词典。</li><li><code>categorical_column_with_vocabulary_file</code> 分类词汇列，由文件file指定词典。</li><li><code>categorical_column_with_hash_bucket</code> 哈希列，整数或词典较大时采用。</li><li><code>indicator_column</code> 指标列，由Categorical Column生成，one-hot编码</li><li><code>embedding_column</code> 嵌入列，由Categorical Column生成，嵌入矢量分布参数需要学习。嵌入矢量维数建议取类别数量的 4 次方根。</li><li><code>crossed_column</code> 交叉列，可以由除categorical_column_with_hash_bucket的任意分类列构成。</li></ul><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#================================================================================</span></span><br><span class="line"><span class="comment"># 二，定义特征列</span></span><br><span class="line"><span class="comment">#================================================================================</span></span><br><span class="line">printlog(<span class="string">&quot;step2: make feature columns...&quot;</span>)</span><br><span class="line"></span><br><span class="line">feature_columns = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数值列</span></span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> [<span class="string">&#x27;age&#x27;</span>,<span class="string">&#x27;fare&#x27;</span>,<span class="string">&#x27;parch&#x27;</span>,<span class="string">&#x27;sibsp&#x27;</span>] + [</span><br><span class="line">    c <span class="keyword">for</span> c <span class="keyword">in</span> dfdata.columns <span class="keyword">if</span> c.endswith(<span class="string">&#x27;_nan&#x27;</span>)]:</span><br><span class="line">    feature_columns.append(tf.feature_column.numeric_column(col))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分桶列</span></span><br><span class="line">age = tf.feature_column.numeric_column(<span class="string">&#x27;age&#x27;</span>)</span><br><span class="line">age_buckets = tf.feature_column.bucketized_column(age, </span><br><span class="line">             boundaries=[<span class="number">18</span>, <span class="number">25</span>, <span class="number">30</span>, <span class="number">35</span>, <span class="number">40</span>, <span class="number">45</span>, <span class="number">50</span>, <span class="number">55</span>, <span class="number">60</span>, <span class="number">65</span>])</span><br><span class="line">feature_columns.append(age_buckets)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 类别列</span></span><br><span class="line"><span class="comment"># 注意：所有的Catogorical Column类型最终都要通过indicator_column转换成Dense Column类型才能传入模型！！</span></span><br><span class="line">sex = tf.feature_column.indicator_column(</span><br><span class="line">      tf.feature_column.categorical_column_with_vocabulary_list(</span><br><span class="line">      key=<span class="string">&#x27;sex&#x27;</span>,vocabulary_list=[<span class="string">&quot;male&quot;</span>, <span class="string">&quot;female&quot;</span>]))</span><br><span class="line">feature_columns.append(sex)</span><br><span class="line"></span><br><span class="line">pclass = tf.feature_column.indicator_column(</span><br><span class="line">      tf.feature_column.categorical_column_with_vocabulary_list(</span><br><span class="line">      key=<span class="string">&#x27;pclass&#x27;</span>,vocabulary_list=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]))</span><br><span class="line">feature_columns.append(pclass)</span><br><span class="line"></span><br><span class="line">ticket = tf.feature_column.indicator_column(</span><br><span class="line">     tf.feature_column.categorical_column_with_hash_bucket(<span class="string">&#x27;ticket&#x27;</span>,<span class="number">3</span>))</span><br><span class="line">feature_columns.append(ticket)</span><br><span class="line"></span><br><span class="line">embarked = tf.feature_column.indicator_column(</span><br><span class="line">      tf.feature_column.categorical_column_with_vocabulary_list(</span><br><span class="line">      key=<span class="string">&#x27;embarked&#x27;</span>,vocabulary_list=[<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;B&#x27;</span>]))</span><br><span class="line">feature_columns.append(embarked)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 嵌入列</span></span><br><span class="line">cabin = tf.feature_column.embedding_column(</span><br><span class="line">    tf.feature_column.categorical_column_with_hash_bucket(<span class="string">&#x27;cabin&#x27;</span>,<span class="number">32</span>),<span class="number">2</span>)</span><br><span class="line">feature_columns.append(cabin)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交叉列</span></span><br><span class="line">pclass_cate = tf.feature_column.categorical_column_with_vocabulary_list(</span><br><span class="line">          key=<span class="string">&#x27;pclass&#x27;</span>,vocabulary_list=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">crossed_feature = tf.feature_column.indicator_column(</span><br><span class="line">    tf.feature_column.crossed_column([age_buckets, pclass_cate],hash_bucket_size=<span class="number">15</span>))</span><br><span class="line"></span><br><span class="line">feature_columns.append(crossed_feature)</span><br></pre></td></tr></table></figure><h2 id="二、常用激活函数"><a href="#二、常用激活函数" class="headerlink" title="二、常用激活函数"></a>二、常用激活函数</h2><ul><li><code>tf.nn.sigmoid</code>：<strong>将实数压缩到0到1之间，一般只在二分类的最后输出层使用。主要缺陷为存在梯度消失问题，计算复杂度高，输出不以0为中心。</strong></li></ul><p><img src="https://ae01.alicdn.com/kf/Hec0591aab2694376abed7d4a04b22ee6m.jpg"></p><ul><li><code>tf.nn.softmax</code>：<strong>sigmoid的多分类扩展，一般只在多分类问题的最后输出层使用。</strong></li></ul><p><img src="https://ae01.alicdn.com/kf/H7714e766763444f98ea732a0fb608ae8g.jpg"></p><ul><li><code>tf.nn.tanh</code>：<strong>将实数压缩到-1到1之间，输出期望为0。主要缺陷为存在梯度消失问题，计算复杂度高。</strong></li></ul><p><img src="https://ae01.alicdn.com/kf/H18cb479a89fd43b39a119e18c1084c4dA.jpg"></p><ul><li><code>tf.nn.relu</code>：<strong>修正线性单元，最流行的激活函数。一般隐藏层使用。主要缺陷是：输出不以0为中心，输入小于0时存在梯度消失问题(死亡relu)。</strong></li></ul><p><img src="https://ae01.alicdn.com/kf/Heda2eb461b334151b85403f2bc841898A.jpg"></p><ul><li><code>tf.nn.leaky_relu</code>：<strong>对修正线性单元（relu）的改进，解决了死亡relu问题</strong>。</li></ul><p><img src="https://ae01.alicdn.com/kf/H2f91cf2e243546c993f5bd2bdd07acf3L.jpg"></p><ul><li><code>tf.nn.elu</code>：<strong>指数线性单元。对relu的改进，能够缓解死亡relu问题。</strong></li></ul><p><img src="https://ae01.alicdn.com/kf/H709db342edb048dbbf8ae1b1567c2fa0J.jpg"></p><ul><li><code>tf.nn.selu</code>：<strong>扩展型指数线性单元。在权重用<code>tf.keras.initializers.lecun_normal</code>初始化前提下能够对神经网络进行自归一化。不可能出现梯度爆炸或者梯度消失问题。需要和Dropout的变种AlphaDropout一起使用。</strong></li></ul><p><img src="https://ae01.alicdn.com/kf/H09d0dcf100f34a0984ee5d7b11c9cba8m.jpg"></p><ul><li><code>tf.nn.swish</code>：<strong>自门控激活函数。谷歌出品，相关研究指出用swish替代relu将获得轻微效果提升。</strong></li></ul><p><img src="https://ae01.alicdn.com/kf/H6ac78612fb9e4fe299be63a219f29e62A.jpg"></p><ul><li>gelu：<strong>高斯误差线性单元激活函数。在Transformer中表现最好。tf.nn模块尚没有实现该函数</strong>。</li></ul><p><img src="https://ae01.alicdn.com/kf/Hed15868919324758b0d326f7d68eaed4T.jpg"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> layers,models</span><br><span class="line"></span><br><span class="line">tf.keras.backend.clear_session()</span><br><span class="line"></span><br><span class="line">model = models.Sequential()</span><br><span class="line"><span class="comment"># 通过 activation参数指定</span></span><br><span class="line">model.add(layers.Dense(<span class="number">32</span>,input_shape = (<span class="literal">None</span>,<span class="number">16</span>),activation = tf.nn.relu)) </span><br><span class="line"></span><br><span class="line">model.add(layers.Dense(<span class="number">10</span>))</span><br><span class="line">model.add(layers.Activation(tf.nn.softmax))  <span class="comment"># 显式添加layers.Activation激活层</span></span><br><span class="line">model.summary()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果：</span></span><br><span class="line">Model: <span class="string">&quot;sequential&quot;</span></span><br><span class="line">_________________________________________________________________</span><br><span class="line">Layer (<span class="built_in">type</span>)                 Output Shape              Param <span class="comment">#   </span></span><br><span class="line">=================================================================</span><br><span class="line">dense (Dense)                (<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">32</span>)          <span class="number">544</span>       </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense_1 (Dense)              (<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">10</span>)          <span class="number">330</span>       </span><br><span class="line">_________________________________________________________________</span><br><span class="line">activation (Activation)      (<span class="literal">None</span>, <span class="literal">None</span>, <span class="number">10</span>)          <span class="number">0</span>         </span><br><span class="line">=================================================================</span><br><span class="line">Total params: <span class="number">874</span></span><br><span class="line">Trainable params: <span class="number">874</span></span><br><span class="line">Non-trainable params: <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="三、模型层"><a href="#三、模型层" class="headerlink" title="三、模型层"></a>三、模型层</h2><h3 id="1、内置模型层"><a href="#1、内置模型层" class="headerlink" title="1、内置模型层"></a>1、内置模型层</h3><h4 id="基础层"><a href="#基础层" class="headerlink" title="基础层"></a><strong>基础层</strong></h4><ul><li><code>Dense</code>：密集连接层。参数个数 = 输入层特征数× 输出层特征数(weight)＋ 输出层特征数(bias)</li><li><code>Activation</code>：激活函数层。一般放在Dense层后面，等价于在Dense层中指定activation。</li><li><code>Dropout</code>：随机置零层。训练期间以一定几率将输入置0，一种正则化手段。</li><li><code>BatchNormalization</code>：批标准化层。通过线性变换将输入批次缩放平移到稳定的均值和标准差。可以增强模型对输入不同分布的适应性，加快模型训练速度，有轻微正则化效果。一般在激活函数之前使用。</li><li><code>SpatialDropout2D</code>：空间随机置零层。训练期间以一定几率将整个特征图置0，一种正则化手段，有利于避免特征图之间过高的相关性。</li><li><code>Input</code>：输入层。通常使用Functional API方式构建模型时作为第一层。</li><li><code>DenseFeature</code>：特征列接入层，用于接收一个特征列列表并产生一个密集连接层。</li><li><code>Flatten</code>：压平层，用于将多维张量压成一维。</li><li><code>Reshape</code>：形状重塑层，改变输入张量的形状。</li><li><code>Concatenate</code>：拼接层，将多个张量在某个维度上拼接。</li><li><code>Add</code>：加法层。</li><li><code>Subtract</code>： 减法层。</li><li><code>Maximum</code>：取最大值层。</li><li><code>Minimum</code>：取最小值层。</li></ul><h4 id="卷积网络相关层"><a href="#卷积网络相关层" class="headerlink" title="卷积网络相关层"></a><strong>卷积网络相关层</strong></h4><ul><li><code>Conv1D</code>：普通一维卷积，常用于文本。参数个数 = 输入通道数×卷积核尺寸(如3)×卷积核个数</li><li><code>Conv2D</code>：普通二维卷积，常用于图像。参数个数 = 输入通道数×卷积核尺寸(如3乘3)×卷积核个数</li><li><code>Conv3D</code>：普通三维卷积，常用于视频。参数个数 = 输入通道数×卷积核尺寸(如3乘3乘3)×卷积核个数</li><li><code>SeparableConv2D</code>：二维深度可分离卷积层。不同于普通卷积同时对区域和通道操作，深度可分离卷积先操作区域，再操作通道。即先对每个通道做独立卷即先操作区域，再用1乘1卷积跨通道组合即再操作通道。参数个数 = 输入通道数×卷积核尺寸 + 输入通道数×1×1×输出通道数。深度可分离卷积的参数数量一般远小于普通卷积，效果一般也更好。</li><li><code>DepthwiseConv2D</code>：二维深度卷积层。仅有SeparableConv2D前半部分操作，即只操作区域，不操作通道，一般输出通道数和输入通道数相同，但也可以通过设置depth_multiplier让输出通道为输入通道的若干倍数。输出通道数 = 输入通道数 × depth_multiplier。参数个数 = 输入通道数×卷积核尺寸× depth_multiplier。</li><li><code>Conv2DTranspose</code>：二维卷积转置层，俗称反卷积层。并非卷积的逆操作，但在卷积核相同的情况下，当其输入尺寸是卷积操作输出尺寸的情况下，卷积转置的输出尺寸恰好是卷积操作的输入尺寸。</li><li><code>LocallyConnected2D</code>: 二维局部连接层。类似Conv2D，唯一的差别是没有空间上的权值共享，所以其参数个数远高于二维卷积。</li><li><code>MaxPooling2D</code>: 二维最大池化层。也称作下采样层。池化层无参数，主要作用是降维。</li><li><code>AveragePooling2D</code>: 二维平均池化层。</li><li><code>GlobalMaxPool2D</code>: 全局最大池化层。每个通道仅保留一个值。一般从卷积层过渡到全连接层时使用，是Flatten的替代方案。</li><li><code>GlobalAvgPool2D</code>: 全局平均池化层。每个通道仅保留一个值。</li></ul><h4 id="循环网络相关层"><a href="#循环网络相关层" class="headerlink" title="循环网络相关层"></a><strong>循环网络相关层</strong></h4><ul><li><p><code>Embedding</code>：嵌入层。一种比Onehot更加有效的对离散特征进行编码的方法。一般用于将输入中的单词映射为稠密向量。嵌入层的参数需要学习。</p></li><li><p><code>LSTM</code>：长短记忆循环网络层。最普遍使用的循环网络层。具有携带轨道，遗忘门，更新门，输出门。可以较为有效地缓解梯度消失问题，从而能够适用长期依赖问题。设置return_sequences = True时可以返回各个中间步骤输出，否则只返回最终输出。</p></li><li><p><code>GRU</code>：门控循环网络层。LSTM的低配版，不具有携带轨道，参数数量少于LSTM，训练速度更快。</p></li><li><p><code>SimpleRNN</code>：简单循环网络层。容易存在梯度消失，不能够适用长期依赖问题。一般较少使用。</p></li><li><p><code>ConvLSTM2D</code>：卷积长短记忆循环网络层。结构上类似LSTM，但对输入的转换操作和对状态的转换操作都是卷积运算。</p></li><li><p><code>Bidirectional</code>：双向循环网络包装器。可以将LSTM，GRU等层包装成双向循环网络。从而增强特征提取能力。</p></li><li><p><code>RNN</code>：RNN基本层。接受一个循环网络单元或一个循环单元列表，通过调用tf.keras.backend.rnn函数在序列上进行迭代从而转换成循环网络层。</p></li><li><p><code>LSTMCell</code>：LSTM单元。和LSTM在整个序列上迭代相比，它仅在序列上迭代一步。可以简单理解LSTM即RNN基本层包裹LSTMCell。</p></li><li><p><code>GRUCell</code>：GRU单元。和GRU在整个序列上迭代相比，它仅在序列上迭代一步。</p></li><li><p><code>SimpleRNNCell</code>：SimpleRNN单元。和SimpleRNN在整个序列上迭代相比，它仅在序列上迭代一步。</p></li><li><p><code>AbstractRNNCell</code>：抽象RNN单元。通过对它的子类化用户可以自定义RNN单元，再通过RNN基本层的包裹实现用户自定义循环网络层。</p></li><li><p><code>Attention</code>：Dot-product类型注意力机制层。可以用于构建注意力模型。</p></li><li><p><code>AdditiveAttention</code>：Additive类型注意力机制层。可以用于构建注意力模型。</p></li><li><p><code>TimeDistributed</code>：时间分布包装器。包装后可以将Dense、Conv2D等作用到每一个时间片段上。</p></li></ul><h3 id="2、自定义模型层"><a href="#2、自定义模型层" class="headerlink" title="2、自定义模型层"></a>2、自定义模型层</h3><ul><li><p><strong>如果自定义模型层没有需要被训练的参数，一般推荐使用<code>Lamda</code>层实现。</strong></p></li><li><p><strong>如果自定义模型层有需要被训练的参数，则可以通过对<code>Layer</code>基类子类化实现。</strong></p></li></ul><h4 id="Lamda层"><a href="#Lamda层" class="headerlink" title="Lamda层"></a>Lamda层</h4><p>Lamda层由于没有需要被训练的参数，只需要定义正向传播逻辑即可，使用比Layer基类子类化更加简单。</p><p>Lamda层的正向逻辑可以使用Python的lambda函数来表达，也可以用def关键字定义函数来表达。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> layers,models,regularizers</span><br><span class="line"></span><br><span class="line">mypower = layers.Lambda(<span class="keyword">lambda</span> x:tf.math.<span class="built_in">pow</span>(x,<span class="number">2</span>))</span><br><span class="line">mypower(tf.<span class="built_in">range</span>(<span class="number">5</span>))</span><br></pre></td></tr></table></figure><h4 id="Layer层"><a href="#Layer层" class="headerlink" title="Layer层"></a>Layer层</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Linear</span>(<span class="params">layers.Layer</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, units=<span class="number">32</span>, **kwargs</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(Linear, self).__init__(**kwargs)</span><br><span class="line">        self.units = units</span><br><span class="line"></span><br><span class="line">    <span class="comment">#build方法一般定义Layer需要被训练的参数。    </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span>(<span class="params">self, input_shape</span>):</span> </span><br><span class="line">        self.w = self.add_weight(shape=(input_shape[-<span class="number">1</span>], self.units),</span><br><span class="line">                                 initializer=<span class="string">&#x27;random_normal&#x27;</span>,</span><br><span class="line">                                 trainable=<span class="literal">True</span>)</span><br><span class="line">        self.b = self.add_weight(shape=(self.units,),</span><br><span class="line">                                 initializer=<span class="string">&#x27;random_normal&#x27;</span>,</span><br><span class="line">                                 trainable=<span class="literal">True</span>)</span><br><span class="line">        <span class="built_in">super</span>(Linear,self).build(input_shape) <span class="comment"># 相当于设置self.built = True</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#call方法一般定义正向传播运算逻辑，__call__方法调用了它。    </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span>(<span class="params">self, inputs</span>):</span> </span><br><span class="line">        <span class="keyword">return</span> tf.matmul(inputs, self.w) + self.b</span><br><span class="line"></span><br><span class="line">    <span class="comment">#如果要让自定义的Layer通过Functional API 组合成模型时可以序列化，需要自定义get_config方法。</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_config</span>(<span class="params">self</span>):</span>  </span><br><span class="line">        config = <span class="built_in">super</span>(Linear, self).get_config()</span><br><span class="line">        config.update(&#123;<span class="string">&#x27;units&#x27;</span>: self.units&#125;)</span><br><span class="line">        <span class="keyword">return</span> config</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">linear = Linear(units = <span class="number">8</span>)</span><br><span class="line"><span class="built_in">print</span>(linear.built)</span><br><span class="line"><span class="comment">#指定input_shape，显式调用build方法，第0维代表样本数量，用None填充</span></span><br><span class="line">linear.build(input_shape = (<span class="literal">None</span>,<span class="number">16</span>)) </span><br><span class="line"><span class="built_in">print</span>(linear.built)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">linear = Linear(units = <span class="number">16</span>)</span><br><span class="line"><span class="built_in">print</span>(linear.built)</span><br><span class="line"><span class="comment">#如果built = False，调用__call__时会先调用build方法, 再调用call方法。</span></span><br><span class="line">linear(tf.random.uniform((<span class="number">100</span>,<span class="number">64</span>))) </span><br><span class="line"><span class="built_in">print</span>(linear.built)</span><br><span class="line">config = linear.get_config()</span><br><span class="line"><span class="built_in">print</span>(config)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">tf.keras.backend.clear_session()</span><br><span class="line"></span><br><span class="line">model = models.Sequential()</span><br><span class="line"><span class="comment">#注意该处的input_shape会被模型加工，无需使用None代表样本数量维</span></span><br><span class="line">model.add(Linear(units = <span class="number">16</span>,input_shape = (<span class="number">64</span>,)))  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;model.input_shape: &quot;</span>,model.input_shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;model.output_shape: &quot;</span>,model.output_shape)</span><br><span class="line">model.summary()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果：</span></span><br><span class="line">model.input_shape:  (<span class="literal">None</span>, <span class="number">64</span>)</span><br><span class="line">model.output_shape:  (<span class="literal">None</span>, <span class="number">16</span>)</span><br><span class="line">Model: <span class="string">&quot;sequential&quot;</span></span><br><span class="line">_________________________________________________________________</span><br><span class="line">Layer (<span class="built_in">type</span>)                 Output Shape              Param <span class="comment">#   </span></span><br><span class="line">=================================================================</span><br><span class="line">linear (Linear)              (<span class="literal">None</span>, <span class="number">16</span>)                <span class="number">1040</span>      </span><br><span class="line">=================================================================</span><br><span class="line">Total params: <span class="number">1</span>,040</span><br><span class="line">Trainable params: <span class="number">1</span>,040</span><br><span class="line">Non-trainable params: <span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TensorFlow2.X学习笔记(5)--TensorFlow中阶API之数据管道</title>
      <link href="/2020/05/03/TensorFlow2-X%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-5-TensorFlow%E4%B8%AD%E9%98%B6API%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%AE%A1%E9%81%93/"/>
      <url>/2020/05/03/TensorFlow2-X%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-5-TensorFlow%E4%B8%AD%E9%98%B6API%E4%B9%8B%E6%95%B0%E6%8D%AE%E7%AE%A1%E9%81%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="TensorFlow的中阶API"><a href="#TensorFlow的中阶API" class="headerlink" title="TensorFlow的中阶API"></a>TensorFlow的中阶API</h1><h2 id="【模型之墙】"><a href="#【模型之墙】" class="headerlink" title="【模型之墙】"></a>【模型之墙】</h2><p>TensorFlow的中阶API主要包括:</p><ul><li>数据管道(tf.data)</li><li>特征列(tf.feature_column)</li><li>激活函数(tf.nn)</li><li>模型层(tf.keras.layers)</li><li>损失函数(tf.keras.losses)</li><li>评估函数(tf.keras.metrics)</li><li>优化器(tf.keras.optimizers)</li><li>回调函数(tf.keras.callbacks)</li></ul><h2 id="一、数据管道Dataset"><a href="#一、数据管道Dataset" class="headerlink" title="一、数据管道Dataset"></a>一、数据管道Dataset</h2><blockquote><p>使用 <code>tf.data</code> API 可以构建数据输入管道，轻松处理大量的数据，不同的数据格式，以及不同的数据转换。</p></blockquote><blockquote><p>使用<code>tfrecoreds</code>文件的优点是压缩后文件较小，便于网络传播，加载速度较快。</p></blockquote><h3 id="1、从Numpy-array构建数据管道"><a href="#1、从Numpy-array构建数据管道" class="headerlink" title="1、从Numpy array构建数据管道"></a>1、从Numpy array构建数据管道</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从Numpy array构建数据管道</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets </span><br><span class="line">iris = datasets.load_iris()</span><br><span class="line"></span><br><span class="line">ds1 = tf.data.Dataset.from_tensor_slices((iris[<span class="string">&quot;data&quot;</span>],iris[<span class="string">&quot;target&quot;</span>]))</span><br><span class="line"><span class="keyword">for</span> features,label <span class="keyword">in</span> ds1.take(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(features,label)</span><br></pre></td></tr></table></figure><h3 id="2、从-Pandas-DataFrame构建数据管道"><a href="#2、从-Pandas-DataFrame构建数据管道" class="headerlink" title="2、从 Pandas DataFrame构建数据管道"></a>2、从 Pandas DataFrame构建数据管道</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从 Pandas DataFrame构建数据管道</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets </span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">iris = datasets.load_iris()</span><br><span class="line">dfiris = pd.DataFrame(iris[<span class="string">&quot;data&quot;</span>],columns = iris.feature_names)</span><br><span class="line">ds2 = tf.data.Dataset.from_tensor_slices((dfiris.to_dict(<span class="string">&quot;list&quot;</span>),iris[<span class="string">&quot;target&quot;</span>]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> features,label <span class="keyword">in</span> ds2.take(<span class="number">3</span>):</span><br><span class="line">    <span class="built_in">print</span>(features,label)</span><br></pre></td></tr></table></figure><h3 id="3、从Python-generator构建数据管道"><a href="#3、从Python-generator构建数据管道" class="headerlink" title="3、从Python generator构建数据管道"></a>3、从Python generator构建数据管道</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从Python generator构建数据管道</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt </span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.preprocessing.image <span class="keyword">import</span> ImageDataGenerator</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个从文件中读取图片的generator</span></span><br><span class="line">image_generator = ImageDataGenerator(rescale=<span class="number">1.0</span>/<span class="number">255</span>).flow_from_directory(</span><br><span class="line">                    <span class="string">&quot;./data/cifar2/test/&quot;</span>,</span><br><span class="line">                    target_size=(<span class="number">32</span>, <span class="number">32</span>),</span><br><span class="line">                    batch_size=<span class="number">20</span>,</span><br><span class="line">                    class_mode=<span class="string">&#x27;binary&#x27;</span>)</span><br><span class="line"></span><br><span class="line">classdict = image_generator.class_indices</span><br><span class="line"><span class="built_in">print</span>(classdict)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generator</span>():</span></span><br><span class="line">    <span class="keyword">for</span> features,label <span class="keyword">in</span> image_generator:</span><br><span class="line">        <span class="keyword">yield</span> (features,label)</span><br><span class="line"></span><br><span class="line">ds3 = tf.data.Dataset.from_generator(generator,output_types=(tf.float32,tf.int32))</span><br></pre></td></tr></table></figure><h3 id="4、从csv文件构建数据管道"><a href="#4、从csv文件构建数据管道" class="headerlink" title="4、从csv文件构建数据管道"></a>4、从csv文件构建数据管道</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从csv文件构建数据管道</span></span><br><span class="line">ds4 = tf.data.experimental.make_csv_dataset(</span><br><span class="line">      file_pattern = [<span class="string">&quot;./data/titanic/train.csv&quot;</span>,<span class="string">&quot;./data/titanic/test.csv&quot;</span>],</span><br><span class="line">      batch_size=<span class="number">3</span>, </span><br><span class="line">      label_name=<span class="string">&quot;Survived&quot;</span>,</span><br><span class="line">      na_value=<span class="string">&quot;&quot;</span>,</span><br><span class="line">      num_epochs=<span class="number">1</span>,</span><br><span class="line">      ignore_errors=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> data,label <span class="keyword">in</span> ds4.take(<span class="number">2</span>):</span><br><span class="line">    <span class="built_in">print</span>(data,label)</span><br></pre></td></tr></table></figure><h3 id="5、从文本文件构建数据管道"><a href="#5、从文本文件构建数据管道" class="headerlink" title="5、从文本文件构建数据管道"></a>5、从文本文件构建数据管道</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从文本文件构建数据管道</span></span><br><span class="line">ds5 = tf.data.TextLineDataset(</span><br><span class="line">    filenames = [<span class="string">&quot;./data/titanic/train.csv&quot;</span>,<span class="string">&quot;./data/titanic/test.csv&quot;</span>]</span><br><span class="line">    ).skip(<span class="number">1</span>) <span class="comment">#略去第一行header</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> ds5.take(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br></pre></td></tr></table></figure><h3 id="6、从文件路径构建数据管道"><a href="#6、从文件路径构建数据管道" class="headerlink" title="6、从文件路径构建数据管道"></a>6、从文件路径构建数据管道</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ds6 = tf.data.Dataset.list_files(<span class="string">&quot;./data/cifar2/train/*/*.jpg&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> ds6.take(<span class="number">5</span>):</span><br><span class="line">    <span class="built_in">print</span>(file)</span><br></pre></td></tr></table></figure><h3 id="7、从tfrecords文件构建数据管道"><a href="#7、从tfrecords文件构建数据管道" class="headerlink" title="7、从tfrecords文件构建数据管道"></a>7、从tfrecords文件构建数据管道</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># inpath：原始数据路径 outpath:TFRecord文件输出路径</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_tfrecords</span>(<span class="params">inpath,outpath</span>):</span> </span><br><span class="line">    writer = tf.io.TFRecordWriter(outpath)</span><br><span class="line">    dirs = os.listdir(inpath)</span><br><span class="line">    <span class="keyword">for</span> index, name <span class="keyword">in</span> <span class="built_in">enumerate</span>(dirs):</span><br><span class="line">        class_path = inpath +<span class="string">&quot;/&quot;</span>+ name+<span class="string">&quot;/&quot;</span></span><br><span class="line">        <span class="keyword">for</span> img_name <span class="keyword">in</span> os.listdir(class_path):</span><br><span class="line">            img_path = class_path + img_name</span><br><span class="line">            img = tf.io.read_file(img_path)</span><br><span class="line">            <span class="comment">#img = tf.image.decode_image(img)</span></span><br><span class="line">            <span class="comment">#img = tf.image.encode_jpeg(img) #统一成jpeg格式压缩</span></span><br><span class="line">            example = tf.train.Example(</span><br><span class="line">               features=tf.train.Features(feature=&#123;</span><br><span class="line">                    <span class="string">&#x27;label&#x27;</span>: tf.train.Feature(int64_list=tf.train.Int64List(value=[index])),</span><br><span class="line">                    <span class="string">&#x27;img_raw&#x27;</span>: tf.train.Feature(bytes_list=tf.train.BytesList(value=[img.numpy()]))</span><br><span class="line">               &#125;))</span><br><span class="line">            writer.write(example.SerializeToString())</span><br><span class="line">    writer.close()</span><br><span class="line"><span class="comment"># 将数据打包成tfrecord文件</span></span><br><span class="line">create_tfrecords(<span class="string">&quot;./data/cifar2/test/&quot;</span>,<span class="string">&quot;./data/cifar2_test.tfrecords/&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_example</span>(<span class="params">proto</span>):</span></span><br><span class="line">    description =&#123; <span class="string">&#x27;img_raw&#x27;</span> : tf.io.FixedLenFeature([], tf.string),</span><br><span class="line">                   <span class="string">&#x27;label&#x27;</span>: tf.io.FixedLenFeature([], tf.int64)&#125; </span><br><span class="line">    example = tf.io.parse_single_example(proto, description)</span><br><span class="line">    img = tf.image.decode_jpeg(example[<span class="string">&quot;img_raw&quot;</span>])   <span class="comment">#注意此处为jpeg格式</span></span><br><span class="line">    img = tf.image.resize(img, (<span class="number">32</span>,<span class="number">32</span>))</span><br><span class="line">    label = example[<span class="string">&quot;label&quot;</span>]</span><br><span class="line">    <span class="keyword">return</span>(img,label)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取tfrecord文件</span></span><br><span class="line">ds7 = tf.data.TFRecordDataset(<span class="string">&quot;./data/cifar2_test.tfrecords&quot;</span>).<span class="built_in">map</span>(parse_example).shuffle(<span class="number">3000</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二、应用数据转换"><a href="#二、应用数据转换" class="headerlink" title="二、应用数据转换"></a>二、应用数据转换</h2><p><strong>Dataset</strong>数据结构应用非常灵活，因为它本质上是一个Sequece序列，其每个元素可以是各种类型，例如可以是<strong>张量，列表，字典，也可以是Dataset。</strong></p><p>Dataset包含了非常丰富的数据转换功能。</p><ul><li><p><code>map</code>: 将转换函数映射到数据集每一个元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#map:将转换函数映射到数据集每一个元素</span></span><br><span class="line">ds = tf.data.Dataset.from_tensor_slices([<span class="string">&quot;hello world&quot;</span>,<span class="string">&quot;hello China&quot;</span>,<span class="string">&quot;hello Beijing&quot;</span>])</span><br><span class="line">ds_map = ds.<span class="built_in">map</span>(<span class="keyword">lambda</span> x:tf.strings.split(x,<span class="string">&quot; &quot;</span>))</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> ds_map:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure></li><li><p><code>flat_map</code>: 将转换函数映射到数据集的每一个元素，并将嵌套的Dataset压平。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ds = tf.data.Dataset.from_tensor_slices([<span class="string">&quot;hello world&quot;</span>,<span class="string">&quot;hello China&quot;</span>,<span class="string">&quot;hello Beijing&quot;</span>])</span><br><span class="line">ds_flatmap = ds.flat_map(<span class="keyword">lambda</span> x:tf.data.Dataset</span><br><span class="line">                         .from_tensor_slices(tf.strings.split(x,<span class="string">&quot; &quot;</span>)))</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> ds_flatmap:</span><br><span class="line">    tf.<span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果：</span></span><br><span class="line">    hello</span><br><span class="line">    world</span><br><span class="line">    hello</span><br><span class="line">    China</span><br><span class="line">    hello</span><br><span class="line">    Beijing</span><br></pre></td></tr></table></figure></li><li><p><code>interleave</code>: 效果类似flat_map,但可以将不同来源的数据夹在一起。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ds = tf.data.Dataset.from_tensor_slices([<span class="string">&quot;hello world&quot;</span>,<span class="string">&quot;hello China&quot;</span>,<span class="string">&quot;hello Beijing&quot;</span>])</span><br><span class="line">ds_interleave = ds.interleave(<span class="keyword">lambda</span> x:tf.data.Dataset.from_tensor_slices(tf.strings.split(x,<span class="string">&quot; &quot;</span>)))</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> ds_interleave:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">    tf.Tensor(<span class="string">b&#x27;hello&#x27;</span>, shape=(), dtype=string)</span><br><span class="line">    tf.Tensor(<span class="string">b&#x27;hello&#x27;</span>, shape=(), dtype=string)</span><br><span class="line">    tf.Tensor(<span class="string">b&#x27;hello&#x27;</span>, shape=(), dtype=string)</span><br><span class="line">    tf.Tensor(<span class="string">b&#x27;world&#x27;</span>, shape=(), dtype=string)</span><br><span class="line">    tf.Tensor(<span class="string">b&#x27;China&#x27;</span>, shape=(), dtype=string)</span><br><span class="line">    tf.Tensor(<span class="string">b&#x27;Beijing&#x27;</span>, shape=(), dtype=string)</span><br></pre></td></tr></table></figure></li><li><p><code>filter</code>: 过滤掉某些元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#找出含有字母a或B的元素</span></span><br><span class="line">ds_filter = ds.<span class="built_in">filter</span>(<span class="keyword">lambda</span> x: tf.strings.regex_full_match(x, <span class="string">&quot;.*[a|B].*&quot;</span>))</span><br></pre></td></tr></table></figure></li><li><p><code>zip</code>: 将三个长度相同的Dataset横向铰合。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#zip:将三个长度相同的Dataset横向铰合。</span></span><br><span class="line"></span><br><span class="line">ds1 = tf.data.Dataset.<span class="built_in">range</span>(<span class="number">0</span>,<span class="number">3</span>)</span><br><span class="line">ds2 = tf.data.Dataset.<span class="built_in">range</span>(<span class="number">3</span>,<span class="number">6</span>)</span><br><span class="line">ds3 = tf.data.Dataset.<span class="built_in">range</span>(<span class="number">6</span>,<span class="number">9</span>)</span><br><span class="line">ds_zip = tf.data.Dataset.<span class="built_in">zip</span>((ds1,ds2,ds3))</span><br><span class="line"><span class="keyword">for</span> x,y,z <span class="keyword">in</span> ds_zip:</span><br><span class="line">    <span class="built_in">print</span>(x.numpy(),y.numpy(),z.numpy())</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">    <span class="number">0</span> <span class="number">3</span> <span class="number">6</span></span><br><span class="line">    <span class="number">1</span> <span class="number">4</span> <span class="number">7</span></span><br><span class="line">    <span class="number">2</span> <span class="number">5</span> <span class="number">8</span></span><br></pre></td></tr></table></figure></li><li><p><code>concatenate</code>: 将两个Dataset纵向连接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ds1 = tf.data.Dataset.<span class="built_in">range</span>(<span class="number">0</span>,<span class="number">3</span>)</span><br><span class="line">ds2 = tf.data.Dataset.<span class="built_in">range</span>(<span class="number">3</span>,<span class="number">6</span>)</span><br><span class="line">ds_concat = tf.data.Dataset.concatenate(ds1,ds2)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> ds_concat:</span><br><span class="line">    tf.<span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">    <span class="number">0</span></span><br><span class="line">    <span class="number">1</span></span><br><span class="line">    <span class="number">2</span></span><br><span class="line">    <span class="number">3</span></span><br><span class="line">    <span class="number">4</span></span><br><span class="line">    <span class="number">5</span></span><br></pre></td></tr></table></figure></li><li><p><code>reduce</code>: 执行归并操作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ds = tf.data.Dataset.from_tensor_slices([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5.0</span>])</span><br><span class="line">result = ds.reduce(<span class="number">0.0</span>,<span class="keyword">lambda</span> x,y:tf.add(x,y))</span><br><span class="line">tf.<span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line"><span class="number">15</span></span><br></pre></td></tr></table></figure></li><li><p><code>batch</code> : 构建批次，每次放一个批次。比原始数据增加一个维度。 其逆操作为unbatch。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ds = tf.data.Dataset.<span class="built_in">range</span>(<span class="number">12</span>)</span><br><span class="line">ds_batch = ds.batch(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> ds_batch:</span><br><span class="line">    tf.<span class="built_in">print</span>(x)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">    [<span class="number">0</span> <span class="number">1</span> <span class="number">2</span>]</span><br><span class="line">    [<span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line">    [<span class="number">6</span> <span class="number">7</span> <span class="number">8</span>]</span><br><span class="line">    [<span class="number">9</span> <span class="number">10</span> <span class="number">11</span>]</span><br></pre></td></tr></table></figure></li><li><p><code>padded_batch</code>: 构建批次，类似batch, 但可以填充到相同的形状。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">elements = [[<span class="number">1</span>, <span class="number">2</span>],[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],[<span class="number">6</span>, <span class="number">7</span>],[<span class="number">8</span>]]</span><br><span class="line">ds = tf.data.Dataset.from_generator(<span class="keyword">lambda</span>: <span class="built_in">iter</span>(elements), tf.int32)</span><br><span class="line"></span><br><span class="line">ds_padded_batch = ds.padded_batch(<span class="number">2</span>,padded_shapes = [<span class="number">4</span>,])</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> ds_padded_batch:</span><br><span class="line">    tf.<span class="built_in">print</span>(x)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 打印结果：</span></span><br><span class="line">tf.Tensor(</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">0</span>]], shape=(<span class="number">2</span>, <span class="number">4</span>), dtype=int32)</span><br><span class="line">tf.Tensor(</span><br><span class="line">[[<span class="number">6</span> <span class="number">7</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">8</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]], shape=(<span class="number">2</span>, <span class="number">4</span>), dtype=int32)</span><br></pre></td></tr></table></figure></li><li><p><code>window</code> :构建滑动窗口，返回Dataset of Dataset.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ds = tf.data.Dataset.<span class="built_in">range</span>(<span class="number">12</span>)</span><br><span class="line"><span class="comment">#window返回的是Dataset of Dataset,可以用flat_map压平</span></span><br><span class="line">ds_window = ds.window(<span class="number">3</span>, shift=<span class="number">1</span>).flat_map(<span class="keyword">lambda</span> x: x.batch(<span class="number">3</span>,drop_remainder=<span class="literal">True</span>)) </span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> ds_window:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 打印结果：</span></span><br><span class="line">    tf.Tensor([<span class="number">0</span> <span class="number">1</span> <span class="number">2</span>], shape=(<span class="number">3</span>,), dtype=int64)</span><br><span class="line">    tf.Tensor([<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>], shape=(<span class="number">3</span>,), dtype=int64)</span><br><span class="line">    tf.Tensor([<span class="number">2</span> <span class="number">3</span> <span class="number">4</span>], shape=(<span class="number">3</span>,), dtype=int64)</span><br><span class="line">    tf.Tensor([<span class="number">3</span> <span class="number">4</span> <span class="number">5</span>], shape=(<span class="number">3</span>,), dtype=int64)</span><br><span class="line">    tf.Tensor([<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>], shape=(<span class="number">3</span>,), dtype=int64)</span><br></pre></td></tr></table></figure></li><li><p><code>shuffle</code>: 数据顺序洗牌。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ds = tf.data.Dataset.<span class="built_in">range</span>(<span class="number">12</span>)</span><br><span class="line">ds_shuffle = ds.shuffle(buffer_size = <span class="number">5</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> ds_shuffle:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure></li><li><p><code>repeat</code>: 重复数据若干次，不带参数时，重复无数次。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ds = tf.data.Dataset.<span class="built_in">range</span>(<span class="number">3</span>)</span><br><span class="line">ds_repeat = ds.repeat(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> ds_repeat:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 打印结果：</span></span><br><span class="line">tf.Tensor(<span class="number">0</span>, shape=(), dtype=int64)</span><br><span class="line">tf.Tensor(<span class="number">1</span>, shape=(), dtype=int64)</span><br><span class="line">tf.Tensor(<span class="number">2</span>, shape=(), dtype=int64)</span><br><span class="line">tf.Tensor(<span class="number">0</span>, shape=(), dtype=int64)</span><br><span class="line">tf.Tensor(<span class="number">1</span>, shape=(), dtype=int64)</span><br><span class="line">tf.Tensor(<span class="number">2</span>, shape=(), dtype=int64)</span><br><span class="line">tf.Tensor(<span class="number">0</span>, shape=(), dtype=int64)</span><br><span class="line">tf.Tensor(<span class="number">1</span>, shape=(), dtype=int64)</span><br><span class="line">tf.Tensor(<span class="number">2</span>, shape=(), dtype=int64)</span><br></pre></td></tr></table></figure></li><li><p><code>shard</code>: 采样，从某个位置开始隔固定距离采样一个元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ds = tf.data.Dataset.<span class="built_in">range</span>(<span class="number">12</span>)</span><br><span class="line">ds_shard = ds.shard(<span class="number">3</span>,index = <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> ds_shard:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果：</span></span><br><span class="line">tf.Tensor(<span class="number">1</span>, shape=(), dtype=int64)</span><br><span class="line">tf.Tensor(<span class="number">4</span>, shape=(), dtype=int64)</span><br><span class="line">tf.Tensor(<span class="number">7</span>, shape=(), dtype=int64)</span><br><span class="line">tf.Tensor(<span class="number">10</span>, shape=(), dtype=int64)</span><br></pre></td></tr></table></figure></li><li><p><code>take</code>: 采样，从开始位置取前几个元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ds = tf.data.Dataset.<span class="built_in">range</span>(<span class="number">12</span>)</span><br><span class="line">ds_take = ds.take(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>(ds_take.as_numpy_iterator())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure></li></ul><h2 id="三、提升管道性能"><a href="#三、提升管道性能" class="headerlink" title="三、提升管道性能"></a>三、提升管道性能</h2><p>模型训练的耗时主要来自于两个部分，一部分来自<strong>数据准备</strong>，另一部分来自<strong>参数迭代</strong>。</p><p>参数迭代过程的耗时通常依赖于GPU来提升。</p><p>而数据准备过程的耗时则可以通过<strong>构建高效的数据管道</strong>进行提升。</p><p>以下是一些构建高效数据管道的建议。</p><ul><li><p>1，使用 <code>prefetch</code> 方法让数据准备和参数迭代两个过程相互并行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印时间分割线</span></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printbar</span>():</span></span><br><span class="line">    ts = tf.timestamp()</span><br><span class="line">    today_ts = ts%(<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">    hour = tf.cast(today_ts//<span class="number">3600</span>+<span class="number">8</span>,tf.int32)%tf.constant(<span class="number">24</span>)</span><br><span class="line">    minite = tf.cast((today_ts%<span class="number">3600</span>)//<span class="number">60</span>,tf.int32)</span><br><span class="line">    second = tf.cast(tf.floor(today_ts%<span class="number">60</span>),tf.int32)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">timeformat</span>(<span class="params">m</span>):</span></span><br><span class="line">        <span class="keyword">if</span> tf.strings.length(tf.strings.<span class="built_in">format</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,m))==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span>(tf.strings.<span class="built_in">format</span>(<span class="string">&quot;0&#123;&#125;&quot;</span>,m))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span>(tf.strings.<span class="built_in">format</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,m))</span><br><span class="line"></span><br><span class="line">    timestring = tf.strings.join([timeformat(hour),timeformat(minite),</span><br><span class="line">                timeformat(second)],separator = <span class="string">&quot;:&quot;</span>)</span><br><span class="line">    tf.<span class="built_in">print</span>(<span class="string">&quot;==========&quot;</span>*<span class="number">8</span>,end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">    tf.<span class="built_in">print</span>(timestring)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># tf.data.experimental.AUTOTUNE 可以让程序自动选择合适的参数</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> ds.prefetch(buffer_size = tf.data.experimental.AUTOTUNE):</span><br><span class="line">    train_step() </span><br></pre></td></tr></table></figure></li><li><p>2，使用 <code>interleave</code> 方法可以让数据读取过程多进程执行,并将不同来源数据夹在一起。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ds_files = tf.data.Dataset.list_files(<span class="string">&quot;./data/titanic/*.csv&quot;</span>)</span><br><span class="line"><span class="comment"># ds = ds_files.flat_map(lambda x:tf.data.TextLineDataset(x).skip(1))</span></span><br><span class="line"><span class="comment"># 使用interleave()方法代替flat_map()方法</span></span><br><span class="line">ds = ds_files.interleave(<span class="keyword">lambda</span> x:tf.data.TextLineDataset(x).skip(<span class="number">1</span>))</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> ds.take(<span class="number">8</span>):</span><br><span class="line">    <span class="built_in">print</span>(line)</span><br></pre></td></tr></table></figure></li><li><p>3，使用 <code>map</code> 时设置<code>num_parallel_calls</code> 让数据转换过程多进行执行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ds = tf.data.Dataset.list_files(<span class="string">&quot;./data/cifar2/train/*/*.jpg&quot;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_image</span>(<span class="params">img_path,size = (<span class="params"><span class="number">32</span>,<span class="number">32</span></span>)</span>):</span></span><br><span class="line">    label = <span class="number">1</span> <span class="keyword">if</span> tf.strings.regex_full_match(img_path,<span class="string">&quot;.*/automobile/.*&quot;</span>) <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">    img = tf.io.read_file(img_path)</span><br><span class="line">    img = tf.image.decode_jpeg(img) <span class="comment">#注意此处为jpeg格式</span></span><br><span class="line">    img = tf.image.resize(img,size)</span><br><span class="line">    <span class="keyword">return</span>(img,label)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#多进程转换</span></span><br><span class="line">printbar()</span><br><span class="line">tf.<span class="built_in">print</span>(tf.constant(<span class="string">&quot;start parallel transformation...&quot;</span>))</span><br><span class="line"></span><br><span class="line">ds_map_parallel = ds.<span class="built_in">map</span>(load_image,num_parallel_calls = tf.data.experimental.AUTOTUNE)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> ds_map_parallel:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li><li><p>4，使用 <code>cache</code> 方法让数据在第一个<code>epoch</code>后缓存到内存中，仅限于数据集不大情形。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟数据准备</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generator</span>():</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">        <span class="comment">#假设每次准备数据需要2s</span></span><br><span class="line">        time.sleep(<span class="number">2</span>) </span><br><span class="line">        <span class="keyword">yield</span> i </span><br><span class="line">        </span><br><span class="line"><span class="comment"># 使用 cache 方法让数据在第一个epoch后缓存到内存中，仅限于数据集不大情形。</span></span><br><span class="line">ds = tf.data.Dataset.from_generator(generator,output_types = (tf.int32)).cache()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟参数迭代</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_step</span>():</span></span><br><span class="line">    <span class="comment">#假设每一步训练需要0s</span></span><br><span class="line">    time.sleep(<span class="number">0</span>) </span><br></pre></td></tr></table></figure></li><li><p>5，使用 <code>map</code>转换时，先<code>batch</code>, 然后采用向量化的转换方法对每个batch进行转换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#先batch后map</span></span><br><span class="line">ds = tf.data.Dataset.<span class="built_in">range</span>(<span class="number">100000</span>)</span><br><span class="line">ds_batch_map = ds.batch(<span class="number">20</span>).<span class="built_in">map</span>(<span class="keyword">lambda</span> x:x**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">printbar()</span><br><span class="line">tf.<span class="built_in">print</span>(tf.constant(<span class="string">&quot;start vector transformation...&quot;</span>))</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> ds_batch_map:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">printbar()</span><br><span class="line">tf.<span class="built_in">print</span>(tf.constant(<span class="string">&quot;end vector transformation...&quot;</span>))</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TensorFlow2.X学习笔记(4)--TensorFlow低阶API之AutoGraph相关研究</title>
      <link href="/2020/05/02/TensorFlow2-X%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-4-TensorFlow%E4%BD%8E%E9%98%B6API%E4%B9%8BAutoGraph%E7%9B%B8%E5%85%B3%E7%A0%94%E7%A9%B6/"/>
      <url>/2020/05/02/TensorFlow2-X%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-4-TensorFlow%E4%BD%8E%E9%98%B6API%E4%B9%8BAutoGraph%E7%9B%B8%E5%85%B3%E7%A0%94%E7%A9%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="AutoGraph相关研究"><a href="#AutoGraph相关研究" class="headerlink" title="AutoGraph相关研究"></a>AutoGraph相关研究</h1><p>TensorFlow 2.0主要使用的是动态计算图和Autograph。</p><p>动态计算图易于调试，编码效率较高，但执行效率偏低。</p><p>静态计算图执行效率很高，但较难调试。</p><p>而Autograph机制可以将动态图转换成静态计算图，兼收执行效率和编码效率之利。</p><p>当然Autograph机制能够转换的代码并不是没有任何约束的，有一些编码规范需要遵循，否则可能会转换失败或者不符合预期。</p><h2 id="一、Autograph使用规范"><a href="#一、Autograph使用规范" class="headerlink" title="一、Autograph使用规范"></a>一、Autograph使用规范</h2><h3 id="1、规范总结"><a href="#1、规范总结" class="headerlink" title="1、规范总结"></a>1、规范总结</h3><ul><li>1，被<code>@tf.function</code>修饰的函数应尽可能使用TensorFlow中的函数而不是Python中的其他函数。例如使用tf.print而不是print，使用tf.range而不是range，使用<code>tf.constant(True)</code>而不是True.</li><li>2，避免在@tf.function修饰的函数内部定义tf.Variable.</li><li>3，被@tf.function修饰的函数不可修改该函数外部的Python列表或字典等数据结构变量。</li></ul><h3 id="2、规范解析"><a href="#2、规范解析" class="headerlink" title="2、规范解析"></a>2、规范解析</h3><p><strong>被@tf.function修饰的函数应尽量使用TensorFlow中的函数而不是Python中的其他函数。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">np_random</span>():</span></span><br><span class="line">    a = np.random.randn(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">    tf.<span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tf_random</span>():</span></span><br><span class="line">    a = tf.random.normal((<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line">    tf.<span class="built_in">print</span>(a)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># np_random每次执行都是一样的结果</span></span><br><span class="line"><span class="comment"># tf_random每次执行都会有重新生成随机数。</span></span><br></pre></td></tr></table></figure><p><strong>避免在@tf.function修饰的函数内部定义tf.Variable.</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = tf.Variable(<span class="number">1.0</span>,dtype=tf.float32)</span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer_var</span>():</span></span><br><span class="line">    x.assign_add(<span class="number">1.0</span>)</span><br><span class="line">    tf.<span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><p><strong>被@tf.function修饰的函数不可修改该函数外部的Python列表或字典等结构类型变量。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tensor_list = []</span><br><span class="line"></span><br><span class="line"><span class="meta">@tf.function </span><span class="comment">#加上这一行切换成Autograph结果将不符合预期！！！</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">append_tensor</span>(<span class="params">x</span>):</span></span><br><span class="line">    tensor_list.append(x) <span class="comment">#测试在此处的tensor_list虽然使用append的方法，但是却起不到作用</span></span><br><span class="line">    <span class="keyword">return</span> tensor_list</span><br></pre></td></tr></table></figure><h2 id="二、Autograph机制原理"><a href="#二、Autograph机制原理" class="headerlink" title="二、Autograph机制原理"></a>二、Autograph机制原理</h2><h3 id="1、-tf-function"><a href="#1、-tf-function" class="headerlink" title="1、@tf.function"></a>1、@tf.function</h3><p><strong>当我们第一次调用这个被@tf.function装饰的函数时，后面到底发生了什么？</strong></p><ul><li><p>第一件事情是创建计算图。即创建一个静态计算图，跟踪执行一遍函数体中的Python代码，确定各个变量的Tensor类型，并根据执行顺序将算子添加到计算图中。 在这个过程中，如果开启了autograph=True(默认开启),会将Python控制流转换成TensorFlow图内控制流。 主要是将if语句转换成 tf.cond算子表达，将while和for循环语句转换成tf.while_loop算子表达，并在必要的时候添加 tf.control_dependencies指定执行顺序依赖关系。</p></li><li><p>第二件事情是执行计算图。</p></li></ul><h3 id="2、重新理解Autograph的编码规范"><a href="#2、重新理解Autograph的编码规范" class="headerlink" title="2、重新理解Autograph的编码规范"></a>2、重新理解Autograph的编码规范</h3><ul><li><p><strong>1，被@tf.function修饰的函数应尽量使用TensorFlow中的函数而不是Python中的其他函数。例如使用tf.print而不是print.</strong></p><p>解释：Python中的函数仅仅会在跟踪执行函数以创建静态图的阶段使用，普通Python函数是无法嵌入到静态计算图中的，所以 在计算图构建好之后再次调用的时候，这些Python函数并没有被计算，而TensorFlow中的函数则可以嵌入到计算图中。使用普通的Python函数会导致 被@tf.function修饰前【eager执行】和被@tf.function修饰后【静态图执行】的输出不一致。</p></li><li><p><strong>2，避免在@tf.function修饰的函数内部定义tf.Variable.</strong></p><p>解释：如果函数内部定义了tf.Variable,那么在【eager执行】时，这种创建tf.Variable的行为在每次函数调用时候都会发生。但是在【静态图执行】时，这种创建tf.Variable的行为只会发生在第一步跟踪Python代码逻辑创建计算图时，这会导致被@tf.function修饰前【eager执行】和被@tf.function修饰后【静态图执行】的输出不一致。实际上，TensorFlow在这种情况下一般会报错。</p></li><li><p><strong>3，被@tf.function修饰的函数不可修改该函数外部的Python列表或字典等数据结构变量。</strong></p><p>解释：静态计算图是被编译成C++代码在TensorFlow内核中执行的。Python中的列表和字典等数据结构变量是无法嵌入到计算图中，它们仅仅能够在创建计算图时被读取，在执行计算图时是无法修改Python中的列表或字典这样的数据结构变量的。</p></li></ul><h2 id="三、tf-Module概述"><a href="#三、tf-Module概述" class="headerlink" title="三、tf.Module概述"></a>三、tf.Module概述</h2><p>​    TensorFlow提供了一个基类<code>tf.Module</code>，通过继承它构建子类，我们不仅可以获得以上的自然而然，而且可以非常方便地管理变量，还可以非常方便地管理它引用的其它Module，而且我们能够利用<code>tf.saved_model</code>保存模型并实现跨平台部署使用。``</p><p>​    实际上，<code>tf.keras.models.Model,tf.keras.layers.Layer</code> 都是继承自<code>tf.Module</code>的，提供了方便的变量管理和所引用的子模块管理的功能。</p><h3 id="1、tf-Module"><a href="#1、tf-Module" class="headerlink" title="1、tf.Module"></a>1、tf.Module</h3><p><strong>因此，利用tf.Module提供的封装，再结合TensoFlow丰富的低阶API，实际上我们能够基于TensorFlow开发任意机器学习模型(而非仅仅是神经网络模型)，并实现跨平台部署使用。</strong></p><blockquote><p>定义一个简单的function.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf </span><br><span class="line">x = tf.Variable(<span class="number">1.0</span>,dtype=tf.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment">#在tf.function中用input_signature限定输入张量的签名类型：shape和dtype,当a不符合这个标准，就会报错</span></span><br><span class="line"><span class="meta">@tf.function(<span class="params">input_signature=[tf.TensorSpec(<span class="params">shape = [], dtype = tf.float32</span>)]</span>)    </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_print</span>(<span class="params">a</span>):</span></span><br><span class="line">    x.assign_add(a)</span><br><span class="line">    tf.<span class="built_in">print</span>(x)</span><br><span class="line">    <span class="keyword">return</span>(x)</span><br></pre></td></tr></table></figure><blockquote><p>自定义module</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoModule</span>(<span class="params">tf.Module</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,init_value = tf.constant(<span class="params"><span class="number">0.0</span></span>),name=<span class="literal">None</span></span>):</span></span><br><span class="line">        <span class="built_in">super</span>(DemoModule, self).__init__(name=name)</span><br><span class="line">        <span class="keyword">with</span> self.name_scope:  <span class="comment">#相当于with tf.name_scope(&quot;demo_module&quot;)</span></span><br><span class="line">            self.x = tf.Variable(init_value,dtype = tf.float32,trainable=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">    @tf.function(<span class="params">input_signature=[tf.TensorSpec(<span class="params">shape = [], dtype = tf.float32</span>)]</span>)  </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addprint</span>(<span class="params">self,a</span>):</span></span><br><span class="line">        <span class="keyword">with</span> self.name_scope:</span><br><span class="line">            self.x.assign_add(a)</span><br><span class="line">            tf.<span class="built_in">print</span>(self.x)</span><br><span class="line">            <span class="keyword">return</span>(self.x)</span><br><span class="line">        </span><br><span class="line"><span class="comment">#执行</span></span><br><span class="line">demo = DemoModule(init_value = tf.constant(<span class="number">1.0</span>))</span><br><span class="line">result = demo.addprint(tf.constant(<span class="number">5.0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看模块中的全部变量和全部可训练变量</span></span><br><span class="line"><span class="built_in">print</span>(demo.variables)</span><br><span class="line"><span class="built_in">print</span>(demo.trainable_variables)</span><br><span class="line"><span class="comment">#查看模块中的全部子模块</span></span><br><span class="line">demo.submodules</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用tf.saved_model 保存模型，并指定需要跨平台部署的方法</span></span><br><span class="line">tf.saved_model.save(demo,<span class="string">&quot;./data/demo/1&quot;</span>,signatures = &#123;<span class="string">&quot;serving_default&quot;</span>:demo.addprint&#125;)</span><br><span class="line"><span class="comment">#加载模型</span></span><br><span class="line">demo2 = tf.saved_model.load(<span class="string">&quot;./data/demo/1&quot;</span>)</span><br><span class="line">demo2.addprint(tf.constant(<span class="number">5.0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看模型文件相关信息，红框标出来的输出信息在模型部署和跨平台使用时有可能会用到</span></span><br><span class="line">!saved_model_cli show --<span class="built_in">dir</span> ./data/demo/<span class="number">1</span> --<span class="built_in">all</span></span><br></pre></td></tr></table></figure><blockquote><p>在tensorboard中查看计算图，模块会被添加模块名demo_module,方便层次化呈现计算图结构。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建日志</span></span><br><span class="line">stamp = datetime.datetime.now().strftime(<span class="string">&quot;%Y%m%d-%H%M%S&quot;</span>)</span><br><span class="line">logdir = <span class="string">&#x27;./data/demomodule/%s&#x27;</span> % stamp</span><br><span class="line">writer = tf.summary.create_file_writer(logdir)</span><br><span class="line"></span><br><span class="line"><span class="comment">#开启autograph跟踪</span></span><br><span class="line">tf.summary.trace_on(graph=<span class="literal">True</span>, profiler=<span class="literal">True</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#执行autograph</span></span><br><span class="line">demo = DemoModule(init_value = tf.constant(<span class="number">0.0</span>))</span><br><span class="line">result = demo.addprint(tf.constant(<span class="number">5.0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#将计算图信息写入日志</span></span><br><span class="line"><span class="keyword">with</span> writer.as_default():</span><br><span class="line">    tf.summary.trace_export(</span><br><span class="line">        name=<span class="string">&quot;demomodule&quot;</span>,</span><br><span class="line">        step=<span class="number">0</span>,</span><br><span class="line">        profiler_outdir=logdir)</span><br></pre></td></tr></table></figure><blockquote><p>使用tensorboard</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动 tensorboard在jupyter中的魔法命令</span></span><br><span class="line"><span class="keyword">from</span> tensorboard <span class="keyword">import</span> notebook</span><br><span class="line">notebook.<span class="built_in">list</span>()</span><br><span class="line">notebook.start(<span class="string">&quot;--logdir ./data/demomodule/&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://ae01.alicdn.com/kf/H1c4b8f2321884270b7b33ebc987197d6U.jpg"></p><blockquote><p>除了利用tf.Module的子类化实现封装，我们也可以通过给<code>tf.Module</code>添加属性的方法进行封装。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mymodule = tf.Module()</span><br><span class="line">mymodule.x = tf.Variable(<span class="number">0.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@tf.function(<span class="params">input_signature=[tf.TensorSpec(<span class="params">shape = [], dtype = tf.float32</span>)]</span>)  </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addprint</span>(<span class="params">a</span>):</span></span><br><span class="line">    mymodule.x.assign_add(a)</span><br><span class="line">    tf.<span class="built_in">print</span>(mymodule.x)</span><br><span class="line">    <span class="keyword">return</span> (mymodule.x)</span><br><span class="line"></span><br><span class="line">mymodule.addprint = addprint</span><br></pre></td></tr></table></figure><h3 id="2、tf-Module和tf-keras-Model，tf-keras-layers-Layer"><a href="#2、tf-Module和tf-keras-Model，tf-keras-layers-Layer" class="headerlink" title="2、tf.Module和tf.keras.Model，tf.keras.layers.Layer"></a>2、tf.Module和tf.keras.Model，tf.keras.layers.Layer</h3><blockquote><p>tf.keras中的模型和层都是继承tf.Module实现的，也具有变量管理和子模块管理功能。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> models,layers,losses,metrics</span><br><span class="line"></span><br><span class="line">tf.keras.backend.clear_session() </span><br><span class="line"></span><br><span class="line">model = models.Sequential()</span><br><span class="line"></span><br><span class="line">model.add(layers.Dense(<span class="number">4</span>,input_shape = (<span class="number">10</span>,)))</span><br><span class="line">model.add(layers.Dense(<span class="number">2</span>))</span><br><span class="line">model.add(layers.Dense(<span class="number">1</span>))</span><br><span class="line">model.summary()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果：</span></span><br><span class="line">Model: <span class="string">&quot;sequential&quot;</span></span><br><span class="line">_________________________________________________________________</span><br><span class="line">Layer (<span class="built_in">type</span>)                 Output Shape              Param <span class="comment">#   </span></span><br><span class="line">=================================================================</span><br><span class="line">dense (Dense)                (<span class="literal">None</span>, <span class="number">4</span>)                 <span class="number">44</span>        </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense_1 (Dense)              (<span class="literal">None</span>, <span class="number">2</span>)                 <span class="number">10</span>        </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense_2 (Dense)              (<span class="literal">None</span>, <span class="number">1</span>)                 <span class="number">3</span>         </span><br><span class="line">=================================================================</span><br><span class="line">Total params: <span class="number">57</span></span><br><span class="line">Trainable params: <span class="number">57</span></span><br><span class="line">Non-trainable params: <span class="number">0</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 获得model中的变量</span></span><br><span class="line">model.variables</span><br><span class="line"><span class="comment"># 获得model中的可训练变量</span></span><br><span class="line">model.trainable_variables</span><br><span class="line">model.layers[<span class="number">0</span>].trainable = <span class="literal">False</span> <span class="comment">#冻结第0层的变量,使其不可训练</span></span><br><span class="line"></span><br><span class="line">model.submodules <span class="comment">#获得每层model的情况</span></span><br><span class="line"><span class="comment">## Sequence of all sub-modules.</span></span><br><span class="line"><span class="comment">## Submodules are modules which are properties of this module, or found as</span></span><br><span class="line"><span class="comment">## properties of modules which are properties of this module (and so on).</span></span><br><span class="line"></span><br><span class="line">model.layers</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TensorFlow2.X学习笔记(3)--TensorFlow低阶API之张量</title>
      <link href="/2020/05/02/TensorFlow2-X%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-3-TensorFlow%E4%BD%8E%E9%98%B6API%E4%B9%8B%E5%BC%A0%E9%87%8F/"/>
      <url>/2020/05/02/TensorFlow2-X%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-3-TensorFlow%E4%BD%8E%E9%98%B6API%E4%B9%8B%E5%BC%A0%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>TensorFlow的低阶API主要包括<code>张量操作</code>，<code>计算图</code>和<code>自动微分</code>。</p><p>如果把模型比作一个房子，那么低阶API就是<strong>【模型之砖】</strong>。</p><p>在低阶API层次上，可以把TensorFlow当做一个增强版的numpy来使用。</p><p>TensorFlow提供的方法比numpy更全面，运算速度更快，如果需要的话，还可以使用GPU进行加速。</p><h4 id="一、张量的结构操作"><a href="#一、张量的结构操作" class="headerlink" title="一、张量的结构操作"></a>一、张量的结构操作</h4><p>张量的操作主要包括张量的结构操作和张量的数学运算。</p><p><strong>张量结构操作</strong>诸如：<code>张量创建，索引切片，维度变换，合并分割</code>。</p><p><strong>张量数学运算</strong>主要有：<code>标量运算，向量运算，矩阵运算</code>。另外我们会介绍张量运算的广播机制。</p><p>Autograph计算图我们将介绍使用Autograph的规范建议，Autograph的机制原理，Autograph和tf.Module.</p><h5 id="1、创建张量"><a href="#1、创建张量" class="headerlink" title="1、创建张量"></a>1、创建张量</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、创建一个一维张量</span></span><br><span class="line">a = tf.constant([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],dtype = tf.float32)</span><br><span class="line">tf.<span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2、创建范围1-10，间隔为2的张量</span></span><br><span class="line">tf.<span class="built_in">print</span>(tf.<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>,delta=<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3、0.0-6.18之间分成100份</span></span><br><span class="line">tf.<span class="built_in">print</span>(tf.linspace(<span class="number">0.0</span>,<span class="number">2</span>*<span class="number">3.14</span>,<span class="number">100</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4、创建3*3的零向量</span></span><br><span class="line">tf.<span class="built_in">print</span>(tf.zeros([<span class="number">3</span>,<span class="number">3</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5、创建3*2,用5填充的张量</span></span><br><span class="line">tf.<span class="built_in">print</span>( tf.fill([<span class="number">3</span>,<span class="number">2</span>],<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6、均匀分布随机</span></span><br><span class="line">tf.random.set_seed(<span class="number">1.0</span>) <span class="comment">#Sets the global random seed.</span></span><br><span class="line">a = tf.random.uniform([<span class="number">5</span>],minval=<span class="number">0</span>,maxval=<span class="number">10</span>)</span><br><span class="line">tf.<span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 7、正态随机分布</span></span><br><span class="line">tf.<span class="built_in">print</span>(tf.random.normal([<span class="number">3</span>,<span class="number">3</span>],mean=<span class="number">0.0</span>,stddev=<span class="number">1.0</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8、正态分布随机，剔除2倍方差以外数据重新生成</span></span><br><span class="line">c = tf.random.truncated_normal((<span class="number">5</span>,<span class="number">5</span>), mean=<span class="number">0.0</span>, stddev=<span class="number">1.0</span>, dtype=tf.float32)</span><br><span class="line">tf.<span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line"><span class="number">1</span>、[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"><span class="number">2</span>、[<span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">7</span> <span class="number">9</span>]</span><br><span class="line"><span class="number">3</span>、[<span class="number">0</span> <span class="number">0.0634343475</span> <span class="number">0.126868695</span> ... <span class="number">6.15313148</span> <span class="number">6.21656609</span> <span class="number">6.28</span>]</span><br><span class="line"><span class="number">4</span>、</span><br><span class="line">[[<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]]</span><br><span class="line"><span class="number">5</span>、</span><br><span class="line">[[<span class="number">5</span> <span class="number">5</span>]</span><br><span class="line"> [<span class="number">5</span> <span class="number">5</span>]</span><br><span class="line"> [<span class="number">5</span> <span class="number">5</span>]]</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>、[<span class="number">2.91975141</span> <span class="number">2.06566453</span> <span class="number">5.35390759</span> <span class="number">5.61257458</span> <span class="number">4.16674519</span>]</span><br><span class="line"></span><br><span class="line"><span class="number">7</span>、[[<span class="number">1.06688023</span> <span class="number">0.194549292</span> -<span class="number">0.530828953</span>]</span><br><span class="line">   [<span class="number">0.0919008255</span> -<span class="number">0.177537084</span> -<span class="number">0.919308841</span>]</span><br><span class="line">   [-<span class="number">2.07775569</span> <span class="number">2.03919029</span> <span class="number">0.802899718</span>]]</span><br><span class="line"></span><br><span class="line"><span class="number">8</span>、</span><br><span class="line">[[-<span class="number">1.80412865</span> -<span class="number">0.111534528</span> -<span class="number">0.845551133</span> <span class="number">0.848961473</span> <span class="number">0.181714371</span>]</span><br><span class="line"> [<span class="number">0.0783366337</span> -<span class="number">0.772812247</span> <span class="number">0.510512829</span> <span class="number">1.09207666</span> -<span class="number">0.685003579</span>]</span><br><span class="line"> [-<span class="number">0.0209237766</span> -<span class="number">0.870738804</span> <span class="number">0.00304621807</span> <span class="number">0.29193154</span> -<span class="number">0.484454393</span>]</span><br><span class="line"> [<span class="number">1.13532615</span> -<span class="number">0.133236796</span> -<span class="number">0.620660245</span> <span class="number">1.43435645</span> -<span class="number">0.0828505158</span>]</span><br><span class="line"> [<span class="number">0.762984335</span> <span class="number">0.0506231971</span> -<span class="number">0.368702501</span> -<span class="number">0.46321547</span> -<span class="number">0.0791869536</span>]]</span><br></pre></td></tr></table></figure><h5 id="2、索引切片"><a href="#2、索引切片" class="headerlink" title="2、索引切片"></a>2、索引切片</h5><p>张量的索引切片方式和numpy几乎是一样的。切片时支持缺省参数和省略号。</p><p>对于<code>tf.Variable</code>,可以通过索引和切片对部分元素进行修改。</p><p>对于提取张量的连续子区域，也可以使用<code>tf.slice</code>.</p><p>此外，对于不规则的切片提取,可以使用<code>tf.gather,tf.gather_nd,tf.boolean_mask</code>。</p><p><code>tf.boolean_mask</code>功能最为强大，它可以实现<code>tf.gather,tf.gather_nd</code>的功能，并且<code>tf.boolean_mask</code>还可以实现布尔索引。</p><p>如果要通过修改张量的某些元素得到新的张量，可以使用<code>tf.where，tf.scatter_nd</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">tf.random.set_seed(<span class="number">3</span>)</span><br><span class="line">t = tf.random.uniform([<span class="number">5</span>,<span class="number">5</span>],minval=<span class="number">0</span>,maxval=<span class="number">10</span>,dtype=tf.int32)</span><br><span class="line">tf.<span class="built_in">print</span>(t)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">[[<span class="number">4</span> <span class="number">7</span> <span class="number">4</span> <span class="number">2</span> <span class="number">9</span>]</span><br><span class="line"> [<span class="number">9</span> <span class="number">1</span> <span class="number">2</span> <span class="number">4</span> <span class="number">7</span>]</span><br><span class="line"> [<span class="number">7</span> <span class="number">2</span> <span class="number">7</span> <span class="number">4</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">9</span> <span class="number">6</span> <span class="number">9</span> <span class="number">7</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">7</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">#第0行</span></span><br><span class="line">tf.<span class="built_in">print</span>(t[<span class="number">0</span>]) <span class="comment">#[4 7 4 2 9]</span></span><br><span class="line"><span class="comment">#倒数第一行</span></span><br><span class="line">tf.<span class="built_in">print</span>(t[-<span class="number">1</span>]) <span class="comment">#[3 7 0 0 3]</span></span><br><span class="line"><span class="comment">#第1行第3列</span></span><br><span class="line">tf.<span class="built_in">print</span>(t[<span class="number">1</span>,<span class="number">3</span>])</span><br><span class="line">tf.<span class="built_in">print</span>(t[<span class="number">1</span>][<span class="number">3</span>]) </span><br><span class="line"></span><br><span class="line"><span class="comment">#第1行至第3行</span></span><br><span class="line">tf.<span class="built_in">print</span>(t[<span class="number">1</span>:<span class="number">4</span>,:])</span><br><span class="line">tf.<span class="built_in">print</span>(tf.<span class="built_in">slice</span>(t,[<span class="number">1</span>,<span class="number">0</span>],[<span class="number">3</span>,<span class="number">5</span>])) <span class="comment">#tf.slice(input,begin_vector,size_vector) 从[1,0]位置开始，寻找三行五列的数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第1行至最后一行，第0列到最后一列每隔两列取一列</span></span><br><span class="line">tf.<span class="built_in">print</span>(t[<span class="number">1</span>:<span class="number">4</span>,:<span class="number">4</span>:<span class="number">2</span>]) <span class="comment">#或者写成这样的：tf.print(t[1:4,0:4:2])</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#对变量来说，还可以使用索引和切片修改部分元素</span></span><br><span class="line">x = tf.Variable([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]],dtype = tf.float32)</span><br><span class="line">x[<span class="number">1</span>,:].assign(tf.constant([<span class="number">0.0</span>,<span class="number">0.0</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#省略号可以表示多个冒号</span></span><br><span class="line">a=tf.random.uniform([<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>],minval=<span class="number">0</span>,maxval=<span class="number">10</span>,dtype=tf.int32)</span><br><span class="line"><span class="comment"># a的值：</span></span><br><span class="line">[[[<span class="number">2</span>, <span class="number">2</span>, <span class="number">6</span>],</span><br><span class="line">        [<span class="number">5</span>, <span class="number">7</span>, <span class="number">6</span>],</span><br><span class="line">        [<span class="number">4</span>, <span class="number">8</span>, <span class="number">6</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">4</span>, <span class="number">6</span>, <span class="number">3</span>],</span><br><span class="line">        [<span class="number">8</span>, <span class="number">1</span>, <span class="number">7</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="number">1</span>, <span class="number">3</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>],</span><br><span class="line">        [<span class="number">3</span>, <span class="number">1</span>, <span class="number">8</span>],</span><br><span class="line">        [<span class="number">9</span>, <span class="number">3</span>, <span class="number">7</span>]]]</span><br><span class="line"> tf.<span class="built_in">print</span>(a[...,<span class="number">1</span>]) <span class="comment">#等价于tf.print(a[:,:,1])</span></span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line">[[<span class="number">2</span> <span class="number">7</span> <span class="number">8</span>]</span><br><span class="line"> [<span class="number">6</span> <span class="number">1</span> <span class="number">1</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">1</span> <span class="number">3</span>]]</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 考虑班级成绩册的例子，有4个班级，每个班级10个学生，每个学生7门科目成绩。可以用一个4107的张量来表示。</span></span><br><span class="line">scores = tf.random.uniform((<span class="number">4</span>,<span class="number">10</span>,<span class="number">7</span>),minval=<span class="number">0</span>,maxval=<span class="number">100</span>,dtype=tf.int32)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽取每个班级第0个学生，第5个学生，第9个学生的全部成绩</span></span><br><span class="line">p = tf.gather(scores,[<span class="number">0</span>,<span class="number">5</span>,<span class="number">9</span>],axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽取每个班级第0个学生，第5个学生，第9个学生的第1门课程，第3门课程，第6门课程成绩</span></span><br><span class="line">q = tf.gather(tf.gather(scores,[<span class="number">0</span>,<span class="number">5</span>,<span class="number">9</span>],axis=<span class="number">1</span>),[<span class="number">1</span>,<span class="number">3</span>,<span class="number">6</span>],axis=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽取第0个班级第0个学生，第2个班级的第4个学生，第3个班级的第6个学生的全部成绩</span></span><br><span class="line"><span class="comment"># indices的长度为采样样本的个数，每个元素为采样位置的坐标</span></span><br><span class="line">s = tf.gather_nd(scores,indices = [(<span class="number">0</span>,<span class="number">0</span>),(<span class="number">2</span>,<span class="number">4</span>),(<span class="number">3</span>,<span class="number">6</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 抽取每个班级第0个学生，第5个学生，第9个学生的全部成绩（等价位：tf.gather(scores,[0,5,9],axis=1)）</span></span><br><span class="line">p = tf.boolean_mask(scores,[<span class="literal">True</span>,<span class="literal">False</span>,<span class="literal">False</span>,<span class="literal">False</span>,<span class="literal">False</span>,</span><br><span class="line">                            <span class="literal">True</span>,<span class="literal">False</span>,<span class="literal">False</span>,<span class="literal">False</span>,<span class="literal">True</span>],axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#找到矩阵中小于0的元素</span></span><br><span class="line">c = tf.constant([[-<span class="number">1</span>,<span class="number">1</span>,-<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>,-<span class="number">2</span>],[<span class="number">3</span>,-<span class="number">3</span>,<span class="number">3</span>]],dtype=tf.float32)</span><br><span class="line">tf.<span class="built_in">print</span>(tf.boolean_mask(c,c&lt;<span class="number">0</span>),<span class="string">&quot;\n&quot;</span>) </span><br><span class="line">tf.<span class="built_in">print</span>(c[c&lt;<span class="number">0</span>]) <span class="comment">#布尔索引，为boolean_mask的语法糖形式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#找到张量中小于0的元素,将其换成np.nan得到新的张量</span></span><br><span class="line"><span class="comment">#tf.where和np.where作用类似，可以理解为if的张量版本</span></span><br><span class="line">c = tf.constant([[-<span class="number">1</span>,<span class="number">1</span>,-<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>,-<span class="number">2</span>],[<span class="number">3</span>,-<span class="number">3</span>,<span class="number">3</span>]],dtype=tf.float32)</span><br><span class="line">d = tf.where(c&lt;<span class="number">0</span>,tf.fill(c.shape,np.nan),c) </span><br><span class="line"></span><br><span class="line"><span class="comment">#如果where只有一个参数，将返回所有满足条件的位置坐标</span></span><br><span class="line">indices = tf.where(c&lt;<span class="number">0</span>)</span><br><span class="line"><span class="comment">#将张量的第[0,0]和[2,1]两个位置元素替换为0得到新的张量</span></span><br><span class="line">d = c - tf.scatter_nd([[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">2</span>,<span class="number">1</span>]],[c[<span class="number">0</span>,<span class="number">0</span>],c[<span class="number">2</span>,<span class="number">1</span>]],c.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment">#scatter_nd的作用和gather_nd有些相反</span></span><br><span class="line"><span class="comment">#可以将某些值插入到一个给定shape的全0的张量的指定位置处。</span></span><br><span class="line">indices = tf.where(c&lt;<span class="number">0</span>)</span><br><span class="line">tf.scatter_nd(indices,tf.gather_nd(c,indices),c.shape)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3、维度变换"><a href="#3、维度变换" class="headerlink" title="3、维度变换"></a>3、维度变换</h5><p>维度变换相关函数主要有 tf.reshape, tf.squeeze, tf.expand_dims, tf.transpose.</p><ul><li><code>tf.reshape</code> 可以改变张量的形状。</li><li><code>tf.squeeze</code> 可以减少维度。如果张量在某个维度上只有一个元素，利用<code>tf.squeeze</code>可以消除这个维度。</li><li><code>tf.expand_dims</code> 可以增加维度。</li><li><code>tf.transpose</code> 可以交换维度，它会改变张量元素的存储顺序。<code>tf.transpose</code>常用于图片存储格式的变换上。</li></ul><p>tf.reshape可以改变张量的形状，但是其本质上不会改变张量元素的存储顺序，所以，该操作实际上非常迅速，并且是可逆的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">tf.expand_dims(s,axis=<span class="number">0</span>) <span class="comment">#在第0维插入长度为1的一个维度</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Batch,Height,Width,Channel</span></span><br><span class="line">a = tf.random.uniform(shape=[<span class="number">100</span>,<span class="number">600</span>,<span class="number">600</span>,<span class="number">4</span>],minval=<span class="number">0</span>,maxval=<span class="number">255</span>,dtype=tf.int32)</span><br><span class="line">tf.<span class="built_in">print</span>(a.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换成 Channel,Height,Width,Batch</span></span><br><span class="line">s= tf.transpose(a,perm=[<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>])</span><br><span class="line">tf.<span class="built_in">print</span>(s.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果：perm中定义了维度顺序</span></span><br><span class="line">TensorShape([<span class="number">100</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">4</span>])</span><br><span class="line">TensorShape([<span class="number">4</span>, <span class="number">600</span>, <span class="number">600</span>, <span class="number">100</span>])</span><br></pre></td></tr></table></figure><h5 id="4、合并分割"><a href="#4、合并分割" class="headerlink" title="4、合并分割"></a>4、合并分割</h5><p><code>tf.concat</code>和<code>tf.stack</code>有略微的区别，tf.concat是<strong>连接</strong>，不会增加维度，而tf.stack是<strong>堆叠</strong>，会增加维度。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">a = tf.constant([[<span class="number">1.0</span>,<span class="number">2.0</span>],[<span class="number">3.0</span>,<span class="number">4.0</span>]])</span><br><span class="line">b = tf.constant([[<span class="number">5.0</span>,<span class="number">6.0</span>],[<span class="number">7.0</span>,<span class="number">8.0</span>]])</span><br><span class="line">c = tf.constant([[<span class="number">9.0</span>,<span class="number">10.0</span>],[<span class="number">11.0</span>,<span class="number">12.0</span>]])</span><br><span class="line"></span><br><span class="line">tf.concat([a,b,c],axis = <span class="number">0</span>)</span><br><span class="line">&lt;tf.Tensor: shape=(<span class="number">6</span>, <span class="number">2</span>), dtype=float32, numpy=</span><br><span class="line">array([[ <span class="number">1.</span>,  <span class="number">2.</span>],</span><br><span class="line">       [ <span class="number">3.</span>,  <span class="number">4.</span>],</span><br><span class="line">       [ <span class="number">5.</span>,  <span class="number">6.</span>],</span><br><span class="line">       [ <span class="number">7.</span>,  <span class="number">8.</span>],</span><br><span class="line">       [ <span class="number">9.</span>, <span class="number">10.</span>],</span><br><span class="line">       [<span class="number">11.</span>, <span class="number">12.</span>]], dtype=float32)&gt;</span><br><span class="line"></span><br><span class="line">tf.stack([a,b,c])</span><br><span class="line">&lt;tf.Tensor: shape=(<span class="number">3</span>, <span class="number">2</span>, <span class="number">2</span>), dtype=float32, numpy=</span><br><span class="line">array([[[ <span class="number">1.</span>,  <span class="number">2.</span>],</span><br><span class="line">        [ <span class="number">3.</span>,  <span class="number">4.</span>]],</span><br><span class="line"></span><br><span class="line">       [[ <span class="number">5.</span>,  <span class="number">6.</span>],</span><br><span class="line">        [ <span class="number">7.</span>,  <span class="number">8.</span>]],</span><br><span class="line"></span><br><span class="line">       [[ <span class="number">9.</span>, <span class="number">10.</span>],</span><br><span class="line">        [<span class="number">11.</span>, <span class="number">12.</span>]]], dtype=float32)&gt;</span><br></pre></td></tr></table></figure><blockquote><p><code>tf.split</code>是tf.concat的逆运算，可以指定分割份数平均分割，也可以通过指定每份的记录数量进行分割。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#tf.split(value,num_or_size_splits,axis)</span></span><br><span class="line">tf.split(c,<span class="number">3</span>,axis = <span class="number">0</span>)  <span class="comment">#指定分割份数，平均分割</span></span><br><span class="line"></span><br><span class="line">tf.split(c,[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>],axis = <span class="number">0</span>) <span class="comment">#指定每份的记录数量 </span></span><br></pre></td></tr></table></figure><h4 id="二、张量的数学运算"><a href="#二、张量的数学运算" class="headerlink" title="二、张量的数学运算"></a>二、张量的数学运算</h4><h5 id="1、标量运算"><a href="#1、标量运算" class="headerlink" title="1、标量运算"></a>1、标量运算</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a = tf.constant([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line">a%<span class="number">3</span> <span class="comment">#mod的运算符重载，等价于m = tf.math.mod(a,3)</span></span><br><span class="line">a//<span class="number">3</span>  <span class="comment">#地板除法</span></span><br><span class="line">a==<span class="number">4</span> <span class="comment">#tf.equal(a,4)</span></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line">&lt;tf.Tensor: shape=(<span class="number">2</span>, <span class="number">2</span>), dtype=<span class="built_in">bool</span>, numpy=</span><br><span class="line">array([[<span class="literal">False</span>, <span class="literal">False</span>],</span><br><span class="line">       [<span class="literal">False</span>,  <span class="literal">True</span>]])&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 三个张量相加</span></span><br><span class="line">a = tf.constant([<span class="number">1.0</span>,<span class="number">8.0</span>])</span><br><span class="line">b = tf.constant([<span class="number">5.0</span>,<span class="number">6.0</span>])</span><br><span class="line">c = tf.constant([<span class="number">6.0</span>,<span class="number">7.0</span>])</span><br><span class="line">tf.add_n([a,b,c])</span><br><span class="line">tf.maximum(a,b)  <span class="comment">#[5 8]</span></span><br><span class="line">tf.minimum(a,b)  <span class="comment">#[1 6]</span></span><br></pre></td></tr></table></figure><h5 id="2、向量运算"><a href="#2、向量运算" class="headerlink" title="2、向量运算"></a>2、向量运算</h5><blockquote><p>向量运算符只在一个特定轴上运算，将一个向量映射到一个标量或者另外一个向量。 许多向量运算符都以reduce开头。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#向量reduce</span></span><br><span class="line">a = tf.<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line">tf.<span class="built_in">print</span>(tf.reduce_sum(a))</span><br><span class="line">tf.<span class="built_in">print</span>(tf.reduce_mean(a))</span><br><span class="line">tf.<span class="built_in">print</span>(tf.reduce_max(a))</span><br><span class="line">tf.<span class="built_in">print</span>(tf.reduce_min(a))</span><br><span class="line">tf.<span class="built_in">print</span>(tf.reduce_prod(a))</span><br><span class="line"></span><br><span class="line"><span class="comment">#张量指定维度进行reduce</span></span><br><span class="line">b = tf.reshape(a,(<span class="number">3</span>,<span class="number">3</span>))</span><br><span class="line">tf.<span class="built_in">print</span>(tf.reduce_sum(b, axis=<span class="number">1</span>, keepdims=<span class="literal">True</span>))</span><br><span class="line">tf.<span class="built_in">print</span>(tf.reduce_sum(b, axis=<span class="number">0</span>, keepdims=<span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#bool类型的reduce</span></span><br><span class="line">p = tf.constant([<span class="literal">True</span>,<span class="literal">False</span>,<span class="literal">False</span>])</span><br><span class="line">q = tf.constant([<span class="literal">False</span>,<span class="literal">False</span>,<span class="literal">True</span>])</span><br><span class="line">tf.<span class="built_in">print</span>(tf.reduce_all(p)) <span class="comment">#结果为0，计算一个张量在维度上元素的“逻辑和”</span></span><br><span class="line">tf.<span class="built_in">print</span>(tf.reduce_any(q)) <span class="comment">#结果为1，在张量的维度上计算元素的 &quot;逻辑或&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#cum扫描累积</span></span><br><span class="line">a = tf.<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line">tf.<span class="built_in">print</span>(tf.math.cumsum(a))</span><br><span class="line">tf.<span class="built_in">print</span>(tf.math.cumprod(a))</span><br><span class="line"><span class="comment"># 结果：</span></span><br><span class="line">[<span class="number">1</span> <span class="number">3</span> <span class="number">6</span> ... <span class="number">28</span> <span class="number">36</span> <span class="number">45</span>]</span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">6</span> ... <span class="number">5040</span> <span class="number">40320</span> <span class="number">362880</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#arg最大最小值索引</span></span><br><span class="line">a = tf.<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line">tf.<span class="built_in">print</span>(tf.argmax(a))</span><br><span class="line">tf.<span class="built_in">print</span>(tf.argmin(a))</span><br><span class="line"></span><br><span class="line"><span class="comment">#tf.math.top_k可以用于对张量排序</span></span><br><span class="line">a = tf.constant([<span class="number">1</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">8</span>])</span><br><span class="line">values,indices = tf.math.top_k(a,<span class="number">3</span>,<span class="built_in">sorted</span>=<span class="literal">True</span>) <span class="comment">#将a中的元素按照从大到小排序，然后取前三位</span></span><br><span class="line">tf.<span class="built_in">print</span>(values) </span><br><span class="line">tf.<span class="built_in">print</span>(indices)</span><br><span class="line"><span class="comment">#结果：</span></span><br><span class="line">[<span class="number">8</span> <span class="number">7</span> <span class="number">5</span>]</span><br><span class="line">[<span class="number">5</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3、矩阵运算"><a href="#3、矩阵运算" class="headerlink" title="3、矩阵运算"></a>3、矩阵运算</h5><blockquote><p>矩阵运算包括<strong>：矩阵乘法，矩阵转置，矩阵逆，矩阵求迹，矩阵范数，矩阵行列式，矩阵求特征值，矩阵分解</strong>等运算。大部分和矩阵有关的运算都在<code>tf.linalg</code>子包中。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#矩阵乘法</span></span><br><span class="line">a = tf.constant([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line">b = tf.constant([[<span class="number">2</span>,<span class="number">0</span>],[<span class="number">0</span>,<span class="number">2</span>]])</span><br><span class="line">a@b  <span class="comment">#等价于tf.matmul(a,b)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#矩阵转置</span></span><br><span class="line">a = tf.constant([[<span class="number">1.0</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line">tf.transpose(a)</span><br><span class="line"><span class="comment">#结果</span></span><br><span class="line">&lt;tf.Tensor: shape=(<span class="number">2</span>, <span class="number">2</span>), dtype=float32, numpy=</span><br><span class="line">array([[<span class="number">1.</span>, <span class="number">3.</span>],</span><br><span class="line">       [<span class="number">2.</span>, <span class="number">4.</span>]], dtype=float32)&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">#矩阵逆，必须为tf.float32或tf.double类型</span></span><br><span class="line">a = tf.constant([[<span class="number">1.0</span>,<span class="number">2</span>],[<span class="number">3.0</span>,<span class="number">4</span>]],dtype = tf.float32)</span><br><span class="line">tf.linalg.inv(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">#矩阵求trace</span></span><br><span class="line">a = tf.constant([[<span class="number">1.0</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line">tf.linalg.trace(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">#矩阵求范数</span></span><br><span class="line">a = tf.constant([[<span class="number">1.0</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line">tf.linalg.norm(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">#矩阵行列式</span></span><br><span class="line">a = tf.constant([[<span class="number">1.0</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>]])</span><br><span class="line">tf.linalg.det(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">#矩阵特征值</span></span><br><span class="line">tf.linalg.eigvalsh(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">#矩阵qr分解</span></span><br><span class="line">a  = tf.constant([[<span class="number">1.0</span>,<span class="number">2.0</span>],[<span class="number">3.0</span>,<span class="number">4.0</span>]],dtype = tf.float32)</span><br><span class="line">q,r = tf.linalg.qr(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">#矩阵svd分解</span></span><br><span class="line">a  = tf.constant([[<span class="number">1.0</span>,<span class="number">2.0</span>],[<span class="number">3.0</span>,<span class="number">4.0</span>]],dtype = tf.float32)</span><br><span class="line">v,s,d = tf.linalg.svd(a)</span><br><span class="line">tf.matmul(tf.matmul(s,tf.linalg.diag(v)),d)</span><br><span class="line"><span class="comment">#利用svd分解可以在TensorFlow中实现主成分分析降维</span></span><br></pre></td></tr></table></figure><h5 id="4、广播机制"><a href="#4、广播机制" class="headerlink" title="4、广播机制"></a>4、广播机制</h5><ul><li>1、如果张量的维度不同，将维度较小的张量进行扩展，直到两个张量的维度都一样。</li><li>2、如果两个张量在某个维度上的长度是相同的，或者其中一个张量在该维度上的长度为1，那么我们就说这两个张量在该维度上是相容的。</li><li>3、如果两个张量在所有维度上都是相容的，它们就能使用广播。</li><li>4、广播之后，每个维度的长度将取两个张量在该维度长度的较大值。</li><li>5、在任何一个维度上，如果一个张量的长度为1，另一个张量长度大于1，那么在该维度上，就好像是对第一个张量进行了复制。</li></ul><blockquote><p><code>tf.broadcast_to</code> 以显式的方式按照广播机制扩展张量的维度。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">a = tf.constant([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">b = tf.constant([[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],[<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>]])</span><br><span class="line">b + a  <span class="comment">#等价于 b + tf.broadcast_to(a,b.shape)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#计算广播后计算结果的形状，静态形状，TensorShape类型参数</span></span><br><span class="line">tf.broadcast_static_shape(a.shape,b.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment">#计算广播后计算结果的形状，动态形状，Tensor类型参数</span></span><br><span class="line">c = tf.constant([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">d = tf.constant([[<span class="number">1</span>],[<span class="number">2</span>],[<span class="number">3</span>]])</span><br><span class="line">tf.broadcast_dynamic_shape(tf.shape(c),tf.shape(d))</span><br><span class="line"><span class="comment">#广播效果</span></span><br><span class="line">c+d <span class="comment">#等价于 tf.broadcast_to(c,[3,3]) + tf.broadcast_to(d,[3,3])</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title> TensorFlow2.X学习笔记(2)--TensorFlow的层次结构介绍</title>
      <link href="/2020/04/30/TensorFlow2-X%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2-TensorFlow%E7%9A%84%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D/"/>
      <url>/2020/04/30/TensorFlow2-X%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-2-TensorFlow%E7%9A%84%E5%B1%82%E6%AC%A1%E7%BB%93%E6%9E%84%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="TensorFlow的层次结构"><a href="#TensorFlow的层次结构" class="headerlink" title="TensorFlow的层次结构"></a>TensorFlow的层次结构</h1><p>TensorFlow中5个不同的层次结构：</p><p><code>硬件层，内核层，低阶API，中阶API，高阶API</code></p><img src="https://ae01.alicdn.com/kf/Haf5b341a1ab342d2b56a5ec363e442770.jpg" style="zoom:70%;" /><ul><li>最底层为硬件层，TensorFlow支持CPU、GPU或TPU加入计算资源池。</li><li>第二层为C++实现的内核，kernel可以跨平台分布运行。</li><li>第三层为Python实现的操作符，提供了封装<code>C++内核</code>的低级API指令，主要包括各种张量操作<code>算子、计算图、自动微分</code>. 如<code>tf.Variable,tf.constant,tf.function,tf.GradientTape,tf.nn.softmax...</code> 如果把模型比作一个房子，那么第三层API就是【模型之砖】。</li><li>第四层为Python实现的模型组件，对低级API进行了函数封装，主要包括各种<code>模型层，损失函数，优化器，数据管道，特征列</code>等等。 如tf.keras.layers,tf.keras.losses,tf.keras.metrics,tf.keras.optimizers,tf.data.DataSet,tf.feature_column… 如果把模型比作一个房子，那么第四层API就是【模型之墙】。</li><li>第五层为Python实现的模型成品，一般为按照OOP方式封装的高级API，主要为<code>tf.keras.models</code>提供的模型的类接口。 如果把模型比作一个房子，那么第五层API就是模型本身，即【模型之屋】。 </li></ul><h4 id="低阶API示范"><a href="#低阶API示范" class="headerlink" title="低阶API示范"></a>低阶API示范</h4><blockquote><p>低阶API主要包括张量操作，计算图和自动微分。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印时间分割线</span></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printbar</span>():</span></span><br><span class="line">    ts = tf.timestamp()</span><br><span class="line">    today_ts = ts%(<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">    hour = tf.cast(today_ts//<span class="number">3600</span>+<span class="number">8</span>,tf.int32)%tf.constant(<span class="number">24</span>)</span><br><span class="line">    minite = tf.cast((today_ts%<span class="number">3600</span>)//<span class="number">60</span>,tf.int32)</span><br><span class="line">    second = tf.cast(tf.floor(today_ts%<span class="number">60</span>),tf.int32)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">timeformat</span>(<span class="params">m</span>):</span></span><br><span class="line">        <span class="keyword">if</span> tf.strings.length(tf.strings.<span class="built_in">format</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,m))==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span>(tf.strings.<span class="built_in">format</span>(<span class="string">&quot;0&#123;&#125;&quot;</span>,m))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span>(tf.strings.<span class="built_in">format</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,m))</span><br><span class="line"></span><br><span class="line">    timestring = tf.strings.join([timeformat(hour),timeformat(minite),</span><br><span class="line">                timeformat(second)],separator = <span class="string">&quot;:&quot;</span>)</span><br><span class="line">    tf.<span class="built_in">print</span>(<span class="string">&quot;==========&quot;</span>*<span class="number">8</span>,end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">    tf.<span class="built_in">print</span>(timestring)</span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line"><span class="comment">#样本数量</span></span><br><span class="line">n = <span class="number">400</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成测试用数据集</span></span><br><span class="line">X = tf.random.uniform([n,<span class="number">2</span>],minval=-<span class="number">10</span>,maxval=<span class="number">10</span>) </span><br><span class="line">w0 = tf.constant([[<span class="number">2.0</span>],[-<span class="number">1.0</span>]])</span><br><span class="line">b0 = tf.constant(<span class="number">3.0</span>)</span><br><span class="line">Y = X@w0 + b0 + tf.random.normal([n,<span class="number">1</span>],mean = <span class="number">0.0</span>,stddev= <span class="number">2.0</span>)  <span class="comment"># @表示矩阵乘法,增加正态扰动</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#使用动态图调试</span></span><br><span class="line"></span><br><span class="line">w = tf.Variable(tf.random.normal(w0.shape))</span><br><span class="line">b = tf.Variable(<span class="number">0.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span>(<span class="params">epoches</span>):</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> tf.<span class="built_in">range</span>(<span class="number">1</span>,epoches+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">            <span class="comment">#正向传播求损失</span></span><br><span class="line">            Y_hat = X@w + b</span><br><span class="line">            loss = tf.squeeze(tf.transpose(Y-Y_hat)@(Y-Y_hat))/(<span class="number">2.0</span>*n)   </span><br><span class="line"></span><br><span class="line">        <span class="comment"># 反向传播求梯度</span></span><br><span class="line">        dloss_dw,dloss_db = tape.gradient(loss,[w,b])</span><br><span class="line">        <span class="comment"># 梯度下降法更新参数</span></span><br><span class="line">        w.assign(w - <span class="number">0.001</span>*dloss_dw)</span><br><span class="line">        b.assign(b - <span class="number">0.001</span>*dloss_db)</span><br><span class="line">        <span class="keyword">if</span> epoch%<span class="number">1000</span> == <span class="number">0</span>:</span><br><span class="line">            printbar()</span><br><span class="line">            tf.<span class="built_in">print</span>(<span class="string">&quot;epoch =&quot;</span>,epoch,<span class="string">&quot; loss =&quot;</span>,loss,)</span><br><span class="line">            tf.<span class="built_in">print</span>(<span class="string">&quot;w =&quot;</span>,w)</span><br><span class="line">            tf.<span class="built_in">print</span>(<span class="string">&quot;b =&quot;</span>,b)</span><br><span class="line">            tf.<span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">train(<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><h5 id="使用autograph机制转换成静态图加速"><a href="#使用autograph机制转换成静态图加速" class="headerlink" title="使用autograph机制转换成静态图加速"></a>使用autograph机制转换成静态图加速</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">w = tf.Variable(tf.random.normal(w0.shape))</span><br><span class="line">b = tf.Variable(<span class="number">0.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span>(<span class="params">epoches</span>):</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> tf.<span class="built_in">range</span>(<span class="number">1</span>,epoches+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">            <span class="comment">#正向传播求损失</span></span><br><span class="line">            Y_hat = X@w + b</span><br><span class="line">            loss = tf.squeeze(tf.transpose(Y-Y_hat)@(Y-Y_hat))/(<span class="number">2.0</span>*n)   </span><br><span class="line"></span><br><span class="line">        <span class="comment"># 反向传播求梯度</span></span><br><span class="line">        dloss_dw,dloss_db = tape.gradient(loss,[w,b])</span><br><span class="line">        <span class="comment"># 梯度下降法更新参数</span></span><br><span class="line">        w.assign(w - <span class="number">0.001</span>*dloss_dw)</span><br><span class="line">        b.assign(b - <span class="number">0.001</span>*dloss_db)</span><br><span class="line">        <span class="keyword">if</span> epoch%<span class="number">1000</span> == <span class="number">0</span>:</span><br><span class="line">            printbar()</span><br><span class="line">            tf.<span class="built_in">print</span>(<span class="string">&quot;epoch =&quot;</span>,epoch,<span class="string">&quot; loss =&quot;</span>,loss,)</span><br><span class="line">            tf.<span class="built_in">print</span>(<span class="string">&quot;w =&quot;</span>,w)</span><br><span class="line">            tf.<span class="built_in">print</span>(<span class="string">&quot;b =&quot;</span>,b)</span><br><span class="line">            tf.<span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">train(<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><h4 id="中阶API示范"><a href="#中阶API示范" class="headerlink" title="中阶API示范"></a>中阶API示范</h4><blockquote><p>TensorFlow的中阶API主要包括各种<code>模型层</code>，<code>损失函数</code>，<code>优化器</code>，<code>数据管道</code>，<code>特征列</code>等等。</p></blockquote><p><strong>下面代码在GPU上面测试不通过，有人说可以在CPU上面跑通</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 要使用CPU则在代码最上面加上下面两行代码</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&quot;CUDA_VISIBLE_DEVICES&quot;</span>] = <span class="string">&quot;-1&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> layers,losses,metrics,optimizers</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#打印时间分割线</span></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printbar</span>():</span></span><br><span class="line">    ts = tf.timestamp()</span><br><span class="line">    today_ts = ts%(<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">    hour = tf.cast(today_ts//<span class="number">3600</span>+<span class="number">8</span>,tf.int32)%tf.constant(<span class="number">24</span>)</span><br><span class="line">    minite = tf.cast((today_ts%<span class="number">3600</span>)//<span class="number">60</span>,tf.int32)</span><br><span class="line">    second = tf.cast(tf.floor(today_ts%<span class="number">60</span>),tf.int32)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">timeformat</span>(<span class="params">m</span>):</span></span><br><span class="line">        <span class="keyword">if</span> tf.strings.length(tf.strings.<span class="built_in">format</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,m))==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span>(tf.strings.<span class="built_in">format</span>(<span class="string">&quot;0&#123;&#125;&quot;</span>,m))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span>(tf.strings.<span class="built_in">format</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,m))</span><br><span class="line"></span><br><span class="line">    timestring = tf.strings.join([timeformat(hour),timeformat(minite),</span><br><span class="line">                timeformat(second)],separator = <span class="string">&quot;:&quot;</span>)</span><br><span class="line">    tf.<span class="built_in">print</span>(<span class="string">&quot;==========&quot;</span>*<span class="number">8</span>,end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">    tf.<span class="built_in">print</span>(timestring)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">   <span class="comment">#样本数量</span></span><br><span class="line">n = <span class="number">800</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成测试用数据集</span></span><br><span class="line">X = tf.random.uniform([n,<span class="number">2</span>],minval=-<span class="number">10</span>,maxval=<span class="number">10</span>) </span><br><span class="line">w0 = tf.constant([[<span class="number">2.0</span>],[-<span class="number">1.0</span>]])</span><br><span class="line">b0 = tf.constant(<span class="number">3.0</span>)</span><br><span class="line">Y = X@w0 + b0 + tf.random.normal([n,<span class="number">1</span>],mean = <span class="number">0.0</span>,stddev= <span class="number">2.0</span>)  <span class="comment"># @表示矩阵乘法,增加正态扰动</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#构建输入数据管道</span></span><br><span class="line">ds = tf.data.Dataset.from_tensor_slices((X,Y)) \</span><br><span class="line">     .shuffle(buffer_size = <span class="number">1000</span>).batch(<span class="number">100</span>) \</span><br><span class="line">     .prefetch(tf.data.experimental.AUTOTUNE)  </span><br><span class="line"></span><br><span class="line"><span class="comment">#定义优化器</span></span><br><span class="line">optimizer = optimizers.SGD(learning_rate=<span class="number">0.001</span>)</span><br><span class="line"></span><br><span class="line">linear = layers.Dense(units = <span class="number">1</span>)</span><br><span class="line">linear.build(input_shape = (<span class="number">2</span>,)) </span><br><span class="line"></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span>(<span class="params">epoches</span>):</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> tf.<span class="built_in">range</span>(<span class="number">1</span>,epoches+<span class="number">1</span>):</span><br><span class="line">        L = tf.constant(<span class="number">0.0</span>) <span class="comment">#使用L记录loss值</span></span><br><span class="line">        <span class="keyword">for</span> X_batch,Y_batch <span class="keyword">in</span> ds:</span><br><span class="line">            <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">                Y_hat = linear(X_batch)</span><br><span class="line">                loss = losses.mean_squared_error(tf.reshape(Y_hat,[-<span class="number">1</span>]),tf.reshape(Y_batch,[-<span class="number">1</span>]))</span><br><span class="line">            grads = tape.gradient(loss,linear.variables)</span><br><span class="line">            optimizer.apply_gradients(<span class="built_in">zip</span>(grads,linear.variables))</span><br><span class="line">            L = loss</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(epoch%<span class="number">100</span>==<span class="number">0</span>):</span><br><span class="line">            printbar()</span><br><span class="line">            tf.<span class="built_in">print</span>(<span class="string">&quot;epoch =&quot;</span>,epoch,<span class="string">&quot;loss =&quot;</span>,L)</span><br><span class="line">            tf.<span class="built_in">print</span>(<span class="string">&quot;w =&quot;</span>,linear.kernel)</span><br><span class="line">            tf.<span class="built_in">print</span>(<span class="string">&quot;b =&quot;</span>,linear.bias)</span><br><span class="line">            tf.<span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">train(<span class="number">500</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行结果</span></span><br><span class="line">================================================================================<span class="number">11</span>:<span class="number">54</span>:07</span><br><span class="line">epoch = <span class="number">100</span> loss = <span class="number">4.13672256</span></span><br><span class="line">w = [[<span class="number">1.9903785</span>]</span><br><span class="line"> [-<span class="number">0.987648785</span>]]</span><br><span class="line">b = [<span class="number">2.40720725</span>]</span><br><span class="line"></span><br><span class="line">================================================================================<span class="number">11</span>:<span class="number">54</span>:<span class="number">10</span></span><br><span class="line">epoch = <span class="number">200</span> loss = <span class="number">4.51364088</span></span><br><span class="line">w = [[<span class="number">1.99168313</span>]</span><br><span class="line"> [-<span class="number">0.987588942</span>]]</span><br><span class="line">b = [<span class="number">2.90266657</span>]</span><br><span class="line"></span><br><span class="line">================================================================================<span class="number">11</span>:<span class="number">54</span>:<span class="number">12</span></span><br><span class="line">epoch = <span class="number">300</span> loss = <span class="number">4.33221674</span></span><br><span class="line">w = [[<span class="number">1.99366784</span>]</span><br><span class="line"> [-<span class="number">0.98791343</span>]]</span><br><span class="line">b = [<span class="number">3.00248265</span>]</span><br><span class="line"></span><br><span class="line">================================================================================<span class="number">11</span>:<span class="number">54</span>:<span class="number">15</span></span><br><span class="line">epoch = <span class="number">400</span> loss = <span class="number">3.12717295</span></span><br><span class="line">w = [[<span class="number">1.98944652</span>]</span><br><span class="line"> [-<span class="number">0.986787856</span>]]</span><br><span class="line">b = [<span class="number">3.02270603</span>]</span><br><span class="line"></span><br><span class="line">================================================================================<span class="number">11</span>:<span class="number">54</span>:<span class="number">17</span></span><br><span class="line">epoch = <span class="number">500</span> loss = <span class="number">3.830863</span></span><br><span class="line">w = [[<span class="number">1.99245548</span>]</span><br><span class="line"> [-<span class="number">0.987303793</span>]]</span><br><span class="line">b = [<span class="number">3.02663541</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="高阶API示范"><a href="#高阶API示范" class="headerlink" title="高阶API示范"></a>高阶API示范</h4><blockquote><p>TensorFlow的高阶API主要为tf.keras.models提供的模型的类接口。</p><p>使用Keras接口有以下3种方式构建模型：使用<strong>Sequential</strong>按层顺序构建模型，使用<strong>函数式API</strong>构建任意结构模型，<strong>继承Model基类</strong>构建自定义模型。</p></blockquote><h5 id="1-、使用Sequential按层顺序构建模型"><a href="#1-、使用Sequential按层顺序构建模型" class="headerlink" title="(1)、使用Sequential按层顺序构建模型"></a>(1)、使用Sequential按层顺序构建模型</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> models,layers,optimizers</span><br><span class="line"></span><br><span class="line"><span class="comment">#样本数量</span></span><br><span class="line">n = <span class="number">800</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成测试用数据集</span></span><br><span class="line">X = tf.random.uniform([n,<span class="number">2</span>],minval=-<span class="number">10</span>,maxval=<span class="number">10</span>) </span><br><span class="line">w0 = tf.constant([[<span class="number">2.0</span>],[-<span class="number">1.0</span>]])</span><br><span class="line">b0 = tf.constant(<span class="number">3.0</span>)</span><br><span class="line"></span><br><span class="line">Y = X@w0 + b0 + tf.random.normal([n,<span class="number">1</span>],mean = <span class="number">0.0</span>,stddev= <span class="number">2.0</span>)  <span class="comment"># @表示矩阵乘法,增加正态扰动</span></span><br><span class="line"></span><br><span class="line">tf.keras.backend.clear_session()</span><br><span class="line"></span><br><span class="line">linear = models.Sequential()</span><br><span class="line">linear.add(layers.Dense(<span class="number">1</span>,input_shape =(<span class="number">2</span>,)))</span><br><span class="line">linear.summary()</span><br><span class="line"></span><br><span class="line"><span class="comment">### 使用fit方法进行训练</span></span><br><span class="line">linear.<span class="built_in">compile</span>(optimizer=<span class="string">&quot;adam&quot;</span>,loss=<span class="string">&quot;mse&quot;</span>,metrics=[<span class="string">&quot;mae&quot;</span>])</span><br><span class="line">linear.fit(X,Y,batch_size = <span class="number">20</span>,epochs = <span class="number">200</span>)  </span><br><span class="line"></span><br><span class="line">tf.<span class="built_in">print</span>(<span class="string">&quot;w = &quot;</span>,linear.layers[<span class="number">0</span>].kernel)</span><br><span class="line">tf.<span class="built_in">print</span>(<span class="string">&quot;b = &quot;</span>,linear.layers[<span class="number">0</span>].bias)</span><br><span class="line"></span><br><span class="line"><span class="comment">### 运行结果</span></span><br><span class="line">Model: <span class="string">&quot;sequential&quot;</span></span><br><span class="line">_________________________________________________________________</span><br><span class="line">Layer (<span class="built_in">type</span>)                 Output Shape              Param <span class="comment">#   </span></span><br><span class="line">=================================================================</span><br><span class="line">dense (Dense)                (<span class="literal">None</span>, <span class="number">1</span>)                 <span class="number">3</span>         </span><br><span class="line">=================================================================</span><br><span class="line">Total params: <span class="number">3</span></span><br><span class="line">Trainable params: <span class="number">3</span></span><br><span class="line">Non-trainable params: <span class="number">0</span></span><br><span class="line">_________________________________________________________________</span><br><span class="line">Train on <span class="number">800</span> samples</span><br><span class="line"></span><br><span class="line">............</span><br><span class="line">。。。略过。。。</span><br><span class="line">............</span><br><span class="line"></span><br><span class="line">Epoch <span class="number">197</span>/<span class="number">200</span></span><br><span class="line"></span><br><span class="line"> <span class="number">20</span>/<span class="number">800</span> [..............................] - ETA: 0s - loss: <span class="number">4.1910</span> - mae: <span class="number">1.5875</span></span><br><span class="line"><span class="number">360</span>/<span class="number">800</span> [============&gt;.................] - ETA: 0s - loss: <span class="number">3.7929</span> - mae: <span class="number">1.5485</span></span><br><span class="line"><span class="number">660</span>/<span class="number">800</span> [=======================&gt;......] - ETA: 0s - loss: <span class="number">4.1543</span> - mae: <span class="number">1.6328</span></span><br><span class="line"><span class="number">800</span>/<span class="number">800</span> [==============================] - 0s 171us/sample - loss: <span class="number">4.0170</span> - mae: <span class="number">1.6049</span></span><br><span class="line">Epoch <span class="number">198</span>/<span class="number">200</span></span><br><span class="line"></span><br><span class="line"> <span class="number">20</span>/<span class="number">800</span> [..............................] - ETA: 0s - loss: <span class="number">5.7438</span> - mae: <span class="number">1.8000</span></span><br><span class="line"><span class="number">340</span>/<span class="number">800</span> [===========&gt;..................] - ETA: 0s - loss: <span class="number">4.1317</span> - mae: <span class="number">1.5987</span></span><br><span class="line"><span class="number">700</span>/<span class="number">800</span> [=========================&gt;....] - ETA: 0s - loss: <span class="number">4.1257</span> - mae: <span class="number">1.6281</span></span><br><span class="line"><span class="number">800</span>/<span class="number">800</span> [==============================] - 0s 151us/sample - loss: <span class="number">4.0162</span> - mae: <span class="number">1.6045</span></span><br><span class="line">Epoch <span class="number">199</span>/<span class="number">200</span></span><br><span class="line"></span><br><span class="line"> <span class="number">20</span>/<span class="number">800</span> [..............................] - ETA: 0s - loss: <span class="number">5.3425</span> - mae: <span class="number">1.6237</span></span><br><span class="line"><span class="number">340</span>/<span class="number">800</span> [===========&gt;..................] - ETA: 0s - loss: <span class="number">3.9504</span> - mae: <span class="number">1.5925</span></span><br><span class="line"><span class="number">660</span>/<span class="number">800</span> [=======================&gt;......] - ETA: 0s - loss: <span class="number">4.1211</span> - mae: <span class="number">1.6202</span></span><br><span class="line"><span class="number">800</span>/<span class="number">800</span> [==============================] - 0s 162us/sample - loss: <span class="number">4.0166</span> - mae: <span class="number">1.6045</span></span><br><span class="line">Epoch <span class="number">200</span>/<span class="number">200</span></span><br><span class="line"></span><br><span class="line"> <span class="number">20</span>/<span class="number">800</span> [..............................] - ETA: 0s - loss: <span class="number">4.0931</span> - mae: <span class="number">1.7218</span></span><br><span class="line"><span class="number">380</span>/<span class="number">800</span> [=============&gt;................] - ETA: 0s - loss: <span class="number">3.9471</span> - mae: <span class="number">1.6048</span></span><br><span class="line"><span class="number">700</span>/<span class="number">800</span> [=========================&gt;....] - ETA: 0s - loss: <span class="number">3.8557</span> - mae: <span class="number">1.5794</span></span><br><span class="line"><span class="number">800</span>/<span class="number">800</span> [==============================] - 0s 160us/sample - loss: <span class="number">4.0185</span> - mae: <span class="number">1.6047</span></span><br><span class="line">w= [[<span class="number">1.99929214</span>]</span><br><span class="line"> [-<span class="number">0.96500361</span>]]</span><br><span class="line">b= [<span class="number">3.04800749</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2-、继承Model基类构建自定义模型"><a href="#2-、继承Model基类构建自定义模型" class="headerlink" title="(2)、继承Model基类构建自定义模型"></a>(2)、继承Model基类构建自定义模型</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 要使用CPU则在代码最上面加上下面两行代码</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.environ[<span class="string">&quot;CUDA_VISIBLE_DEVICES&quot;</span>] = <span class="string">&quot;-1&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> models,layers,optimizers,losses,metrics</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#打印时间分割线</span></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">printbar</span>():</span></span><br><span class="line">    ts = tf.timestamp()</span><br><span class="line">    today_ts = ts%(<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">    hour = tf.cast(today_ts//<span class="number">3600</span>+<span class="number">8</span>,tf.int32)%tf.constant(<span class="number">24</span>)</span><br><span class="line">    minite = tf.cast((today_ts%<span class="number">3600</span>)//<span class="number">60</span>,tf.int32)</span><br><span class="line">    second = tf.cast(tf.floor(today_ts%<span class="number">60</span>),tf.int32)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">timeformat</span>(<span class="params">m</span>):</span></span><br><span class="line">        <span class="keyword">if</span> tf.strings.length(tf.strings.<span class="built_in">format</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,m))==<span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span>(tf.strings.<span class="built_in">format</span>(<span class="string">&quot;0&#123;&#125;&quot;</span>,m))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span>(tf.strings.<span class="built_in">format</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,m))</span><br><span class="line"></span><br><span class="line">    timestring = tf.strings.join([timeformat(hour),timeformat(minite),</span><br><span class="line">                timeformat(second)],separator = <span class="string">&quot;:&quot;</span>)</span><br><span class="line">    tf.<span class="built_in">print</span>(<span class="string">&quot;==========&quot;</span>*<span class="number">8</span>,end = <span class="string">&quot;&quot;</span>)</span><br><span class="line">    tf.<span class="built_in">print</span>(timestring)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#样本数量</span></span><br><span class="line">n = <span class="number">800</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成测试用数据集</span></span><br><span class="line">X = tf.random.uniform([n,<span class="number">2</span>],minval=-<span class="number">10</span>,maxval=<span class="number">10</span>) </span><br><span class="line">w0 = tf.constant([[<span class="number">2.0</span>],[-<span class="number">1.0</span>]])</span><br><span class="line">b0 = tf.constant(<span class="number">3.0</span>)</span><br><span class="line"></span><br><span class="line">Y = X@w0 + b0 + tf.random.normal([n,<span class="number">1</span>],mean = <span class="number">0.0</span>,stddev= <span class="number">2.0</span>)  <span class="comment"># @表示矩阵乘法,增加正态扰动</span></span><br><span class="line"></span><br><span class="line">ds_train = tf.data.Dataset.from_tensor_slices((X[<span class="number">0</span>:n*<span class="number">3</span>//<span class="number">4</span>,:],Y[<span class="number">0</span>:n*<span class="number">3</span>//<span class="number">4</span>,:])) \</span><br><span class="line">     .shuffle(buffer_size = <span class="number">1000</span>).batch(<span class="number">20</span>) \</span><br><span class="line">     .prefetch(tf.data.experimental.AUTOTUNE) \</span><br><span class="line">     .cache()</span><br><span class="line"></span><br><span class="line">ds_valid = tf.data.Dataset.from_tensor_slices((X[n*<span class="number">3</span>//<span class="number">4</span>:,:],Y[n*<span class="number">3</span>//<span class="number">4</span>:,:])) \</span><br><span class="line">     .shuffle(buffer_size = <span class="number">1000</span>).batch(<span class="number">20</span>) \</span><br><span class="line">     .prefetch(tf.data.experimental.AUTOTUNE) \</span><br><span class="line">     .cache()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">tf.keras.backend.clear_session()</span><br><span class="line"><span class="comment"># 自定义模型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyModel</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">super</span>(MyModel, self).__init__()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">build</span>(<span class="params">self,input_shape</span>):</span></span><br><span class="line">        self.dense1 = layers.Dense(<span class="number">1</span>)   </span><br><span class="line">        <span class="built_in">super</span>(MyModel,self).build(input_shape)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">call</span>(<span class="params">self, x</span>):</span></span><br><span class="line">        y = self.dense1(x)</span><br><span class="line">        <span class="keyword">return</span>(y)</span><br><span class="line"></span><br><span class="line">model = MyModel()</span><br><span class="line">model.build(input_shape =(<span class="literal">None</span>,<span class="number">2</span>))</span><br><span class="line">model.summary()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 自定义训练循环(专家教程)</span></span><br><span class="line">optimizer = optimizers.Adam()</span><br><span class="line">loss_func = losses.MeanSquaredError()</span><br><span class="line"></span><br><span class="line">train_loss = tf.keras.metrics.Mean(name=<span class="string">&#x27;train_loss&#x27;</span>)</span><br><span class="line">train_metric = tf.keras.metrics.MeanAbsoluteError(name=<span class="string">&#x27;train_mae&#x27;</span>)</span><br><span class="line"></span><br><span class="line">valid_loss = tf.keras.metrics.Mean(name=<span class="string">&#x27;valid_loss&#x27;</span>)</span><br><span class="line">valid_metric = tf.keras.metrics.MeanAbsoluteError(name=<span class="string">&#x27;valid_mae&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_step</span>(<span class="params">model, features, labels</span>):</span></span><br><span class="line">    <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">        predictions = model(features)</span><br><span class="line">        loss = loss_func(labels, predictions)</span><br><span class="line">    gradients = tape.gradient(loss, model.trainable_variables)</span><br><span class="line">    optimizer.apply_gradients(<span class="built_in">zip</span>(gradients, model.trainable_variables))</span><br><span class="line"></span><br><span class="line">    train_loss.update_state(loss)</span><br><span class="line">    train_metric.update_state(labels, predictions)</span><br><span class="line"></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">valid_step</span>(<span class="params">model, features, labels</span>):</span></span><br><span class="line">    predictions = model(features)</span><br><span class="line">    batch_loss = loss_func(labels, predictions)</span><br><span class="line">    valid_loss.update_state(batch_loss)</span><br><span class="line">    valid_metric.update_state(labels, predictions)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_model</span>(<span class="params">model,ds_train,ds_valid,epochs</span>):</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> tf.<span class="built_in">range</span>(<span class="number">1</span>,epochs+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> features, labels <span class="keyword">in</span> ds_train:</span><br><span class="line">            train_step(model,features,labels)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> features, labels <span class="keyword">in</span> ds_valid:</span><br><span class="line">            valid_step(model,features,labels)</span><br><span class="line"></span><br><span class="line">        logs = <span class="string">&#x27;Epoch=&#123;&#125;,Loss:&#123;&#125;,MAE:&#123;&#125;,Valid Loss:&#123;&#125;,Valid MAE:&#123;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>  epoch%<span class="number">100</span> ==<span class="number">0</span>:</span><br><span class="line">            printbar()</span><br><span class="line">            tf.<span class="built_in">print</span>(tf.strings.<span class="built_in">format</span>(logs,</span><br><span class="line">            (epoch,train_loss.result(),train_metric.result(),valid_loss.result(),valid_metric.result())))</span><br><span class="line">            tf.<span class="built_in">print</span>(<span class="string">&quot;w=&quot;</span>,model.layers[<span class="number">0</span>].kernel)</span><br><span class="line">            tf.<span class="built_in">print</span>(<span class="string">&quot;b=&quot;</span>,model.layers[<span class="number">0</span>].bias)</span><br><span class="line">            tf.<span class="built_in">print</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">        train_loss.reset_states()</span><br><span class="line">        valid_loss.reset_states()</span><br><span class="line">        train_metric.reset_states()</span><br><span class="line">        valid_metric.reset_states()</span><br><span class="line"></span><br><span class="line">train_model(model,ds_train,ds_valid,<span class="number">400</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#### 运行结果</span></span><br><span class="line">Model: <span class="string">&quot;my_model&quot;</span></span><br><span class="line">_________________________________________________________________</span><br><span class="line">Layer (<span class="built_in">type</span>)                 Output Shape              Param <span class="comment">#   </span></span><br><span class="line">=================================================================</span><br><span class="line">dense (Dense)                multiple                  <span class="number">3</span>         </span><br><span class="line">=================================================================</span><br><span class="line">Total params: <span class="number">3</span></span><br><span class="line">Trainable params: <span class="number">3</span></span><br><span class="line">Non-trainable params: <span class="number">0</span></span><br><span class="line">_________________________________________________________________</span><br><span class="line">================================================================================<span class="number">18</span>:<span class="number">17</span>:08</span><br><span class="line">Epoch=<span class="number">100</span>,Loss:<span class="number">67.9662247</span>,MAE:<span class="number">6.36445856</span>,Valid Loss:<span class="number">65.3885117</span>,Valid MAE:<span class="number">6.17629</span></span><br><span class="line">w= [[<span class="number">1.65662384</span>]</span><br><span class="line"> [-<span class="number">1.01629746</span>]]</span><br><span class="line">b= [<span class="number">1.92026019</span>]</span><br><span class="line"></span><br><span class="line">================================================================================<span class="number">18</span>:<span class="number">17</span>:<span class="number">16</span></span><br><span class="line">Epoch=<span class="number">200</span>,Loss:<span class="number">36.144165</span>,MAE:<span class="number">4.0302186</span>,Valid Loss:<span class="number">35.4477425</span>,Valid MAE:<span class="number">4.01481533</span></span><br><span class="line">w= [[<span class="number">1.99435031</span>]</span><br><span class="line"> [-<span class="number">1.00531375</span>]]</span><br><span class="line">b= [<span class="number">3.02523756</span>]</span><br><span class="line"></span><br><span class="line">================================================================================<span class="number">18</span>:<span class="number">17</span>:<span class="number">25</span></span><br><span class="line">Epoch=<span class="number">300</span>,Loss:<span class="number">25.3425236</span>,MAE:<span class="number">3.20795441</span>,Valid Loss:<span class="number">25.308445</span>,Valid MAE:<span class="number">3.25203133</span></span><br><span class="line">w= [[<span class="number">1.99592912</span>]</span><br><span class="line"> [-<span class="number">1.00504756</span>]]</span><br><span class="line">b= [<span class="number">3.08958364</span>]</span><br><span class="line"></span><br><span class="line">================================================================================<span class="number">18</span>:<span class="number">17</span>:<span class="number">34</span></span><br><span class="line">Epoch=<span class="number">400</span>,Loss:<span class="number">19.9554043</span>,MAE:<span class="number">2.79780984</span>,Valid Loss:<span class="number">20.2524834</span>,Valid MAE:<span class="number">2.87172508</span></span><br><span class="line">w= [[<span class="number">1.99595356</span>]</span><br><span class="line"> [-<span class="number">1.00504148</span>]]</span><br><span class="line">b= [<span class="number">3.08971953</span>]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TensorFlow2.X学习笔记(1)--TensorFlow核心概念</title>
      <link href="/2020/04/29/TensorFlow2-X%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1-TensorFlow%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/"/>
      <url>/2020/04/29/TensorFlow2-X%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1-TensorFlow%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>该系列笔记来自于对<a href="https://lyhue1991.github.io/eat_tensorflow2_in_30_days">https://lyhue1991.github.io/eat_tensorflow2_in_30_days</a> 文档的学习，感谢大神的文档！</p></blockquote><p>  <code>TensorFlow</code>™ 是一个采用 <strong>数据流图</strong>（data flow graphs），用于数值计算的开源软件库。节点（Nodes）在图中表示数学操作，图中的线（edges）则表示在节点间相互联系的多维数据数组，即张量（tensor）。它灵活的架构让你可以<strong>在多种平台上展开计算</strong>，例如台式计算机中的一个或多个CPU（或GPU），服务器，移动设备等等。TensorFlow 最初由Google大脑小组（隶属于Google机器智能研究机构）的研究员和工程师们开发出来，<strong>用于机器学习和深度神经网络</strong>方面的研究，但这个系统的通用性使其也可<strong>广泛用于其他计算领域</strong>。</p><p>TensorFlow的<code>主要优点</code>：</p><ul><li>灵活性：支持底层数值计算，C++自定义操作符</li><li>可移植性：从服务器到PC到手机，从CPU到GPU到TPU</li><li>分布式计算：分布式并行计算，可指定操作符对应计算设备</li></ul><h4 id="1、张量数据结构"><a href="#1、张量数据结构" class="headerlink" title="1、张量数据结构"></a>1、张量数据结构</h4><p><code>TensorFlow程序</code> = <code>张量数据结构</code> + <code>计算图算法语言</code></p><p>张量和计算图是 TensorFlow的核心概念。</p><p>Tensorflow的基本数据结构是张量Tensor。张量即多维数组。Tensorflow的张量和numpy中的array很类似。</p><p>从行为特性来看，有两种类型的张量，常量constant和变量Variable.</p><p><code>常量</code>的值在计算图中不可以被重新赋值，<code>变量</code>可以在计算图中用<code>assign</code>等算子重新赋值。</p><h5 id="（1）常量张量"><a href="#（1）常量张量" class="headerlink" title="（1）常量张量"></a>（1）常量张量</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">i = tf.constant(<span class="number">1</span>) <span class="comment"># tf.int32 类型常量</span></span><br><span class="line">l = tf.constant(<span class="number">1</span>,dtype = tf.int64) <span class="comment"># tf.int64 类型常量</span></span><br><span class="line">f = tf.constant(<span class="number">1.23</span>) <span class="comment">#tf.float32 类型常量</span></span><br><span class="line">d = tf.constant(<span class="number">3.14</span>,dtype = tf.double) <span class="comment"># tf.double 类型常量</span></span><br><span class="line">s = tf.constant(<span class="string">&quot;hello world&quot;</span>) <span class="comment"># tf.string类型常量</span></span><br><span class="line">b = tf.constant(<span class="literal">True</span>) <span class="comment">#tf.bool类型常量</span></span><br></pre></td></tr></table></figure><p><code>标量</code>为<code>0维</code>张量，<code>向量</code>为<code>1维</code>张量，<code>矩阵</code>为<code>2维</code>张量。</p><p><code>彩色图像</code>有rgb三个通道，可以表示为<code>3维</code>张量。</p><p><code>视频</code>还有时间维，可以表示为<code>4维</code>张量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scalar = tf.constant(<span class="literal">True</span>)  <span class="comment">#标量，0维张量</span></span><br><span class="line">vector = tf.constant([<span class="number">1.0</span>,<span class="number">2.0</span>,<span class="number">3.0</span>,<span class="number">4.0</span>]) <span class="comment">#向量，1维张量</span></span><br><span class="line">matrix = tf.constant([[<span class="number">1.0</span>,<span class="number">2.0</span>],[<span class="number">3.0</span>,<span class="number">4.0</span>]]) <span class="comment">#矩阵, 2维张量</span></span><br><span class="line">tensor3 = tf.constant([[[<span class="number">1.0</span>,<span class="number">2.0</span>],[<span class="number">3.0</span>,<span class="number">4.0</span>]],[[<span class="number">5.0</span>,<span class="number">6.0</span>],[<span class="number">7.0</span>,<span class="number">8.0</span>]]])  <span class="comment"># 3维张量</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#可以用tf.cast改变张量的数据类型。</span></span><br><span class="line">h = tf.constant([<span class="number">123</span>,<span class="number">456</span>],dtype = tf.int32)</span><br><span class="line">f = tf.cast(h,tf.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment">#可以用numpy方法将tensorflow中的张量转化成numpy中的张量。</span></span><br><span class="line">y = tf.constant([[<span class="number">1.0</span>,<span class="number">2.0</span>],[<span class="number">3.0</span>,<span class="number">4.0</span>]])</span><br><span class="line">y.numpy() <span class="comment">#转换成np.array</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#可以用shape方法查看张量的尺寸。</span></span><br><span class="line">y.shape</span><br></pre></td></tr></table></figure><h5 id="（2）变量张量"><a href="#（2）变量张量" class="headerlink" title="（2）变量张量"></a>（2）变量张量</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 常量值不可以改变，常量的重新赋值相当于创造新的内存空间</span></span><br><span class="line">c = tf.constant([<span class="number">1.0</span>,<span class="number">2.0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 变量的值可以改变，可以通过assign, assign_add等方法给变量重新赋值</span></span><br><span class="line">v = tf.Variable([<span class="number">1.0</span>,<span class="number">2.0</span>],name = <span class="string">&quot;v&quot;</span>)</span><br><span class="line">v.assign_add([<span class="number">1.0</span>,<span class="number">1.0</span>])</span><br></pre></td></tr></table></figure><h4 id="2、三种计算图"><a href="#2、三种计算图" class="headerlink" title="2、三种计算图"></a>2、三种计算图</h4><p><code>静态计算图</code>，<code>动态计算图</code>，以及<code>Autograph</code>.</p><blockquote><p>在TensorFlow2.0时代，采用的是动态计算图，即每使用一个算子后，该算子会被动态加入到隐含的默认计算图中立即执行得到结果，而无需开启Session。</p></blockquote><p>使用动态计算图即Eager Excution的好处是方便调试程序，它会让TensorFlow代码的表现和Python原生代码的表现一样，写起来就像写numpy一样，各种日志打印，控制流全部都是可以使用的。</p><p>使用动态计算图的缺点是运行效率相对会低一些。因为使用动态图会有许多次Python进程和TensorFlow的C++进程之间的通信。而静态计算图构建完成之后几乎全部在TensorFlow内核上使用C++代码执行，效率更高。此外静态图会对计算步骤进行一定的优化，剪去和结果无关的计算步骤。</p><p>如果需要在TensorFlow2.0中使用静态图，可以使用@tf.function装饰器将普通Python函数转换成对应的TensorFlow计算图构建代码。运行该函数就相当于在TensorFlow1.0中用Session执行代码。使用tf.function构建静态图的方式叫做 Autograph.</p><h5 id="1-静态计算图"><a href="#1-静态计算图" class="headerlink" title="(1)静态计算图"></a>(1)静态计算图</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在TensorFlow1.0中，使用静态计算图分两步，第一步定义计算图，第二步在会话中执行计算图。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment">#定义计算图</span></span><br><span class="line">g = tf.Graph()</span><br><span class="line"><span class="keyword">with</span> g.as_default():</span><br><span class="line">    <span class="comment">#placeholder为占位符，执行会话时候指定填充对象</span></span><br><span class="line">    x = tf.placeholder(name=<span class="string">&#x27;x&#x27;</span>, shape=[], dtype=tf.string)  </span><br><span class="line">    y = tf.placeholder(name=<span class="string">&#x27;y&#x27;</span>, shape=[], dtype=tf.string)</span><br><span class="line">    z = tf.string_join([x,y],name = <span class="string">&#x27;join&#x27;</span>,separator=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#执行计算图</span></span><br><span class="line"><span class="keyword">with</span> tf.Session(graph = g) <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="built_in">print</span>(sess.run(fetches = z,feed_dict = &#123;x:<span class="string">&quot;hello&quot;</span>,y:<span class="string">&quot;world&quot;</span>&#125;))</span><br></pre></td></tr></table></figure><p><strong>TensorFlow2.0 怀旧版静态计算图</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#TensorFlow2.0为了确保对老版本tensorflow项目的兼容性，在tf.compat.v1子模块中保留了对TensorFlow1.0那种静态计算图构建风格的支持。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">g = tf.compat.v1.Graph()</span><br><span class="line"><span class="keyword">with</span> g.as_default():</span><br><span class="line">    x = tf.compat.v1.placeholder(name=<span class="string">&#x27;x&#x27;</span>, shape=[], dtype=tf.string)</span><br><span class="line">    y = tf.compat.v1.placeholder(name=<span class="string">&#x27;y&#x27;</span>, shape=[], dtype=tf.string)</span><br><span class="line">    z = tf.strings.join([x,y],name = <span class="string">&quot;join&quot;</span>,separator = <span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.compat.v1.Session(graph = g) <span class="keyword">as</span> sess:</span><br><span class="line">    <span class="comment"># fetches的结果非常像一个函数的返回值，而feed_dict中的占位符相当于函数的参数序列。</span></span><br><span class="line">    result = sess.run(fetches = z,feed_dict = &#123;x:<span class="string">&quot;hello&quot;</span>,y:<span class="string">&quot;world&quot;</span>&#125;)</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h5 id="2-动态计算图"><a href="#2-动态计算图" class="headerlink" title="(2)动态计算图"></a>(2)动态计算图</h5><blockquote><p>动态计算图已经不区分计算图的定义和执行了，而是定义后立即执行。因此称之为 <code>Eager Excution</code>.Eager这个英文单词的原意是”迫不及待的”，也就是立即执行的意思。(但是动态计算图运行效率比较低！)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 动态计算图在每个算子处都进行构建，构建后立即执行</span></span><br><span class="line"></span><br><span class="line">x = tf.constant(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">y = tf.constant(<span class="string">&quot;world&quot;</span>)</span><br><span class="line">z = tf.strings.join([x,y],separator=<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="3-TensorFlow2-0的Autograph"><a href="#3-TensorFlow2-0的Autograph" class="headerlink" title="(3)TensorFlow2.0的Autograph"></a>(3)TensorFlow2.0的Autograph</h5><blockquote><p>在TensorFlow2.0中，如果采用Autograph的方式使用计算图，第一步定义计算图变成了定义函数，第二步执行计算图变成了调用函数。</p></blockquote><blockquote><p>实践中，我们一般会先用动态计算图调试代码，然后在需要提高性能的的地方利用<code>@tf.function</code>切换成Autograph获得更高的效率。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以用@tf.function装饰器将普通Python函数转换成和TensorFlow1.0对应的静态计算图构建代码。</span></span><br><span class="line"><span class="comment"># 使用autograph构建静态图</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">strjoin</span>(<span class="params">x,y</span>):</span></span><br><span class="line">    z =  tf.strings.join([x,y],separator = <span class="string">&quot; &quot;</span>)</span><br><span class="line">    tf.<span class="built_in">print</span>(z)</span><br><span class="line">    <span class="keyword">return</span> z</span><br><span class="line"></span><br><span class="line">result = strjoin(tf.constant(<span class="string">&quot;hello&quot;</span>),tf.constant(<span class="string">&quot;world&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h4 id="3、自动微分机制"><a href="#3、自动微分机制" class="headerlink" title="3、自动微分机制"></a>3、自动微分机制</h4><blockquote><p>神经网络通常依赖反向传播求梯度来更新网络参数，求梯度过程通常是一件非常复杂而容易出错的事情。而深度学习框架可以帮助我们自动地完成这种求梯度运算。Tensorflow一般使用梯度磁带<code>tf.GradientTape</code>来记录正向运算过程，然后反播磁带自动得到梯度值。这种利用tf.GradientTape求微分的方法叫做Tensorflow的自动微分机制。</p></blockquote><h5 id="（1）利用梯度磁带求导数"><a href="#（1）利用梯度磁带求导数" class="headerlink" title="（1）利用梯度磁带求导数"></a>（1）利用梯度磁带求导数</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"></span><br><span class="line"><span class="comment"># f(x) = a*x**2 + b*x + c的导数</span></span><br><span class="line"></span><br><span class="line">x = tf.Variable(<span class="number">0.0</span>,name = <span class="string">&quot;x&quot;</span>,dtype = tf.float32)</span><br><span class="line">a = tf.constant(<span class="number">1.0</span>)</span><br><span class="line">b = tf.constant(-<span class="number">2.0</span>)</span><br><span class="line">c = tf.constant(<span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">    y = a*tf.<span class="built_in">pow</span>(x,<span class="number">2</span>) + b*x + c</span><br><span class="line"></span><br><span class="line">dy_dx = tape.gradient(y,x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对常量张量也可以求导，需要增加watch</span></span><br><span class="line"><span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">    tape.watch([a,b,c])</span><br><span class="line">    y = a*tf.<span class="built_in">pow</span>(x,<span class="number">2</span>) + b*x + c</span><br><span class="line">dy_dx,dy_da,dy_db,dy_dc = tape.gradient(y,[x,a,b,c])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以求二阶导数</span></span><br><span class="line"><span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape2:</span><br><span class="line">    <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape1:   </span><br><span class="line">        y = a*tf.<span class="built_in">pow</span>(x,<span class="number">2</span>) + b*x + c</span><br><span class="line">    dy_dx = tape1.gradient(y,x)   </span><br><span class="line">dy2_dx2 = tape2.gradient(dy_dx,x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以在autograph中使用</span></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x</span>):</span>   </span><br><span class="line">    a = tf.constant(<span class="number">1.0</span>)</span><br><span class="line">    b = tf.constant(-<span class="number">2.0</span>)</span><br><span class="line">    c = tf.constant(<span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 自变量转换成tf.float32</span></span><br><span class="line">    x = tf.cast(x,tf.float32)</span><br><span class="line">    <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">        tape.watch(x)</span><br><span class="line">        y = a*tf.<span class="built_in">pow</span>(x,<span class="number">2</span>)+b*x+c</span><br><span class="line">    dy_dx = tape.gradient(y,x) </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>((dy_dx,y))</span><br></pre></td></tr></table></figure><h5 id="（2）利用梯度磁带和优化器求最小值"><a href="#（2）利用梯度磁带和优化器求最小值" class="headerlink" title="（2）利用梯度磁带和优化器求最小值"></a>（2）利用梯度磁带和优化器求最小值</h5><h6 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 求f(x) = a*x**2 + b*x + c的最小值</span></span><br><span class="line"><span class="comment"># 使用optimizer.apply_gradients</span></span><br><span class="line"></span><br><span class="line">x = tf.Variable(<span class="number">0.0</span>,name = <span class="string">&quot;x&quot;</span>,dtype = tf.float32)</span><br><span class="line">a = tf.constant(<span class="number">1.0</span>)</span><br><span class="line">b = tf.constant(-<span class="number">2.0</span>)</span><br><span class="line">c = tf.constant(<span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line">optimizer = tf.keras.optimizers.SGD(learning_rate=<span class="number">0.01</span>)</span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">        y = a*tf.<span class="built_in">pow</span>(x,<span class="number">2</span>) + b*x + c</span><br><span class="line">    dy_dx = tape.gradient(y,x)</span><br><span class="line">    optimizer.apply_gradients(grads_and_vars=[(dy_dx,x)])</span><br><span class="line"></span><br><span class="line">tf.<span class="built_in">print</span>(<span class="string">&quot;y =&quot;</span>,y,<span class="string">&quot;; x =&quot;</span>,x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">y = <span class="number">0</span> ; x = <span class="number">0.999998569</span></span><br></pre></td></tr></table></figure><h6 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 求f(x) = a*x**2 + b*x + c的最小值</span></span><br><span class="line"><span class="comment"># 使用optimizer.minimize</span></span><br><span class="line"><span class="comment"># optimizer.minimize相当于先用tape求gradient,再apply_gradient</span></span><br><span class="line"></span><br><span class="line">x = tf.Variable(<span class="number">0.0</span>,name = <span class="string">&quot;x&quot;</span>,dtype = tf.float32)</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意f()无参数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span>   </span><br><span class="line">    a = tf.constant(<span class="number">1.0</span>)</span><br><span class="line">    b = tf.constant(-<span class="number">2.0</span>)</span><br><span class="line">    c = tf.constant(<span class="number">1.0</span>)</span><br><span class="line">    y = a*tf.<span class="built_in">pow</span>(x,<span class="number">2</span>)+b*x+c</span><br><span class="line">    <span class="keyword">return</span>(y)</span><br><span class="line"></span><br><span class="line">optimizer = tf.keras.optimizers.SGD(learning_rate=<span class="number">0.01</span>)   </span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    optimizer.minimize(f,[x])   </span><br><span class="line"></span><br><span class="line">tf.<span class="built_in">print</span>(<span class="string">&quot;y =&quot;</span>,f(),<span class="string">&quot;; x =&quot;</span>,x)</span><br><span class="line"></span><br><span class="line">y = <span class="number">0</span> ; x = <span class="number">0.999998569</span></span><br></pre></td></tr></table></figure><h6 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在autograph中完成最小值求解</span></span><br><span class="line"><span class="comment"># 使用optimizer.apply_gradients</span></span><br><span class="line"></span><br><span class="line">x = tf.Variable(<span class="number">0.0</span>,name = <span class="string">&quot;x&quot;</span>,dtype = tf.float32)</span><br><span class="line">optimizer = tf.keras.optimizers.SGD(learning_rate=<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minimizef</span>():</span></span><br><span class="line">    a = tf.constant(<span class="number">1.0</span>)</span><br><span class="line">    b = tf.constant(-<span class="number">2.0</span>)</span><br><span class="line">    c = tf.constant(<span class="number">1.0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> tf.<span class="built_in">range</span>(<span class="number">1000</span>): <span class="comment">#注意autograph时使用tf.range(1000)而不是range(1000)</span></span><br><span class="line">        <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> tape:</span><br><span class="line">            y = a*tf.<span class="built_in">pow</span>(x,<span class="number">2</span>) + b*x + c</span><br><span class="line">        dy_dx = tape.gradient(y,x)</span><br><span class="line">        optimizer.apply_gradients(grads_and_vars=[(dy_dx,x)])</span><br><span class="line"></span><br><span class="line">    y = a*tf.<span class="built_in">pow</span>(x,<span class="number">2</span>) + b*x + c</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line"></span><br><span class="line">tf.<span class="built_in">print</span>(minimizef())</span><br><span class="line">tf.<span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure><h6 id="方式四"><a href="#方式四" class="headerlink" title="方式四"></a>方式四</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在autograph中完成最小值求解</span></span><br><span class="line"><span class="comment"># 使用optimizer.minimize</span></span><br><span class="line"></span><br><span class="line">x = tf.Variable(<span class="number">0.0</span>,name = <span class="string">&quot;x&quot;</span>,dtype = tf.float32)</span><br><span class="line">optimizer = tf.keras.optimizers.SGD(learning_rate=<span class="number">0.01</span>)   </span><br><span class="line"></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span>   </span><br><span class="line">    a = tf.constant(<span class="number">1.0</span>)</span><br><span class="line">    b = tf.constant(-<span class="number">2.0</span>)</span><br><span class="line">    c = tf.constant(<span class="number">1.0</span>)</span><br><span class="line">    y = a*tf.<span class="built_in">pow</span>(x,<span class="number">2</span>)+b*x+c</span><br><span class="line">    <span class="keyword">return</span>(y)</span><br><span class="line"></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span>(<span class="params">epoch</span>):</span>  </span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> tf.<span class="built_in">range</span>(epoch):  </span><br><span class="line">        optimizer.minimize(f,[x])</span><br><span class="line">    <span class="keyword">return</span>(f())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tf.<span class="built_in">print</span>(train(<span class="number">1000</span>))</span><br><span class="line">tf.<span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习之人脸识别模型--FaceNet</title>
      <link href="/2020/04/17/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E6%A8%A1%E5%9E%8B-FaceNet/"/>
      <url>/2020/04/17/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E4%B9%8B%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E6%A8%A1%E5%9E%8B-FaceNet/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="一、FaceNet模型"><a href="#一、FaceNet模型" class="headerlink" title="一、FaceNet模型"></a>一、FaceNet模型</h3><h4 id="1-、FaceNet源码仓库，本地代码存放在facenet-master文件夹下面"><a href="#1-、FaceNet源码仓库，本地代码存放在facenet-master文件夹下面" class="headerlink" title="(1)、FaceNet源码仓库，本地代码存放在facenet-master文件夹下面"></a>(1)、FaceNet源码仓库，本地代码存放在facenet-master文件夹下面</h4><p>​            <a href="https://github.com/davidsandberg/facenet">https://github.com/davidsandberg/facenet</a></p><h4 id="2-、FaceNet源码解读（网友解读版一），代码存放在understand-facenet文件夹下"><a href="#2-、FaceNet源码解读（网友解读版一），代码存放在understand-facenet文件夹下" class="headerlink" title="(2)、FaceNet源码解读（网友解读版一），代码存放在understand_facenet文件夹下"></a>(2)、FaceNet源码解读（网友解读版一），代码存放在understand_facenet文件夹下</h4><p>​            <a href="https://blog.csdn.net/u013044310/article/details/79556099">https://blog.csdn.net/u013044310/article/details/79556099</a><br>​            <a href="https://github.com/boyliwensheng/understand_facenet%EF%BC%88%E9%85%8D%E5%A5%97%E6%BA%90%E7%A0%81%E5%9C%B0%E5%9D%80%EF%BC%89">https://github.com/boyliwensheng/understand_facenet（配套源码地址）</a></p><h4 id="3-、FaceNet源码解读（网友解读版二），代码存放在facenet-master文件夹下"><a href="#3-、FaceNet源码解读（网友解读版二），代码存放在facenet-master文件夹下" class="headerlink" title="(3)、FaceNet源码解读（网友解读版二），代码存放在facenet-master文件夹下"></a>(3)、FaceNet源码解读（网友解读版二），代码存放在facenet-master文件夹下</h4><p>​            <a href="https://blog.csdn.net/huangshaoyin/article/details/81034551">https://blog.csdn.net/huangshaoyin/article/details/81034551</a></p><h4 id="4-、triplet-reid源码地址"><a href="#4-、triplet-reid源码地址" class="headerlink" title="(4)、triplet-reid源码地址"></a>(4)、triplet-reid源码地址</h4><p>​            <a href="https://github.com/VisualComputingInstitute/triplet-reid">https://github.com/VisualComputingInstitute/triplet-reid</a></p><h4 id="5-、FaceNet源码解读-网友解读版三-，（2）是在借鉴此作者的博客，"><a href="#5-、FaceNet源码解读-网友解读版三-，（2）是在借鉴此作者的博客，" class="headerlink" title="(5)、FaceNet源码解读(网友解读版三)，（2）是在借鉴此作者的博客，"></a>(5)、FaceNet源码解读(网友解读版三)，（2）是在借鉴此作者的博客，</h4><ul><li>本篇博客也提供了各种人脸数据集的介绍和<code>预模型</code>的下载<pre><code>      https://blog.csdn.net/MrCharles/article/details/80360461</code></pre></li></ul><h3 id="二、人脸匹配数据准备"><a href="#二、人脸匹配数据准备" class="headerlink" title="二、人脸匹配数据准备"></a>二、人脸匹配数据准备</h3><h4 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h4><ul><li>tensorflow==1.7</li><li>scipy</li><li>scikit-learn</li><li>opencv-python</li><li>h5py</li><li>matplotlib</li><li>Pillow</li><li>requests</li><li>psutil</li></ul><h4 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h4><ul><li>LFW  下载地址：<a href="http://vis-www.cs.umass.edu/lfw/#views">http://vis-www.cs.umass.edu/lfw/#views</a>  谷歌网盘（需要梯子）：<a href="https://drive.google.com/drive/u/0/folders/0B7EVK8r0v71pQ3NzdzRhVUhSams">https://drive.google.com/drive/u/0/folders/0B7EVK8r0v71pQ3NzdzRhVUhSams</a></li><li>Celeba 下载地址：<a href="http://mmlab.ie.cuhk.edu.hk/projects/CelebA.html">http://mmlab.ie.cuhk.edu.hk/projects/CelebA.html</a></li><li>VGGface2</li><li>CASIA-WebFace</li><li>CASIA-faceV5</li><li>更多人脸数据集请看：<a href="https://www.cnblogs.com/ansang/p/8137413.html">https://www.cnblogs.com/ansang/p/8137413.html</a></li></ul><h4 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h4><ul><li><p>文件夹名/文件夹名_文件名</p></li><li><p>同一个热的图片放在相同文件夹</p></li></ul><h4 id="Pre-trained-models"><a href="#Pre-trained-models" class="headerlink" title="Pre-trained models"></a>Pre-trained models</h4><ul><li> <a href="https://blog.csdn.net/MrCharles/article/details/80360461">https://blog.csdn.net/MrCharles/article/details/80360461</a>  （一）中的第五点</li></ul><p><img src="https://ae01.alicdn.com/kf/Hbea52004ac754ea7a7883812f23fade2N.png"></p><p>模型下载链接：<a href="https://pan.baidu.com/s/1aiSq7wGpdHIe6MUKPnXgrA">https://pan.baidu.com/s/1aiSq7wGpdHIe6MUKPnXgrA</a> 密码：4dcn</p><blockquote><p>20170512-110547（MS-Celeb-1M数据集训练的模型文件，微软人脸识别数据库，名人榜选择前100万名人，搜索引擎采集每个名人100张人脸图片。预训练模型准确率0.993+-0.004）</p></blockquote><h4 id="Inception-ResNet-v1-模型图"><a href="#Inception-ResNet-v1-模型图" class="headerlink" title="Inception ResNet v1 模型图"></a>Inception ResNet v1 模型图</h4><img src="https://ae01.alicdn.com/kf/Hd053b820ced845f58090b433d513c8f3o.png" style="zoom:80%;" /><h3 id="三、一些问题"><a href="#三、一些问题" class="headerlink" title="三、一些问题"></a>三、一些问题</h3><h4 id="1、解决出现ModuleNotFoundError-No-module-named-39-facenet-39-异常"><a href="#1、解决出现ModuleNotFoundError-No-module-named-39-facenet-39-异常" class="headerlink" title="1、解决出现ModuleNotFoundError: No module named &#39;facenet&#39;异常"></a>1、解决出现<code>ModuleNotFoundError: No module named &#39;facenet&#39;</code>异常</h4><ul><li>a.在cmd（需要管理员权限）命令行键入：set PYTHONPATH=…\facenet\src, 例如笔者的是:set PYTHONPATH=D:\Python\Work\face-system\face-net\facenet-master\src</li><li>b.在 计算机–&gt;属性–&gt;高级系统设置–&gt;环境变量 中,新建PYTHONPATH,键入 D:\Python\Work\face-system\face-net\facenet-master\src</li><li>c.如果使用pycharm，请记得重启pycharm</li></ul><h4 id="2、重新裁剪LFM图片数据集的大小"><a href="#2、重新裁剪LFM图片数据集的大小" class="headerlink" title="2、重新裁剪LFM图片数据集的大小"></a>2、重新裁剪LFM图片数据集的大小</h4><blockquote><p>程序中神经网络使用的是谷歌的“inception resnet v1”网络模型，这个模型的输入时160x160的图像，而我们下载的LFW数据集是250x250限像素的图像，所以需要进行图片的预处理。</p></blockquote><ul><li>原本数据集放在raw文件夹下面，新裁剪的图片放在ifw_160文件夹下面</li></ul><p>data/lfw/raw ：D:\Python\Work\face-system\face-net\facenet-master\data\ifw\raw<br>data/lfw/lfw_160：D:\Python\Work\face-system\face-net\facenet-master\data\ifw\ifw_160</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 运行脚本，记得将图片文件夹修改为自己的文件夹目录</span></span><br><span class="line">python src\align\align_dataset_mtcnn.py data/lfw/raw data/lfw/lfw_160 --image_size 160 --margin 32</span><br></pre></td></tr></table></figure><ul><li>pycharm中运行记得修改成下面这样</li></ul><p><img src="https://ae01.alicdn.com/kf/H8bfbd1bb2f2b474681a4a92b42731c65U.png"></p><h4 id="3、评估预训练模型的准确率"><a href="#3、评估预训练模型的准确率" class="headerlink" title="3、评估预训练模型的准确率"></a>3、评估预训练模型的准确率</h4><h5 id="1）、模型下载"><a href="#1）、模型下载" class="headerlink" title="1）、模型下载"></a>1）、模型下载</h5><blockquote><p>facenet提供了两个预训练模型，分别是基于CASIA-WebFace和MS-Celeb-1M人脸库训练的，不过需要去谷歌网盘下载，这里给其中一个模型的百度网盘的链接：</p></blockquote><p><a href="https://pan.baidu.com/s/1LLPIitZhXVI_V3ifZ10XNg#list/path=%2F">https://pan.baidu.com/s/1LLPIitZhXVI_V3ifZ10XNg#list/path=%2F</a> 密码: 12mh</p><blockquote><p>模型放在data文件夹下，没有就创建</p></blockquote><h5 id="2）、运行脚本"><a href="#2）、运行脚本" class="headerlink" title="2）、运行脚本"></a>2）、运行脚本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 运行脚本,同样的，目录改为自己的</span></span><br><span class="line">data\lfw\lfw_160：D:\\Python\\Work\\face-system\\face-net\\facenet-master\\data\\ifw\\ifw_160</span><br><span class="line">src\models\20180408-102900：D:\\Python\\Work\\face-system\\face-net\\facenet-master\\data\\models\\20180408-102900</span><br><span class="line"></span><br><span class="line">Python src\validate_on_lfw.py data\lfw\lfw_160 src\models\20180408-102900</span><br></pre></td></tr></table></figure><ul><li>安装网络上面的做法会出现错误，是应为data/pairs.txt读取不到，所以需要在运行脚本上面加上`–lfw_pairs=txt的地址<br><img src="https://ae01.alicdn.com/kf/H9f8ff6240a024da4821d07c405654677G.png"></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">运行脚本,同样的，目录改为自己的</span><br><span class="line"></span><br><span class="line">data\lfw\lfw_160：D:\\Python\\Work\\face-system\\face-net\\facenet-master\\data\\ifw\\ifw_160</span><br><span class="line">src\models\20180408-102900：D:\\Python\\Work\\face-system\\face-net\\facenet-master\\data\\models\\20180408-102900</span><br><span class="line">data/pairs.txt：D:\\Python\\Work\\face-system\\face-net\\facenet-master\\data\\pairs.txt</span><br><span class="line"></span><br><span class="line">Python src\validate_on_lfw.py data\lfw\lfw_160 src\models\20180408-102900 --lfw_pairs=data/pairs.txt</span><br></pre></td></tr></table></figure><h5 id="3-、TensorFlow版本导致报错"><a href="#3-、TensorFlow版本导致报错" class="headerlink" title="3)、TensorFlow版本导致报错"></a>3)、TensorFlow版本导致报错</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2020-04-17 00:27:11.307949: W tensorflow/core/graph/graph_constructor.cc:1272] Importing a graph with a lower producer version 24 into an existing graph with producer version 27. Shape inference will have run different parts of the graph with different producer versions.</span><br><span class="line">Traceback (most recent call last):</span><br></pre></td></tr></table></figure><ul><li><p>解决方案</p><p>1.把Tensorflow换为1.7版本的；</p><p>2.在<code>facenet.py</code>代码中找到<code>create_input_pipeline</code> 再添加一行语句<code> with tf.name_scope(&quot;tempscope&quot;):</code> 就可以完美解决（貌似Tensorflow 1.10及以上版本才修复这个bug）。</p><p><img src="https://ae01.alicdn.com/kf/H2eb7b8dc5d984ecca4f52703467fb45b0.png"></p></li><li><p>运行结果，可以看出，模型的精度高达99.7%</p><img src="https://ae01.alicdn.com/kf/Hbe49c52d5942488fbed1296a0514254cW.png" style="zoom: 80%;" /></li></ul><h4 id="4、人脸对比程序运行"><a href="#4、人脸对比程序运行" class="headerlink" title="4、人脸对比程序运行"></a>4、人脸对比程序运行</h4><blockquote><p>FaceNet可以对比两张人脸图片，可以得出他们的经过网络映射之后的欧式距离，相同的人脸的距离越小。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 参数：第一个参数为预模型的地址，第二个和第三个参数为图片的地址</span></span><br><span class="line">python src\compare.py </span><br><span class="line">D:\\Python\\Work\\face-system\\face-net\\facenet-master\\data\\models\\20180408-102900</span><br><span class="line">D:\\Python\\Work\\face-system\\face-net\\facenet-master\\data\\ifw\\ifw_160\\Aaron_Eckhart\\Aaron_Eckhart_0001.png</span><br><span class="line">D:\\Python\\Work\\face-system\\face-net\\facenet-master\\data\\ifw\\ifw_160\\Aaron_Guiel\\Aaron_Guiel_0001.png</span><br></pre></td></tr></table></figure><ul><li><p>pycharm中运行记得修改成下面这样:<br><img src="https://ae01.alicdn.com/kf/Ha03a9c0a688b4b7fa4352fe0ab5f59270.png"></p></li><li><p>运行结果如下：</p></li></ul><p><img src="https://ae01.alicdn.com/kf/H1ee064785b9a455b88ec83ccd54999d06.png"></p><h4 id="5、GPU内存溢出问题，已经解决"><a href="#5、GPU内存溢出问题，已经解决" class="headerlink" title="5、GPU内存溢出问题，已经解决"></a>5、GPU内存溢出问题，已经解决</h4><blockquote><p>在<code>detect_face.py</code>中加入下面的配置，防止出现GPU内存不足报错，放在代码靠前的位置</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">config = tf.ConfigProto(allow_soft_placement=<span class="literal">True</span>)</span><br><span class="line">gpu_options = tf.GPUOptions(per_process_gpu_memory_fraction=<span class="number">0.5</span>) <span class="comment">#此处调整GPU的利用率</span></span><br><span class="line">config.gpu_options.allow_growth = <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="四、相关函数"><a href="#四、相关函数" class="headerlink" title="四、相关函数"></a>四、相关函数</h3><h4 id="1、主要函数"><a href="#1、主要函数" class="headerlink" title="1、主要函数"></a>1、主要函数</h4><ul><li>align/ ：用于人脸检测与人脸对齐的神经网络</li><li>facenet ：用于人脸映射的神经网络</li><li>util/plot_learning_curves.m:这是用来在训练softmax模型的时候用matlab显示训练过程的程序</li></ul><h4 id="2、facenet-contributed-相关函数："><a href="#2、facenet-contributed-相关函数：" class="headerlink" title="2、facenet/contributed/相关函数："></a>2、facenet/contributed/相关函数：</h4><h5 id="1）、基于mtcnn与facenet的人脸聚类"><a href="#1）、基于mtcnn与facenet的人脸聚类" class="headerlink" title="1）、基于mtcnn与facenet的人脸聚类"></a>1）、基于mtcnn与facenet的人脸聚类</h5><blockquote><p>代码：<code>facenet/contributed/cluster.py</code>（<code>facenet/contributed/clustering.py</code>实现了相似的功能，只是没有<code>mtcnn</code>进行检测这一步）</p></blockquote><p>主要功能：</p><ul><li><p>① 使用<code>mtcnn</code>进行人脸检测并对齐与裁剪</p></li><li><p>② 对裁剪的人脸使用<code>facenet</code>进行<code>embedding</code></p></li><li><p>③ 对<code>embedding</code>的特征向量使用欧式距离进行聚类</p></li></ul><h5 id="2）、基于mtcnn与facenet的人脸识别（输入单张图片判断这人是谁）"><a href="#2）、基于mtcnn与facenet的人脸识别（输入单张图片判断这人是谁）" class="headerlink" title="2）、基于mtcnn与facenet的人脸识别（输入单张图片判断这人是谁）"></a>2）、基于mtcnn与facenet的人脸识别（输入单张图片判断这人是谁）</h5><blockquote><p>代码：<code>facenet/contributed/predict.py</code></p></blockquote><p>主要功能：</p><ul><li><p>① 使用<code>mtcnn</code>进行人脸检测并对齐与裁剪</p></li><li><p>② 对裁剪的人脸使用<code>facenet</code>进行<code>embedding</code></p></li><li><p>③ 执行<code>predict.py</code>进行人脸识别（需要训练好的svm模型）</p></li></ul><h5 id="3）、以numpy数组的形式输出人脸聚类和图像标签"><a href="#3）、以numpy数组的形式输出人脸聚类和图像标签" class="headerlink" title="3）、以numpy数组的形式输出人脸聚类和图像标签"></a>3）、以numpy数组的形式输出人脸聚类和图像标签</h5><p>代码：<code>facenet/contributed/export_embeddings.py</code></p><p>主要功能：</p><ul><li><p>① 需要对数据进行对齐与裁剪做为输入数据</p></li><li><p>② 输出<code>embeddings.npy</code>；<code>labels.npy</code>；<code>label_strings.npy</code></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
          <category> 人脸识别 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> TensorFlow </tag>
            
            <tag> FaceNet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java常用的设计模式</title>
      <link href="/2020/04/01/Java%E5%B8%B8%E7%94%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/04/01/Java%E5%B8%B8%E7%94%A8%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="一、变种Builder模式（构造者模式）"><a href="#一、变种Builder模式（构造者模式）" class="headerlink" title="一、变种Builder模式（构造者模式）"></a>一、变种Builder模式（构造者模式）</h3><h4 id="1、构造者模式包含如下角色"><a href="#1、构造者模式包含如下角色" class="headerlink" title="1、构造者模式包含如下角色"></a>1、构造者模式包含如下角色</h4><ul><li>Builder：抽象建造者</li><li>ConcreteBuilder：具体建造者</li><li>Director：指挥者</li><li>Product：产品角色</li></ul><h4 id="2、对Builer模式使用方法的总结："><a href="#2、对Builer模式使用方法的总结：" class="headerlink" title="2、对Builer模式使用方法的总结："></a>2、对Builer模式使用方法的总结：</h4><blockquote><p>对于习惯使用get、set方法的人来说，构造者模式多此一举，但是用起来是真的香啊。 🤣 看看代码多么优雅呢！</p></blockquote><ul><li>（1）、外部类的构造函数私有，且参数为静态内部类；</li><li>（2）、静态内部类拥有外部类相同的属；</li><li>（3）、为每一个属性，写一个方法，返回的是Builer；</li><li>（4）、最后一个方法是build方法，用于构建一个外部类；</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 详情可以看《effective java》这本书</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//必要参数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//可选参数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = builder.id;</span><br><span class="line">        <span class="keyword">this</span>.name = builder.name;</span><br><span class="line">        <span class="keyword">this</span>.age = builder.age;</span><br><span class="line">        <span class="keyword">this</span>.sex = builder.sex;</span><br><span class="line">        <span class="keyword">this</span>.phone = builder.phone;</span><br><span class="line">        <span class="keyword">this</span>.address = builder.address;</span><br><span class="line">        <span class="keyword">this</span>.desc = builder.desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1、在要构建类的内部，创建一个静态内部类Builder；</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2、静态内部类的属性要与构建类的属性一致；</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">//必要参数</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> id;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//可选参数</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">        <span class="keyword">private</span> String sex;</span><br><span class="line">        <span class="keyword">private</span> String phone;</span><br><span class="line">        <span class="keyword">private</span> String address;</span><br><span class="line">        <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3、构建类的构造参数是静态内部类，使用静态内部类的变量为构建类逐一赋值；</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">//初始构造器，强制设置必要参数</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.id = id;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">sex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.sex = sex;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">phone</span><span class="params">(String phone)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.phone = phone;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">address</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.address = address;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">desc</span><span class="params">(String desc)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.desc = desc;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4、静态内部类提供参数的setter方法，并且返回值是当前Builder对象；</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">// Person调用builder方法，返回Builder对象</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Person <span class="title">builder</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Person(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, phone=&#x27;&quot;</span> + phone + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, desc=&#x27;&quot;</span> + desc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person.Builder(<span class="number">1</span>,<span class="string">&quot;michong&quot;</span>).sex(<span class="string">&quot;男&quot;</span>).builder();</span><br><span class="line">        System.out.println(person.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、单例模式"><a href="#二、单例模式" class="headerlink" title="二、单例模式"></a>二、单例模式</h3><blockquote><p>当需要控制一个类的实例只能有一个，而且客户只能从一个全局访问点访问它时，可以选用单例模式，这些功能恰好是单例模式要解决的问题。</p></blockquote><h4 id="五种实现方式"><a href="#五种实现方式" class="headerlink" title="五种实现方式"></a>五种实现方式</h4><h5 id="1、懒汉式"><a href="#1、懒汉式" class="headerlink" title="1、懒汉式"></a>1、懒汉式</h5><blockquote><p>先判断，再生成对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉式单例实现方式</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个变量来存储创建好的实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有化构造方法，可以在内部控制创建实例的数目</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个方法为客户端提供类实例</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 判断存储实例的变量是否有值</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果没有，就创建一个类实例，并把值赋给存储类实例的变量</span></span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2、饿汉式"><a href="#2、饿汉式" class="headerlink" title="2、饿汉式"></a>2、饿汉式</h5><blockquote><p>二话不说，直接生成对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉式单例</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义一个变量来存储创建好的类实例，直接在这里创建类实例，只能创建一次</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton2 instance = <span class="keyword">new</span> Singleton2();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有化构造方法，可以在内部控制创建实例的数目</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton2 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3、双重加锁"><a href="#3、双重加锁" class="headerlink" title="3、双重加锁"></a>3、双重加锁</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对保存实例的变量添加volatile的修饰</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">static</span> Singleton3 instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton3 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 先检查实例是否存在，如果不存在才金如意下面的模块</span></span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 同步块，线程安全得创建实例</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton3.class) &#123;</span><br><span class="line">                <span class="comment">// 再次检查实例是否存在，如果不存在才真正地创建实例</span></span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton3();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4、静态内部类"><a href="#4、静态内部类" class="headerlink" title="4、静态内部类"></a>4、静态内部类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用静态内部类实现单例模式</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton4</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 没有绑定关系，而且只有被调用到时才会装载，从而实现延迟加载</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span> </span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 静态初始化器，由JVM来保证线程安全</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Singleton4 instance = <span class="keyword">new</span> Singleton4();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton4 <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5、枚举"><a href="#5、枚举" class="headerlink" title="5、枚举"></a>5、枚举</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用枚举来实现单例</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Singleton5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义 一个枚举的元素，它就代表了Singleton的实例</span></span><br><span class="line">    instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.err.println(Singleton5.instance.hashCode());</span><br><span class="line">        System.err.println(Singleton5.instance.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、简单工厂模式"><a href="#三、简单工厂模式" class="headerlink" title="三、简单工厂模式"></a>三、简单工厂模式</h3><h4 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h4><blockquote><p>提供一个<code>创建对象实例</code>的功能，而无须关心其具体实现。被创建的类型可以是<code>接口</code>、<code>抽象类</code>，也可以是<code>具体类</code></p></blockquote><h4 id="2、选择的时机"><a href="#2、选择的时机" class="headerlink" title="2、选择的时机"></a>2、选择的时机</h4><ul><li>完全封装隔离具体实现，让外部只能通过接口来操作封装体</li><li>想要把对创建对象的职责集中管理和控制</li></ul><h4 id="3、示例代码"><a href="#3、示例代码" class="headerlink" title="3、示例代码"></a>3、示例代码</h4><h5 id="Api"><a href="#Api" class="headerlink" title="Api"></a>Api</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口的定义，该接口可以 通过简单工厂创建</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Api</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 具体功能方法的 定义</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> s 需要的参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(String s)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ImplA"><a href="#ImplA" class="headerlink" title="ImplA"></a>ImplA</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口具体实现A</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImplA</span> <span class="keyword">implements</span> <span class="title">Api</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 实现功能的代码</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ImplA s=&quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ImplB"><a href="#ImplB" class="headerlink" title="ImplB"></a>ImplB</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 接口具体实现B</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImplB</span> <span class="keyword">implements</span> <span class="title">Api</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 实现功能的代码</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ImplA s=&quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Factoty"><a href="#Factoty" class="headerlink" title="Factoty"></a>Factoty</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工厂类，用来创建Api对象</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Factory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Factory <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> FactoryHolder.factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 具体创建Api对象的方法</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> condition</span></span><br><span class="line"><span class="comment">     *            从外部传入的参数条件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 创建好的APi对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Api <span class="title">createApi</span><span class="params">(<span class="keyword">int</span> condition)</span> </span>&#123;</span><br><span class="line">        Api api = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (condition == <span class="number">1</span>) &#123;</span><br><span class="line">            api = <span class="keyword">new</span> ImplA();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (condition == <span class="number">2</span>) &#123;</span><br><span class="line">            api = <span class="keyword">new</span> ImplB();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> api;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FactoryHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Factory factory = <span class="keyword">new</span> Factory();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 客户端，使用Api接口</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通过简单工厂来获取接口对象</span></span><br><span class="line">        Api api = Factory.getInstance().createApi(<span class="number">1</span>);</span><br><span class="line">        api.operation(<span class="string">&quot;正在使用简单工厂~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四、工厂方法模式"><a href="#四、工厂方法模式" class="headerlink" title="四、工厂方法模式"></a>四、工厂方法模式</h3><h4 id="1、定义-1"><a href="#1、定义-1" class="headerlink" title="1、定义"></a>1、定义</h4><blockquote><p>定义一个用于创建对象的借口，让子类决定实例化哪一个类，FactoryMethod使一个类的实例化延迟到子类。</p></blockquote><h4 id="2、结构"><a href="#2、结构" class="headerlink" title="2、结构"></a>2、结构</h4><p><code>Product</code>:定义工厂方法所创建的对象的接口，也就是实际需要使用的对象的接口。</p><p><code>ConcreteProduct</code>:具体的Product接口的实现对象。</p><p><code>Creator</code>:创建器，声明工厂方法，工厂方法通常会返回一个Product类的实例对象，而且多是抽象方法</p><p><code>ConcreteCreator</code>:具体的创建器对象，覆盖实现Creator定义的工厂方法，返回具体的Product实例</p><h4 id="3、示例代码-1"><a href="#3、示例代码-1" class="headerlink" title="3、示例代码"></a>3、示例代码</h4><h5 id="Product"><a href="#Product" class="headerlink" title="Product"></a>Product</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 工厂方法所创建的对象的接口</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ConcreteProduct"><a href="#ConcreteProduct" class="headerlink" title="ConcreteProduct"></a>ConcreteProduct</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 具体的product对象</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteProduct</span> <span class="keyword">implements</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Creator"><a href="#Creator" class="headerlink" title="Creator"></a>Creator</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建器，声明工厂方法</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Creator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建Product的工厂方法</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Product <span class="title">factoryMethod</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实现某些功能的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">someOperation</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通常在这些方法实现需要调用工厂方法来获取Product对象</span></span><br><span class="line">        Product product = factoryMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ConcreteCreator"><a href="#ConcreteCreator" class="headerlink" title="ConcreteCreator"></a>ConcreteCreator</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteCreator</span> <span class="keyword">extends</span> <span class="title">Creator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Product <span class="title">factoryMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ConcreteProduct();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、抽象工厂模式（Abstract-Factory-Pattern）"><a href="#五、抽象工厂模式（Abstract-Factory-Pattern）" class="headerlink" title="五、抽象工厂模式（Abstract Factory Pattern）"></a>五、抽象工厂模式（Abstract Factory Pattern）</h3><h4 id="1、定义-2"><a href="#1、定义-2" class="headerlink" title="1、定义"></a>1、定义</h4><blockquote><p>提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们具体的类。抽象工厂模式又称为Kit模式，属于对象创建型模式。</p></blockquote><h4 id="2、模式结构"><a href="#2、模式结构" class="headerlink" title="2、模式结构"></a>2、模式结构</h4><ul><li><code>AbstractFactory</code>：抽象工厂</li><li><code>ConcreteFactory</code>：具体工厂</li><li><code>AbstractProduct</code>：抽象产品</li><li><code>Product</code>：具体产品<br><img src="https://file.buildworld.cn/img/20200331231328.png" alt="image"></li></ul><h3 id="六、其他"><a href="#六、其他" class="headerlink" title="六、其他"></a>六、其他</h3><p><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html">更多的设计模式请看菜鸟教程</a></p>]]></content>
      
      
      <categories>
          
          <category> 面试笔试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python进阶(一)</title>
      <link href="/2020/03/14/Python%E8%BF%9B%E9%98%B6-%E4%B8%80/"/>
      <url>/2020/03/14/Python%E8%BF%9B%E9%98%B6-%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="1、-args-和-kwargs"><a href="#1、-args-和-kwargs" class="headerlink" title="1、*args 和 **kwargs"></a>1、*args 和 **kwargs</h4><h5 id="args"><a href="#args" class="headerlink" title="*args"></a>*args</h5><blockquote><p> *args 是⽤来发送⼀个⾮键值对的可变数量的参数列表给⼀个函数.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_var_args</span>(<span class="params">f_arg, *argv</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;first normal arg:&quot;</span>, f_arg)</span><br><span class="line">    <span class="keyword">for</span> arg <span class="keyword">in</span> argv:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;another arg through *argv:&quot;</span>, arg)</span><br><span class="line">test_var_args(<span class="string">&#x27;yasoob&#x27;</span>, <span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;eggs&#x27;</span>, <span class="string">&#x27;test&#x27;</span>)</span><br><span class="line"></span><br><span class="line">这会产⽣如下输出:</span><br><span class="line">first normal arg: yasoob</span><br><span class="line">another arg through *argv: python</span><br><span class="line">another arg through *argv: eggs</span><br><span class="line">another arg through *argv: test</span><br></pre></td></tr></table></figure><h5 id="kwargs"><a href="#kwargs" class="headerlink" title="**kwargs"></a>**kwargs</h5><blockquote><p> **<strong>kwargs 允许你将不定长度的键值对, 作为参数传递给⼀个函数。 如果你想要在⼀个函数⾥处理带名字的参数, 你应该使⽤</strong> **kwargs。比如参数是字典</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def greet_me(**kwargs):</span><br><span class="line">    for key,value in kwargs.items():</span><br><span class="line">        print (&quot;&#123;0&#125; == &#123;1&#125;&quot;.format(key,value))</span><br><span class="line"></span><br><span class="line">greet_me(name=&#x27;michong&#x27;,age=10)        </span><br><span class="line"></span><br><span class="line">输出</span><br><span class="line">name == michong</span><br><span class="line">age == 10</span><br></pre></td></tr></table></figure><blockquote><p>标准参数与*args、**kwargs在使⽤时的顺序</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">demo_func(fargs, *args, **kwargs)</span><br></pre></td></tr></table></figure><h4 id="2、调试-Debugging"><a href="#2、调试-Debugging" class="headerlink" title="2、调试(Debugging)"></a>2、调试(Debugging)</h4><h5 id="pdb-set-trace-方法"><a href="#pdb-set-trace-方法" class="headerlink" title="pdb.set_trace()方法"></a>pdb.set_trace()方法</h5><blockquote><p>这个方法在jupter Notebook中也可以使用，这个方法使用的时候直接放在需要打断点的地方</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pdb</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_bread</span>():</span></span><br><span class="line">    pdb.set_trace()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;I don&#x27;t have time&quot;</span></span><br><span class="line"><span class="built_in">print</span>(make_bread())</span><br></pre></td></tr></table></figure><h5 id="debugger模式下的命令"><a href="#debugger模式下的命令" class="headerlink" title="debugger模式下的命令"></a>debugger模式下的命令</h5><ul><li>c: 继续执⾏</li><li>w: 显⽰当前正在执⾏的代码⾏的上下⽂信息</li><li>a: 打印当前函数的参数列表</li><li>s: 执⾏当前代码⾏，并停在第⼀个能停的地⽅（相当于单步进⼊）</li><li>n: 继续执⾏到当前函数的下⼀⾏，或者当前⾏直接返回（单步跳过）</li></ul><h4 id="3、Generator-生成器"><a href="#3、Generator-生成器" class="headerlink" title="3、Generator 生成器"></a>3、Generator 生成器</h4><h5 id="可迭代对象-Iterable"><a href="#可迭代对象-Iterable" class="headerlink" title="可迭代对象(Iterable)"></a>可迭代对象(Iterable)</h5><blockquote><p>对象中定义了可以返回一个迭代器的__iter__方法，或者定义了可以⽀持下标索引的__getitem__⽅法，它就是一个可迭代对象</p></blockquote><h5 id="迭代器-Iterator"><a href="#迭代器-Iterator" class="headerlink" title="迭代器(Iterator)"></a>迭代器(Iterator)</h5><blockquote><p>任意定义了next或者__next__发放，它就是一个迭代器</p></blockquote><h5 id="迭代-Iteration"><a href="#迭代-Iteration" class="headerlink" title="迭代(Iteration)"></a>迭代(Iteration)</h5><blockquote><p>循环遍历的过程叫迭代</p></blockquote><h5 id="⽣成器-Generators"><a href="#⽣成器-Generators" class="headerlink" title="⽣成器(Generators)"></a>⽣成器(Generators)</h5><blockquote><p>它也是一中迭代器，使用yield生成一个值</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">def generator_function():</span><br><span class="line">    for i in range(10):</span><br><span class="line">        yield i</span><br><span class="line">for item in generator_function():</span><br><span class="line">    print(item)</span><br><span class="line">    </span><br><span class="line">输出：</span><br><span class="line">    # Output: 0</span><br><span class="line">    # 1</span><br><span class="line">    # 2</span><br><span class="line">    # 3</span><br><span class="line">    # 4</span><br><span class="line">    # 5</span><br><span class="line">    # 6</span><br><span class="line">    # 7</span><br><span class="line">    # 8</span><br><span class="line">    # 9</span><br></pre></td></tr></table></figure><h4 id="4、Map，Filter-和-Reduce"><a href="#4、Map，Filter-和-Reduce" class="headerlink" title="4、Map，Filter 和 Reduce"></a>4、Map，Filter 和 Reduce</h4><h5 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h5><h6 id="遍历元素"><a href="#遍历元素" class="headerlink" title="遍历元素"></a>遍历元素</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">items = [1, 2, 3, 4, 5]</span><br><span class="line">squared = list(map(lambda x: x**2, items))</span><br></pre></td></tr></table></figure><h6 id="遍历方法"><a href="#遍历方法" class="headerlink" title="遍历方法"></a>遍历方法</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">def multiply(x):</span><br><span class="line">    return (x*x)</span><br><span class="line">def add(x):</span><br><span class="line">    return (x+x)</span><br><span class="line">funcs = [multiply, add]</span><br><span class="line">for i in range(5):</span><br><span class="line">    value = map(lambda x: x(i), funcs)</span><br><span class="line">    print(list(value))</span><br><span class="line"># 译者注：上⾯print时，加了list转换，是为了python2/3的兼容性</span><br><span class="line"># 在python2中map直接返回列表，但在python3中返回迭代器</span><br><span class="line"># 因此为了兼容python3, 需要list转换⼀下</span><br><span class="line"></span><br><span class="line"># Output:</span><br><span class="line"># [0, 0]</span><br><span class="line"># [1, 2]</span><br><span class="line"># [4, 4]</span><br><span class="line"># [9, 6]</span><br><span class="line"># [16, 8]</span><br></pre></td></tr></table></figure><h5 id="Filter"><a href="#Filter" class="headerlink" title="Filter"></a>Filter</h5><blockquote><p>filter过滤列表中的元素，并且返回⼀个由所有符合要求的元素所构成的列<br>表，符合要求即函数映射到该元素时返回值为True. </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">number_list = range(-5,5)</span><br><span class="line">list(filter(lambda x:x%2==0 , number_list))</span><br><span class="line"></span><br><span class="line">output</span><br><span class="line">    [-4, -2, 0, 2, 4]</span><br></pre></td></tr></table></figure><h5 id="Reduce"><a href="#Reduce" class="headerlink" title="Reduce"></a>Reduce</h5><blockquote><p>对一个列表进行计算并返回结果，可以使用Reduce函数</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#下面执行的是列表里面所有的元素相互相加的功能</span><br><span class="line">from functools import reduce</span><br><span class="line">reduce((lambda x, y:x+y),[1,2,3,4])</span><br><span class="line"></span><br><span class="line">output：</span><br><span class="line">    10</span><br></pre></td></tr></table></figure><h4 id="5、set数据结构"><a href="#5、set数据结构" class="headerlink" title="5、set数据结构"></a>5、set数据结构</h4><h5 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">some_list = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;b&#x27;, &#x27;d&#x27;, &#x27;m&#x27;, &#x27;n&#x27;, &#x27;n&#x27;]</span><br><span class="line">duplicates = set([x for x in some_list if some_list.count(x) &gt; 1])</span><br><span class="line">print(duplicates)</span><br><span class="line"></span><br><span class="line">##输出: set([&#x27;b&#x27;, &#x27;n&#x27;])</span><br></pre></td></tr></table></figure><h5 id="交集"><a href="#交集" class="headerlink" title="交集"></a>交集</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">valid = set([&#x27;yellow&#x27;,&#x27;red&#x27;,&#x27;blue&#x27;,&#x27;green&#x27;,&#x27;black&#x27;])</span><br><span class="line">input_set = set([&#x27;red&#x27;,&#x27;brown&#x27;])</span><br><span class="line">print(input_set.intersection(valid))</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">&#123;&#x27;red&#x27;&#125;</span><br></pre></td></tr></table></figure><h5 id="差集"><a href="#差集" class="headerlink" title="差集"></a>差集</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">valid = set([&#x27;yellow&#x27;,&#x27;red&#x27;,&#x27;blue&#x27;,&#x27;green&#x27;,&#x27;black&#x27;])</span><br><span class="line">input_set = set([&#x27;red&#x27;,&#x27;brown&#x27;])</span><br><span class="line">print(input_set.difference(valid))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">output：</span><br><span class="line">&#123;&#x27;brown&#x27;&#125;</span><br></pre></td></tr></table></figure><h5 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h5><h6 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s.add( x )</span><br><span class="line"></span><br><span class="line">s.update( x ) ##也可以添加元素，且参数可以是列表</span><br></pre></td></tr></table></figure><h6 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">s.remove( x ) ##将元素 x 从集合 s 中移除，如果元素不存在，则会发生错误。</span><br><span class="line">s.discard( x ) ##此外还有一个方法也是移除集合中的元素，且如果元素不存在，不会发生错误。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s.discard( x ) ##此外还有一个方法也是移除集合中的元素，且如果元素不存在，不会发生错误。</span><br><span class="line"></span><br><span class="line">s.pop()  ##随机删除集合中的一个元素</span><br></pre></td></tr></table></figure><h6 id="计算集合元素个数"><a href="#计算集合元素个数" class="headerlink" title="计算集合元素个数"></a>计算集合元素个数</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">len(s)</span><br></pre></td></tr></table></figure><h6 id="清空集合"><a href="#清空集合" class="headerlink" title="清空集合"></a>清空集合</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.clear()</span><br></pre></td></tr></table></figure><h6 id="集合内置方法完整列表"><a href="#集合内置方法完整列表" class="headerlink" title="集合内置方法完整列表"></a>集合内置方法完整列表</h6><p><img src="http://myfile.buildworld.cn/360%E6%88%AA%E5%9B%BE18430709535842.png" alt="集合内置方法完整列表"></p>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python版本的OpenCV安装</title>
      <link href="/2020/03/05/Python%E7%89%88%E6%9C%AC%E7%9A%84OpenCV%E5%AE%89%E8%A3%85/"/>
      <url>/2020/03/05/Python%E7%89%88%E6%9C%AC%E7%9A%84OpenCV%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="第一步、安装Anaconda"><a href="#第一步、安装Anaconda" class="headerlink" title="第一步、安装Anaconda"></a>第一步、安装Anaconda</h3><p><a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/</a></p><h3 id="第二步、-创建虚拟环境"><a href="#第二步、-创建虚拟环境" class="headerlink" title="第二步、 创建虚拟环境"></a>第二步、 创建虚拟环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda create --name opencv-env python=3.7</span><br></pre></td></tr></table></figure><h3 id="第三步、激活虚拟环境，也就是进入到虚拟环境中去"><a href="#第三步、激活虚拟环境，也就是进入到虚拟环境中去" class="headerlink" title="第三步、激活虚拟环境，也就是进入到虚拟环境中去"></a>第三步、激活虚拟环境，也就是进入到虚拟环境中去</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">activate opencv-env</span><br></pre></td></tr></table></figure><h3 id="第四步、安装opencv-contrib"><a href="#第四步、安装opencv-contrib" class="headerlink" title="第四步、安装opencv+contrib"></a>第四步、安装opencv+contrib</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install numpy scipy matplotlib scikit-learn jupyter</span><br><span class="line">pip install opencv-contrib-python</span><br></pre></td></tr></table></figure><h3 id="第五步、测试"><a href="#第五步、测试" class="headerlink" title="第五步、测试"></a>第五步、测试</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">cv2.__version__</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建Typecho博客</title>
      <link href="/2020/03/04/%E6%90%AD%E5%BB%BATypecho%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/03/04/%E6%90%AD%E5%BB%BATypecho%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h3><p><a href="http://typecho.org/">typecho官网</a><br><a href="http://lab.qqdie.com/docs/#/">开发文档</a></p><blockquote><p>其实对于大多数人来说，我们不必关系typecho网站的开发，主要是项目的部署和主题的更换。</p></blockquote><blockquote><p>对于我来说，我大学的时候就开始写博客了，开始的CSDN,wordpress到后来的hexo,再到gridea，因为手头有服务器和域名，所以就干脆整一个typecho了  ，WordPress主要太大了，使用起来感觉很臃肿，就抛弃了。</p></blockquote><h3 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h3><h4 id="1、部署"><a href="#1、部署" class="headerlink" title="1、部署"></a>1、部署</h4><blockquote><p>如果手头有闲置的服务器，环境也没有配置的话，我建议使用phpstudy环境，一键搭建Nginx+Php+MySQL环境</p></blockquote><p><a href="https://www.xp.cn/linux.html">phpstudy官网地址</a></p><blockquote><p>Centos一键安装，注意系统要求没有安装过docker环境  </p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y wget &amp;&amp; wget -O install.sh https://download.xp.cn/install.sh &amp;&amp; sh install.sh</span><br></pre></td></tr></table></figure><p><code>简直傻瓜式有木有</code></p><p><img src="https://ae01.alicdn.com/kf/H563e8c7e6111451f95264075fe157751K.png#vwid=1915&vhei=959"></p><h4 id="2、主题美化"><a href="#2、主题美化" class="headerlink" title="2、主题美化"></a>2、主题美化</h4><blockquote><p>接下来就是主题的修改，推荐下面的网址，不仅有各种主题，还有好用的插件</p></blockquote><p><a href="https://typecho.me/" title="typecho主题网站">typecho主题网站</a></p><blockquote><p>本文的主题来自<a href="https://blog.imalan.cn/archives/247/">https://blog.imalan.cn/archives/247/</a> ，强烈推荐 👍   github地址：<a href="https://github.com/AlanDecode/Typecho-Theme-VOID">https://github.com/AlanDecode/Typecho-Theme-VOID</a> </p></blockquote><blockquote><p>另外推荐几个网站</p></blockquote><p><a href="https://qqdie.com/">https://qqdie.com/</a></p><h4 id="3、常用插件"><a href="#3、常用插件" class="headerlink" title="3、常用插件"></a>3、常用插件</h4><table><thead><tr><th>名称</th><th>描述</th><th>项目地址</th></tr></thead><tbody><tr><td>APlayer for Typecho(Meting)</td><td>在 Typecho 中使用 APlayer 播放在线音乐吧～</td><td><a href="https://github.com/MoePlayer/APlayer-Typecho">https://github.com/MoePlayer/APlayer-Typecho</a></td></tr><tr><td>DoubanBoard</td><td>在博客上展示你的豆瓣书单与豆瓣影单</td><td>详细介绍 <a href="https://blog.imalan.cn/archives/168/">https://blog.imalan.cn/archives/168/</a></td></tr><tr><td>EditorMD</td><td>增强Markdown编写</td><td>详细介绍 <a href="https://blog.imalan.cn/archives/168/">https://blog.imalan.cn/archives/168/</a></td></tr><tr><td>Qiniu File</td><td>将 Typecho 的附件上传至七牛云存储中。</td><td><a href="https://lichaoxi.com/">https://lichaoxi.com/</a></td></tr><tr><td>DPlayer</td><td>将 Typecho 的附件上传至七牛云存储中。</td><td><a href="https://plugins.typecho.me/plugins/qiniu-file.html">https://plugins.typecho.me/plugins/qiniu-file.html</a></td></tr><tr><td>KaTeX4Typecho</td><td>数学公式展示</td><td><a href="https://github.com/vc12345679/KaTeX4Typecho">https://github.com/vc12345679/KaTeX4Typecho</a></td></tr><tr><td>YoduPlayer</td><td>一款清爽的BGM播放器,需要您的主题支持pjax或者instantclick才能保证页面切换依旧播放</td><td><a href="https://qqdie.com/archives/typecho-yoduplayer.html">https://qqdie.com/archives/typecho-yoduplayer.html</a></td></tr></tbody></table><blockquote><p>更多插件请看下面网址</p></blockquote><p><a href="https://qqdie.com/plugins/">https://qqdie.com/plugins/</a><br><a href="https://plugins.typecho.me/">https://plugins.typecho.me/</a></p><h3 id="三、常见的问题"><a href="#三、常见的问题" class="headerlink" title="三、常见的问题"></a>三、常见的问题</h3><h4 id="1、网站开启SSL"><a href="#1、网站开启SSL" class="headerlink" title="1、网站开启SSL"></a>1、网站开启SSL</h4><ul><li>首先在网站根目录找到<code>config.inc.php</code>，添加代码</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 开启HTTPS */</span></span><br><span class="line">define(<span class="string">&#x27;__TYPECHO_SECURE__&#x27;</span>,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><ul><li>其次在phpstudy站点设置中开启SSL,SSL证书需要自己去申请，但是phpstudy中有免费的SSL，还可以自动设置脚本在SSL过期前自动申请SSL</li></ul><p><img src="https://ae01.alicdn.com/kf/Hcd540c702407448986313199dd5e859dq.png#vwid=825&vhei=702"></p><h4 id="2、typecho如果使用MySQL，默认不支持emoji的"><a href="#2、typecho如果使用MySQL，默认不支持emoji的" class="headerlink" title="2、typecho如果使用MySQL，默认不支持emoji的"></a>2、typecho如果使用MySQL，默认不支持emoji的</h4><ul><li>首先将typecho使用的数据格式设置成 <code>utf8mb4_unicode_ci</code></li><li>然后进入该数据执行下面的sql语句<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> typecho_comments <span class="keyword">convert</span> <span class="keyword">to</span> <span class="type">character</span> <span class="keyword">set</span> utf8mb4 <span class="keyword">collate</span> utf8mb4_general_ci;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> typecho_contents <span class="keyword">convert</span> <span class="keyword">to</span> <span class="type">character</span> <span class="keyword">set</span> utf8mb4 <span class="keyword">collate</span> utf8mb4_general_ci;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> typecho_fields <span class="keyword">convert</span> <span class="keyword">to</span> <span class="type">character</span> <span class="keyword">set</span> utf8mb4 <span class="keyword">collate</span> utf8mb4_general_ci;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> typecho_metas <span class="keyword">convert</span> <span class="keyword">to</span> <span class="type">character</span> <span class="keyword">set</span> utf8mb4 <span class="keyword">collate</span> utf8mb4_general_ci;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> typecho_options <span class="keyword">convert</span> <span class="keyword">to</span> <span class="type">character</span> <span class="keyword">set</span> utf8mb4 <span class="keyword">collate</span> utf8mb4_general_ci;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> typecho_relationships <span class="keyword">convert</span> <span class="keyword">to</span> <span class="type">character</span> <span class="keyword">set</span> utf8mb4 <span class="keyword">collate</span> utf8mb4_general_ci;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> typecho_users <span class="keyword">convert</span> <span class="keyword">to</span> <span class="type">character</span> <span class="keyword">set</span> utf8mb4 <span class="keyword">collate</span> utf8mb4_general_ci;</span><br></pre></td></tr></table></figure></li><li>网站根目录数据库配置文件<code>config.inc.php</code>,修改一下</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 定义数据库参数 */</span></span><br><span class="line"><span class="variable">$db</span> = <span class="keyword">new</span> Typecho_Db(<span class="string">&#x27;Pdo_Mysql&#x27;</span>, <span class="string">&#x27;typecho_&#x27;</span>);</span><br><span class="line"><span class="variable">$db</span>-&gt;addServer(<span class="keyword">array</span> (</span><br><span class="line">  ...</span><br><span class="line">  <span class="string">&#x27;charset&#x27;</span> =&gt; <span class="string">&#x27;utf8mb4&#x27;</span>,  <span class="comment">// 修改编码为 utf8mb4</span></span><br><span class="line">  ...</span><br><span class="line">), Typecho_Db::READ | Typecho_Db::WRITE);</span><br><span class="line">Typecho_Db::set(<span class="variable">$db</span>);</span><br></pre></td></tr></table></figure><ul><li>OK👌</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typecho </tag>
            
            <tag> 博客开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python开发之Pandas的使用</title>
      <link href="/2019/09/20/Python%E5%BC%80%E5%8F%91%E4%B9%8BPandas%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/09/20/Python%E5%BC%80%E5%8F%91%E4%B9%8BPandas%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h4><ul><li><p>Pandas 是 Python 中的数据操纵和分析软件包，它是基于Numpy去开发的，所以Pandas的数据处理速度也很快，而且Numpy中的有些函数在Pandas中也能使用，方法也类似。</p></li><li><p>Pandas 为 Python 带来了两个新的数据结构，即 Pandas Series(可类比于表格中的某一列)和 Pandas DataFrame(可类比于表格)。借助这两个数据结构，我们能够轻松直观地处理带标签数据和关系数据。</p></li></ul><h4 id="二、创建Pandas-Series"><a href="#二、创建Pandas-Series" class="headerlink" title="二、创建Pandas Series"></a>二、创建Pandas Series</h4><blockquote><p>可以使用 pd.Series(data, index) 命令创建 Pandas Series，其中data表示输入数据， index 为对应数据的索引，除此之外，我们还可以添加参数dtype来设置该列的数据类型。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd <span class="comment">#约定俗成的简称</span></span><br><span class="line">pd.Series(data = [<span class="number">30</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">5</span>], index = [<span class="string">&#x27;eggs&#x27;</span>, <span class="string">&#x27;apples&#x27;</span>, <span class="string">&#x27;milk&#x27;</span>, <span class="string">&#x27;bread&#x27;</span>],dtype=<span class="built_in">float</span>)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">eggs      <span class="number">30.0</span></span><br><span class="line">apples     <span class="number">6.0</span></span><br><span class="line">milk       <span class="number">7.0</span></span><br><span class="line">bread      <span class="number">5.0</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><blockquote><p>data除了可以输入列表之外，还可以输入字典，或者是直接一个标量。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pd.Series(data=&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;michong&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="number">18</span>&#125;)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">name    michong</span><br><span class="line">age          <span class="number">18</span></span><br><span class="line">dtype: <span class="built_in">object</span></span><br></pre></td></tr></table></figure><h4 id="三、访问和删除Series中的元素"><a href="#三、访问和删除Series中的元素" class="headerlink" title="三、访问和删除Series中的元素"></a>三、访问和删除Series中的元素</h4><h5 id="1、访问"><a href="#1、访问" class="headerlink" title="1、访问"></a>1、访问</h5><blockquote><p>一种类似于从列表中按照索引访问数据，一种类似于从字典中按照key来访问value。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series(data=<span class="number">8</span>,index=[<span class="string">&#x27;apple&#x27;</span>,<span class="string">&#x27;milk&#x27;</span>,<span class="string">&#x27;bread&#x27;</span>])</span><br><span class="line"></span><br><span class="line">s[<span class="number">0</span>]</span><br><span class="line">out:</span><br><span class="line">    <span class="number">8</span></span><br><span class="line"></span><br><span class="line">s[<span class="string">&#x27;apple&#x27;</span>]</span><br><span class="line">out:</span><br><span class="line">    <span class="number">8</span></span><br><span class="line">    </span><br><span class="line">s.loc[<span class="string">&#x27;apple&#x27;</span>]</span><br><span class="line">s.iloc[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h5 id="2、修改"><a href="#2、修改" class="headerlink" title="2、修改"></a>2、修改</h5><blockquote><p>修改完记得重新赋值即可</p></blockquote><h5 id="3、删除"><a href="#3、删除" class="headerlink" title="3、删除"></a>3、删除</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s.drop([<span class="string">&#x27;apple&#x27;</span>])</span><br><span class="line">out:</span><br><span class="line">    milk     <span class="number">8</span></span><br><span class="line">    bread    <span class="number">8</span></span><br><span class="line">    dtype: int64</span><br></pre></td></tr></table></figure><blockquote><p>.drop()函数并不会修改原来的数据，如果你想要修改原数据的话，可以选择添加参数inplace = True或者是用原数据替换s = s.drop(label)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.drop([<span class="string">&#x27;apple&#x27;</span>],inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h4 id="四、DataFrame的使用"><a href="#四、DataFrame的使用" class="headerlink" title="四、DataFrame的使用"></a>四、DataFrame的使用</h4><h5 id="1、创建DataFrame"><a href="#1、创建DataFrame" class="headerlink" title="1、创建DataFrame"></a>1、创建DataFrame</h5><blockquote><p>pd.DataFrame(data, index, columns)</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data是数据，可以输入ndarray，或者是字典（字典中可以包含Series或arrays或），或者是DataFrame；</span><br><span class="line"></span><br><span class="line">index是索引，输入列表，如果没有设置该参数，会默认以<span class="number">0</span>开始往下计数；</span><br><span class="line"></span><br><span class="line">columns是列名，输入列表，如果没有设置该参数，会默认以<span class="number">0</span>开始往右计数；</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">d = [[1,2],[3,4]]</span><br><span class="line">df = pd.DataFrame(data=d,index=[&#x27;a&#x27;,&#x27;b&#x27;],columns=[&#x27;one&#x27;,&#x27;two&#x27;])</span><br><span class="line">df</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">    onetwo</span><br><span class="line">    a12</span><br><span class="line">    b34</span><br></pre></td></tr></table></figure><h5 id="2、访问DataFrame中的元素"><a href="#2、访问DataFrame中的元素" class="headerlink" title="2、访问DataFrame中的元素"></a>2、访问DataFrame中的元素</h5><ul><li>访问单行<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">df.loc[<span class="string">&#x27;a&#x27;</span>]</span><br><span class="line">df.iloc[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">    one    <span class="number">1</span></span><br><span class="line">    two    <span class="number">2</span></span><br><span class="line">    Name: a, dtype: int64</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li><li>访问多行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">df.loc[[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]]</span><br><span class="line">df.iloc[[<span class="number">0</span>,<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">    onetwo</span><br><span class="line">    a<span class="number">1</span><span class="number">2</span></span><br><span class="line">    b<span class="number">3</span><span class="number">4</span></span><br></pre></td></tr></table></figure><ul><li>访问某一列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">df.one</span><br><span class="line">df[<span class="string">&#x27;one&#x27;</span>]</span><br><span class="line">df.iloc[:,<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">out：</span><br><span class="line">    a    <span class="number">1</span></span><br><span class="line">    b    <span class="number">3</span></span><br><span class="line">    Name: one, dtype: int64</span><br></pre></td></tr></table></figure><ul><li>访问多列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">df[[<span class="string">&#x27;one&#x27;</span>,<span class="string">&#x27;two&#x27;</span>]]</span><br><span class="line">df.iloc[:,<span class="number">0</span>:<span class="number">2</span>] <span class="comment">#0-2,不包含2，即第三列</span></span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">    onetwo</span><br><span class="line">    a<span class="number">1</span><span class="number">2</span></span><br><span class="line">    b<span class="number">3</span><span class="number">4</span></span><br></pre></td></tr></table></figure><ul><li>访问某一个元素</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df.iloc[<span class="number">0</span>,<span class="number">1</span>]    <span class="comment">#先访问行再访问列</span></span><br><span class="line">df[<span class="string">&#x27;two&#x27;</span>][<span class="string">&#x27;a&#x27;</span>]  <span class="comment">#先访问列再访问行</span></span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">    <span class="number">2</span></span><br></pre></td></tr></table></figure><h5 id="3、删除、增加元素"><a href="#3、删除、增加元素" class="headerlink" title="3、删除、增加元素"></a>3、删除、增加元素</h5><blockquote><p>使用.drop函数删除元素，默认为删除行，添加参数axis = 1来删除列。</p></blockquote><ul><li>删除行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df.drop([<span class="string">&#x27;a&#x27;</span>])</span><br><span class="line">    out:</span><br><span class="line">        onetwo</span><br><span class="line">    b<span class="number">3</span><span class="number">4</span></span><br></pre></td></tr></table></figure><ul><li>删除列</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">df.drop(<span class="string">&#x27;one&#x27;</span>,axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">    two</span><br><span class="line">    a<span class="number">2</span></span><br><span class="line">    b<span class="number">4</span></span><br></pre></td></tr></table></figure><p>==值得注意的是，drop函数不会修改原数据，如果想直接对原数据进行修改的话，可以选择添加参数inplace = True或用原变量名重新赋值替换。==</p><ul><li>增加元素<blockquote><p>一种是append()，另外一种是insert()</p></blockquote></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">df.insert(<span class="number">2</span>,<span class="string">&#x27;T&#x27;</span>,<span class="number">8</span>) <span class="comment">#新生成一个列，列名称是T</span></span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">    onetwoT</span><br><span class="line">    a<span class="number">1</span><span class="number">2</span><span class="number">8</span></span><br><span class="line">    b<span class="number">3</span><span class="number">4</span><span class="number">8</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">df.insert(<span class="number">2</span>,<span class="string">&#x27;F&#x27;</span>,[<span class="number">9</span>,<span class="number">10</span>]) <span class="comment">#设定F列下的每一行的值</span></span><br><span class="line">out：</span><br><span class="line">        onetwoFT</span><br><span class="line">    a<span class="number">1</span><span class="number">2</span><span class="number">9</span><span class="number">8</span></span><br><span class="line">    b<span class="number">3</span><span class="number">4</span><span class="number">10</span><span class="number">8</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">data2 = pd.DataFrame([[8,9,10,11],[6,7,8,9]],</span><br><span class="line">                     columns=[&#x27;one&#x27;,&#x27;two&#x27;,&#x27;F&#x27;,&#x27;T&#x27;]</span><br><span class="line">                    ,index=[&#x27;c&#x27;,&#x27;d&#x27;])</span><br><span class="line">df.append(data2,ignore_index=True)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">    onetwoFT</span><br><span class="line">    01298</span><br><span class="line">    134108</span><br><span class="line">    2891011</span><br><span class="line">    36789</span><br></pre></td></tr></table></figure><h5 id="4、重命名"><a href="#4、重命名" class="headerlink" title="4、重命名"></a>4、重命名</h5><ul><li>修改列的名称<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df.rename(columns=&#123;<span class="string">&#x27;one&#x27;</span>:<span class="string">&#x27;第一列&#x27;</span>&#125;)</span><br><span class="line">out:</span><br><span class="line">        第一列twoFT</span><br><span class="line">    a<span class="number">1</span>   <span class="number">2</span><span class="number">9</span><span class="number">8</span></span><br><span class="line">    b<span class="number">3</span>   <span class="number">4</span><span class="number">10</span><span class="number">8</span></span><br></pre></td></tr></table></figure></li><li>修改行的名称</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df.rename(index=&#123;<span class="string">&#x27;a&#x27;</span>:<span class="string">&#x27;第一行&#x27;</span>&#125;)</span><br><span class="line">out:</span><br><span class="line">            onetwo   F   T</span><br><span class="line">    第一行 <span class="number">1</span>  <span class="number">2</span>   <span class="number">9</span> <span class="number">8</span></span><br><span class="line">    b    <span class="number">3</span> <span class="number">4</span>   <span class="number">10</span><span class="number">8</span></span><br></pre></td></tr></table></figure><h5 id="5、更改索引"><a href="#5、更改索引" class="headerlink" title="5、更改索引"></a>5、更改索引</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">可以使用函数set_index(index_label)，将数据集的index设置为index_label。</span><br><span class="line"></span><br><span class="line">除此之外，还可以使用函数reset_index()重置数据集的index为0开始计数的数列。</span><br></pre></td></tr></table></figure><h5 id="6、缺失值-NaN-处理"><a href="#6、缺失值-NaN-处理" class="headerlink" title="6、缺失值(NaN)处理"></a>6、缺失值(NaN)处理</h5><ul><li>查找NaN</li></ul><blockquote><p>可以使用isnull()和notnull()函数来查看数据集中是否存在缺失数据，在该函数后面添加sum()函数来对缺失数量进行统计。除此之外，还可以使用count()函数对非NaN数据进行统计计数。</p></blockquote><ul><li>删除NaN – df.dropna()<blockquote><p>dropna()函数还有一个参数是how，当how = all时，只会删除全部数据都为NaN的列或行。</p></blockquote></li></ul><p>==不修改原来的数据==</p><ul><li>替换NaN</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">df.fillna(<span class="number">0</span>)</span><br><span class="line">out:</span><br><span class="line">        <span class="number">0</span>   <span class="number">1</span>   F T one    two</span><br><span class="line">a<span class="number">0.0</span> <span class="number">0.0</span><span class="number">9.0</span> <span class="number">8.0</span><span class="number">1.0</span> <span class="number">2.0</span></span><br><span class="line">b<span class="number">0.0</span> <span class="number">0.0</span>    <span class="number">10.0</span>    <span class="number">8.0</span> <span class="number">3.0</span>    <span class="number">4.0</span></span><br><span class="line"><span class="number">0</span><span class="number">5.0</span> <span class="number">6.0</span><span class="number">0.0</span> <span class="number">0.0</span><span class="number">0.0</span><span class="number">0.0</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">使用fillna()函数可以替换NaN为某一值。其参数如下：</span><br><span class="line">    value：用来替换NaN的值</span><br><span class="line">    </span><br><span class="line">    method：常用有两种，一种是ffill前向填充，一种是backfill后向填充</span><br><span class="line">    </span><br><span class="line">    axis：0为行，1为列</span><br><span class="line">    </span><br><span class="line">    inplace：是否替换原数据，默认为False</span><br><span class="line">    </span><br><span class="line">    limit：接受int类型的输入，可以限定替换前多少个NaN</span><br></pre></td></tr></table></figure><h4 id="五、数据分析流程及Pandas应用"><a href="#五、数据分析流程及Pandas应用" class="headerlink" title="五、数据分析流程及Pandas应用"></a>五、数据分析流程及Pandas应用</h4><h5 id="1、打开文件"><a href="#1、打开文件" class="headerlink" title="1、打开文件"></a>1、打开文件</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#打开csv文件</span></span><br><span class="line">pd.read_csv(<span class="string">&#x27;filename&#x27;</span>)</span><br><span class="line"><span class="comment">#打开excel文件</span></span><br><span class="line">pd.read_excel(<span class="string">&#x27;filename&#x27;</span>)</span><br><span class="line"><span class="comment">#处理中文字符的tsv文件</span></span><br><span class="line">pd.read_csv(<span class="string">&#x27;filename&#x27;</span>,sep = <span class="string">&#x27;\t&#x27;</span>,encoding = <span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="2、查看数据"><a href="#2、查看数据" class="headerlink" title="2、查看数据"></a>2、查看数据</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看前五行</span></span><br><span class="line">df.head()</span><br><span class="line"><span class="comment">#查看尾五行</span></span><br><span class="line">df.tail()</span><br><span class="line"><span class="comment">#查看随机一行</span></span><br><span class="line">df.sample()</span><br></pre></td></tr></table></figure><h5 id="3、查看数据信息"><a href="#3、查看数据信息" class="headerlink" title="3、查看数据信息"></a>3、查看数据信息</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看数据集行数和列数</span></span><br><span class="line">df.shape</span><br><span class="line"><span class="comment">#查看数据集信息（列名、数据类型、每列的数据量——可以看出数据缺失情况）</span></span><br><span class="line">df.info()</span><br><span class="line"><span class="comment">#查看数据集基本统计信息</span></span><br><span class="line">df.describe()</span><br><span class="line"><span class="comment">#查看数据集列名</span></span><br><span class="line">df.columns</span><br><span class="line"><span class="comment">#查看数据集数据缺失情况 </span></span><br><span class="line">df.isnull().<span class="built_in">sum</span>()</span><br><span class="line"><span class="comment">#查看缺失列数据</span></span><br><span class="line">df[df[<span class="string">&#x27;col_name&#x27;</span>].isnull()]</span><br><span class="line"><span class="comment">#查看数据集数据重复情况</span></span><br><span class="line"><span class="built_in">sum</span>(df.duplicated())</span><br><span class="line"><span class="comment">#查看重复数据</span></span><br><span class="line">df[df.duplicated()]</span><br><span class="line"><span class="comment">#查看某列分类统计情况</span></span><br><span class="line">df[<span class="string">&#x27;col_name&#x27;</span>].value_counts()</span><br><span class="line"><span class="comment">#查看某列唯一值</span></span><br><span class="line">df[<span class="string">&#x27;col_name&#x27;</span>].unique()</span><br><span class="line"><span class="comment">#查看某列唯一值数量</span></span><br><span class="line">df[<span class="string">&#x27;col_name&#x27;</span>].nunique()</span><br><span class="line"><span class="comment">#以某列对数据集进行排序</span></span><br><span class="line">df.sort_values(by = <span class="string">&#x27;col_name&#x27;</span>,ascending = <span class="literal">False</span>)<span class="comment">#False为由大至小</span></span><br></pre></td></tr></table></figure><h5 id="4、数据筛选"><a href="#4、数据筛选" class="headerlink" title="4、数据筛选"></a>4、数据筛选</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#提取某行</span></span><br><span class="line">df.iloc[row_index]</span><br><span class="line">df.loc[<span class="string">&#x27;row_name&#x27;</span>]</span><br><span class="line"><span class="comment">#提取某几行</span></span><br><span class="line">df.iloc[row_index_1:row_index_2]</span><br><span class="line"><span class="comment">#提取某列</span></span><br><span class="line">df[<span class="string">&#x27;col_name&#x27;</span>]</span><br><span class="line"><span class="comment">#提取某几列</span></span><br><span class="line">df[[<span class="string">&#x27;col_name_1&#x27;</span>,<span class="string">&#x27;col_name_2&#x27;</span>]]</span><br><span class="line"><span class="comment">#提取某行某列的值</span></span><br><span class="line">df.iloc[row_index,col_index]</span><br><span class="line">df.loc[<span class="string">&#x27;row_name&#x27;</span>,<span class="string">&#x27;col_name&#x27;</span>]</span><br><span class="line"><span class="comment">#筛选某列中满足某条件的数据</span></span><br><span class="line">df[df[<span class="string">&#x27;col_name&#x27;</span>] == value]<span class="comment">#等于某值的数据，同理满足所有比较运算符</span></span><br><span class="line">df.query(<span class="string">&#x27;col_name == value&#x27;</span>)<span class="comment">#代码效果同上</span></span><br><span class="line">df[(df[<span class="string">&#x27;col_name_1&#x27;</span>] &gt;= value_1) &amp; (df[<span class="string">&#x27;col_name_2&#x27;</span>] != value_2)]<span class="comment">#与&amp;，或|</span></span><br><span class="line">df.query(<span class="string">&#x27;(col_name_1 &gt;= value_lower) &amp; (col_name_2 &lt;= value_upper)&#x27;</span>)</span><br><span class="line">df.groupby(<span class="string">&#x27;col_name&#x27;</span>).groups <span class="comment">#按col_name列进行分组，聚类</span></span><br></pre></td></tr></table></figure><h5 id="5、数据清理"><a href="#5、数据清理" class="headerlink" title="5、数据清理"></a>5、数据清理</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除某行</span></span><br><span class="line">df.drop([<span class="string">&#x27;row_name&#x27;</span>],inplace = <span class="literal">True</span>)<span class="comment">#若添加inplace = True，修改后的数据会覆盖原始数据</span></span><br><span class="line"><span class="comment">#删除某列</span></span><br><span class="line">df.drop([<span class="string">&#x27;col_name&#x27;</span>],axis = <span class="number">1</span>)</span><br><span class="line"><span class="comment">#缺失值的处理</span></span><br><span class="line">df.fillna(mean_value)<span class="comment">#替换缺失值</span></span><br><span class="line">df.dropna()<span class="comment">#删除包含缺失值的行</span></span><br><span class="line">df.dropna(axis = <span class="number">1</span>, how = <span class="string">&#x27;all&#x27;</span>)<span class="comment">#只删除所有数据缺失的列</span></span><br><span class="line"><span class="comment">#删除重复值</span></span><br><span class="line">drop_duplicates(inplace = <span class="literal">True</span>)</span><br><span class="line"><span class="comment">#更改某行/列/位置数据</span></span><br><span class="line">用iloc或者loc直接替换修改即可</span><br><span class="line"><span class="comment">#更改数据类型</span></span><br><span class="line">df[<span class="string">&#x27;datetime_col&#x27;</span>] = pd.to_datetime(df[<span class="string">&#x27;datetime_col&#x27;</span>])</span><br><span class="line">df[<span class="string">&#x27;col_name&#x27;</span>].astype(<span class="built_in">str</span>)<span class="comment">#还可以是int/float...</span></span><br><span class="line"><span class="comment">#更改列名</span></span><br><span class="line">df.rename(columns=&#123;<span class="string">&#x27;A&#x27;</span>:<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;C&#x27;</span>:<span class="string">&#x27;c&#x27;</span>&#125;, inplace = <span class="literal">True</span>)</span><br><span class="line"><span class="comment">#apply函数</span></span><br><span class="line"><span class="comment">#讲function应用在col_name列，此方法比用for循环快得多得多</span></span><br><span class="line">df[<span class="string">&#x27;col_name&#x27;</span>].apply(function)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python开发之numpy的使用</title>
      <link href="/2019/09/19/Python%E5%BC%80%E5%8F%91%E4%B9%8Bnumpy%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/09/19/Python%E5%BC%80%E5%8F%91%E4%B9%8Bnumpy%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="一、注意几点"><a href="#一、注意几点" class="headerlink" title="一、注意几点"></a>一、注意几点</h4><ul><li><p>NumPy 数组在创建时有固定的大小，不同于Python列表（可以动态增长）。更改ndarray的大小将创建一个新的数组并删除原始数据。</p></li><li><p>NumPy 数组中的元素都需要具有相同的数据类型，因此在存储器中将具有相同的大小。数组的元素如果也是数组（可以是 Python 的原生 array，也可以是 ndarray）的情况下，则构成了多维数组。</p></li><li><p>NumPy 数组便于对大量数据进行高级数学和其他类型的操作。通常，这样的操作比使用Python的内置序列可能更有效和更少的代码执行。</p></li></ul><h5 id="二、numpy的使用"><a href="#二、numpy的使用" class="headerlink" title="二、numpy的使用"></a>二、numpy的使用</h5><h5 id="1、创建ndarray"><a href="#1、创建ndarray" class="headerlink" title="1、创建ndarray"></a>1、创建ndarray</h5><ul><li>由python list创建<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1维数组</span></span><br><span class="line">a = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])  </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a), a.shape, a[<span class="number">0</span>], a[<span class="number">1</span>], a[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">numpy</span>.<span class="title">ndarray</span>&#x27;&gt; (<span class="params"><span class="number">3</span>,</span>) 1 2 3</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"># 重新赋值</span></span><br><span class="line"><span class="class"><span class="title">a</span>[0] = 5                 </span></span><br><span class="line"><span class="class"><span class="title">print</span>(<span class="params">a</span>)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">out</span>:</span></span><br><span class="line">[<span class="number">5</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2维数组</span></span><br><span class="line">b = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])   </span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(b[<span class="number">0</span>, <span class="number">0</span>], b[<span class="number">0</span>, <span class="number">1</span>], b[<span class="number">1</span>, <span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">4</span></span><br></pre></td></tr></table></figure></li><li>由numpy内置函数创建</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建2x2的全0数组</span></span><br><span class="line">a = np.zeros((<span class="number">2</span>,<span class="number">2</span>))  </span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[[ <span class="number">0.</span>  <span class="number">0.</span>]</span><br><span class="line"> [ <span class="number">0.</span>  <span class="number">0.</span>]]</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 创建1x2的全1数组</span></span><br><span class="line">b = np.ones((<span class="number">1</span>,<span class="number">2</span>))  </span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[[ <span class="number">1.</span>  <span class="number">1.</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建2x2定值为7的数组</span></span><br><span class="line">c = np.full((<span class="number">2</span>,<span class="number">2</span>), <span class="number">7</span>) </span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[[<span class="number">7</span> <span class="number">7</span>]</span><br><span class="line"> [<span class="number">7</span> <span class="number">7</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建2x2的单位矩阵（对角元素为1）</span></span><br><span class="line">d = np.eye(<span class="number">2</span>)        </span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[[ <span class="number">1.</span>  <span class="number">0.</span>]</span><br><span class="line"> [ <span class="number">0.</span>  <span class="number">1.</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个对角线为10,20,30,50的对角矩阵</span></span><br><span class="line">d_1 = np.diag([<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">50</span>]) </span><br><span class="line"><span class="built_in">print</span>(d_1)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[[<span class="number">10</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [ <span class="number">0</span> <span class="number">20</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line"> [ <span class="number">0</span> <span class="number">0</span> <span class="number">30</span> <span class="number">0</span>]</span><br><span class="line"> [ <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">50</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个一维的0-14的数组</span></span><br><span class="line">e = np.arange(<span class="number">15</span>)   </span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个一维的4-9的数组</span></span><br><span class="line">e_1 = np.arange(<span class="number">4</span>,<span class="number">10</span>)  </span><br><span class="line"><span class="built_in">print</span>(e_1)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[<span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个一维的1-13且以间隔为3的数组</span></span><br><span class="line">e_2 = np.arange(<span class="number">1</span>,<span class="number">14</span>,<span class="number">3</span>)  </span><br><span class="line"><span class="built_in">print</span>(e_2)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[ <span class="number">1</span> <span class="number">4</span> <span class="number">7</span> <span class="number">10</span> <span class="number">13</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个一维的范围在0-10，长度为6的数组</span></span><br><span class="line">f = np.linspace(<span class="number">0</span>,<span class="number">10</span>,<span class="number">6</span>)  </span><br><span class="line"><span class="built_in">print</span>(f)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line"><span class="comment">#各个元素的间隔相等，为(10-0)/(6-1) = 2，若不想包含末尾的10，可以添加参数endpoint = False</span></span><br><span class="line">[ <span class="number">0.</span>,  <span class="number">2.</span>,  <span class="number">4.</span>,  <span class="number">6.</span>,  <span class="number">8.</span>, <span class="number">10.</span>]  </span><br><span class="line"></span><br><span class="line"><span class="comment">#把arange创建的一维数组转换为3行4列的二维数组</span></span><br><span class="line">g = np.arange(<span class="number">12</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)  </span><br><span class="line"><span class="built_in">print</span>(g)                        </span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line"><span class="comment">#注意：使用reshape转换前后的数据量应该相同，12 = 3x4</span></span><br><span class="line">[[ <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>,  <span class="number">3</span>],              </span><br><span class="line"> [ <span class="number">4</span>,  <span class="number">5</span>,  <span class="number">6</span>,  <span class="number">7</span>],</span><br><span class="line"> [ <span class="number">8</span>,  <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>]]              </span><br><span class="line"></span><br><span class="line"><span class="comment"># 2x2的随机数组(矩阵),取值范围在[0.0,1.0)（包含0，不包含1）</span></span><br><span class="line">h = np.random.random((<span class="number">2</span>,<span class="number">2</span>)) </span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[[ <span class="number">0.72776966</span>  <span class="number">0.94164821</span>]</span><br><span class="line"> [ <span class="number">0.04652655</span>  <span class="number">0.2316599</span> ]]</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个取值范围在[4,15)，2行2列的随机整数矩阵</span></span><br><span class="line">i = np.random.randint(<span class="number">4</span>,<span class="number">15</span>,size = (<span class="number">2</span>,<span class="number">2</span>))  </span><br><span class="line"><span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[[<span class="number">6</span>, <span class="number">5</span>],</span><br><span class="line"> [<span class="number">5</span>, <span class="number">9</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个从均值为0，标准差为0.1的正态分布中随机抽样的3x3矩阵</span></span><br><span class="line">j = np.random.normal(<span class="number">0</span>,<span class="number">0.1</span>,size = (<span class="number">3</span>,<span class="number">3</span>))  </span><br><span class="line"><span class="built_in">print</span>(j)</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">[[-<span class="number">0.20783767</span>, -<span class="number">0.12406401</span>, -<span class="number">0.11775284</span>],</span><br><span class="line"> [ <span class="number">0.02037018</span>,  <span class="number">0.02898423</span>, -<span class="number">0.02548213</span>],</span><br><span class="line"> [-<span class="number">0.0149878</span> ,  <span class="number">0.05277648</span>,  <span class="number">0.08332239</span>]]</span><br></pre></td></tr></table></figure><h5 id="2、访问-amp-更改"><a href="#2、访问-amp-更改" class="headerlink" title="2、访问&amp;更改"></a>2、访问&amp;更改</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#访问某一元素，这里可以自己多尝试</span></span><br><span class="line"><span class="comment">#访问一维数组的某一元素，中括号内填写index</span></span><br><span class="line"><span class="built_in">print</span>(np.arange(<span class="number">6</span>)[<span class="number">3</span>]) </span><br><span class="line">out:<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#访问二维数组的某一元素，中括号内填写[行,列]</span></span><br><span class="line"><span class="built_in">print</span>(np.arange(<span class="number">6</span>).reshape(<span class="number">3</span>,<span class="number">2</span>)[<span class="number">1</span>,<span class="number">1</span>]) </span><br><span class="line">out:<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#访问三位数组中的某一元素，中括号内[组，行，列]</span></span><br><span class="line"><span class="built_in">print</span>(np.arange(<span class="number">12</span>).reshape(<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>)[<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>]) </span><br><span class="line">out:<span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#更改某一元素，用 = 进行赋值和替换即可</span></span><br><span class="line">a = np.arange(<span class="number">6</span>)</span><br><span class="line">a[<span class="number">3</span>] = <span class="number">7</span>      <span class="comment">#先访问，再重新赋值</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">7</span> <span class="number">4</span> <span class="number">5</span>]</span><br></pre></td></tr></table></figure><h5 id="3、删除"><a href="#3、删除" class="headerlink" title="3、删除"></a>3、删除</h5><blockquote><p>这里需要注意的是axis这个参数，在2维数据中，axis = 0表示选择行，axis = 1表示选择列，但不能机械的认为0就表示行，1就表示列，注意前提2维数据中。</p></blockquote><blockquote><p>在三维数据中，axis = 0表示组，1表示行，2表示列。这是为什么呢？提示一下，三位数组的shape中组、行和列是怎样排序的？</p></blockquote><p>==如果要修改a的值，需要重新赋值==</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = np.arange(<span class="number">6</span>).reshape(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">np.delete(a,[<span class="number">0</span>],axis = <span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]])  <span class="comment">#原数据并未更改</span></span><br><span class="line"></span><br><span class="line">a = np.delete(a,[<span class="number">0</span>],axis = <span class="number">0</span>)  <span class="comment">#重新赋值</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">array([[<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]])   <span class="comment">#原数据已更改</span></span><br></pre></td></tr></table></figure><h5 id="4、添加"><a href="#4、添加" class="headerlink" title="4、添加"></a>4、添加</h5><blockquote><p>往ndarray中增加元素的办法跟python list也很类似，常用的有两种：</p></blockquote><ul><li>一种是添加（append），就是将新增的元素添加到ndarray的尾部</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法为：np.append(ndarray, elements, axis)</span><br></pre></td></tr></table></figure><ul><li>一种是插入（insert），可以让新增元素插入到指定位置</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语法为：np.insert(ndarray, index, elements, axis)</span><br><span class="line"></span><br><span class="line">参数中就多了一个index，指示的是插入新元素的位置。</span><br></pre></td></tr></table></figure><h5 id="5、ndarray切片"><a href="#5、ndarray切片" class="headerlink" title="5、ndarray切片"></a>5、ndarray切片</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a[:,:-<span class="number">1</span>]   去除最后一列</span><br><span class="line">a[:,-<span class="number">1</span>]    只保留最后一列</span><br></pre></td></tr></table></figure><ul><li>一个常用的切片</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">以列的形式获取最后一列数据：</span><br><span class="line"></span><br><span class="line">a[:,<span class="number">3</span>:]</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">array([[ <span class="number">3</span>],</span><br><span class="line">       [ <span class="number">7</span>],</span><br><span class="line">       [<span class="number">11</span>],</span><br><span class="line">       [<span class="number">15</span>]])</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">以一维数组的形式获取最后一列数据：</span><br><span class="line"></span><br><span class="line">a[:,-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">array([ <span class="number">3</span>,  <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>])</span><br></pre></td></tr></table></figure><h5 id="6、ndarray筛选"><a href="#6、ndarray筛选" class="headerlink" title="6、ndarray筛选"></a>6、ndarray筛选</h5><ul><li>选择ndarray的对角线</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">所用函数为np.diag(ndarray, k=N)，其中参数k的取值决定了按照哪一条对角线选择数据。</span><br><span class="line"></span><br><span class="line">默认k = 0，取主对角线；</span><br><span class="line"></span><br><span class="line">k = 1时，取主对角线上面1行的元素；</span><br><span class="line"></span><br><span class="line">k = -1时，取主对角线下面1行的元素。</span><br></pre></td></tr></table></figure><ul><li>提取ndarray中的唯一值</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看二维数组a中的唯一值</span></span><br><span class="line">a = [[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],</span><br><span class="line">     [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],</span><br><span class="line">     [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]]</span><br><span class="line"><span class="built_in">print</span>(np.unique(a))    </span><br><span class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看a中的唯一行（也就是没有重复的行）</span></span><br><span class="line"><span class="built_in">print</span>(np.unique(a,axis = <span class="number">0</span>))  </span><br><span class="line">array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看a中的唯一列</span></span><br><span class="line"><span class="built_in">print</span>(np.unique(a,axis = <span class="number">1</span>))  </span><br><span class="line">array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">       [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>],</span><br><span class="line">       [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看a中第一行的唯一值</span></span><br><span class="line"><span class="built_in">print</span>(np.unique(a[<span class="number">0</span>]))  </span><br><span class="line">array([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>])</span><br></pre></td></tr></table></figure><ul><li>通过布尔运算筛选</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X[X &gt; 10] #筛选数组X中大于10的数据</span><br></pre></td></tr></table></figure><h5 id="7、ndarray运算"><a href="#7、ndarray运算" class="headerlink" title="7、ndarray运算"></a>7、ndarray运算</h5><ul><li>集合运算</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">np.intersect1d(x,y) <span class="comment">#取x与y的交集</span></span><br><span class="line">np.setdiff1d(x,y)   <span class="comment">#取x与y的差集，返回的是在x中且没在y中的元素</span></span><br><span class="line">np.union1d(x,y)     <span class="comment">#取x与y的并集</span></span><br></pre></td></tr></table></figure><ul><li>算术运算</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我们可以通过+、-、*、/或np.add、np.substract、np.multiply 、np.divide来对两个矩阵进行元素级的加减乘除运算，因为是元素级的运算，所以两个矩阵的shape必须要一致或者是可广播(Broadcast)。</span><br><span class="line"></span><br><span class="line">这里所谓的可广播，就是指虽然A和B两个矩阵的shape不一致，但是A可以拆分为整数个与B具有相同shape的矩阵，这样在进行元素级别的运算时，就会先将A进行拆分，然后与B进行运算，结果再组合一起就可以。这里的A就是“可广播”矩阵。</span><br></pre></td></tr></table></figure><h5 id="8、ndarray排序"><a href="#8、ndarray排序" class="headerlink" title="8、ndarray排序"></a>8、ndarray排序</h5><blockquote><p>np.sort()和ndarray.sort()来对ndarray进行排序。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">相同的是：</span><br><span class="line"></span><br><span class="line">二者都可以使用参数axis来决定依照哪个轴进行排序，axis = 0时按照列排序，axis = 1时按照行排序；</span><br><span class="line"></span><br><span class="line">不同的是：</span><br><span class="line"></span><br><span class="line">np.sort()不会更改原数组；ndarray.sort()会更改原数组</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV图像处理笔记（三）：霍夫变换、直方图、轮廓等综合应用</title>
      <link href="/2019/07/22/OpenCV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E9%9C%8D%E5%A4%AB%E5%8F%98%E6%8D%A2%E3%80%81%E7%9B%B4%E6%96%B9%E5%9B%BE%E3%80%81%E8%BD%AE%E5%BB%93%E7%AD%89%E7%BB%BC%E5%90%88%E5%BA%94%E7%94%A8/"/>
      <url>/2019/07/22/OpenCV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E9%9C%8D%E5%A4%AB%E5%8F%98%E6%8D%A2%E3%80%81%E7%9B%B4%E6%96%B9%E5%9B%BE%E3%80%81%E8%BD%AE%E5%BB%93%E7%AD%89%E7%BB%BC%E5%90%88%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="一、霍夫直线变换"><a href="#一、霍夫直线变换" class="headerlink" title="一、霍夫直线变换"></a>一、霍夫直线变换</h4><h5 id="1、霍夫直线变换"><a href="#1、霍夫直线变换" class="headerlink" title="1、霍夫直线变换"></a>1、霍夫直线变换</h5><ul><li>Hough Line Transform用来做直线检测</li><li>前提条件 – 边缘检测已经完成</li><li>平面空间到极坐标空间转换</li></ul><h5 id="2、霍夫直线变换介绍"><a href="#2、霍夫直线变换介绍" class="headerlink" title="2、霍夫直线变换介绍"></a>2、霍夫直线变换介绍</h5><ul><li>对于任意一条直线上的所有点来说</li><li>变换到极坐标中，从[0~360]空间，可以得到r的大小</li><li>属于同一条直线上点在极坐标空(r, theta)必然在一个点上有最强的信号出现，根据此反算到平面坐标中就可以得到直线上各点的像素坐标。从而得到直线</li></ul><h5 id="3、相关API"><a href="#3、相关API" class="headerlink" title="3、相关API"></a>3、相关API</h5><ul><li>标准的霍夫变换 cv::HoughLines从平面坐标转换到霍夫空间，最终输出是               表示极坐标空间</li><li>霍夫变换直线概率 cv::HoughLinesP最终输出是直线的两个点</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cv::<span class="built_in">HoughLinesP</span>(</span><br><span class="line">InputArray src, <span class="comment">// 输入图像，必须8-bit的灰度图像</span></span><br><span class="line">OutputArray lines, <span class="comment">// 输出的极坐标来表示直线</span></span><br><span class="line"><span class="keyword">double</span> rho, <span class="comment">// 生成极坐标时候的像素扫描步长</span></span><br><span class="line"><span class="keyword">double</span> theta, <span class="comment">//生成极坐标时候的角度步长，一般取值CV_PI/180</span></span><br><span class="line"><span class="keyword">int</span> threshold, <span class="comment">// 阈值，只有获得足够交点的极坐标点才被看成是直线</span></span><br><span class="line"><span class="keyword">double</span> minLineLength=<span class="number">0</span>;<span class="comment">// 最小直线长度</span></span><br><span class="line"><span class="keyword">double</span> maxLineGap=<span class="number">0</span>;<span class="comment">// 最大间隔</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">   Mat src, src_gray,dst;</span><br><span class="line">src = <span class="built_in">imread</span>(<span class="string">&quot;C:\\Users\\15646\\Pictures\\线条.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//边缘检测</span></span><br><span class="line"><span class="built_in">Canny</span>(src, src_gray, <span class="number">150</span>, <span class="number">200</span>);</span><br><span class="line"><span class="comment">//灰度转彩色</span></span><br><span class="line"><span class="built_in">cvtColor</span>(src_gray, dst, CV_GRAY2BGR);</span><br><span class="line"></span><br><span class="line"><span class="comment">//霍夫直线检测</span></span><br><span class="line">vector&lt;Vec4f&gt; plines;</span><br><span class="line"><span class="built_in">HoughLinesP</span>(src_gray, plines, <span class="number">1</span>, CV_PI / <span class="number">180.0</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">Scalar color = <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; plines.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">Vec4f hline = plines[i];</span><br><span class="line"><span class="built_in">line</span>(dst, <span class="built_in">Point</span>(hline[i], hline[<span class="number">1</span>]), <span class="built_in">Point</span>(hline[<span class="number">2</span>], hline[<span class="number">3</span>]), color,<span class="number">3</span>, LINE_AA);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;dst img&quot;</span>, dst);</span><br></pre></td></tr></table></figure><h4 id="二、霍夫圆检测"><a href="#二、霍夫圆检测" class="headerlink" title="二、霍夫圆检测"></a>二、霍夫圆检测</h4><h5 id="1、原理"><a href="#1、原理" class="headerlink" title="1、原理"></a>1、原理</h5><p><img src="http://myfile.buildworld.cn/%E9%9C%8D%E5%A4%AB%E5%9C%86%E6%A3%80%E6%B5%8B%E5%8E%9F%E7%90%86.png" alt="原理"><br><img src="http://myfile.buildworld.cn/%E9%9C%8D%E5%A4%AB%E5%9C%86%E6%A3%80%E6%B5%8B%E5%8E%9F%E7%90%862.png" alt="image"></p><h5 id="2、相关API-cv-HoughCircles"><a href="#2、相关API-cv-HoughCircles" class="headerlink" title="2、相关API cv::HoughCircles"></a>2、相关API cv::HoughCircles</h5><ul><li>因为霍夫圆检测对噪声比较敏感，所以首先要对图像做中值滤波。</li><li>基于效率考虑，Opencv中实现的霍夫变换圆检测是基于图像梯度的实现，分为两步：<ol><li>检测边缘，发现可能的圆心</li><li>基于第一步的基础上从候选圆心开始计算最佳半径大小</li></ol></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">HoughCircles</span>(</span><br><span class="line">InputArray image, <span class="comment">// 输入图像 ,必须是8位的单通道灰度图像</span></span><br><span class="line">OutputArray circles, <span class="comment">// 输出结果，发现的圆信息</span></span><br><span class="line">Int method, <span class="comment">// 方法 - HOUGH_GRADIENT</span></span><br><span class="line">Double dp, <span class="comment">// dp = 1; </span></span><br><span class="line">Double mindist, <span class="comment">// 10 最短距离-可以分辨是两个圆的，否则认为是同心圆- src_gray.rows/8</span></span><br><span class="line">Double param1, <span class="comment">// canny edge detection low threshold</span></span><br><span class="line">Double param2, <span class="comment">// 中心点累加器阈值 – 候选圆心</span></span><br><span class="line">Int minradius, <span class="comment">// 最小半径</span></span><br><span class="line">Int maxradius<span class="comment">//最大半径 </span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Mat src, dst;</span><br><span class="line">src = <span class="built_in">imread</span>(<span class="string">&quot;C:\\Users\\Administrator\\Pictures\\霍夫圆检测4.jpg&quot;</span>);</span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;src img&quot;</span>, src);</span><br><span class="line"></span><br><span class="line"><span class="comment">//中值滤波转灰度</span></span><br><span class="line">Mat mediaImg;</span><br><span class="line"><span class="built_in">medianBlur</span>(src, mediaImg, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">cvtColor</span>(mediaImg, mediaImg, CV_BGR2GRAY);</span><br><span class="line"><span class="built_in">GaussianBlur</span>(mediaImg,mediaImg, <span class="built_in">Size</span>(<span class="number">5</span>, <span class="number">5</span>), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//霍夫圆检测</span></span><br><span class="line">vector&lt;Vec3f&gt; pcircle;</span><br><span class="line"><span class="built_in">HoughCircles</span>(mediaImg, pcircle, CV_HOUGH_GRADIENT, <span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">30</span>, <span class="number">5</span>, <span class="number">50</span>);</span><br><span class="line">src.<span class="built_in">copyTo</span>(dst);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; pcircle.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">Vec3f cc = pcircle[i];</span><br><span class="line"><span class="comment">//圆形标注</span></span><br><span class="line"><span class="built_in">circle</span>(dst, <span class="built_in">Point</span>(cc[<span class="number">0</span>], cc[<span class="number">1</span>]), cc[<span class="number">2</span>], <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>, LINE_AA);</span><br><span class="line"><span class="comment">//圆心标注</span></span><br><span class="line"><span class="built_in">circle</span>(dst, <span class="built_in">Point</span>(cc[<span class="number">0</span>], cc[<span class="number">1</span>]), <span class="number">2</span>, <span class="built_in">Scalar</span>(<span class="number">198</span>, <span class="number">50</span>, <span class="number">255</span>), <span class="number">2</span>, LINE_AA);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;hough img&quot;</span>, dst);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="三、像素重映射"><a href="#三、像素重映射" class="headerlink" title="三、像素重映射"></a>三、像素重映射</h4><h5 id="1、原理-1"><a href="#1、原理-1" class="headerlink" title="1、原理"></a>1、原理</h5><blockquote><p>简单点说就是把输入图像中各个像素按照一定的规则映射到另外一张图像的对应位置上去，形成一张新的图像。</p></blockquote><h5 id="2、API介绍cv-remap"><a href="#2、API介绍cv-remap" class="headerlink" title="2、API介绍cv::remap"></a>2、API介绍cv::remap</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Remap</span>(</span><br><span class="line">InputArray src,<span class="comment">// 输入图像</span></span><br><span class="line">OutputArray dst,<span class="comment">// 输出图像</span></span><br><span class="line">InputArray  map1,<span class="comment">// x 映射表 CV_32FC1/CV_32FC2</span></span><br><span class="line">InputArray map2,<span class="comment">// y 映射表</span></span><br><span class="line"><span class="keyword">int</span> interpolation,<span class="comment">// 选择的插值方法，常见线性插值，可选择立方等</span></span><br><span class="line"><span class="keyword">int</span> borderMode,<span class="comment">// BORDER_CONSTANT</span></span><br><span class="line"><span class="keyword">const</span> Scalar borderValue<span class="comment">// color </span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line">Mat src, dst, map_x, map_y;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* OUTPUT_TITLE = <span class="string">&quot;remap demo&quot;</span>;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_map</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">src = <span class="built_in">imread</span>(<span class="string">&quot;C:\\Users\\Administrator\\Pictures\\girl2.jpg&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!src.data) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;could not load image...\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> input_win[] = <span class="string">&quot;input image&quot;</span>;</span><br><span class="line"><span class="built_in">namedWindow</span>(input_win, CV_WINDOW_AUTOSIZE);</span><br><span class="line"><span class="built_in">namedWindow</span>(OUTPUT_TITLE, CV_WINDOW_AUTOSIZE);</span><br><span class="line"><span class="built_in">imshow</span>(input_win, src);</span><br><span class="line"></span><br><span class="line">map_x.<span class="built_in">create</span>(src.<span class="built_in">size</span>(), CV_32FC1);</span><br><span class="line">map_y.<span class="built_in">create</span>(src.<span class="built_in">size</span>(), CV_32FC1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">c = <span class="built_in">waitKey</span>(<span class="number">500</span>);</span><br><span class="line"><span class="comment">//按住esc退出</span></span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">char</span>)c == <span class="number">27</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//键盘输入1,2,3,4</span></span><br><span class="line">index = c % <span class="number">4</span>;</span><br><span class="line"><span class="built_in">update_map</span>();</span><br><span class="line"><span class="built_in">remap</span>(src, dst, map_x, map_y, INTER_LINEAR, BORDER_CONSTANT, <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>));</span><br><span class="line"><span class="built_in">imshow</span>(OUTPUT_TITLE, dst);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update_map</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; src.rows; row++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; src.cols; col++) &#123;</span><br><span class="line"><span class="built_in"><span class="keyword">switch</span></span> (index) &#123;</span><br><span class="line"><span class="comment">//缩小一半</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line"><span class="keyword">if</span> (col &gt;(src.cols * <span class="number">0.25</span>) &amp;&amp; col &lt;= (src.cols*<span class="number">0.75</span>) &amp;&amp; row &gt;(src.rows*<span class="number">0.25</span>) &amp;&amp; row &lt;= (src.rows*<span class="number">0.75</span>)) &#123;</span><br><span class="line">map_x.at&lt;<span class="keyword">float</span>&gt;(row, col) = <span class="number">2</span> * (col - (src.cols*<span class="number">0.25</span>));</span><br><span class="line">map_y.at&lt;<span class="keyword">float</span>&gt;(row, col) = <span class="number">2</span> * (row - (src.rows*<span class="number">0.25</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">map_x.at&lt;<span class="keyword">float</span>&gt;(row, col) = <span class="number">0</span>;</span><br><span class="line">map_y.at&lt;<span class="keyword">float</span>&gt;(row, col) = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//x方向对调</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">map_x.at&lt;<span class="keyword">float</span>&gt;(row, col) = (src.cols - col - <span class="number">1</span>);</span><br><span class="line">map_y.at&lt;<span class="keyword">float</span>&gt;(row, col) = row;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//y方向对调</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">map_x.at&lt;<span class="keyword">float</span>&gt;(row, col) = col;</span><br><span class="line">map_y.at&lt;<span class="keyword">float</span>&gt;(row, col) = (src.rows - row - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//x,y方向都对调</span></span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">map_x.at&lt;<span class="keyword">float</span>&gt;(row, col) = (src.cols - col - <span class="number">1</span>);</span><br><span class="line">map_y.at&lt;<span class="keyword">float</span>&gt;(row, col) = (src.rows - row - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="四、直方图-histogram"><a href="#四、直方图-histogram" class="headerlink" title="四、直方图 (histogram)"></a>四、直方图 (histogram)</h4><h5 id="1、直方图均衡化概念"><a href="#1、直方图均衡化概念" class="headerlink" title="1、直方图均衡化概念"></a>1、直方图均衡化概念</h5><blockquote><p>图像直方图，是指对整个图像像在灰度范围内的像素值(0~255)统计出现频率次数，据此生成的直方图，称为图像直方图-直方图。直方图反映了图像灰度的分布情况。是图像的统计学特征。</p></blockquote><h5 id="2、直方图均衡化"><a href="#2、直方图均衡化" class="headerlink" title="2、直方图均衡化"></a>2、直方图均衡化</h5><blockquote><p>是一种提高图像对比度的方法，拉伸图像灰度值范围。</p></blockquote><blockquote><p>如何实现，通过上一课中的remap我们知道可以将图像灰度分布从一个分布映射到另外一个分布，然后在得到映射后的像素值即可。</p></blockquote><h5 id="3、直方图均衡化API说明cv-equalizeHist"><a href="#3、直方图均衡化API说明cv-equalizeHist" class="headerlink" title="3、直方图均衡化API说明cv::equalizeHist"></a>3、直方图均衡化API说明cv::equalizeHist</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">equalizeHist</span>(</span><br><span class="line">InputArray src,<span class="comment">//输入图像，必须是8-bit的单通道图像</span></span><br><span class="line">OutputArray dst<span class="comment">// 输出结果</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="4、直方图计算"><a href="#4、直方图计算" class="headerlink" title="4、直方图计算"></a>4、直方图计算</h5><ul><li>上述直方图概念是基于图像像素值，其实对图像梯度、每个像素的角度、等一切图像的属性值，我们都可以建立直方图。这个才是直方图的概念真正意义，不过是基于图像像素灰度直方图是最常见的。</li><li>直方图最常见的几个属性：<ul><li>dims 表示维度，对灰度图像来说只有一个通道值dims=1</li><li>bins 表示在维度中子区域大小划分，bins=256，划分为256个级别</li><li>range 表示值得范围，灰度值范围为[0~255]之间</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">split</span>(<span class="comment">// 把多通道图像分为多个单通道图像</span></span><br><span class="line"><span class="keyword">const</span> Mat &amp;src, <span class="comment">//输入图像</span></span><br><span class="line">Mat* mvbegin）<span class="comment">// 输出的通道图像数组</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">calcHist</span>(</span><br><span class="line"> <span class="keyword">const</span> Mat* images,<span class="comment">//输入图像指针</span></span><br><span class="line"><span class="keyword">int</span> images,<span class="comment">// 图像数目</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>* channels,<span class="comment">// 通道数</span></span><br><span class="line">InputArray mask,<span class="comment">// 输入mask，可选，不用</span></span><br><span class="line">OutputArray hist,<span class="comment">//输出的直方图数据</span></span><br><span class="line"><span class="keyword">int</span> dims,<span class="comment">// 维数</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>* histsize,<span class="comment">// 直方图级数</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">float</span>* ranges,<span class="comment">// 值域范围</span></span><br><span class="line"><span class="keyword">bool</span> uniform,<span class="comment">// true by default</span></span><br><span class="line"><span class="keyword">bool</span> accumulate<span class="comment">// false by defaut</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="4、直方图比较方法-概述"><a href="#4、直方图比较方法-概述" class="headerlink" title="4、直方图比较方法-概述"></a>4、直方图比较方法-概述</h5><blockquote><p>对输入的两张图像计算得到直方图H1与H2，归一化到相同的尺度空间<br>然后可以通过计算H1与H2的之间的距离得到两个直方图的相似程度进<br>而比较图像本身的相似程度。</p></blockquote><blockquote><p>Opencv提供的比较方法有四种：</p></blockquote><ul><li>Correlation 相关性比较(CV_COMP_CORREL)</li><li>Chi-Square 卡方比较(CV_COMP_CHISQR)</li><li>Intersection 十字交叉性(CV_COMP_INTERSECT)</li><li>Bhattacharyya distance 巴氏距离(CV_COMP_BHATTACHARYYA )<h5 id="相关API"><a href="#相关API" class="headerlink" title="相关API"></a>相关API</h5></li><li>首先把图像从RGB色彩空间转换到HSV色彩空间cvtColor</li><li>计算图像的直方图，然后归一化到[0~1]之间calcHist和normalize;</li><li>使用上述四种比较方法之一进行比较compareHist<h6 id="相关API-cv-compareHist"><a href="#相关API-cv-compareHist" class="headerlink" title="相关API cv::compareHist"></a>相关API cv::compareHist</h6></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">compareHist(</span><br><span class="line">InputArray h1, // 直方图数据，下同</span><br><span class="line">InputArray H2,</span><br><span class="line">int method// 比较方法，上述四种方法之一</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h6 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Mat src, dst;</span><br><span class="line">src = <span class="built_in">imread</span>(<span class="string">&quot;C:\\Users\\15646\\Pictures\\刘亦菲.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//分通道显示</span></span><br><span class="line">vector&lt;Mat&gt; bgr_planes;</span><br><span class="line"><span class="built_in">split</span>(src, bgr_planes);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> histSize = <span class="number">256</span>;</span><br><span class="line"><span class="keyword">float</span> range[] = &#123; <span class="number">0</span>,<span class="number">256</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> *histRange = &#123; range &#125;;</span><br><span class="line">Mat b_hist, g_hist, r_hist;</span><br><span class="line"><span class="built_in">calcHist</span>(&amp;bgr_planes[<span class="number">0</span>], <span class="number">1</span>, <span class="number">0</span>, <span class="built_in">Mat</span>(), b_hist, <span class="number">1</span>, &amp;histSize, &amp;histRange, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="built_in">calcHist</span>(&amp;bgr_planes[<span class="number">1</span>], <span class="number">1</span>, <span class="number">0</span>, <span class="built_in">Mat</span>(), g_hist, <span class="number">1</span>, &amp;histSize, &amp;histRange, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="built_in">calcHist</span>(&amp;bgr_planes[<span class="number">2</span>], <span class="number">1</span>, <span class="number">0</span>, <span class="built_in">Mat</span>(), r_hist, <span class="number">1</span>, &amp;histSize, &amp;histRange, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//归一化</span></span><br><span class="line"><span class="keyword">int</span> hist_h = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">int</span> hist_w = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">int</span> bin_w = hist_w / histSize;</span><br><span class="line"><span class="function">Mat <span class="title">histImage</span><span class="params">(hist_w, hist_h, CV_8UC3, Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span></span>;</span><br><span class="line"><span class="built_in">normalize</span>(b_hist, b_hist, <span class="number">0</span>, hist_h, NORM_MINMAX, <span class="number">-1</span>, <span class="built_in">Mat</span>());</span><br><span class="line"><span class="built_in">normalize</span>(g_hist, g_hist, <span class="number">0</span>, hist_h, NORM_MINMAX, <span class="number">-1</span>, <span class="built_in">Mat</span>());</span><br><span class="line"><span class="built_in">normalize</span>(r_hist, r_hist, <span class="number">0</span>, hist_h, NORM_MINMAX, <span class="number">-1</span>, <span class="built_in">Mat</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制直方图</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; histSize; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">line</span>(histImage, <span class="built_in">Point</span>((i - <span class="number">1</span>)*bin_w, hist_h - <span class="built_in">cvRound</span>(b_hist.at&lt;<span class="keyword">float</span>&gt;(i - <span class="number">1</span>))),</span><br><span class="line"><span class="built_in">Point</span>((i)*bin_w, hist_h - <span class="built_in">cvRound</span>(b_hist.at&lt;<span class="keyword">float</span>&gt;(i))), <span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), LINE_AA);</span><br><span class="line"><span class="built_in">line</span>(histImage, <span class="built_in">Point</span>((i - <span class="number">1</span>)*bin_w, hist_h - <span class="built_in">cvRound</span>(g_hist.at&lt;<span class="keyword">float</span>&gt;(i - <span class="number">1</span>))),</span><br><span class="line"><span class="built_in">Point</span>((i)*bin_w, hist_h - <span class="built_in">cvRound</span>(g_hist.at&lt;<span class="keyword">float</span>&gt;(i))), <span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), LINE_AA);</span><br><span class="line"><span class="built_in">line</span>(histImage, <span class="built_in">Point</span>((i - <span class="number">1</span>)*bin_w, hist_h - <span class="built_in">cvRound</span>(r_hist.at&lt;<span class="keyword">float</span>&gt;(i - <span class="number">1</span>))),</span><br><span class="line"><span class="built_in">Point</span>((i)*bin_w, hist_h - <span class="built_in">cvRound</span>(r_hist.at&lt;<span class="keyword">float</span>&gt;(i))), <span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), LINE_AA);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;src img&quot;</span>, histImage);</span><br></pre></td></tr></table></figure><h5 id="5、直方图反向投影-Back-Projection"><a href="#5、直方图反向投影-Back-Projection" class="headerlink" title="5、直方图反向投影(Back Projection)"></a>5、直方图反向投影(Back Projection)</h5><ul><li>反向投影是反映直方图模型在目标图像中的分布情况</li><li>简单点说就是用直方图模型去目标图像中寻找是否有相似的对象。通常用HSV色彩空间的HS两个通道直方图模型</li></ul><h6 id="反向投影-–-步骤"><a href="#反向投影-–-步骤" class="headerlink" title="反向投影 – 步骤"></a>反向投影 – 步骤</h6><ul><li>1.建立直方图模型</li><li>2.计算待测图像直方图并映射到模型中</li><li>3.从模型反向计算生成图像</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">加载图片imread</span><br><span class="line">将图像从RGB色彩空间转换到HSV色彩空间cvtColor</span><br><span class="line">计算直方图和归一化calcHist与normalize</span><br><span class="line">Mat与MatND其中Mat表示二维数组，MatND表示三维或者多维数据，此处均可以用Mat表示。</span><br><span class="line">计算反向投影图像 - calcBackProject</span><br><span class="line"></span><br><span class="line">Mat src, hsv, hue;</span><br><span class="line"><span class="keyword">int</span> bins = <span class="number">12</span>;</span><br><span class="line">string src_img = <span class="string">&quot;src img&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Hist_Add_Backproject</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">void</span>*)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">src = <span class="built_in">imread</span>(<span class="string">&quot;C:\\Users\\15646\\Pictures\\lab\\test1.png&quot;</span>);</span><br><span class="line"><span class="built_in">namedWindow</span>(src_img, WINDOW_AUTOSIZE);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cvtColor</span>(src, hsv, CV_BGR2HSV);</span><br><span class="line">hue.<span class="built_in">create</span>(hsv.<span class="built_in">size</span>(), hsv.<span class="built_in">depth</span>());</span><br><span class="line"><span class="keyword">int</span> nchannels[] = &#123; <span class="number">0</span>,<span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">mixChannels</span>(&amp;hsv, <span class="number">1</span>, &amp;hue, <span class="number">1</span>, nchannels, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">createTrackbar</span>(<span class="string">&quot;Histogram Bins&quot;</span>, src_img, &amp;bins, <span class="number">180</span>, Hist_Add_Backproject);</span><br><span class="line"><span class="built_in">Hist_Add_Backproject</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">imshow</span>(src_img, src);</span><br><span class="line"><span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Hist_Add_Backproject</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">void</span>*)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">float</span> range[] = &#123; <span class="number">0</span>,<span class="number">180</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> *histRanges = &#123; range &#125;;</span><br><span class="line">Mat h_hist;</span><br><span class="line"><span class="built_in">calcHist</span>(&amp;hue, <span class="number">1</span>, <span class="number">0</span>, <span class="built_in">Mat</span>(), h_hist, <span class="number">1</span>, &amp;bins, &amp;histRanges, <span class="literal">true</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="built_in">normalize</span>(h_hist, h_hist, <span class="number">0</span>, <span class="number">255</span>, NORM_MINMAX, <span class="number">-1</span>, <span class="built_in">Mat</span>());</span><br><span class="line"></span><br><span class="line">Mat backPrjImage;</span><br><span class="line"><span class="built_in">calcBackProject</span>(&amp;hue, <span class="number">1</span>, <span class="number">0</span>, h_hist, backPrjImage, &amp;histRanges, <span class="number">1</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;BackProj&quot;</span>, backPrjImage);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> hist_h = <span class="number">400</span>;</span><br><span class="line"><span class="keyword">int</span> hist_w = <span class="number">400</span>;</span><br><span class="line"><span class="function">Mat <span class="title">histImage</span><span class="params">(hist_w, hist_h, CV_8UC3, Scalar(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span></span>;</span><br><span class="line"><span class="keyword">int</span> bin_w = <span class="built_in">cvRound</span>((<span class="keyword">double</span>)hist_w / bins);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; bins; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">rectangle</span>(histImage,</span><br><span class="line"><span class="built_in">Point</span>((i - <span class="number">1</span>)*bin_w, (hist_h - <span class="built_in">cvRound</span>(h_hist.at&lt;<span class="keyword">float</span>&gt;(i - <span class="number">1</span>)*(<span class="number">400</span> / <span class="number">255</span>)))),</span><br><span class="line"><span class="built_in">Point</span>(i*bin_w, hist_h),</span><br><span class="line"><span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;Histogram&quot;</span>, histImage);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="五、模板匹配-Template-Match"><a href="#五、模板匹配-Template-Match" class="headerlink" title="五、模板匹配(Template Match)"></a>五、模板匹配(Template Match)</h4><h5 id="1、模板匹配介绍"><a href="#1、模板匹配介绍" class="headerlink" title="1、模板匹配介绍"></a>1、模板匹配介绍</h5><ul><li>模板匹配就是在整个图像区域发现与给定子图像匹配的小块区域。</li><li>所以模板匹配首先需要一个模板图像T（给定的子图像）</li><li>另外需要一个待检测的图像-源图像S</li><li>工作方法，在带检测图像上，从左到右，从上向下计算模板图像与重叠子图像的匹配度，匹配程度越大，两者相同的可能性越大。</li></ul><h5 id="2、模板匹配介绍-–-匹配算法介绍"><a href="#2、模板匹配介绍-–-匹配算法介绍" class="headerlink" title="2、模板匹配介绍 – 匹配算法介绍"></a>2、模板匹配介绍 – 匹配算法介绍</h5><p><img src="http://myfile.buildworld.cn/%E6%A8%A1%E6%9D%BF%E5%8C%B9%E9%85%8D%E7%AE%97%E6%B3%95.jpg" alt="image"></p><h5 id="3、相关API介绍cv-matchTemplate"><a href="#3、相关API介绍cv-matchTemplate" class="headerlink" title="3、相关API介绍cv::matchTemplate"></a>3、相关API介绍cv::matchTemplate</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">matchTemplate</span>(</span><br><span class="line">    InputArray image,<span class="comment">// 源图像，必须是8-bit或者32-bit浮点数图像</span></span><br><span class="line">    </span><br><span class="line">    InputArray templ,<span class="comment">// 模板图像，类型与输入图像一致</span></span><br><span class="line">    </span><br><span class="line">    OutputArray result,<span class="comment">// 输出结果，必须是单通道32位浮点数，假设源图像WxH,模板图像wxh,</span></span><br><span class="line">                 则结果必须为W-w+<span class="number">1</span>, H-h+<span class="number">1</span>的大小。</span><br><span class="line">    <span class="keyword">int</span> method,<span class="comment">//使用的匹配方法</span></span><br><span class="line">    </span><br><span class="line">    InputArray mask=<span class="built_in">noArray</span>()<span class="comment">//(optional)</span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="示例代码-3"><a href="#示例代码-3" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2\opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line">Mat src, dst, temp;</span><br><span class="line"><span class="keyword">int</span> match_method = CV_TM_SQDIFF;</span><br><span class="line"><span class="keyword">int</span> max_track = <span class="number">5</span>;</span><br><span class="line">string inputImg = <span class="string">&quot;input img&quot;</span>;</span><br><span class="line">string outputImg = <span class="string">&quot;output img&quot;</span>;</span><br><span class="line">string matchimg = <span class="string">&quot;template match-demo&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Match_Demo</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">void</span>*)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">src = <span class="built_in">imread</span>(<span class="string">&quot;C:\\Users\\15646\\Pictures\\雷军.jpg&quot;</span>);</span><br><span class="line">temp = <span class="built_in">imread</span>(<span class="string">&quot;C:\\Users\\15646\\Pictures\\雷军头像.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">namedWindow</span>(inputImg, CV_WINDOW_AUTOSIZE);</span><br><span class="line"><span class="built_in">namedWindow</span>(outputImg, CV_WINDOW_AUTOSIZE);</span><br><span class="line"><span class="built_in">namedWindow</span>(matchimg, CV_WINDOW_AUTOSIZE);</span><br><span class="line"></span><br><span class="line"><span class="built_in">imshow</span>(inputImg, src);</span><br><span class="line"><span class="built_in">createTrackbar</span>(<span class="string">&quot;Macth Control&quot;</span>, inputImg, &amp;match_method, max_track, Match_Demo);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Match_Demo</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Match_Demo</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">void</span>*)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> width = src.cols - temp.cols + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> height = src.rows - temp.rows + <span class="number">1</span>;</span><br><span class="line"><span class="function">Mat <span class="title">result</span><span class="params">(width, height, CV_32FC1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">matchTemplate</span>(src,temp,result,match_method,<span class="built_in">Mat</span>());</span><br><span class="line"><span class="built_in">normalize</span>(result, result, <span class="number">0</span>, <span class="number">1</span>, NORM_MINMAX, <span class="number">-1</span>, <span class="built_in">Mat</span>());</span><br><span class="line"></span><br><span class="line">Point minLoc;</span><br><span class="line">Point maxLoc;</span><br><span class="line"><span class="keyword">double</span> min, max;</span><br><span class="line">src.<span class="built_in">copyTo</span>(dst);</span><br><span class="line">Point tenLoc;</span><br><span class="line"><span class="built_in">minMaxLoc</span>(result, &amp;min, &amp;max, &amp;minLoc, &amp;maxLoc, <span class="built_in">Mat</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (match_method==CV_TM_SQDIFF || match_method == CV_TM_SQDIFF_NORMED)</span><br><span class="line">&#123;</span><br><span class="line">tenLoc = minLoc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">tenLoc = maxLoc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制矩形</span></span><br><span class="line"><span class="built_in">rectangle</span>(dst, <span class="built_in">Rect</span>(tenLoc.x, tenLoc.y, temp.cols, temp.rows), <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">.255</span>), <span class="number">2</span>, <span class="number">8</span>);</span><br><span class="line"><span class="built_in">rectangle</span>(result, <span class="built_in">Rect</span>(tenLoc.x, tenLoc.y, temp.cols, temp.rows), <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">.255</span>), <span class="number">2</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">imshow</span>(outputImg, result);</span><br><span class="line"><span class="built_in">imshow</span>(matchimg, dst);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="六、轮廓发现-find-contour-in-your-image"><a href="#六、轮廓发现-find-contour-in-your-image" class="headerlink" title="六、轮廓发现(find contour in your image)"></a>六、轮廓发现(find contour in your image)</h4><ul><li>轮廓发现是基于图像边缘提取的基础寻找对象轮廓的方法。</li><li>所以边缘提取的阈值选定会影响最终轮廓发现结果</li><li>API介绍<ul><li>findContours发现轮廓</li><li>drawContours绘制轮廓</li></ul></li></ul><h5 id="轮廓发现-find-contour"><a href="#轮廓发现-find-contour" class="headerlink" title="轮廓发现(find contour)"></a>轮廓发现(find contour)</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">在二值图像上发现轮廓使用API cv::findContours(</span><br><span class="line">InputOutputArray  binImg, // 输入图像，非0的像素被看成1,0的像素值保持不变，8-bit</span><br><span class="line">     OutputArrayOfArrays  contours,//  全部发现的轮廓对象</span><br><span class="line">    OutputArray,  hierachy// 图该的拓扑结构，可选，该轮廓发现算法正是基于图像拓扑结构实现。</span><br><span class="line">    int mode, //  轮廓返回的模式</span><br><span class="line">    int method,// 发现方法</span><br><span class="line">    Point offset=Point()//  轮廓像素的位移，默认（0, 0）没有位移</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="轮廓绘制-draw-contour"><a href="#轮廓绘制-draw-contour" class="headerlink" title="轮廓绘制(draw contour)"></a>轮廓绘制(draw contour)</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">在二值图像上发现轮廓使用API cv::findContours之后对发现的轮廓数据进行绘制显示</span><br><span class="line"><span class="built_in">drawContours</span>(</span><br><span class="line">    InputOutputArray  binImg, <span class="comment">// 输出图像</span></span><br><span class="line">     OutputArrayOfArrays  contours,<span class="comment">//  全部发现的轮廓对象</span></span><br><span class="line">    Int contourIdx<span class="comment">// 轮廓索引号</span></span><br><span class="line">    <span class="keyword">const</span> Scalar &amp; color,<span class="comment">// 绘制时候颜色</span></span><br><span class="line">    <span class="keyword">int</span>  thickness,<span class="comment">// 绘制线宽</span></span><br><span class="line">    <span class="keyword">int</span>  lineType ,<span class="comment">// 线的类型LINE_8</span></span><br><span class="line">    InputArray hierarchy,<span class="comment">// 拓扑结构图</span></span><br><span class="line">    <span class="keyword">int</span> maxlevel,<span class="comment">// 最大层数， 0只绘制当前的，1表示绘制绘制当前及其内嵌的轮廓</span></span><br><span class="line">    Point offset=<span class="built_in">Point</span>()<span class="comment">// 轮廓位移，可选</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h5><ul><li>输入图像转为灰度图像cvtColor</li><li>使用Canny进行边缘提取，得到二值图像</li><li>使用findContours寻找轮廓</li><li>使用drawContours绘制轮廓</li></ul><h5 id="示例代码-4"><a href="#示例代码-4" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line">Mat src, dst;</span><br><span class="line"><span class="keyword">int</span> threshold_value = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> threshold_max = <span class="number">255</span>;</span><br><span class="line">RNG rng;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Demo_Countours</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">void</span>*)</span></span>;</span><br><span class="line">string input_title = <span class="string">&quot;input img&quot;</span>;</span><br><span class="line">string output_title = <span class="string">&quot;output img&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv)</span> </span>&#123;</span><br><span class="line">src = <span class="built_in">imread</span>(<span class="string">&quot;C:\\Users\\15646\\Pictures\\lab\\山羊.jfif&quot;</span>);</span><br><span class="line"><span class="built_in">namedWindow</span>(input_title, CV_WINDOW_AUTOSIZE);</span><br><span class="line"><span class="built_in">namedWindow</span>(output_title, CV_WINDOW_AUTOSIZE);</span><br><span class="line"><span class="built_in">imshow</span>(input_title, src);</span><br><span class="line"><span class="comment">//图像灰度化</span></span><br><span class="line"><span class="built_in">cvtColor</span>(src, src, CV_BGR2GRAY);</span><br><span class="line"></span><br><span class="line"><span class="built_in">createTrackbar</span>(<span class="string">&quot;control img&quot;</span>, output_title, &amp;threshold_value, threshold_max, Demo_Countours);</span><br><span class="line"><span class="built_in">Demo_Countours</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Demo_Countours</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">void</span>*)</span> </span>&#123;</span><br><span class="line">Mat canny_output;</span><br><span class="line">vector&lt;vector&lt;Point&gt;&gt; contours;</span><br><span class="line">vector&lt;Vec4i&gt;hierachy;</span><br><span class="line"><span class="comment">//图像边缘检测二值化</span></span><br><span class="line"><span class="built_in">Canny</span>(src, canny_output, threshold_value, threshold_value * <span class="number">2</span>, <span class="number">3</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">//轮廓发现</span></span><br><span class="line"><span class="built_in">findContours</span>(canny_output, contours, hierachy, RETR_TREE, CHAIN_APPROX_SIMPLE, <span class="built_in">Point</span>(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">dst = Mat::<span class="built_in">zeros</span>(src.<span class="built_in">size</span>(), CV_8UC3);</span><br><span class="line"><span class="built_in">rng</span>(<span class="number">12345</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; contours.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">Scalar color = <span class="built_in">Scalar</span>(rng.<span class="built_in">uniform</span>(<span class="number">0</span>, <span class="number">255</span>), rng.<span class="built_in">uniform</span>(<span class="number">0</span>, <span class="number">255</span>), rng.<span class="built_in">uniform</span>(<span class="number">0</span>, <span class="number">255</span>));</span><br><span class="line"><span class="comment">//轮廓绘制</span></span><br><span class="line"><span class="built_in">drawContours</span>(dst, contours, i, color, <span class="number">2</span>, <span class="number">8</span>, hierachy, <span class="number">0</span>, <span class="built_in">Point</span>(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">imshow</span>(output_title, dst);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="七、凸包-Convex-Hull"><a href="#七、凸包-Convex-Hull" class="headerlink" title="七、凸包-Convex Hull"></a>七、凸包-Convex Hull</h4><h5 id="1、定义"><a href="#1、定义" class="headerlink" title="1、定义"></a>1、定义</h5><blockquote><p>什么是凸包(Convex Hull)，在一个多变形边缘或者内部任                     意两个点的连线都包含在多边形边界或者内部。</p></blockquote><h6 id="正式定义："><a href="#正式定义：" class="headerlink" title="正式定义："></a>正式定义：</h6><blockquote><p>包含点集合S中所有点的最小凸多边形称为凸包</p></blockquote><h5 id="2、概念介绍-Graham扫描算法"><a href="#2、概念介绍-Graham扫描算法" class="headerlink" title="2、概念介绍-Graham扫描算法"></a>2、概念介绍-Graham扫描算法</h5><ul><li>首先选择Y方向最低的点作为起始点p0</li><li>从p0开始极坐标扫描，依次添加p1….pn（排序顺序是根据极坐标的角度大小，逆时针方向）</li><li>对每个点pi来说，如果添加pi点到凸包中导致一个左转向（逆时针方法）则添加该点到凸包， 反之如果导致一个右转向（顺时针方向）删除该点从凸包中</li></ul><h5 id="3、API说明cv-convexHull"><a href="#3、API说明cv-convexHull" class="headerlink" title="3、API说明cv::convexHull"></a>3、API说明cv::convexHull</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">convexHull(</span><br><span class="line">    InputArray points,// 输入候选点，来自findContours</span><br><span class="line">    OutputArray hull,// 凸包</span><br><span class="line">    bool clockwise,// default true, 顺时针方向</span><br><span class="line">    bool returnPoints）// true 表示返回点个数，如果第二个参数是vector&lt;Point&gt;则自动忽略</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="4、流程"><a href="#4、流程" class="headerlink" title="4、流程"></a>4、流程</h5><ul><li>首先把图像从RGB转为灰度</li><li>然后再转为二值图像</li><li>在通过发现轮廓得到候选点</li><li>凸包API调用</li><li>绘制显示。<h5 id="示例代码-5"><a href="#示例代码-5" class="headerlink" title="示例代码"></a>示例代码</h5></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2\opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line">Mat src,gray_src, dst;</span><br><span class="line"><span class="keyword">int</span> threshold_value = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> threshold_max = <span class="number">255</span>;</span><br><span class="line">RNG rng;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Demo_Countours</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">void</span>*)</span></span>;</span><br><span class="line">string input_title = <span class="string">&quot;input img&quot;</span>;</span><br><span class="line">string output_title = <span class="string">&quot;output img&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv)</span> </span>&#123;</span><br><span class="line">src = <span class="built_in">imread</span>(<span class="string">&quot;C:\\Users\\15646\\Pictures\\lab\\test2.png&quot;</span>);</span><br><span class="line"><span class="built_in">namedWindow</span>(input_title, CV_WINDOW_AUTOSIZE);</span><br><span class="line"><span class="built_in">namedWindow</span>(output_title, CV_WINDOW_AUTOSIZE);</span><br><span class="line"><span class="built_in">imshow</span>(input_title, src);</span><br><span class="line"><span class="comment">//图像灰度化</span></span><br><span class="line"><span class="built_in">cvtColor</span>(src, gray_src, CV_BGR2GRAY);</span><br><span class="line"><span class="comment">//模糊</span></span><br><span class="line"><span class="built_in">blur</span>(gray_src, gray_src, <span class="built_in">Size</span>(<span class="number">3</span>, <span class="number">3</span>), <span class="built_in">Point</span>(<span class="number">-1</span>, <span class="number">-1</span>), BORDER_DEFAULT);</span><br><span class="line"></span><br><span class="line"><span class="built_in">createTrackbar</span>(<span class="string">&quot;control img&quot;</span>, output_title, &amp;threshold_value, threshold_max, Demo_Countours);</span><br><span class="line"><span class="built_in">Demo_Countours</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Demo_Countours</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">void</span>*)</span> </span>&#123;</span><br><span class="line">Mat bin_output;</span><br><span class="line">vector&lt;vector&lt;Point&gt;&gt; contours;</span><br><span class="line">vector&lt;Vec4i&gt;hierachy;</span><br><span class="line"><span class="comment">//设置阈值，阈值二值化</span></span><br><span class="line"><span class="built_in">threshold</span>(gray_src, bin_output, threshold_value, threshold_max, THRESH_BINARY);</span><br><span class="line"><span class="comment">//发现轮廓</span></span><br><span class="line"><span class="built_in">findContours</span>(bin_output, contours, hierachy, RETR_EXTERNAL, CHAIN_APPROX_SIMPLE, <span class="built_in">Point</span>(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;Point&gt;&gt; <span class="built_in">convexs</span>(contours.<span class="built_in">size</span>());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; contours.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">convexHull</span>(contours[i], convexs[i], <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制</span></span><br><span class="line">dst = Mat::<span class="built_in">zeros</span>(src.<span class="built_in">size</span>(), CV_8UC3);</span><br><span class="line">vector&lt;Vec4i&gt;<span class="built_in">empty</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; contours.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">Scalar color = <span class="built_in">Scalar</span>(rng.<span class="built_in">uniform</span>(<span class="number">0</span>, <span class="number">255</span>), rng.<span class="built_in">uniform</span>(<span class="number">0</span>, <span class="number">255</span>), rng.<span class="built_in">uniform</span>(<span class="number">0</span>, <span class="number">255</span>));</span><br><span class="line"><span class="built_in">drawContours</span>(dst, contours, i, color,<span class="number">2</span>, LINE_8, hierachy, <span class="number">0</span>, <span class="built_in">Point</span>(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"><span class="built_in">drawContours</span>(dst, convexs, i, color, <span class="number">2</span>, LINE_8, empty, <span class="number">0</span>, <span class="built_in">Point</span>(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">imshow</span>(output_title, dst);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="八、轮廓周围绘制矩形框和圆形框"><a href="#八、轮廓周围绘制矩形框和圆形框" class="headerlink" title="八、轮廓周围绘制矩形框和圆形框"></a>八、轮廓周围绘制矩形框和圆形框</h4><h5 id="1、轮廓周围绘制矩形-API"><a href="#1、轮廓周围绘制矩形-API" class="headerlink" title="1、轮廓周围绘制矩形 -API"></a>1、轮廓周围绘制矩形 -API</h5><ul><li>approxPolyDP(InputArray  curve, OutputArray approxCurve,  double  epsilon,  bool  closed)</li><li>cv::boundingRect(InputArray points)得到轮廓周围最小矩形左上交点坐标和右下角点坐标，绘制一个矩形</li><li>cv::minAreaRect(InputArray  points)得到一个旋转的矩形，返回旋转矩形</li></ul><h5 id="2、轮廓周围绘制圆和椭圆-API"><a href="#2、轮廓周围绘制圆和椭圆-API" class="headerlink" title="2、轮廓周围绘制圆和椭圆-API"></a>2、轮廓周围绘制圆和椭圆-API</h5><ul><li>cv::minEnclosingCircle(InputArray points, //得到最小区域圆形<ul><li>Point2f&amp; center, // 圆心位置</li><li>float&amp; radius)// 圆的半径</li></ul></li><li>cv::fitEllipse(InputArray  points)得到最小椭圆</li></ul><h5 id="3、流程"><a href="#3、流程" class="headerlink" title="3、流程"></a>3、流程</h5><ul><li>首先将图像变为二值图像</li><li>发现轮廓，找到图像轮廓</li><li>通过相关API在轮廓点上找到最小包含矩形和圆，旋转矩形与椭圆。</li><li>绘制它们。<h5 id="示例代码-6"><a href="#示例代码-6" class="headerlink" title="示例代码"></a>示例代码</h5></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line">Mat src, gray_src, drawImg;</span><br><span class="line"><span class="keyword">int</span> threshold_v = <span class="number">170</span>;</span><br><span class="line"><span class="keyword">int</span> threshold_max = <span class="number">255</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* output_win = <span class="string">&quot;rectangle-demo&quot;</span>;</span><br><span class="line"><span class="function">RNG <span class="title">rng</span><span class="params">(<span class="number">12345</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Contours_Callback</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">void</span>*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span> </span>&#123;</span><br><span class="line">src = <span class="built_in">imread</span>(<span class="string">&quot;C:\\Users\\15646\\Pictures\\lab\\热气球.jfif&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!src.data) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;could not load image...\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cvtColor</span>(src, gray_src, CV_BGR2GRAY);</span><br><span class="line"><span class="built_in">blur</span>(gray_src, gray_src, <span class="built_in">Size</span>(<span class="number">3</span>, <span class="number">3</span>), <span class="built_in">Point</span>(<span class="number">-1</span>, <span class="number">-1</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* source_win = <span class="string">&quot;input image&quot;</span>;</span><br><span class="line"><span class="built_in">namedWindow</span>(source_win, CV_WINDOW_AUTOSIZE);</span><br><span class="line"><span class="built_in">namedWindow</span>(output_win, CV_WINDOW_AUTOSIZE);</span><br><span class="line"><span class="built_in">imshow</span>(source_win, src);</span><br><span class="line"></span><br><span class="line"><span class="built_in">createTrackbar</span>(<span class="string">&quot;Threshold Value:&quot;</span>, output_win, &amp;threshold_v, threshold_max, Contours_Callback);</span><br><span class="line"><span class="built_in">Contours_Callback</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Contours_Callback</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">void</span>*)</span> </span>&#123;</span><br><span class="line">Mat binary_output;</span><br><span class="line">vector&lt;vector&lt;Point&gt;&gt; contours;</span><br><span class="line">vector&lt;Vec4i&gt; hierachy;</span><br><span class="line"><span class="built_in">threshold</span>(gray_src, binary_output, threshold_v, threshold_max, THRESH_BINARY);</span><br><span class="line"><span class="comment">//imshow(&quot;binary image&quot;, binary_output);</span></span><br><span class="line"><span class="built_in">findContours</span>(binary_output, contours, hierachy, RETR_TREE, CHAIN_APPROX_SIMPLE, <span class="built_in">Point</span>(<span class="number">-1</span>, <span class="number">-1</span>));</span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;Point&gt;&gt; <span class="built_in">contours_ploy</span>(contours.<span class="built_in">size</span>());</span><br><span class="line"><span class="function">vector&lt;Rect&gt; <span class="title">ploy_rects</span><span class="params">(contours.size())</span></span>;</span><br><span class="line"><span class="function">vector&lt;Point2f&gt; <span class="title">ccs</span><span class="params">(contours.size())</span></span>;</span><br><span class="line"><span class="function">vector&lt;<span class="keyword">float</span>&gt; <span class="title">radius</span><span class="params">(contours.size())</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;RotatedRect&gt; <span class="title">minRects</span><span class="params">(contours.size())</span></span>;</span><br><span class="line"><span class="function">vector&lt;RotatedRect&gt; <span class="title">myellipse</span><span class="params">(contours.size())</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; contours.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line"><span class="built_in">approxPolyDP</span>(<span class="built_in">Mat</span>(contours[i]), contours_ploy[i], <span class="number">3</span>, <span class="literal">true</span>);</span><br><span class="line">ploy_rects[i] = <span class="built_in">boundingRect</span>(contours_ploy[i]);</span><br><span class="line"><span class="built_in">minEnclosingCircle</span>(contours_ploy[i], ccs[i], radius[i]);</span><br><span class="line"><span class="keyword">if</span> (contours_ploy[i].<span class="built_in">size</span>() &gt; <span class="number">5</span>) &#123;</span><br><span class="line">myellipse[i] = <span class="built_in">fitEllipse</span>(contours_ploy[i]);</span><br><span class="line">minRects[i] = <span class="built_in">minAreaRect</span>(contours_ploy[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// draw it</span></span><br><span class="line">drawImg = Mat::<span class="built_in">zeros</span>(src.<span class="built_in">size</span>(), src.<span class="built_in">type</span>());</span><br><span class="line">Point2f pts[<span class="number">4</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> t = <span class="number">0</span>; t &lt; contours.<span class="built_in">size</span>(); t++) &#123;</span><br><span class="line">Scalar color = <span class="built_in">Scalar</span>(rng.<span class="built_in">uniform</span>(<span class="number">0</span>, <span class="number">255</span>), rng.<span class="built_in">uniform</span>(<span class="number">0</span>, <span class="number">255</span>), rng.<span class="built_in">uniform</span>(<span class="number">0</span>, <span class="number">255</span>));</span><br><span class="line"><span class="comment">//rectangle(drawImg, ploy_rects[t], color, 2, 8);</span></span><br><span class="line"><span class="comment">//circle(drawImg, ccs[t], radius[t], color, 2, 8);</span></span><br><span class="line"><span class="keyword">if</span> (contours_ploy[t].<span class="built_in">size</span>() &gt; <span class="number">5</span>) &#123;</span><br><span class="line"><span class="built_in">ellipse</span>(drawImg, myellipse[t], color, <span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line">minRects[t].<span class="built_in">points</span>(pts);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> r = <span class="number">0</span>; r &lt; <span class="number">4</span>; r++) &#123;</span><br><span class="line"><span class="built_in">line</span>(drawImg, pts[r], pts[(r + <span class="number">1</span>) % <span class="number">4</span>], color, <span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">imshow</span>(output_win, drawImg);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="九、图像矩-Image-Moments"><a href="#九、图像矩-Image-Moments" class="headerlink" title="九、图像矩(Image Moments)"></a>九、图像矩(Image Moments)</h4><h5 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h5><p><img src="http://myfile.buildworld.cn/%E5%87%A0%E4%BD%95%E7%9F%A9.jpg" alt="image"></p><h5 id="2、图像中心Center-x0-y0"><a href="#2、图像中心Center-x0-y0" class="headerlink" title="2、图像中心Center(x0, y0)"></a>2、图像中心Center(x0, y0)</h5><html><a href="https://www.codecogs.com/eqnedit.php?latex=\dpi{200}&space;\large&space;x_{0}=\frac{m_{10}}{m_{00}}" target="_blank"><img src="https://latex.codecogs.com/gif.latex?\dpi{200}&space;\large&space;x_{0}=\frac{m_{10}}{m_{00}}" title="\large x_{0}=\frac{m_{10}}{m_{00}}" /></a></html><html><a href="https://www.codecogs.com/eqnedit.php?latex=\dpi{200}&space;\large&space;y_{0}=\frac{m_{01}}{m_{00}}" target="_blank"><img src="https://latex.codecogs.com/gif.latex?\dpi{200}&space;\large&space;y_{0}=\frac{m_{01}}{m_{00}}" title="\large y_{0}=\frac{m_{01}}{m_{00}}" /></a></html><h5 id="3、API介绍与使用-计算矩cv-moments"><a href="#3、API介绍与使用-计算矩cv-moments" class="headerlink" title="3、API介绍与使用-计算矩cv::moments"></a>3、API介绍与使用-计算矩cv::moments</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">moments(</span><br><span class="line">InputArray  array,//输入数据</span><br><span class="line">bool   binaryImage=false // 是否为二值图像</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">contourArea(</span><br><span class="line">InputArray  contour,//输入轮廓数据</span><br><span class="line">bool   oriented// 默认false、返回绝对值)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">arcLength(</span><br><span class="line">InputArray  curve,//输入曲线数据</span><br><span class="line">bool   closed// 是否是封闭曲线)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="4、过程"><a href="#4、过程" class="headerlink" title="4、过程"></a>4、过程</h5><ul><li>提取图像边缘</li><li>发现轮廓</li><li>计算每个轮廓对象的矩</li><li>计算每个对象的中心、弧长、面积</li></ul><h5 id="示例代码-7"><a href="#示例代码-7" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2\opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line">Mat src, dst,gray_src;</span><br><span class="line"><span class="keyword">int</span> threshold_value = <span class="number">80</span>;</span><br><span class="line"><span class="keyword">int</span> threshold_max = <span class="number">255</span>;</span><br><span class="line">RNG rng;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Demo_Countours</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">void</span>*)</span></span>;</span><br><span class="line">string input_title = <span class="string">&quot;input img&quot;</span>;</span><br><span class="line">string output_title = <span class="string">&quot;output img&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv)</span> </span>&#123;</span><br><span class="line">src = <span class="built_in">imread</span>(<span class="string">&quot;C:\\Users\\Administrator\\Pictures\\lab\\星球.jpg&quot;</span>);</span><br><span class="line"><span class="built_in">namedWindow</span>(input_title, CV_WINDOW_AUTOSIZE);</span><br><span class="line"><span class="built_in">namedWindow</span>(output_title, CV_WINDOW_AUTOSIZE);</span><br><span class="line"><span class="built_in">imshow</span>(input_title, src);</span><br><span class="line"><span class="comment">//图像灰度化</span></span><br><span class="line"><span class="built_in">cvtColor</span>(src, gray_src, CV_BGR2GRAY);</span><br><span class="line"><span class="comment">//高斯模糊</span></span><br><span class="line"><span class="built_in">GaussianBlur</span>(gray_src, gray_src, <span class="built_in">Size</span>(<span class="number">3</span>, <span class="number">3</span>), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">createTrackbar</span>(<span class="string">&quot;control img&quot;</span>, output_title, &amp;threshold_value, threshold_max, Demo_Countours);</span><br><span class="line"><span class="built_in">Demo_Countours</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Demo_Countours</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">void</span>*)</span> </span>&#123;</span><br><span class="line">Mat canny_out;</span><br><span class="line">vector&lt;vector&lt;Point&gt;&gt; contours;</span><br><span class="line">vector&lt;Vec4i&gt;hierachy; </span><br><span class="line"></span><br><span class="line"><span class="comment">//边缘检测</span></span><br><span class="line"><span class="built_in">Canny</span>(gray_src, canny_out, threshold_value, threshold_value * <span class="number">2</span>,<span class="number">3</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">//轮廓发现</span></span><br><span class="line"><span class="built_in">findContours</span>(canny_out, contours, hierachy, RETR_TREE, CHAIN_APPROX_SIMPLE, <span class="built_in">Point</span>(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;Moments&gt; <span class="title">contours_moments</span><span class="params">(contours.size())</span></span>;</span><br><span class="line"><span class="function">vector&lt;Point2f&gt; <span class="title">ccs</span><span class="params">(contours.size())</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; contours.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//计算矩</span></span><br><span class="line">contours_moments[i] = <span class="built_in">moments</span>(contours[i]);</span><br><span class="line"><span class="comment">//计算图像中心，获取中心坐标</span></span><br><span class="line">ccs[i] = <span class="built_in">Point</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(contours_moments[i].m10 / contours_moments[i].m00), <span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(contours_moments[i].m01 / contours_moments[i].m00));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Mat drawImg;</span><br><span class="line">src.<span class="built_in">copyTo</span>(drawImg);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; contours.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (contours[i].<span class="built_in">size</span>()&lt;<span class="number">30</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印面积和长度</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;contours %d  area :%.2f and length :%.2f \n&quot;</span>, i, <span class="built_in">contourArea</span>(contours[i]), <span class="built_in">arcLength</span>(contours[i], <span class="literal">true</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//随机颜色</span></span><br><span class="line">Scalar color = <span class="built_in">Scalar</span>(rng.<span class="built_in">uniform</span>(<span class="number">0</span>, <span class="number">255</span>), rng.<span class="built_in">uniform</span>(<span class="number">0</span>, <span class="number">255</span>), rng.<span class="built_in">uniform</span>(<span class="number">0</span>, <span class="number">255</span>));</span><br><span class="line"><span class="comment">//轮廓绘制</span></span><br><span class="line"><span class="built_in">drawContours</span>(drawImg, contours, i, color, <span class="number">2</span>, <span class="number">8</span>, hierachy, <span class="number">0</span>, <span class="built_in">Point</span>(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"><span class="comment">//画圆</span></span><br><span class="line"><span class="built_in">circle</span>(drawImg, ccs[i], <span class="number">2</span>, color, <span class="number">2</span>, <span class="number">8</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">imshow</span>(output_title, drawImg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="十、点多边形测试"><a href="#十、点多边形测试" class="headerlink" title="十、点多边形测试"></a>十、点多边形测试</h4><h5 id="1、概念-1"><a href="#1、概念-1" class="headerlink" title="1、概念"></a>1、概念</h5><blockquote><p>测试一个点是否在给定的多边形内部，边缘或者外部</p></blockquote><h5 id="2、API介绍-cv-pointPolygonTest"><a href="#2、API介绍-cv-pointPolygonTest" class="headerlink" title="2、API介绍 cv::pointPolygonTest"></a>2、API介绍 cv::pointPolygonTest</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">pointPolygonTest</span>(</span><br><span class="line">InputArray  contour,<span class="comment">// 输入的轮廓</span></span><br><span class="line">Point2f  pt, <span class="comment">// 测试点</span></span><br><span class="line"><span class="keyword">bool</span>  measureDist <span class="comment">// 是否返回距离值，如果是false，1表示在内面，0表示在边界上，-1表示在外部，true返回实际距离</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">返回数据是<span class="keyword">double</span>类型</span><br></pre></td></tr></table></figure><h5 id="3、步骤"><a href="#3、步骤" class="headerlink" title="3、步骤"></a>3、步骤</h5><ul><li>构建一张400x400大小的图片， Mat::Zero(400, 400, CV_8UC1)</li><li>画上一个六边形的闭合区域line</li><li>发现轮廓</li><li>对图像中所有像素点做点 多边形测试，得到距离，归一化后显示。</li></ul><h5 id="示例代码-8"><a href="#示例代码-8" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2\opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line">Mat src, dst,gray_src;</span><br><span class="line"><span class="keyword">int</span> threshold_value = <span class="number">80</span>;</span><br><span class="line"><span class="keyword">int</span> threshold_max = <span class="number">255</span>;</span><br><span class="line">RNG rng;</span><br><span class="line">string input_title = <span class="string">&quot;input img&quot;</span>;</span><br><span class="line">string output_title = <span class="string">&quot;output img&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> r = <span class="number">100</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">src = Mat::<span class="built_in">zeros</span>(r * <span class="number">4</span>, r * <span class="number">4</span>, CV_8UC1);</span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;Point2f&gt; <span class="title">vert</span><span class="params">(<span class="number">6</span>)</span></span>;</span><br><span class="line">vert[<span class="number">0</span>] = <span class="built_in">Point</span>(<span class="number">3</span> * r / <span class="number">2</span>, <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">1.34</span>*r));</span><br><span class="line">vert[<span class="number">1</span>] = <span class="built_in">Point</span>(<span class="number">1</span> * r, <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">2</span> * r));</span><br><span class="line">vert[<span class="number">2</span>] = <span class="built_in">Point</span>(<span class="number">3</span> * r / <span class="number">2</span>, <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">2.886</span>*r));</span><br><span class="line">vert[<span class="number">3</span>] = <span class="built_in">Point</span>(<span class="number">5</span> * r / <span class="number">2</span>, <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">2.886</span>*r));</span><br><span class="line">vert[<span class="number">4</span>] = <span class="built_in">Point</span>(<span class="number">3</span> * r, <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">2</span> * r));</span><br><span class="line">vert[<span class="number">5</span>] = <span class="built_in">Point</span>(<span class="number">5</span> * r / <span class="number">2</span>, <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">1.34</span>*r));</span><br><span class="line"></span><br><span class="line"><span class="comment">//画多边形</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">line</span>(src, vert[i], vert[(i + <span class="number">1</span>) % <span class="number">6</span>], <span class="built_in">Scalar</span>(<span class="number">255</span>), <span class="number">8</span>, LINE_8, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vector&lt;vector&lt;Point&gt;&gt; contours;</span><br><span class="line">vector&lt;Vec4i&gt; hierachy;</span><br><span class="line">Mat csrc;</span><br><span class="line">src.<span class="built_in">copyTo</span>(csrc);</span><br><span class="line"><span class="comment">//轮廓发现</span></span><br><span class="line"><span class="built_in">findContours</span>(csrc, contours, RETR_TREE, CHAIN_APPROX_SIMPLE, <span class="built_in">Point</span>(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">Mat raw_dist = Mat::<span class="built_in">zeros</span>(csrc.<span class="built_in">size</span>(), CV_32FC1);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; raw_dist.rows; row++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; raw_dist.cols; col++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//点多边形测试</span></span><br><span class="line"><span class="keyword">double</span> dist = <span class="built_in">pointPolygonTest</span>(contours[<span class="number">0</span>], <span class="built_in">Point2f</span>(<span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(col), <span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(row)), <span class="literal">true</span>);</span><br><span class="line">raw_dist.at&lt;<span class="keyword">float</span>&gt;(row, col) = <span class="keyword">static_cast</span>&lt;<span class="keyword">float</span>&gt;(dist);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> minValue, maxValue;</span><br><span class="line"><span class="comment">//归一化处理</span></span><br><span class="line"><span class="built_in">minMaxLoc</span>(raw_dist, &amp;minValue, &amp;maxValue, <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">Mat</span>());</span><br><span class="line"></span><br><span class="line">Mat drawImg = Mat::<span class="built_in">zeros</span>(src.<span class="built_in">size</span>(), CV_8UC3);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; drawImg.rows; row++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; drawImg.cols; col++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">float</span> dist = raw_dist.at&lt;<span class="keyword">float</span>&gt;(row, col);</span><br><span class="line"><span class="keyword">if</span> (dist &gt; <span class="number">0</span>) &#123;</span><br><span class="line">drawImg.at&lt;Vec3b&gt;(row, col)[<span class="number">0</span>] = (uchar)(<span class="built_in">abs</span>(<span class="number">1.0</span> - (dist / maxValue)) * <span class="number">255</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (dist &lt; <span class="number">0</span>) &#123;</span><br><span class="line">drawImg.at&lt;Vec3b&gt;(row, col)[<span class="number">2</span>] = (uchar)(<span class="built_in">abs</span>(<span class="number">1.0</span>- (dist / maxValue)) * <span class="number">255</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">drawImg.at&lt;Vec3b&gt;(row, col)[<span class="number">0</span>] = (uchar)(<span class="built_in">abs</span>(<span class="number">255</span> - dist));</span><br><span class="line">drawImg.at&lt;Vec3b&gt;(row, col)[<span class="number">1</span>] = (uchar)(<span class="built_in">abs</span>(<span class="number">255</span> - dist));</span><br><span class="line">drawImg.at&lt;Vec3b&gt;(row, col)[<span class="number">2</span>] = (uchar)(<span class="built_in">abs</span>(<span class="number">255</span> - dist));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">namedWindow</span>(input_title, CV_WINDOW_AUTOSIZE);</span><br><span class="line"><span class="built_in">namedWindow</span>(output_title, CV_WINDOW_AUTOSIZE);</span><br><span class="line"><span class="built_in">imshow</span>(input_title, src);</span><br><span class="line"><span class="built_in">imshow</span>(output_title, drawImg);</span><br><span class="line"></span><br><span class="line"><span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="十一、基于距离变换与分水岭的图像分割"><a href="#十一、基于距离变换与分水岭的图像分割" class="headerlink" title="十一、基于距离变换与分水岭的图像分割"></a>十一、基于距离变换与分水岭的图像分割</h4><h5 id="1、概念-2"><a href="#1、概念-2" class="headerlink" title="1、概念"></a>1、概念</h5><ul><li>图像分割(Image Segmentation)是图像处理最重要的处理手段之一</li><li>图像分割的目标是将图像中像素根据一定的规则分为若干(N)个cluster集合，每个集合包含一类像素。</li><li>根据算法分为监督学习方法和无监督学习方法，图像分割的算法多数都是无监督学习方法 - KMeans</li></ul><h5 id="2、距离变换与分水岭介绍"><a href="#2、距离变换与分水岭介绍" class="headerlink" title="2、距离变换与分水岭介绍"></a>2、距离变换与分水岭介绍</h5><ul><li>距离变换常见算法有两种<ul><li>不断膨胀/ 腐蚀得到</li><li>基于倒角距离</li></ul></li><li>分水岭变换常见的算法<ul><li>基于浸泡理论实现 </li></ul></li></ul><h5 id="3、相关API-1"><a href="#3、相关API-1" class="headerlink" title="3、相关API"></a>3、相关API</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cv::<span class="built_in">distanceTransform</span>(InputArray  src, OutputArray dst,  OutputArray  labels,  <span class="keyword">int</span>  distanceType,  <span class="keyword">int</span> maskSize,  <span class="keyword">int</span> labelType=DIST_LABEL_CCOMP)</span><br><span class="line">        distanceType = DIST_L1/DIST_L2,</span><br><span class="line">        maskSize = <span class="number">3</span>x3,最新的支持<span class="number">5</span>x5，推荐<span class="number">3</span>x3、</span><br><span class="line">        labels离散维诺图输出</span><br><span class="line">        dst输出<span class="number">8</span>位或者<span class="number">32</span>位的浮点数，单一通道，大小与输入图像一致</span><br><span class="line"></span><br><span class="line">cv::<span class="built_in">watershed</span>(InputArray image, InputOutputArray  markers)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="4、流程-1"><a href="#4、流程-1" class="headerlink" title="4、流程"></a>4、流程</h5><ul><li><ol><li>将白色背景变成黑色-目的是为后面的变换做准备</li></ol></li><li><ol start="2"><li>使用filter2D与拉普拉斯算子实现图像对比度提高，sharp</li></ol></li><li><ol start="3"><li>转为二值图像通过threshold</li></ol></li><li><ol start="4"><li>距离变换</li></ol></li><li><ol start="5"><li>对距离变换结果进行归一化到[0~1]之间</li></ol></li><li><ol start="6"><li>使用阈值，再次二值化，得到标记</li></ol></li><li><ol start="7"><li>腐蚀得到每个Peak - erode</li></ol></li><li><ol start="8"><li>发现轮廓 – findContours</li></ol></li><li><ol start="9"><li>绘制轮廓- drawContours</li></ol></li><li><ol start="10"><li>分水岭变换 watershed</li></ol></li><li><ol start="11"><li>对每个分割区域着色输出结果</li></ol></li><li><h5 id="示例代码-9"><a href="#示例代码-9" class="headerlink" title="示例代码"></a>示例代码</h5></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2\opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line">Mat src, dst;</span><br><span class="line"><span class="keyword">int</span> threshold_value = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> threshold_max = <span class="number">255</span>;</span><br><span class="line">RNG rng;</span><br><span class="line">string input_title = <span class="string">&quot;input img&quot;</span>;</span><br><span class="line">string output_title = <span class="string">&quot;output img&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv)</span> </span>&#123;</span><br><span class="line">src = <span class="built_in">imread</span>(<span class="string">&quot;C:\\Users\\Administrator\\Pictures\\lab\\红桃.png&quot;</span>);</span><br><span class="line"><span class="built_in">namedWindow</span>(input_title, CV_WINDOW_AUTOSIZE);</span><br><span class="line"><span class="built_in">namedWindow</span>(output_title, CV_WINDOW_AUTOSIZE);</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改背景颜色</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; src.rows; row++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; src.cols; col++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (src.at&lt;Vec3b&gt;(row,col) == <span class="built_in">Vec3b</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line">&#123;</span><br><span class="line">src.at&lt;Vec3b&gt;(row, col)[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">src.at&lt;Vec3b&gt;(row, col)[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">src.at&lt;Vec3b&gt;(row, col)[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//膨胀（去除小黑点，噪点）</span></span><br><span class="line">Mat structureElement = <span class="built_in">getStructuringElement</span>(MORPH_RECT, <span class="built_in">Size</span>(<span class="number">5</span>, <span class="number">5</span>), <span class="built_in">Point</span>(<span class="number">-1</span>, <span class="number">-1</span>));</span><br><span class="line"><span class="built_in">dilate</span>(src, src, structureElement, <span class="built_in">Point</span>(<span class="number">-1</span>, <span class="number">-1</span>), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//锐化图像，shape</span></span><br><span class="line">Mat kernel = (Mat_&lt;<span class="keyword">float</span>&gt;(<span class="number">3</span>, <span class="number">3</span>) &lt;&lt; <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">-8</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">Mat imgLaplance;</span><br><span class="line">Mat shapenImg = src;</span><br><span class="line"><span class="built_in">filter2D</span>(src, imgLaplance, CV_32F, kernel, <span class="built_in">Point</span>(<span class="number">-1</span>, <span class="number">-1</span>), <span class="number">0</span>, BORDER_DEFAULT);</span><br><span class="line">src.<span class="built_in">convertTo</span>(shapenImg, CV_32F);</span><br><span class="line">Mat resultImg = shapenImg - imgLaplance;</span><br><span class="line">resultImg.<span class="built_in">convertTo</span>(resultImg, CV_8UC3);</span><br><span class="line">imgLaplance.<span class="built_in">convertTo</span>(imgLaplance, CV_8UC3);</span><br><span class="line"></span><br><span class="line"><span class="comment">//二值图像convert to binary</span></span><br><span class="line">Mat binaryImg;</span><br><span class="line"><span class="built_in">cvtColor</span>(resultImg, resultImg, CV_BGR2GRAY);</span><br><span class="line"><span class="built_in">threshold</span>(resultImg, binaryImg, <span class="number">40</span>, <span class="number">255</span>, CV_THRESH_BINARY | THRESH_OTSU);</span><br><span class="line"></span><br><span class="line"><span class="comment">//距离变化</span></span><br><span class="line">Mat distImg;</span><br><span class="line"><span class="built_in">distanceTransform</span>(binaryImg, distImg, DIST_L1, <span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">normalize</span>(distImg, distImg, <span class="number">0</span>, <span class="number">1</span>, NORM_MINMAX);</span><br><span class="line"></span><br><span class="line"><span class="comment">//距离变化之后再次二值化图像</span></span><br><span class="line"><span class="built_in">threshold</span>(distImg, distImg, <span class="number">0.4</span>, <span class="number">1</span>, THRESH_BINARY);</span><br><span class="line">Mat kernel1 = Mat::<span class="built_in">zeros</span>(<span class="number">13</span>, <span class="number">13</span>, CV_8UC1);</span><br><span class="line"><span class="comment">//腐蚀</span></span><br><span class="line"><span class="built_in">erode</span>(distImg, distImg, kernel1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//markers标记</span></span><br><span class="line">Mat dist_8u;</span><br><span class="line">distImg.<span class="built_in">convertTo</span>(dist_8u, CV_8U);</span><br><span class="line">vector&lt;vector&lt;Point&gt;&gt; contours;</span><br><span class="line"><span class="built_in">findContours</span>(dist_8u, contours, RETR_TREE, CHAIN_APPROX_SIMPLE, <span class="built_in">Point</span>(<span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//create makers</span></span><br><span class="line">Mat markers = Mat::<span class="built_in">zeros</span>(src.<span class="built_in">size</span>(), CV_32SC1);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; contours.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">drawContours</span>(markers, contours, <span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(i), Scalar::<span class="built_in">all</span> (<span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(i) + <span class="number">1</span>),<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">circle</span>(markers, <span class="built_in">Point</span>(<span class="number">5</span>, <span class="number">5</span>), <span class="number">3</span>, <span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//分水岭</span></span><br><span class="line"><span class="built_in">watershed</span>(src, markers);</span><br><span class="line">Mat res = Mat::<span class="built_in">zeros</span>(markers.<span class="built_in">size</span>(), CV_8UC1);</span><br><span class="line">markers.<span class="built_in">convertTo</span>(res, CV_8UC1);</span><br><span class="line"><span class="built_in">bitwise_not</span>(res, res, <span class="built_in">Mat</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成随机颜色</span></span><br><span class="line">vector&lt;Vec3b&gt; colors;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">size_t</span> i = <span class="number">0</span>; i &lt; contours.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> r = rng.<span class="built_in">uniform</span>(<span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line"><span class="keyword">int</span> g = rng.<span class="built_in">uniform</span>(<span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line"><span class="keyword">int</span> b = rng.<span class="built_in">uniform</span>(<span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line"></span><br><span class="line">colors.<span class="built_in">push_back</span>(<span class="built_in">Vec3b</span>((uchar)b, (uchar)g, (uchar)r));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//填满颜色</span></span><br><span class="line">dst = Mat::<span class="built_in">zeros</span>(markers.<span class="built_in">size</span>(), CV_8UC3);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; src.rows; row++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; src.cols; col++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> index = markers.at&lt;<span class="keyword">int</span>&gt;(row, col);</span><br><span class="line"><span class="keyword">if</span> (index&gt;<span class="number">0</span> &amp;&amp; index&lt;=<span class="keyword">static_cast</span>&lt;<span class="keyword">int</span>&gt;(contours.<span class="built_in">size</span>()))</span><br><span class="line">&#123;</span><br><span class="line">dst.at&lt;Vec3b&gt;(row, col) = colors[index - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">dst.at&lt;Vec3b&gt;(row, col) = <span class="built_in">Vec3b</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">imshow</span>(input_title, src);</span><br><span class="line"><span class="built_in">imshow</span>(output_title, dst);</span><br><span class="line"></span><br><span class="line"><span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机视觉 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV图像处理笔记（二）：图片操作进阶</title>
      <link href="/2019/07/11/OpenCV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%9B%BE%E7%89%87%E6%93%8D%E4%BD%9C%E8%BF%9B%E9%98%B6/"/>
      <url>/2019/07/11/OpenCV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%9B%BE%E7%89%87%E6%93%8D%E4%BD%9C%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="一、图像模糊"><a href="#一、图像模糊" class="headerlink" title="一、图像模糊"></a>一、图像模糊</h4><h5 id="1、模糊原理"><a href="#1、模糊原理" class="headerlink" title="1、模糊原理"></a>1、模糊原理</h5><ul><li>Smooth/Blur 是图像处理中最简单和常用的操作之一</li><li>使用该操作的原因之一就为了给图像预处理时候减低噪声</li><li>使用Smooth/Blur操作其背后是数学的卷积计算</li></ul><html><a href="https://www.codecogs.com/eqnedit.php?latex=g\left&space;(&space;i,j&space;\right&space;)=\sum&space;_{k,j}f\left&space;(&space;i&plus;k,j&plus;l&space;\right&space;)h\left&space;(&space;k,l&space;\right&space;)" target="_blank"><img src="https://latex.codecogs.com/gif.latex?g\left&space;(&space;i,j&space;\right&space;)=\sum&space;_{k,j}f\left&space;(&space;i&plus;k,j&plus;l&space;\right&space;)h\left&space;(&space;k,l&space;\right&space;)" title="g\left ( i,j \right )=\sum _{k,j}f\left ( i+k,j+l \right )h\left ( k,l \right )" /></a></html><ul><li>通常这些卷积算子计算都是线性操作，所以又叫线性滤波</li></ul><h6 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">假设有6x6的图像像素点矩阵。</span><br><span class="line"></span><br><span class="line">卷积过程：6x6上面是个3x3的窗口，从左向右，从上向下移动，黄色的每个像个像素点值之和取平均值赋给中心红色像素作为它卷积处理之后新的像素值。每次移动一个像素格。</span><br></pre></td></tr></table></figure><p><img src="http://myfile.buildworld.cn/%E5%83%8F%E7%B4%A0%E7%82%B9%E7%9F%A9%E9%98%B5.png" alt="像素点矩阵"></p><h5 id="2、归一化盒子滤波（均值滤波）"><a href="#2、归一化盒子滤波（均值滤波）" class="headerlink" title="2、归一化盒子滤波（均值滤波）"></a>2、归一化盒子滤波（均值滤波）</h5><p><a href="https://www.codecogs.com/eqnedit.php?latex=\dpi{100}&space;\LARGE&space;K=\frac{1}{K_{width}&space;.K_{height}}\begin{bmatrix}&space;1&space;&&space;1&&space;1&&space;...&&space;1\\&space;1&space;&&space;1&&space;1&&space;...&&space;1\\&space;.&&space;.&&space;.&&space;...&&space;1\\&space;.&&space;.&&space;.&&space;...&&space;1\\&space;1&space;&&space;1&&space;1&&space;...&&space;1&space;\end{bmatrix}" target="_blank"><img src="https://latex.codecogs.com/gif.latex?\dpi{100}&space;\LARGE&space;K=\frac{1}{K_{width}&space;.K_{height}}\begin{bmatrix}&space;1&space;&&space;1&&space;1&&space;...&&space;1\\&space;1&space;&&space;1&&space;1&&space;...&&space;1\\&space;.&&space;.&&space;.&&space;...&&space;1\\&space;.&&space;.&&space;.&&space;...&&space;1\\&space;1&space;&&space;1&&space;1&&space;...&&space;1&space;\end{bmatrix}" title="\LARGE K=\frac{1}{K_{width} .K_{height}}\begin{bmatrix} 1 & 1& 1& ...& 1\\ 1 & 1& 1& ...& 1\\ .& .& .& ...& 1\\ .& .& .& ...& 1\\ 1 & 1& 1& ...& 1 \end{bmatrix}" /></a></p><h6 id="相关的API"><a href="#相关的API" class="headerlink" title="相关的API"></a>相关的API</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- <span class="built_in">blur</span>(Mat src, Mat dst, <span class="built_in">Size</span>(xradius, yradius), <span class="built_in">Point</span>(<span class="number">-1</span>,<span class="number">-1</span>));</span><br></pre></td></tr></table></figure><h5 id="3、高斯滤波"><a href="#3、高斯滤波" class="headerlink" title="3、高斯滤波"></a>3、高斯滤波</h5><html><a  href="https://www.codecogs.com/eqnedit.php?latex=\dpi{100}&space;\LARGE&space;G_{0}\left&space;(&space;x,y&space;\right&space;)=Ae^{\frac{-(x-\mu&space;_{x})^{2}}{2\sigma&space;_{x}^{2}}&plus;\frac{-(y-\mu&space;_{y})^{2}}{2\sigma&space;_{y}^{2}}}" target="_blank"><img src="https://latex.codecogs.com/png.latex?\dpi{100}&space;\LARGE&space;G_{0}\left&space;(&space;x,y&space;\right&space;)=Ae^{\frac{-(x-\mu&space;_{x})^{2}}{2\sigma&space;_{x}^{2}}&plus;\frac{-(y-\mu&space;_{y})^{2}}{2\sigma&space;_{y}^{2}}}" title="\LARGE G_{0}\left ( x,y \right )=Ae^{\frac{-(x-\mu _{x})^{2}}{2\sigma _{x}^{2}}+\frac{-(y-\mu _{y})^{2}}{2\sigma _{y}^{2}}}" /></a></html><h6 id="相关的API-1"><a href="#相关的API-1" class="headerlink" title="相关的API"></a>相关的API</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- <span class="built_in">GaussianBlur</span>(Mat src, Mat dst, <span class="built_in">Size</span>(<span class="number">11</span>, <span class="number">11</span>), sigmax, sigmay);</span><br><span class="line">其中Size（x, y）, x, y 必须是正数而且是奇数</span><br></pre></td></tr></table></figure><h5 id="4、中值滤波"><a href="#4、中值滤波" class="headerlink" title="4、中值滤波"></a>4、中值滤波</h5><ul><li>统计排序滤波器</li><li>中值对椒盐噪声有很好的抑制作用</li></ul><p><img src="http://myfile.buildworld.cn/%E4%B8%AD%E5%80%BC%E6%BB%A4%E6%B3%A2.png" alt="中值滤波原理图"></p><h6 id="相关的API-2"><a href="#相关的API-2" class="headerlink" title="相关的API"></a>相关的API</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">中值模糊 medianBlur（Mat src, Mat dest, ksize）</span><br><span class="line">中值模糊的ksize大小必须是大于<span class="number">1</span>而且必须是奇数。</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="5、双边滤波"><a href="#5、双边滤波" class="headerlink" title="5、双边滤波"></a>5、双边滤波</h5><ul><li>均值模糊无法克服边缘像素信息丢失缺陷。原因是均值滤波是基于平均权重</li><li>高斯模糊部分克服了该缺陷，但是无法完全避免，因为没有考虑像素值的不同</li><li>高斯双边模糊 – 是边缘保留的滤波方法，避免了边缘信息丢失，保留了图像轮廓不变<h6 id="相关的API-3"><a href="#相关的API-3" class="headerlink" title="相关的API"></a>相关的API</h6></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">双边模糊 <span class="built_in">bilateralFilter</span>(src, dest, d=<span class="number">15</span>, <span class="number">150</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"> - <span class="number">15</span> –计算的半径，半径之内的像数都会被纳入计算，如果提供<span class="number">-1</span> 则根据sigma space参数取值</span><br><span class="line"> - <span class="number">150</span> – sigma color 决定多少差值之内的像素会被计算</span><br><span class="line">  - <span class="number">3</span> – sigma space 如果d的值大于<span class="number">0</span>则声明无效，否则根据它来计算d值</span><br></pre></td></tr></table></figure><h4 id="二、膨胀与腐蚀"><a href="#二、膨胀与腐蚀" class="headerlink" title="二、膨胀与腐蚀"></a>二、膨胀与腐蚀</h4><h5 id="1、形态学操作简介"><a href="#1、形态学操作简介" class="headerlink" title="1、形态学操作简介"></a>1、形态学操作简介</h5><ul><li>图像形态学操作 – 基于形状的一系列图像处理操作的合集，主要是基于集合论基础上的形态学数学</li><li>形态学有四个基本操作：腐蚀、膨胀、开、闭</li><li>膨胀与腐蚀是图像处理中最常用的形态学操作手段</li></ul><h5 id="2、形态学操作-morphology-operators-膨胀"><a href="#2、形态学操作-morphology-operators-膨胀" class="headerlink" title="2、形态学操作(morphology operators)-膨胀"></a>2、形态学操作(morphology operators)-膨胀</h5><blockquote><p>跟卷积操作类似，假设有图像A和结构元素B，结构元素B在A上面移动，其中B定义其中心为锚点，<br>计算B覆盖下A的最大像素值用来替换锚点的像素，其中B作为结构体可以是任意形状</p></blockquote><h6 id="二值图像与灰度图像上的膨胀操作"><a href="#二值图像与灰度图像上的膨胀操作" class="headerlink" title="二值图像与灰度图像上的膨胀操作"></a>二值图像与灰度图像上的膨胀操作</h6><p><img src="http://myfile.buildworld.cn/%E8%86%A8%E8%83%80%E6%93%8D%E4%BD%9C.png" alt="膨胀操作"></p><h5 id="3、形态学操作-腐蚀"><a href="#3、形态学操作-腐蚀" class="headerlink" title="3、形态学操作-腐蚀"></a>3、形态学操作-腐蚀</h5><blockquote><p>腐蚀跟膨胀操作的过程类似，唯一不同的是以最小值替换锚点重叠下图像的像素值</p></blockquote><h6 id="二值图像与灰度图像上的膨胀操作-1"><a href="#二值图像与灰度图像上的膨胀操作-1" class="headerlink" title="二值图像与灰度图像上的膨胀操作"></a>二值图像与灰度图像上的膨胀操作</h6><p><img src="http://myfile.buildworld.cn/%E8%85%90%E8%9A%80%E6%93%8D%E4%BD%9C.png" alt="二值图像与灰度图像上的腐蚀操作"></p><h6 id="膨胀腐蚀示例代码"><a href="#膨胀腐蚀示例代码" class="headerlink" title="膨胀腐蚀示例代码"></a>膨胀腐蚀示例代码</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> element_size = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> max_size = <span class="number">21</span>;</span><br><span class="line">Mat src, dst, gauss_dst;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CallBack_Demo</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">void</span>*)</span></span>;</span><br><span class="line"></span><br><span class="line">string input_title = <span class="string">&quot;input img&quot;</span>;</span><br><span class="line">string output_title = <span class="string">&quot;output img&quot;</span>;</span><br><span class="line">string output2gauss_title = <span class="string">&quot;output2gauss img&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> ** argv)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">src = <span class="built_in">imread</span>(<span class="string">&quot;C:\\Users\\Administrator\\Pictures\\车牌.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!src.data)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;read img error&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">imshow</span>(input_title, src);</span><br><span class="line"></span><br><span class="line"><span class="built_in">namedWindow</span>(output_title, CV_WINDOW_AUTOSIZE);</span><br><span class="line"><span class="built_in">createTrackbar</span>(<span class="string">&quot;Element Size&quot;</span>, output_title, &amp;element_size, max_size, CallBack_Demo);</span><br><span class="line"></span><br><span class="line"><span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CallBack_Demo</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">void</span>*)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> s = element_size * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*getStructuringElement(int shape, Size ksize, Point anchor)</span></span><br><span class="line"><span class="comment">         - 形状 (MORPH_RECT \MORPH_CROSS \MORPH_ELLIPSE)</span></span><br><span class="line"><span class="comment">         - 大小</span></span><br><span class="line"><span class="comment">         - 锚点 默认是Point(-1, -1)意思就是中心像素*/</span></span><br><span class="line">Mat structureElement = <span class="built_in">getStructuringElement</span>(MORPH_RECT, <span class="built_in">Size</span>(s, s), <span class="built_in">Point</span>(<span class="number">-1</span>, <span class="number">-1</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">dilate</span>(src, dst, structureElement,<span class="built_in">Point</span>(<span class="number">-1</span>,<span class="number">-1</span>),<span class="number">1</span>); <span class="comment">//膨胀</span></span><br><span class="line"><span class="comment">//erode(src, dst, structureElement, Point(-1, -1), 1); //腐蚀</span></span><br><span class="line"><span class="built_in">imshow</span>(output_title, dst);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="动态调整结构元素大小"><a href="#动态调整结构元素大小" class="headerlink" title="动态调整结构元素大小"></a>动态调整结构元素大小</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TrackBar – createTrackbar(const String &amp; trackbarname, const String winName,  int* value, int count, Trackbarcallback func, void* userdata=0)</span><br><span class="line">其中最中要的是 callback 函数功能。如果设置为NULL就是说只有值update，但是不会调用callback的函数。</span><br></pre></td></tr></table></figure><h5 id="4、开操作-open"><a href="#4、开操作-open" class="headerlink" title="4、开操作- open"></a>4、开操作- open</h5><ul><li>先腐蚀后膨胀</li><li>可以去掉小的对象，假设对象是前景色，背景是黑色</li></ul><h5 id="5、闭操作-close"><a href="#5、闭操作-close" class="headerlink" title="5、闭操作-close"></a>5、闭操作-close</h5><ul><li>先膨胀后腐蚀（bin2）</li><li>可以填充小的洞（fill hole），假设对象是前景色，背景是黑色</li></ul><h5 id="6、形态学梯度-Morphological-Gradient"><a href="#6、形态学梯度-Morphological-Gradient" class="headerlink" title="6、形态学梯度- Morphological Gradient"></a>6、形态学梯度- Morphological Gradient</h5><ul><li>膨胀减去腐蚀</li><li>又称为基本梯度（其它还包括-内部梯度、方向梯度）</li></ul><h5 id="7、顶帽-–-top-hat"><a href="#7、顶帽-–-top-hat" class="headerlink" title="7、顶帽 – top hat"></a>7、顶帽 – top hat</h5><blockquote><p>顶帽 是原图像与开操作之间的差值图像</p></blockquote><h5 id="8、黑帽"><a href="#8、黑帽" class="headerlink" title="8、黑帽"></a>8、黑帽</h5><blockquote><p>黑帽是闭操作图像与源图像的差值图像</p></blockquote><h5 id="相关的API-4"><a href="#相关的API-4" class="headerlink" title="相关的API"></a>相关的API</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">morphologyEx</span>(src, dest, CV_MOP_BLACKHAT, kernel);</span><br><span class="line"> - Mat src – 输入图像</span><br><span class="line"> - Mat dest – 输出结果</span><br><span class="line"> - <span class="keyword">int</span> OPT – CV_MOP_OPEN/ CV_MOP_CLOSE/ CV_MOP_GRADIENT / CV_MOP_TOPHAT/ CV_MOP_BLACKHAT 形态学操作类型</span><br><span class="line">Mat kernel 结构元素</span><br><span class="line"><span class="keyword">int</span> Iteration 迭代次数，默认是<span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="三、形态学操作应用-提取水平与垂直线"><a href="#三、形态学操作应用-提取水平与垂直线" class="headerlink" title="三、形态学操作应用-提取水平与垂直线"></a>三、形态学操作应用-提取水平与垂直线</h4><h5 id="1、原理方法"><a href="#1、原理方法" class="headerlink" title="1、原理方法"></a>1、原理方法</h5><blockquote><p>图像形态学操作时候，可以通过自定义的结构元素实现结构元素<br>对输入图像一些对象敏感、另外一些对象不敏感，这样就会让敏<br>感的对象改变而不敏感的对象保留输出。通过使用两个最基本的<br>形态学操作 – 膨胀与腐蚀，使用不同的结构元素实现对输入图像<br>的操作、得到想要的结果。</p></blockquote><ul><li>膨胀，输出的像素值是结构元素覆盖下输入图像的最大像素值</li><li>腐蚀，输出的像素值是结构元素覆盖下输入图像的最小像素值</li></ul><h5 id="2、提取步骤"><a href="#2、提取步骤" class="headerlink" title="2、提取步骤"></a>2、提取步骤</h5><ul><li>输入图像彩色图像 imread</li><li>转换为灰度图像 – cvtColor</li><li>转换为二值图像 – adaptiveThreshold</li><li>定义结构元素</li><li>开操作 （腐蚀+膨胀）提取 水平与垂直线</li></ul><h5 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">Mat src, dst;</span><br><span class="line">src = <span class="built_in">imread</span>(<span class="string">&quot;C:\\Users\\15646\\Pictures\\验证码.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!src.data)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;not found img&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出原图</span></span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;input img&quot;</span>, src);</span><br><span class="line"><span class="comment">//转化为灰度图像</span></span><br><span class="line">Mat gray_src;</span><br><span class="line"><span class="built_in">cvtColor</span>(src, gray_src, CV_BGR2GRAY);</span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;gray img&quot;</span>, gray_src);</span><br><span class="line"></span><br><span class="line"><span class="comment">//转化为二值图像</span></span><br><span class="line"><span class="comment">/*adaptiveThreshold(</span></span><br><span class="line"><span class="comment">Mat src, // 输入的灰度图像</span></span><br><span class="line"><span class="comment">Mat dest, // 二值图像</span></span><br><span class="line"><span class="comment">double maxValue, // 二值图像最大值</span></span><br><span class="line"><span class="comment">int adaptiveMethod // 自适应方法，只能其中之一 – </span></span><br><span class="line"><span class="comment">   // ADAPTIVE_THRESH_MEAN_C ， ADAPTIVE_THRESH_GAUSSIAN_C </span></span><br><span class="line"><span class="comment">int thresholdType,// 阈值类型</span></span><br><span class="line"><span class="comment">int blockSize, // 块大小</span></span><br><span class="line"><span class="comment">double C // 常量C 可以是正数，0，负数</span></span><br><span class="line"><span class="comment">)*/</span></span><br><span class="line"></span><br><span class="line">Mat binImg;</span><br><span class="line"><span class="built_in">adaptiveThreshold</span>(~gray_src, binImg, <span class="number">255</span>, ADAPTIVE_THRESH_MEAN_C, THRESH_BINARY, <span class="number">15</span>, <span class="number">-2</span>);</span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;binary img&quot;</span>, binImg);</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义结构元素</span></span><br><span class="line"><span class="comment">//水平结构元素</span></span><br><span class="line">Mat hline = <span class="built_in">getStructuringElement</span>(MORPH_RECT, <span class="built_in">Size</span>(src.cols / <span class="number">16</span>, <span class="number">1</span>), <span class="built_in">Point</span>(<span class="number">-1</span>, <span class="number">-1</span>));</span><br><span class="line"><span class="comment">//垂直结构元素</span></span><br><span class="line">Mat vline = <span class="built_in">getStructuringElement</span>(MORPH_RECT, <span class="built_in">Size</span>(<span class="number">1</span>, src.cols / <span class="number">16</span>), <span class="built_in">Point</span>(<span class="number">-1</span>, <span class="number">-1</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//开操作 （腐蚀+膨胀）提取 水平线</span></span><br><span class="line"><span class="comment">//Mat temp;</span></span><br><span class="line"><span class="comment">//erode(binImg, temp, hline);//腐蚀</span></span><br><span class="line"><span class="comment">//dilate(temp, dst, hline);//膨胀</span></span><br><span class="line"><span class="comment">//直接使用开操作的api即可</span></span><br><span class="line"><span class="built_in">morphologyEx</span>(binImg, dst, CV_MOP_OPEN, vline);</span><br><span class="line"><span class="built_in">bitwise_not</span>(dst, dst);</span><br><span class="line"><span class="built_in">blur</span>(dst, dst, <span class="built_in">Size</span>(<span class="number">3</span>, <span class="number">3</span>), <span class="built_in">Point</span>(<span class="number">-1</span>, <span class="number">-1</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;res&quot;</span>, dst);</span><br><span class="line"></span><br><span class="line"><span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h4 id="四、图像上采样和降采样"><a href="#四、图像上采样和降采样" class="headerlink" title="四、图像上采样和降采样"></a>四、图像上采样和降采样</h4><h5 id="1、图像金字塔概念"><a href="#1、图像金字塔概念" class="headerlink" title="1、图像金字塔概念"></a>1、图像金字塔概念</h5><ul><li><ol><li>我们在图像处理中常常会调整图像大小，最常见的就是放大(zoom in)和缩小（zoom out），尽管几何变换也可以实现图像放大和缩小，但是这里我们介绍图像金字塔</li></ol></li><li><ol start="2"><li>一个图像金字塔式一系列的图像组成，最底下一张是图像尺寸最大，最上方的图像尺寸最小，从空间上从上向下看就想一个古代的金字塔。</li></ol></li></ul><h5 id="2、高斯金字塔"><a href="#2、高斯金字塔" class="headerlink" title="2、高斯金字塔"></a>2、高斯金字塔</h5><ul><li>高斯金子塔是从底向上，逐层降采样得到。</li><li>降采样之后图像大小是原图像MxN的M/2 x N/2 ,就是对原图像删除偶数行与列，即得到降采样之后上一层的图片。</li><li>高斯金子塔的生成过程分为两步：<pre><code>- 对当前层进行高斯模糊- 删除当前层的偶数行与列</code></pre></li><li><pre><code>即可得到上一层的图像，这样上一层跟下一层相比，都只有它的1/4大小。</code></pre></li></ul><h5 id="3、高斯不同-Difference-of-Gaussian-DOG"><a href="#3、高斯不同-Difference-of-Gaussian-DOG" class="headerlink" title="3、高斯不同(Difference of Gaussian-DOG)"></a>3、高斯不同(Difference of Gaussian-DOG)</h5><ul><li>定义：就是把同一张图像在不同的参数下做高斯模糊之后的结果相减，得到的输出图像。称为高斯不同(DOG)</li><li>高斯不同是图像的内在特征，在灰度图像增强、角点检测中经常用到。</li></ul><h5 id="4、采样相关API"><a href="#4、采样相关API" class="headerlink" title="4、采样相关API"></a>4、采样相关API</h5><ul><li>上采样(cv::pyrUp) – zoom in 放大</li><li>降采样 (cv::pyrDown) – zoom out 缩小</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pyrUp(Mat src, Mat dst, Size(src.cols*2, src.rows*2)) </span><br><span class="line">生成的图像是原图在宽与高各放大两倍</span><br><span class="line">pyrDown(Mat src, Mat dst, Size(src.cols/2, src.rows/2))</span><br><span class="line">生成的图像是原图在宽与高各缩小1/2</span><br></pre></td></tr></table></figure><h5 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//上采样</span></span><br><span class="line"><span class="built_in">pyrUp</span>(src, dst, <span class="built_in">Size</span>(src.cols * <span class="number">2</span>, src.rows * <span class="number">2</span>));</span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;pyrUp img&quot;</span>,dst);</span><br><span class="line"></span><br><span class="line"><span class="comment">//降采样</span></span><br><span class="line"><span class="built_in">pyrDown</span>(src, dst, <span class="built_in">Size</span>(src.cols / <span class="number">2</span>, src.rows / <span class="number">2</span>));</span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;pyrDown img&quot;</span>, dst);</span><br><span class="line"></span><br><span class="line"><span class="comment">//DOG</span></span><br><span class="line">Mat gray_src, g1, g2, dogImg;</span><br><span class="line"><span class="built_in">cvtColor</span>(src, gray_src, CV_BGR2GRAY);</span><br><span class="line"><span class="built_in">GaussianBlur</span>(gray_src, g1, <span class="built_in">Size</span>(<span class="number">3</span>, <span class="number">3</span>), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">GaussianBlur</span>(g1, g2, <span class="built_in">Size</span>(<span class="number">3</span>, <span class="number">3</span>), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">subtract</span>(g1, g2, dogImg, <span class="built_in">Mat</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//归一化显示</span></span><br><span class="line"><span class="built_in">normalize</span>(dogImg, dogImg, <span class="number">255</span>, <span class="number">0</span>, NORM_MINMAX);</span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;dog img&quot;</span>, dogImg);</span><br></pre></td></tr></table></figure><h4 id="五、基本阈值操作"><a href="#五、基本阈值操作" class="headerlink" title="五、基本阈值操作"></a>五、基本阈值操作</h4><h5 id="1、图像阈值（threshold）"><a href="#1、图像阈值（threshold）" class="headerlink" title="1、图像阈值（threshold）"></a>1、图像阈值（threshold）</h5><blockquote><p>阈值 是什么？简单点说是把图像分割的标尺，这个标尺是根据什么产生的，阈值产生算法？阈值类型。（Binary segmentation）</p></blockquote><h5 id="2、阈值类型一阈值二值化-threshold-binary"><a href="#2、阈值类型一阈值二值化-threshold-binary" class="headerlink" title="2、阈值类型一阈值二值化(threshold binary)"></a>2、阈值类型一阈值二值化(threshold binary)</h5><ul><li>左下方的图表示图像像素点Src(x,y)值分布情况，蓝色水平线表示阈值<br><img src="http://myfile.buildworld.cn/%E9%98%88%E5%80%BC%E4%BA%8C%E5%80%BC%E5%8C%96.jpg" alt="image"></li></ul><h5 id="3、阈值类型一阈值反二值化-threshold-binary-Inverted"><a href="#3、阈值类型一阈值反二值化-threshold-binary-Inverted" class="headerlink" title="3、阈值类型一阈值反二值化(threshold binary Inverted)"></a>3、阈值类型一阈值反二值化(threshold binary Inverted)</h5><ul><li>左下方的图表示图像像素点Src(x,y)值分布情况，蓝色水平线表示阈值<br><img src="http://myfile.buildworld.cn/%E9%98%88%E5%80%BC%E5%8F%8D%E4%BA%8C%E5%80%BC%E5%8C%96.jpg" alt="image"></li></ul><h5 id="4、阈值类型一截断-truncate"><a href="#4、阈值类型一截断-truncate" class="headerlink" title="4、阈值类型一截断 (truncate)"></a>4、阈值类型一截断 (truncate)</h5><ul><li>左下方的图表示图像像素点Src(x,y)值分布情况，蓝色水平线表示阈值<br><img src="http://myfile.buildworld.cn/%E6%88%AA%E6%96%AD.jpg" alt="image"></li></ul><h5 id="5、阈值类型一阈值取零-threshold-to-zero"><a href="#5、阈值类型一阈值取零-threshold-to-zero" class="headerlink" title="5、阈值类型一阈值取零 (threshold to zero)"></a>5、阈值类型一阈值取零 (threshold to zero)</h5><ul><li>左下方的图表示图像像素点Src(x,y)值分布情况，蓝色水平线表示阈值<br><img src="http://myfile.buildworld.cn/%E9%98%88%E5%80%BC%E5%8F%96%E9%9B%B6.jpg" alt="image"></li></ul><h5 id="5、阈值类型一阈值反取零-threshold-to-zero-inverted"><a href="#5、阈值类型一阈值反取零-threshold-to-zero-inverted" class="headerlink" title="5、阈值类型一阈值反取零 (threshold to zero inverted)"></a>5、阈值类型一阈值反取零 (threshold to zero inverted)</h5><ul><li>左下方的图表示图像像素点Src(x,y)值分布情况，蓝色水平线表示阈值<br><img src="http://myfile.buildworld.cn/%E9%98%88%E5%80%BC%E5%8F%8D%E5%8F%96%E9%9B%B6.jpg" alt="image"><h5 id="6、相关的API"><a href="#6、相关的API" class="headerlink" title="6、相关的API"></a>6、相关的API</h5><img src="http://myfile.buildworld.cn/%E9%98%88%E5%80%BCAPI.png" alt="image"><h5 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Mat src, dst, gray_src;</span><br><span class="line"><span class="keyword">int</span> threshold_value = <span class="number">127</span>;</span><br><span class="line"><span class="keyword">int</span> threshold_max = <span class="number">255</span>;</span><br><span class="line"><span class="keyword">int</span> type_value = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> type_max = <span class="number">4</span>;</span><br><span class="line">string output_title = <span class="string">&quot;output img&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Threshold_Demo</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">void</span> *)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> ** argv)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">src = <span class="built_in">imread</span>(<span class="string">&quot;C:\\Users\\15646\\Pictures\\雷军.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!src.data)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;not found img&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">namedWindow</span>(output_title, CV_WINDOW_AUTOSIZE);</span><br><span class="line"><span class="built_in">createTrackbar</span>(<span class="string">&quot;Threshold Value&quot;</span>, output_title, &amp;threshold_value, threshold_max, Threshold_Demo);</span><br><span class="line"><span class="built_in">createTrackbar</span>(<span class="string">&quot;Type Value&quot;</span>, output_title, &amp;type_value, type_max, Threshold_Demo);</span><br><span class="line"><span class="built_in">Threshold_Demo</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Threshold_Demo</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">void</span> *)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cvtColor</span>(src, gray_src, CV_BGR2GRAY);</span><br><span class="line"><span class="comment">//设置阈值</span></span><br><span class="line"><span class="built_in">threshold</span>(gray_src, dst, threshold_value, threshold_max,type_value);</span><br><span class="line"><span class="built_in">imshow</span>(output_title, dst);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="六、自定义线性滤波"><a href="#六、自定义线性滤波" class="headerlink" title="六、自定义线性滤波"></a>六、自定义线性滤波</h4><h5 id="1、卷积概念"><a href="#1、卷积概念" class="headerlink" title="1、卷积概念"></a>1、卷积概念</h5></li><li>卷积是图像处理中一个操作，是kernel在图像的每个像素上的操作。</li><li>Kernel本质上一个固定大小的矩阵数组，其中心点称为锚点(anchor point)</li></ul><h5 id="2、卷积如何工作"><a href="#2、卷积如何工作" class="headerlink" title="2、卷积如何工作"></a>2、卷积如何工作</h5><blockquote><p>把kernel放到像素数组之上，求锚点周围覆盖的像素乘积之和（包括锚点），用来替换锚点覆盖下像素点值称为卷积处理。数学表达如下：</p></blockquote><html><a href="https://www.codecogs.com/eqnedit.php?latex=H(x,y)=\sum_{i=0}^{M_{i-1}}\sum_{i=0}^{M_{j-1}}I\left&space;(&space;x&plus;i-a_{i}&space;,y&plus;j-a_{j}\right&space;)K(i,j)" target="_blank"><img src="https://latex.codecogs.com/gif.latex?H(x,y)=\sum_{i=0}^{M_{i-1}}\sum_{i=0}^{M_{j-1}}I\left&space;(&space;x&plus;i-a_{i}&space;,y&plus;j-a_{j}\right&space;)K(i,j)" title="H(x,y)=\sum_{i=0}^{M_{i-1}}\sum_{i=0}^{M_{j-1}}I\left ( x+i-a_{i} ,y+j-a_{j}\right )K(i,j)" /></a></html><h6 id="工作原理示意图"><a href="#工作原理示意图" class="headerlink" title="工作原理示意图"></a>工作原理示意图</h6><p><img src="http://myfile.buildworld.cn/%E5%8D%B7%E7%A7%AF.png" alt="image"></p><h5 id="3、常见算子"><a href="#3、常见算子" class="headerlink" title="3、常见算子"></a>3、常见算子</h5><h6 id="Robert算子"><a href="#Robert算子" class="headerlink" title="Robert算子"></a>Robert算子</h6><table><thead><tr><th>+1</th><th>0</th></tr></thead><tbody><tr><td>0</td><td>-1</td></tr></tbody></table><table><thead><tr><th>0</th><th>+1</th></tr></thead><tbody><tr><td>-1</td><td>0</td></tr></tbody></table><h6 id="Sobel算子"><a href="#Sobel算子" class="headerlink" title="Sobel算子"></a>Sobel算子</h6><table><thead><tr><th>-1</th><th>0</th><th>1</th></tr></thead><tbody><tr><td>-2</td><td>0</td><td>2</td></tr><tr><td>-1</td><td>0</td><td>1</td></tr></tbody></table><table><thead><tr><th>-1</th><th>-2</th><th>-1</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>1</td><td>2</td><td>1</td></tr></tbody></table><h6 id="拉普拉多算子"><a href="#拉普拉多算子" class="headerlink" title="拉普拉多算子"></a>拉普拉多算子</h6><table><thead><tr><th>0</th><th>-1</th><th>0</th></tr></thead><tbody><tr><td>-1</td><td>4</td><td>-1</td></tr><tr><td>0</td><td>-1</td><td>0</td></tr></tbody></table><h5 id="示例代码-3"><a href="#示例代码-3" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//Robert算子 X方向</span></span><br><span class="line">Mat kernel_x = (Mat_&lt;<span class="keyword">int</span>&gt;(<span class="number">2</span>, <span class="number">2</span>) &lt;&lt; <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="built_in">filter2D</span>(src, dst, <span class="number">-1</span>, kernel_x, <span class="built_in">Point</span>(<span class="number">-1</span>, <span class="number">-1</span>), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;Robert X&quot;</span>, dst);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Robert算子 Y方向</span></span><br><span class="line">Mat kernel_y = (Mat_&lt;<span class="keyword">int</span>&gt;(<span class="number">2</span>, <span class="number">2</span>) &lt;&lt; <span class="number">0</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">filter2D</span>(src, dst, <span class="number">-1</span>, kernel_y, <span class="built_in">Point</span>(<span class="number">-1</span>, <span class="number">-1</span>), <span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><h5 id="4、自定义卷积模糊"><a href="#4、自定义卷积模糊" class="headerlink" title="4、自定义卷积模糊"></a>4、自定义卷积模糊</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ilter2D方法<span class="built_in">filter2D</span>(</span><br><span class="line">Mat src, <span class="comment">//输入图像</span></span><br><span class="line">Mat dst, <span class="comment">// 模糊图像</span></span><br><span class="line"><span class="keyword">int</span> depth, <span class="comment">// 图像深度32/8</span></span><br><span class="line">Mat kernel, <span class="comment">// 卷积核/模板</span></span><br><span class="line">Point anchor, <span class="comment">// 锚点位置</span></span><br><span class="line"><span class="keyword">double</span> delta <span class="comment">// 计算出来的像素+delta</span></span><br><span class="line">)</span><br><span class="line">其中 kernel是可以自定义的卷积核</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="图片逐渐模糊代码"><a href="#图片逐渐模糊代码" class="headerlink" title="图片逐渐模糊代码"></a>图片逐渐模糊代码</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ksize = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">c = <span class="built_in">waitKey</span>(<span class="number">500</span>);</span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">char</span>)c == <span class="number">27</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">ksize = <span class="number">4</span> + (index % <span class="number">5</span>) * <span class="number">2</span>;</span><br><span class="line">Mat kernel = Mat::<span class="built_in">ones</span>(<span class="built_in">Size</span>(ksize, ksize), CV_32F) / (<span class="keyword">float</span>)(ksize*ksize);</span><br><span class="line"><span class="built_in">filter2D</span>(src, dst, <span class="number">-1</span>, kernel, <span class="built_in">Point</span>(<span class="number">-1</span>, <span class="number">-1</span>));</span><br><span class="line">index++;</span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;show&quot;</span>, dst);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="七、处理边缘"><a href="#七、处理边缘" class="headerlink" title="七、处理边缘"></a>七、处理边缘</h4><h5 id="1、卷积边界问题"><a href="#1、卷积边界问题" class="headerlink" title="1、卷积边界问题"></a>1、卷积边界问题</h5><blockquote><p>图像卷积的时候边界像素，不能被卷积操作，原因在于边界像素没有完全跟kernel重叠，所以当3x3滤波时候有1个像素的边缘没有被处理，5x5滤波的时候有2个像素的边缘没有被处理。</p></blockquote><h5 id="2、处理边缘"><a href="#2、处理边缘" class="headerlink" title="2、处理边缘"></a>2、处理边缘</h5><blockquote><p>在卷积开始之前增加边缘像素，填充的像素值为0或者RGB黑色，比如3x3在<br>四周各填充1个像素的边缘，这样就确保图像的边缘被处理，在卷积处理之<br>后再去掉这些边缘。openCV中默认的处理方法是： BORDER_DEFAULT，此外<br>常用的还有如下几种：</p></blockquote><ul><li>BORDER_CONSTANT – 填充边缘用指定像素值</li><li>BORDER_REPLICATE – 填充边缘像素用已知的边缘像素值。</li><li>BORDER_WRAP – 用另外一边的像素来补偿填充<h5 id="填充示例代码"><a href="#填充示例代码" class="headerlink" title="填充示例代码"></a>填充示例代码</h5></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Mat src, dst;</span><br><span class="line">src = <span class="built_in">imread</span>(<span class="string">&quot;C:\\Users\\15646\\Pictures\\雷军.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> top = (<span class="keyword">int</span>)(<span class="number">0.05</span>*src.rows);</span><br><span class="line"><span class="keyword">int</span> bottom = (<span class="keyword">int</span>)(<span class="number">0.05</span>*src.rows);</span><br><span class="line"><span class="keyword">int</span> left = (<span class="keyword">int</span>)(<span class="number">0.05</span>*src.cols);</span><br><span class="line"><span class="keyword">int</span> right = (<span class="keyword">int</span>)(<span class="number">0.05</span>*src.cols);</span><br><span class="line"></span><br><span class="line">RNG rng;</span><br><span class="line">Scalar color = <span class="built_in">Scalar</span>(rng.<span class="built_in">uniform</span>(<span class="number">0</span>, <span class="number">255</span>), rng.<span class="built_in">uniform</span>(<span class="number">0</span>, <span class="number">255</span>), rng.<span class="built_in">uniform</span>(<span class="number">0</span>, <span class="number">255</span>));</span><br><span class="line"><span class="comment">/*copyMakeBorder（</span></span><br><span class="line"><span class="comment">- Mat src, // 输入图像</span></span><br><span class="line"><span class="comment">-Mat dst, // 添加边缘图像</span></span><br><span class="line"><span class="comment">-int top, // 边缘长度，一般上下左右都取相同值，</span></span><br><span class="line"><span class="comment">-int bottom,</span></span><br><span class="line"><span class="comment">-int left,</span></span><br><span class="line"><span class="comment">-int right,</span></span><br><span class="line"><span class="comment">-int borderType // 边缘类型</span></span><br><span class="line"><span class="comment">- Scalar value</span></span><br><span class="line"><span class="comment">）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">copyMakeBorder</span>(src, dst, top, bottom, left, right, BORDER_CONSTANT,color);</span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;output img&quot;</span>, dst);</span><br></pre></td></tr></table></figure><h4 id="八、图像边缘提取–Sobel算子"><a href="#八、图像边缘提取–Sobel算子" class="headerlink" title="八、图像边缘提取–Sobel算子"></a>八、图像边缘提取–Sobel算子</h4><h5 id="1、卷积应用-图像边缘提取"><a href="#1、卷积应用-图像边缘提取" class="headerlink" title="1、卷积应用-图像边缘提取"></a>1、卷积应用-图像边缘提取</h5><ul><li>边缘是什么 – 是像素值发生跃迁的地方，是图像的显著特征之一，在图像特征提取、对象检测、模式识别等方面都有重要的作用。</li><li>如何捕捉/提取边缘 – 对图像求它的一阶导数</li><li><pre><code>  delta =  f(x) – f(x-1), delta越大，说明像素在X方向变化越大，边缘信号越强，</code></pre><h5 id="2、Sobel算子"><a href="#2、Sobel算子" class="headerlink" title="2、Sobel算子"></a>2、Sobel算子</h5></li><li>是离散微分算子（discrete differentiation operator），用来计算图像灰度的近似梯度</li><li>Soble算子功能集合高斯平滑和微分求导</li><li>又被称为一阶微分算子，求导算子，在水平和垂直两个方向上求导，得到图像X方向与Y方向梯度图像<h6 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h6><img src="http://myfile.buildworld.cn/sobel%E7%AE%97%E5%AD%90.jpg" alt="image"><h5 id="示例代码-4"><a href="#示例代码-4" class="headerlink" title="示例代码"></a>示例代码</h5></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">Mat src, dst;</span><br><span class="line">src = <span class="built_in">imread</span>(<span class="string">&quot;C:\\Users\\15646\\Pictures\\雷军.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">Mat gray_dst;</span><br><span class="line"><span class="built_in">GaussianBlur</span>(src, dst, <span class="built_in">Size</span>(<span class="number">3</span>, <span class="number">3</span>), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">cvtColor</span>(dst, gray_dst, CV_BGR2GRAY);</span><br><span class="line"></span><br><span class="line"><span class="comment">//图像边缘提取</span></span><br><span class="line">Mat xgrad, ygrad;</span><br><span class="line"><span class="comment">//获取x,y方向上的梯度图像</span></span><br><span class="line"><span class="comment">/*cv::Sobel(</span></span><br><span class="line"><span class="comment">InputArray Src // 输入图像</span></span><br><span class="line"><span class="comment">OutputArray dst// 输出图像，大小与输入图像一致</span></span><br><span class="line"><span class="comment">int depth // 输出图像深度. </span></span><br><span class="line"><span class="comment">Int dx.  // X方向，几阶导数</span></span><br><span class="line"><span class="comment">int dy // Y方向，几阶导数. </span></span><br><span class="line"><span class="comment">int ksize, SOBEL算子kernel大小，必须是1、3、5、7、</span></span><br><span class="line"><span class="comment">double scale = 1</span></span><br><span class="line"><span class="comment">double delta = 0</span></span><br><span class="line"><span class="comment">int borderType = BORDER_DEFAULT</span></span><br><span class="line"><span class="comment">)*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Sobel</span>(gray_dst, xgrad, CV_16S, <span class="number">1</span>, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">Sobel</span>(gray_dst, ygrad, CV_16S, <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">convertScaleAbs</span>(xgrad, xgrad); <span class="comment">//计算图像像素的绝对值再输出到此图像</span></span><br><span class="line"><span class="built_in">convertScaleAbs</span>(ygrad, ygrad);</span><br><span class="line"><span class="comment">//合成x,y方向上的梯度图像</span></span><br><span class="line">Mat res;</span><br><span class="line"><span class="built_in">addWeighted</span>(xgrad, <span class="number">0.5</span>, ygrad, <span class="number">0</span>, <span class="number">0</span>, res);</span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;res img&quot;</span>, res);</span><br><span class="line"></span><br><span class="line"><span class="comment">//手动合成</span></span><br><span class="line">Mat xygrad = <span class="built_in">Mat</span>(xgrad.<span class="built_in">size</span>(), xgrad.<span class="built_in">type</span>());</span><br><span class="line"><span class="keyword">int</span> height = ygrad.rows;</span><br><span class="line"><span class="keyword">int</span> width = xgrad.cols;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; height; row++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; width; col++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//将水平梯度和垂直梯度的值相加获取我们需要的值，合成图像</span></span><br><span class="line">xygrad.at&lt;uchar&gt;(row, col) = saturate_cast&lt;uchar&gt;(xgrad.at&lt;uchar&gt;(row, col) + ygrad.at&lt;uchar&gt;(row, col));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">namedWindow</span>(<span class="string">&quot;xygrad&quot;</span>, CV_WINDOW_AUTOSIZE);</span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;xygrad&quot;</span>, xygrad);</span><br></pre></td></tr></table></figure><h6 id="在OpenCV里面包含了增强的Scharr方法"><a href="#在OpenCV里面包含了增强的Scharr方法" class="headerlink" title="在OpenCV里面包含了增强的Scharr方法"></a>在OpenCV里面包含了增强的Scharr方法</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cv::<span class="built_in">Scharr</span> (</span><br><span class="line">InputArray Src <span class="comment">// 输入图像</span></span><br><span class="line">OutputArray dst<span class="comment">// 输出图像，大小与输入图像一致</span></span><br><span class="line"><span class="keyword">int</span> depth <span class="comment">// 输出图像深度. </span></span><br><span class="line">Int dx.  <span class="comment">// X方向，几阶导数</span></span><br><span class="line"><span class="keyword">int</span> dy <span class="comment">// Y方向，几阶导数. </span></span><br><span class="line"><span class="keyword">double</span> scale  = <span class="number">1</span></span><br><span class="line"><span class="keyword">double</span> delta = <span class="number">0</span></span><br><span class="line"><span class="keyword">int</span> borderType = BORDER_DEFAULT</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h4 id="九、图像边缘提取-Laplance算子-拉普拉斯算子"><a href="#九、图像边缘提取-Laplance算子-拉普拉斯算子" class="headerlink" title="九、图像边缘提取-Laplance算子(拉普拉斯算子)"></a>九、图像边缘提取-Laplance算子(拉普拉斯算子)</h4><h5 id="1、处理流程"><a href="#1、处理流程" class="headerlink" title="1、处理流程"></a>1、处理流程</h5><ul><li>高斯模糊 – 去噪声GaussianBlur()</li><li>转换为灰度图像cvtColor()</li><li>拉普拉斯 – 二阶导数计算Laplacian()</li><li>取绝对值convertScaleAbs()</li><li>显示结果</li></ul><h5 id="2、API使用cv-Laplacian"><a href="#2、API使用cv-Laplacian" class="headerlink" title="2、API使用cv::Laplacian"></a>2、API使用cv::Laplacian</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Laplacian</span>(</span><br><span class="line">InputArray src,</span><br><span class="line">OutputArray dst,</span><br><span class="line"><span class="keyword">int</span> depth, <span class="comment">//深度CV_16S</span></span><br><span class="line"><span class="keyword">int</span> kisze, <span class="comment">// 3</span></span><br><span class="line"><span class="keyword">double</span> scale = <span class="number">1</span>,</span><br><span class="line"><span class="keyword">double</span> delta =<span class="number">0.0</span>,</span><br><span class="line"><span class="keyword">int</span> borderType = <span class="number">4</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h6 id="示例代码-5"><a href="#示例代码-5" class="headerlink" title="示例代码"></a>示例代码</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">   Mat src, dst, edge_img;</span><br><span class="line">src = <span class="built_in">imread</span>(<span class="string">&quot;C:\\Users\\15646\\Pictures\\雷军.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">Mat gray_dst;</span><br><span class="line"><span class="built_in">GaussianBlur</span>(src, dst, <span class="built_in">Size</span>(<span class="number">3</span>, <span class="number">3</span>), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">cvtColor</span>(dst, gray_dst, CV_BGR2GRAY);</span><br><span class="line"></span><br><span class="line"><span class="built_in">threshold</span>(edge_img, edge_img, <span class="number">0</span>, <span class="number">255</span>, THRESH_OTSU | THRESH_BINARY);</span><br><span class="line"><span class="built_in">Laplacian</span>(gray_dst, edge_img, CV_16S, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">convertScaleAbs</span>(edge_img, edge_img);</span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;laplance img&quot;</span>, edge_img);</span><br></pre></td></tr></table></figure><h4 id="十、Canny边缘检测"><a href="#十、Canny边缘检测" class="headerlink" title="十、Canny边缘检测"></a>十、Canny边缘检测</h4><h5 id="1、Canny算法介绍"><a href="#1、Canny算法介绍" class="headerlink" title="1、Canny算法介绍"></a>1、Canny算法介绍</h5><ul><li>Canny是边缘检测算法，在1986年提出的。</li><li>是一个很好的边缘检测器</li><li>很常用也很实用的图像处理方法</li></ul><h5 id="2、Canny算法使用"><a href="#2、Canny算法使用" class="headerlink" title="2、Canny算法使用"></a>2、Canny算法使用</h5><ul><li>高斯模糊 - GaussianBlur</li><li>灰度转换 - cvtColor</li><li>计算梯度 – Sobel/Scharr</li><li>非最大信号抑制</li><li>高低阈值输出二值图像</li></ul><h5 id="3、Canny算法介绍-非最大信号抑制"><a href="#3、Canny算法介绍-非最大信号抑制" class="headerlink" title="3、Canny算法介绍 - 非最大信号抑制"></a>3、Canny算法介绍 - 非最大信号抑制</h5><p><img src="http://myfile.buildworld.cn/Canny%E7%AE%97%E6%B3%95-%E9%9D%9E%E6%9C%80%E5%A4%A7%E4%BF%A1%E5%8F%B7%E6%8A%91%E5%88%B6.jpg" alt="image"></p><h5 id="4、Canny算法介绍-高低阈值输出二值图像"><a href="#4、Canny算法介绍-高低阈值输出二值图像" class="headerlink" title="4、Canny算法介绍-高低阈值输出二值图像"></a>4、Canny算法介绍-高低阈值输出二值图像</h5><ul><li>T1， T2为阈值，凡是高于T2的都保留，凡是小于T1都丢弃，从高于T2的像素出发，凡是大于T1而且相互连接的，都保留。最终得到一个输出二值图像。</li><li>推荐的高低阈值比值为 T2: T1 = 3:1/2:1其中T2为高阈值，T1为低阈值</li></ul><h5 id="示例代码-6"><a href="#示例代码-6" class="headerlink" title="示例代码"></a>示例代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">Mat gray_dst, src;</span><br><span class="line"><span class="keyword">int</span> t1_value = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">int</span> max_value = <span class="number">255</span>;</span><br><span class="line">string output_title = <span class="string">&quot;output img&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CannyDemo</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">void</span>*)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">src = <span class="built_in">imread</span>(<span class="string">&quot;C:\\Users\\15646\\Pictures\\雷军.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">namedWindow</span>(output_title, CV_WINDOW_AUTOSIZE);</span><br><span class="line"><span class="comment">//灰度转换</span></span><br><span class="line"><span class="built_in">cvtColor</span>(src, gray_dst, CV_BGR2GRAY);</span><br><span class="line"><span class="built_in">createTrackbar</span>(<span class="string">&quot;Threshold Value&quot;</span>, output_title, &amp;t1_value, max_value, CannyDemo);</span><br><span class="line"><span class="built_in">CannyDemo</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CannyDemo</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">void</span>*)</span> </span>&#123;</span><br><span class="line">Mat edge_dst;</span><br><span class="line"><span class="comment">//高斯模糊</span></span><br><span class="line"><span class="built_in">GaussianBlur</span>(gray_dst, edge_dst, <span class="built_in">Size</span>(<span class="number">3</span>, <span class="number">3</span>), <span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"><span class="comment">/*Canny（</span></span><br><span class="line"><span class="comment">InputArray src, // 8-bit的输入图像</span></span><br><span class="line"><span class="comment">OutputArray edges,// 输出边缘图像， 一般都是二值图像，背景是黑色</span></span><br><span class="line"><span class="comment">double threshold1,// 低阈值，常取高阈值的1/2或者1/3</span></span><br><span class="line"><span class="comment">double threshold2,// 高阈值</span></span><br><span class="line"><span class="comment">int aptertureSize,// Soble算子的size，通常3x3，取值3</span></span><br><span class="line"><span class="comment">bool L2gradient // 选择 true表示是L2来归一化，否则用L1归一化,一般用L1</span></span><br><span class="line"><span class="comment">）*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Canny</span>(gray_dst, edge_dst, t1_value, t1_value * <span class="number">2</span>, <span class="number">3</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="built_in">imshow</span>(output_title, edge_dst);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机视觉 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV图像处理笔记（一）：图片基本操作</title>
      <link href="/2019/07/08/OpenCV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%9B%BE%E7%89%87%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/07/08/OpenCV%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%9B%BE%E7%89%87%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="一、基本介绍"><a href="#一、基本介绍" class="headerlink" title="一、基本介绍"></a>一、基本介绍</h4><h5 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h5><ul><li>OpenCV是计算机视觉开源库，主要算法涉及图像处理和机器学习相关方法。</li><li>是Intel公司贡献出来的，俄罗斯工程师贡献大部分C/C++带代码。</li><li>在多数图像处理相关的应用程序中被采用,BSD许可，可以免费应用在商业和研究领域</li><li>最新版本是OpenCV 3.1.0，当前SDK支持语言包括了Java、Python、IOS和Android版本。</li><li>官方主页： <a href="http://opencv.org/opencv-3-1.html">http://opencv.org/opencv-3-1.html</a></li><li>其它Matlab、Halcon<br><img src="http://myfile.buildworld.cn/opencv.png" alt="image"></li></ul><h5 id="2、核心模块"><a href="#2、核心模块" class="headerlink" title="2、核心模块"></a>2、核心模块</h5><ul><li>HighGUI部分</li><li>Image Process</li><li>2D Feature</li><li>Camera Calibration and 3D reconstruction</li><li>Video Analysis</li><li>Object Detection</li><li>Machine Learning</li><li>GPU加速</li></ul><h5 id="3、安装（vs2015环境-amp-amp-openCV-3-x）"><a href="#3、安装（vs2015环境-amp-amp-openCV-3-x）" class="headerlink" title="3、安装（vs2015环境 &amp;&amp; openCV 3.x）"></a>3、安装（vs2015环境 &amp;&amp; openCV 3.x）</h5><p><a href="https://blog.csdn.net/duwangthefirst/article/details/79452314">点击博客地址</a></p><p>==如果有报无法找到opencv_world343.dll的Error，请把C:\opencv\build\x64\vc14\bin下的opencv_world343.dll文件复制到C:\Windows 目录下即可==</p><h4 id="二、图像处理"><a href="#二、图像处理" class="headerlink" title="二、图像处理"></a>二、图像处理</h4><h5 id="1、加载、修改、保存图像"><a href="#1、加载、修改、保存图像" class="headerlink" title="1、加载、修改、保存图像"></a>1、加载、修改、保存图像</h5><h6 id="加载图像（用cv-imread）"><a href="#加载图像（用cv-imread）" class="headerlink" title="加载图像（用cv::imread）"></a>加载图像（用cv::imread）</h6><blockquote><p>imread功能是加载图像文件成为一个Mat对象，其中第一个参数表示图像文件名称</p></blockquote><blockquote><p>第二个参数，表示加载的图像是什么类型，支持常见的三个参数值</p></blockquote><ul><li>IMREAD_UNCHANGED (&lt;0) 表示加载原图，不做任何改变</li><li>IMREAD_GRAYSCALE ( 0)表示把原图作为灰度图像加载进来</li><li>IMREAD_COLOR (&gt;0) 表示把原图作为RGB图像加载进来</li></ul><p>==注意：== OpenCV支持JPG、PNG、TIFF等常见格式图像文件加载</p><h6 id="显示图像-cv-namedWindos-与cv-imshow"><a href="#显示图像-cv-namedWindos-与cv-imshow" class="headerlink" title="显示图像 (cv::namedWindos 与cv::imshow)"></a>显示图像 (cv::namedWindos 与cv::imshow)</h6><ul><li><p>namedWindos功能是创建一个OpenCV窗口，它是由OpenCV自动创建与释放，你无需取销毁它。</p></li><li><p>常见用法namedWindow(“Window Title”, WINDOW_AUTOSIZE)</p></li><li><p>WINDOW_AUTOSIZE会自动根据图像大小，显示窗口大小，不能人为改变窗口大小</p></li><li><p>WINDOW_NORMAL,跟QT集成的时候会使用，允许修改窗口大小。</p></li><li><p>imshow根据窗口名称显示图像到指定的窗口上去，第一个参数是窗口名称，第二参数是Mat对象</p></li></ul><h6 id="修改图像-cv-cvtColor"><a href="#修改图像-cv-cvtColor" class="headerlink" title="修改图像 (cv::cvtColor)"></a>修改图像 (cv::cvtColor)</h6><ul><li>cvtColor的功能是把图像从一个彩色空间转换到另外一个色彩空间，有三个参数，第一个参数表示源图像、第二参数表示色彩空间转换之后的图像、第三个参数表示源和目标色彩空间如：COLOR_BGR2HLS 、COLOR_BGR2GRAY 等</li><li>cvtColor( image, gray_image, COLOR_BGR2GRAY );</li></ul><h6 id="保存图像-cv-imwrite"><a href="#保存图像-cv-imwrite" class="headerlink" title="保存图像(cv::imwrite)"></a>保存图像(cv::imwrite)</h6><ul><li>保存图像文件到指定目录路径</li><li>只有8位、16位的PNG、JPG、Tiff文件格式而且是单通道或者三通道的BGR的图像才可以通过这种方式保存</li><li>保存PNG格式的时候可以保存透明通道的图片</li><li>可以指定压缩参数</li></ul><h5 id="2、矩阵的掩膜操作"><a href="#2、矩阵的掩膜操作" class="headerlink" title="2、矩阵的掩膜操作"></a>2、矩阵的掩膜操作</h5><p><img src="http://myfile.buildworld.cn/%E7%9F%A9%E9%98%B5%E6%8E%A9%E8%86%9C.png" alt="image"></p><h6 id="获取图像像素指针"><a href="#获取图像像素指针" class="headerlink" title="获取图像像素指针"></a>获取图像像素指针</h6><ul><li>CV_Assert(myImage.depth() == CV_8U); </li><li>Mat.ptr<uchar>(int i=0) 获取像素矩阵的指针，索引i表示第几行，从0开始计行数。</li><li>获得当前行指针const uchar*  current= myImage.ptr<uchar>(row );</li><li>获取当前像素点P(row, col)的像素值 p(row, col) =current[col]</li></ul><h6 id="像素范围处理saturate-cast"><a href="#像素范围处理saturate-cast" class="headerlink" title="像素范围处理saturate_cast"></a>像素范围处理saturate_cast<uchar></h6><ul><li>saturate_cast<uchar>（-100），返回 0。</li><li>saturate_cast<uchar>（288），返回255</li><li>saturate_cast<uchar>（100），返回100</li><li>这个函数的功能是确保RGB值得范围在0~255之间</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> ** argv)</span> </span>&#123;</span><br><span class="line">Mat src, dst;</span><br><span class="line">src = <span class="built_in">imread</span>(<span class="string">&quot;C:\\Users\\15646\\Pictures\\雷军.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!src.data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;no image\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">namedWindow</span>(<span class="string">&quot;input img&quot;</span>, CV_WINDOW_AUTOSIZE);</span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;input img&quot;</span>, src);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cols = (src.cols<span class="number">-1</span>)* src.<span class="built_in">channels</span>();</span><br><span class="line"><span class="keyword">int</span> offsetx = src.<span class="built_in">channels</span>();</span><br><span class="line"><span class="keyword">int</span> rows = src.rows;</span><br><span class="line">dst = <span class="built_in">Mat</span>(src.<span class="built_in">size</span>(), src.<span class="built_in">type</span>());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">1</span>; row &lt; rows<span class="number">-1</span>; row++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">const</span> uchar* current = src.ptr&lt;uchar&gt;(row);</span><br><span class="line"><span class="keyword">const</span> uchar* previous = src.ptr&lt;uchar&gt;(row - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> uchar* next = src.ptr&lt;uchar&gt;(row);</span><br><span class="line">uchar* output = dst.ptr&lt;uchar&gt;(row);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> col = offsetx; col&lt;cols;col++)</span><br><span class="line">&#123;</span><br><span class="line">output[col] = saturate_cast&lt;uchar&gt;(<span class="number">5</span> * current[col] - (current[col - offsetx] +</span><br><span class="line">current[col + offsetx] + previous[col] + next[col]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">namedWindow</span>(<span class="string">&quot;contrast img &quot;</span>, CV_WINDOW_AUTOSIZE);</span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;contrast img &quot;</span>, dst);</span><br><span class="line"><span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="函数调用filter2D功能"><a href="#函数调用filter2D功能" class="headerlink" title="函数调用filter2D功能"></a>函数调用filter2D功能</h6><ul><li>定义掩膜：Mat kernel = (Mat_<char>(3,3) &lt;&lt; 0, -1, 0, -1, 5, -1, 0, -1, 0);</li><li>filter2D( src, dst, src.depth(), kernel );其中src与dst是Mat类型变量、src.depth表示位图深度，有32、24、8等。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">   Mat kernel = (Mat_&lt;<span class="keyword">char</span>&gt;(<span class="number">3</span>, <span class="number">3</span>) &lt;&lt; <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">5</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">filter2D</span>(src,dst,src.<span class="built_in">depth</span>(),kernel);</span><br></pre></td></tr></table></figure><h5 id="3、Mat对象"><a href="#3、Mat对象" class="headerlink" title="3、Mat对象"></a>3、Mat对象</h5><h6 id="Mat对象与IplImage对象"><a href="#Mat对象与IplImage对象" class="headerlink" title="Mat对象与IplImage对象"></a>Mat对象与IplImage对象</h6><ul><li>Mat对象OpenCV2.0之后引进的图像数据结构、自动分配内存、不存在内存泄漏的问题，是面向对象的数据结构。分了两个部分，头部与数据部分</li><li>IplImage是从2001年OpenCV发布之后就一直存在，是C语言风格的数据结构，需要开发者自己分配与管理内存，对大的程序使用它容易导致内存泄漏问题</li></ul><p>==常用方法：==</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">copyTo</span><span class="params">(Mat mat)</span>    克隆</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">convertTo</span><span class="params">(Mat dst, <span class="keyword">int</span> type)</span> </span></span><br><span class="line"><span class="function">Mat <span class="title">clone</span><span class="params">()</span> 克隆</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">channels</span><span class="params">()</span>  获取通道</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">depth</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">empty</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function">uchar* <span class="title">ptr</span><span class="params">(i=<span class="number">0</span>)</span>  获取指针</span></span><br></pre></td></tr></table></figure><h6 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h6><ul><li>部分复制：一般情况下只会复制Mat对象的头和指针部分，不会复制数据部分</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Mat A= <span class="built_in">imread</span>(imgFilePath);</span><br><span class="line"><span class="function">Mat <span class="title">B</span><span class="params">(A)</span>  <span class="comment">// 只复制</span></span></span><br></pre></td></tr></table></figure><ul><li>完全复制：如果想把Mat对象的头部和数据部分一起复制，可以通过如下两个API实现</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mat F = A.<span class="built_in">clone</span>(); 或 Mat G; A.<span class="built_in">copyTo</span>(G);</span><br></pre></td></tr></table></figure><h6 id="四个要点"><a href="#四个要点" class="headerlink" title="四个要点"></a>四个要点</h6><ul><li>输出图像的内存是自动分配的</li><li>使用OpenCV的C++接口，不需要考虑内存分配问题</li><li>赋值操作和拷贝构造函数只会复制头部分</li><li>使用clone与copyTo两个函数实现数</li></ul><h6 id="Mat对象的创建"><a href="#Mat对象的创建" class="headerlink" title="Mat对象的创建"></a>Mat对象的创建</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cv::Mat::Mat构造函数</span><br><span class="line"><span class="function">Mat <span class="title">M</span><span class="params">(<span class="number">2</span>,<span class="number">2</span>,CV_8UC3, Scalar(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>))</span></span></span><br><span class="line"><span class="function">其中前两个参数分别表示行<span class="params">(row)</span>跟列<span class="params">(column)</span>、第三个CV_8UC3中的8表示每个通道占8位、U表示无符号、C表示Char类型、3表示通道数目是3，</span></span><br><span class="line"><span class="function">第四个参数是向量表示初始化每个像素值是多少，向量长度对应通道数目一致</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">创建多维数组cv::Mat::create</span></span><br><span class="line"><span class="function"> <span class="keyword">int</span> sz[3] </span>= &#123;<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>&#125;;     </span><br><span class="line"><span class="function">Mat  <span class="title">L</span><span class="params">(<span class="number">3</span>,sz, CV_8UC1, Scalar::all(<span class="number">0</span>))</span></span>;</span><br></pre></td></tr></table></figure><h6 id="定义小数组"><a href="#定义小数组" class="headerlink" title="定义小数组"></a>定义小数组</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Mat C = (Mat_&lt;<span class="keyword">double</span>&gt;(<span class="number">3</span>,<span class="number">3</span>) &lt;&lt; <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">5</span>, <span class="number">-1</span>, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>);     </span><br></pre></td></tr></table></figure><h6 id="MATLAB风格写法"><a href="#MATLAB风格写法" class="headerlink" title="MATLAB风格写法"></a>MATLAB风格写法</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   Mat m2;</span><br><span class="line">m2 = Mat::<span class="built_in">zeros</span>(<span class="number">2</span>, <span class="number">2</span>, CV_8UC1);</span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;demo2&quot;</span>, m2);</span><br></pre></td></tr></table></figure><h5 id="4、图像像素操作"><a href="#4、图像像素操作" class="headerlink" title="4、图像像素操作"></a>4、图像像素操作</h5><h6 id="读写像素"><a href="#读写像素" class="headerlink" title="读写像素"></a>读写像素</h6><ul><li>读一个GRAY像素点的像素值（CV_8UC1）</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Scalar intensity = img.at&lt;uchar&gt;(y, x); </span><br><span class="line">或者 Scalar intensity = img.at&lt;uchar&gt;(<span class="built_in">Point</span>(x, y));</span><br></pre></td></tr></table></figure><ul><li>读一个RGB像素点的像素值</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vec3f intensity = img.at&lt;Vec3f&gt;(y, x); </span><br><span class="line"><span class="keyword">float</span> blue = intensity.val[<span class="number">0</span>]; </span><br><span class="line"><span class="keyword">float</span> green = intensity.val[<span class="number">1</span>]; </span><br><span class="line"><span class="keyword">float</span> red = intensity.val[<span class="number">2</span>];</span><br></pre></td></tr></table></figure><h6 id="修改像素值"><a href="#修改像素值" class="headerlink" title="修改像素值"></a>修改像素值</h6><ul><li>灰度图像</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">img.at&lt;uchar&gt;(y, x) = <span class="number">128</span>;</span><br></pre></td></tr></table></figure><ul><li>RGB三通道图像<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">img.at&lt;Vec3b&gt;(y,x)[<span class="number">0</span>]=<span class="number">128</span>; <span class="comment">// blue</span></span><br><span class="line">img.at&lt;Vec3b&gt;(y,x)[<span class="number">1</span>]=<span class="number">128</span>; <span class="comment">// green</span></span><br><span class="line">img.at&lt;Vec3b&gt;(y,x)[<span class="number">2</span>]=<span class="number">128</span>; <span class="comment">// red</span></span><br></pre></td></tr></table></figure></li><li>空白图像赋值<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">img = <span class="built_in">Scalar</span>(<span class="number">0</span>);</span><br></pre></td></tr></table></figure></li><li>ROI选择<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Rect <span class="title">r</span><span class="params">(<span class="number">10</span>, <span class="number">10</span>, <span class="number">100</span>, <span class="number">100</span>)</span></span>; </span><br><span class="line">Mat smallImg = <span class="built_in">img</span>(r);</span><br></pre></td></tr></table></figure></li></ul><h6 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> ** argo)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Mat src, gray_src;</span><br><span class="line">src = <span class="built_in">imread</span>(<span class="string">&quot;C:\\Users\\Administrator\\Pictures\\girl.jpg&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (src.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt;<span class="string">&quot; read img error!&quot;</span>&lt;&lt; endl ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">namedWindow</span>(<span class="string">&quot;src img&quot;</span>, CV_WINDOW_AUTOSIZE);</span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;src img&quot;</span>, src);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cvtColor</span>(src, gray_src, CV_BGR2GRAY);</span><br><span class="line"><span class="comment">//namedWindow(&quot;gray_src img&quot;, CV_WINDOW_AUTOSIZE);</span></span><br><span class="line"><span class="comment">//imshow(&quot;gray_src img&quot;, gray_src);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> height = gray_src.rows;</span><br><span class="line"><span class="keyword">int</span> width = gray_src.cols;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> row =<span class="number">0</span>;row&lt;height;row++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>;  col&lt; width;col ++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//获取像素值</span></span><br><span class="line"><span class="keyword">int</span> gray = gray_src.at&lt;uchar&gt;(row, col);</span><br><span class="line">gray_src.at&lt;uchar&gt;(row, col) = <span class="number">255</span> - gray;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">namedWindow</span>(<span class="string">&quot;gray_src_change img&quot;</span>, CV_WINDOW_AUTOSIZE);</span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;gray_src_change img&quot;</span>, gray_src);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Mat操作</span></span><br><span class="line">Mat dst;</span><br><span class="line">dst.<span class="built_in">create</span>(src.<span class="built_in">size</span>(), src.<span class="built_in">type</span>());</span><br><span class="line">height = src.rows;</span><br><span class="line">width = src.cols;</span><br><span class="line"><span class="comment">//获取图片通道值</span></span><br><span class="line"><span class="keyword">int</span> nc = src.<span class="built_in">channels</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*for (int row = 0; row &lt; height; row++)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">for (int col = 0; col &lt; width; col++)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">if (nc ==1)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">int gray = gray_src.at&lt;uchar&gt;(row, col);</span></span><br><span class="line"><span class="comment">gray_src.at&lt;uchar&gt;(row, col) = 255 - gray;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">else if(nc == 3)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">int b = src.at&lt;Vec3b&gt;(row, col)[0];</span></span><br><span class="line"><span class="comment">int g = src.at&lt;Vec3b&gt;(row, col)[1];</span></span><br><span class="line"><span class="comment">int r = src.at&lt;Vec3b&gt;(row, col)[2];</span></span><br><span class="line"><span class="comment">dst.at&lt;Vec3b&gt;(row, col)[0] = 255 - b;</span></span><br><span class="line"><span class="comment">dst.at&lt;Vec3b&gt;(row, col)[1] = 255 - g;</span></span><br><span class="line"><span class="comment">dst.at&lt;Vec3b&gt;(row, col)[2] = 255 - r; </span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">&#125;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//上面的转换代码可以替换,效果相同</span></span><br><span class="line"><span class="built_in">bitwise_not</span>(src, dst);</span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;gray_src_change_by_mat img&quot;</span>, dst);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;enter anything&quot;</span> &lt;&lt; endl;</span><br><span class="line"><span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5、图像混合"><a href="#5、图像混合" class="headerlink" title="5、图像混合"></a>5、图像混合</h5><h6 id="理论-线性混合操作"><a href="#理论-线性混合操作" class="headerlink" title="理论-线性混合操作"></a>理论-线性混合操作</h6><p><a href="https://www.codecogs.com/eqnedit.php?latex=g\left&space;(&space;x&space;\right&space;)=\left&space;(&space;1-\alpha&space;\right&space;)f_{0}\left&space;(&space;x&space;\right&space;)&plus;\alpha&space;f_{1}\left&space;(&space;x&space;\right&space;)" target="_blank"><img src="https://latex.codecogs.com/gif.latex?g\left&space;(&space;x&space;\right&space;)=\left&space;(&space;1-\alpha&space;\right&space;)f_{0}\left&space;(&space;x&space;\right&space;)&plus;\alpha&space;f_{1}\left&space;(&space;x&space;\right&space;)" title="g\left ( x \right )=\left ( 1-\alpha \right )f_{0}\left ( x \right )+\alpha f_{1}\left ( x \right )" /></a></p><blockquote><p>其中a的取值范围为0~1之间</p></blockquote><h6 id="相关API-addWeighted"><a href="#相关API-addWeighted" class="headerlink" title="相关API (addWeighted)"></a>相关API (addWeighted)</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addWeighted</span><span class="params">(InputArray src1, </span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="keyword">double</span> alpha, </span></span></span><br><span class="line"><span class="params"><span class="function">                    InputArray src2,</span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="keyword">double</span> beta, </span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="keyword">double</span> gamma, </span></span></span><br><span class="line"><span class="params"><span class="function">                    OutputArray dst, </span></span></span><br><span class="line"><span class="params"><span class="function">                    <span class="keyword">int</span> dtype = <span class="number">-1</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">参数<span class="number">1</span>：输入图像Mat – src1</span><br><span class="line">参数<span class="number">2</span>：输入图像src1的alpha值</span><br><span class="line">参数<span class="number">3</span>：输入图像Mat – src2</span><br><span class="line">参数<span class="number">4</span>：输入图像src2的alpha值</span><br><span class="line">参数<span class="number">5</span>：gamma值</span><br><span class="line">参数<span class="number">6</span>：输出混合图像</span><br><span class="line"></span><br><span class="line">注意点：两张图像的大小和类型必须一致才可以</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置权重</span></span><br><span class="line"><span class="keyword">double</span> alpha = <span class="number">0.5</span>;</span><br><span class="line"><span class="keyword">if</span> (src1.rows==src2.rows &amp;&amp; src1.cols==src2.cols &amp;&amp; src1.<span class="built_in">type</span>() == src2.<span class="built_in">type</span>())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">addWeighted</span>(src1, alpha, src2, (<span class="number">1.0</span> - alpha), <span class="number">0.0</span>, dst);</span><br><span class="line"><span class="comment">//multiply(src1, src2, dst, 1.0); 图像相乘</span></span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;dst&quot;</span>, dst);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="6、调整图像亮度与对比度"><a href="#6、调整图像亮度与对比度" class="headerlink" title="6、调整图像亮度与对比度"></a>6、调整图像亮度与对比度</h5><ul><li>图像变换可以看作如下：<ul><li>像素变换 – 点操作</li><li>邻域操作 – 区域</li></ul></li><li>调整图像亮度和对比度属于像素变换-点操作</li></ul><p><a href="https://www.codecogs.com/eqnedit.php?latex=g\left&space;(&space;i,j\right&space;)=\alpha&space;f\left&space;(&space;i,j&space;\right&space;)&plus;\beta" target="_blank"><img src="https://latex.codecogs.com/gif.latex?g\left&space;(&space;i,j\right&space;)=\alpha&space;f\left&space;(&space;i,j&space;\right&space;)&plus;\beta" title="g\left ( i,j\right )=\alpha f\left ( i,j \right )+\beta" /></a></p><h6 id="重要的API"><a href="#重要的API" class="headerlink" title="重要的API"></a>重要的API</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Mat new_image = Mat::<span class="built_in">zeros</span>( image.<span class="built_in">size</span>(), image.<span class="built_in">type</span>() );  创建一张跟原图像大小和类型一致的空白图像、像素值初始化为<span class="number">0</span></span><br><span class="line"></span><br><span class="line">saturate_cast&lt;uchar&gt;(value)确保值大小范围为<span class="number">0</span>~<span class="number">255</span>之间</span><br><span class="line"></span><br><span class="line">Mat.at&lt;Vec3b&gt;(y,x)[index]=value 给每个像素点每个通道赋值</span><br></pre></td></tr></table></figure><h6 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> height = src1.rows; <span class="comment">//高度</span></span><br><span class="line"><span class="keyword">int</span> width = src1.cols; <span class="comment">//宽度</span></span><br><span class="line"><span class="keyword">double</span> alpha = <span class="number">0.8</span>; </span><br><span class="line"><span class="keyword">int</span> beta = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成一个空的大小和src1一样大的图</span></span><br><span class="line">output = Mat::<span class="built_in">zeros</span>(src1.<span class="built_in">size</span>(), src1.<span class="built_in">type</span>());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> row = <span class="number">0</span>; row &lt; height; row++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; width; col++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (src1.<span class="built_in">channels</span>()==<span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//像素点变换，换值,达到调整亮度和对比度的效果</span></span><br><span class="line"><span class="keyword">float</span> b = src1.at&lt;Vec3b&gt;(row, col)[<span class="number">0</span>]; <span class="comment">//blue</span></span><br><span class="line"><span class="keyword">float</span> g = src1.at&lt;Vec3b&gt;(row, col)[<span class="number">1</span>]; <span class="comment">//green</span></span><br><span class="line"><span class="keyword">float</span> r = src1.at&lt;Vec3b&gt;(row, col)[<span class="number">2</span>]; <span class="comment">//red</span></span><br><span class="line"></span><br><span class="line">output.at&lt;Vec3b&gt;(row, col)[<span class="number">0</span>] = saturate_cast&lt;uchar&gt;(alpha*b + beta);</span><br><span class="line">output.at&lt;Vec3b&gt;(row, col)[<span class="number">1</span>] = saturate_cast&lt;uchar&gt;(alpha*g + beta);</span><br><span class="line">output.at&lt;Vec3b&gt;(row, col)[<span class="number">2</span>] = saturate_cast&lt;uchar&gt;(alpha*r + beta);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(src1.<span class="built_in">channels</span>()==<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">output.at&lt;uchar&gt;(row, col) = saturate_cast&lt;uchar&gt;(alpha*src1.at&lt;uchar&gt;(row, col)+ beta);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h5 id="7、绘制形状与文字"><a href="#7、绘制形状与文字" class="headerlink" title="7、绘制形状与文字"></a>7、绘制形状与文字</h5><h6 id="使用cv-Point与cv-Scalar"><a href="#使用cv-Point与cv-Scalar" class="headerlink" title="使用cv::Point与cv::Scalar"></a>使用cv::Point与cv::Scalar</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Point表示<span class="number">2</span>D平面上一个点x,y</span><br><span class="line">Point p;</span><br><span class="line">p.x = <span class="number">10</span>;</span><br><span class="line">p.y = <span class="number">8</span>;</span><br><span class="line"> <span class="keyword">or</span></span><br><span class="line">p = <span class="built_in">Pont</span>(<span class="number">10</span>,<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">Scalar表示四个元素的向量</span><br><span class="line"><span class="built_in">Scalar</span>(a, b, c);<span class="comment">// a = blue, b = green, c = red表示RGB三个通道</span></span><br></pre></td></tr></table></figure><h6 id="绘制线、矩形、园、椭圆等基本几何形状"><a href="#绘制线、矩形、园、椭圆等基本几何形状" class="headerlink" title="绘制线、矩形、园、椭圆等基本几何形状"></a>绘制线、矩形、园、椭圆等基本几何形状</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">画线 cv::line （LINE_4\LINE_8\LINE_AA）</span><br><span class="line">画椭圆cv::ellipse</span><br><span class="line">画矩形cv::rectangle</span><br><span class="line">画圆cv::circle</span><br><span class="line">画填充cv::fillPoly</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>==示例代码==</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;opencv2\opencv.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</span><br><span class="line">Mat bgImage;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Myline</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyRectangle</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyEllipse</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyCircle</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyPolygon</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">bgImage = <span class="built_in">imread</span>(<span class="string">&quot;C:\\Users\\Administrator\\Pictures\\girl2.jpg&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (!bgImage.data)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Myline</span>();</span><br><span class="line"><span class="built_in">MyRectangle</span>();</span><br><span class="line"><span class="built_in">MyEllipse</span>();</span><br><span class="line"><span class="built_in">MyCircle</span>();</span><br><span class="line"><span class="built_in">MyPolygon</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;bgImage&quot;</span>, bgImage);</span><br><span class="line"></span><br><span class="line"><span class="built_in">waitKey</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//画线</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Myline</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Point p1 = <span class="built_in">Point</span>(<span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line">Point p2;</span><br><span class="line"></span><br><span class="line">p2.x = <span class="number">300</span>;</span><br><span class="line">p2.y = <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置颜色</span></span><br><span class="line">Scalar color = <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line"><span class="built_in">line</span>(bgImage, p1, p2, color, <span class="number">1</span>, LINE_8);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//画矩形</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyRectangle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Rect rect = <span class="built_in">Rect</span>(<span class="number">150</span>, <span class="number">500</span>, <span class="number">300</span>, <span class="number">300</span>);</span><br><span class="line">Scalar color = <span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">rectangle</span>(bgImage, rect, color, <span class="number">2</span>, LINE_8);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制椭圆</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyEllipse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Scalar color = <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">ellipse</span>(bgImage, </span><br><span class="line"><span class="built_in">Point</span>(bgImage.cols / <span class="number">2</span>, bgImage.rows / <span class="number">2</span>), </span><br><span class="line"><span class="built_in">Size</span>(bgImage.cols / <span class="number">4</span>, bgImage.rows / <span class="number">8</span>),</span><br><span class="line"><span class="number">90</span>,<span class="number">0</span>,<span class="number">360</span>,color,<span class="number">2</span>,LINE_8);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制圆</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyCircle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Scalar color = <span class="built_in">Scalar</span>(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>);</span><br><span class="line">Point center = <span class="built_in">Point</span>(bgImage.cols / <span class="number">2</span>, bgImage.rows / <span class="number">2</span>);</span><br><span class="line"><span class="built_in">circle</span>(bgImage, center, <span class="number">150</span>, color, <span class="number">2</span>, LINE_8);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绘制多边形</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyPolygon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Point pts[<span class="number">1</span>][<span class="number">5</span>];</span><br><span class="line">pts[<span class="number">0</span>][<span class="number">0</span>] = <span class="built_in">Point</span>(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">pts[<span class="number">0</span>][<span class="number">1</span>] = <span class="built_in">Point</span>(<span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line">pts[<span class="number">0</span>][<span class="number">2</span>] = <span class="built_in">Point</span>(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">pts[<span class="number">0</span>][<span class="number">3</span>] = <span class="built_in">Point</span>(<span class="number">200</span>, <span class="number">100</span>);</span><br><span class="line">pts[<span class="number">0</span>][<span class="number">4</span>] = <span class="built_in">Point</span>(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Point* ppts[] = &#123;pts[<span class="number">0</span>]&#125;;</span><br><span class="line"><span class="keyword">int</span> npt[] = &#123; <span class="number">5</span> &#125;;</span><br><span class="line">Scalar color = <span class="built_in">Scalar</span>(<span class="number">255</span>, <span class="number">140</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">fillPoly</span>(bgImage, ppts, npt, <span class="number">1</span>, color, LINE_8);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="随机数生成cv-RNG"><a href="#随机数生成cv-RNG" class="headerlink" title="随机数生成cv::RNG"></a>随机数生成cv::RNG</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">生成高斯随机数gaussian (double sigma)</span><br><span class="line">生成正态分布随机数uniform (int a, int b)</span><br></pre></td></tr></table></figure><p>==随机画线代码==</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RandomLineDemo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">RNG <span class="title">rng</span><span class="params">(<span class="number">12345</span>)</span></span>;</span><br><span class="line">Point pt1, pt2;</span><br><span class="line">Mat new_img = Mat::<span class="built_in">zeros</span>(bgImage.<span class="built_in">size</span>(), bgImage.<span class="built_in">type</span>());</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//随机生成的两个端点</span></span><br><span class="line">pt1.x = rng.<span class="built_in">uniform</span>(<span class="number">0</span>, bgImage.cols);</span><br><span class="line">pt2.x = rng.<span class="built_in">uniform</span>(<span class="number">0</span>, bgImage.cols);</span><br><span class="line">pt1.y = rng.<span class="built_in">uniform</span>(<span class="number">0</span>, bgImage.rows);</span><br><span class="line">pt2.y = rng.<span class="built_in">uniform</span>(<span class="number">0</span>, bgImage.rows);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> num = rng.<span class="built_in">uniform</span>(<span class="number">0</span>, <span class="number">255</span>);</span><br><span class="line"><span class="built_in">line</span>(new_img, pt1, pt2, <span class="built_in">CV_RGB</span>(rng.<span class="built_in">uniform</span>(<span class="number">0</span>, <span class="number">255</span>), rng.<span class="built_in">uniform</span>(<span class="number">0</span>, <span class="number">255</span>), rng.<span class="built_in">uniform</span>(<span class="number">0</span>, <span class="number">255</span>)), <span class="number">1</span>, LINE_8);</span><br><span class="line"></span><br><span class="line"><span class="comment">//延迟50ms</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">waitKey</span>(<span class="number">50</span>)&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">imshow</span>(<span class="string">&quot;随机生成图片&quot;</span>, new_img);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="绘制添加文字"><a href="#绘制添加文字" class="headerlink" title="绘制添加文字"></a>绘制添加文字</h6><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">putText函数 中设置<span class="built_in">fontFace</span>(cv::HersheyFonts), </span><br><span class="line"></span><br><span class="line"><span class="built_in">putText</span>(bgImage, <span class="string">&quot;Hello World&quot;</span>, <span class="built_in">Point</span>(<span class="number">300</span>, <span class="number">300</span>), CV_FONT_BLACK, <span class="number">1.0</span>, <span class="built_in">CV_RGB</span>(<span class="number">255</span>, <span class="number">69</span>, <span class="number">0</span>), <span class="number">1</span>, LINE_8);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机视觉 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端模块化开发--React框架（四）：高级应用（redux）</title>
      <link href="/2019/05/17/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91-React%E6%A1%86%E6%9E%B6%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E9%AB%98%E7%BA%A7%E5%BA%94%E7%94%A8%EF%BC%88redux%EF%BC%89/"/>
      <url>/2019/05/17/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91-React%E6%A1%86%E6%9E%B6%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E9%AB%98%E7%BA%A7%E5%BA%94%E7%94%A8%EF%BC%88redux%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="https://github.com/MiChongGET/react-redux">代码地址</a></p><h6 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save redux</span><br></pre></td></tr></table></figure><h4 id="一、-redux要点"><a href="#一、-redux要点" class="headerlink" title="一、 redux要点"></a>一、 redux要点</h4><pre><code>1. redux理解2. redux相关API3. redux核心概念(3个)4. redux工作流程5. 使用redux及相关库编码</code></pre><h5 id="1-redux理解"><a href="#1-redux理解" class="headerlink" title="1. redux理解"></a>1. redux理解</h5><pre><code>什么?: redux是专门做状态管理的独立第3方库, 不是react插件作用?: 对应用中状态进行集中式的管理(写/读)开发: 与react-redux, redux-thunk等插件配合使用</code></pre><h4 id="二、redux相关API"><a href="#二、redux相关API" class="headerlink" title="二、redux相关API"></a>二、redux相关API</h4><blockquote><pre><code>redux中包含: createStore(), applyMiddleware(), combineReducers()</code></pre></blockquote><blockquote><pre><code>store对象: getState(), dispatch(), subscribe()react-redux: &lt;Provider&gt;, connect()()</code></pre></blockquote><h5 id="1、-createStore"><a href="#1、-createStore" class="headerlink" title="1、 createStore()"></a>1、 createStore()</h5><ul><li><ol><li>作用: <blockquote><p>创建包含指定reducer的store对象</p></blockquote></li></ol></li><li><ol start="2"><li>编码:</li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createStore&#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> counter <span class="keyword">from</span> <span class="string">&#x27;./reducers/counter&#x27;</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(counter)</span><br></pre></td></tr></table></figure><h5 id="2、store对象"><a href="#2、store对象" class="headerlink" title="2、store对象"></a>2、store对象</h5><ul><li>1)作用:<br>redux库最核心的管理对象</li><li>2)它内部维护着:<br> <code>state</code><pre><code> `reducer`</code></pre></li><li>3)核心方法:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">      getState()</span><br><span class="line">dispatch(action)</span><br><span class="line">subscribe(listener)</span><br></pre></td></tr></table></figure><ul><li>4)编码:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">      store.getState()</span><br><span class="line">store.dispatch(&#123;<span class="attr">type</span>:<span class="string">&#x27;INCREMENT&#x27;</span>, number&#125;)</span><br><span class="line">store.subscribe(render)</span><br></pre></td></tr></table></figure><h5 id="3、applyMiddleware"><a href="#3、applyMiddleware" class="headerlink" title="3、applyMiddleware()"></a>3、applyMiddleware()</h5><ul><li>1)作用:<br><code>应用上基于redux的中间件(插件库)</code></li><li>2)编码:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createStore, applyMiddleware&#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">&#x27;redux-thunk&#x27;</span>  <span class="comment">// redux异步中间件</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">  counter,</span><br><span class="line">  applyMiddleware(thunk) <span class="comment">// 应用上异步中间件</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h5 id="4、combineReducers"><a href="#4、combineReducers" class="headerlink" title="4、combineReducers()"></a>4、combineReducers()</h5><ul><li>1)作用:<br><code>合并多个reducer函数</code></li><li>2)编码:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> combineReducers(&#123;</span><br><span class="line">  user,</span><br><span class="line">  chatUser,</span><br><span class="line">  chat</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="三、redux核心概念-3个"><a href="#三、redux核心概念-3个" class="headerlink" title="三、redux核心概念(3个)"></a>三、redux核心概念(3个)</h4><pre><code>action:     默认是对象(同步action), &#123;type: &#39;xxx&#39;, data: value&#125;, 需要通过对应的actionCreator产生,     它的值也可以是函数(异步action), 需要引入redux-thunk才可以reducer    根据老的state和指定的action, 返回一个新的state    不能修改老的statestore    redux最核心的管理对象    内部管理着: state和reducer    提供方法: getState(), dispatch(action), subscribe(listener)</code></pre><h5 id="1、action"><a href="#1、action" class="headerlink" title="1、action:"></a>1、action:</h5><ul><li>1)标识要执行行为的对象</li><li>2)包含2个方面的属性</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.type: 标识属性, 值为字符串, 唯一, 必要属性</span><br><span class="line">b.xxx: 数据属性, 值类型任意, 可选属性</span><br></pre></td></tr></table></figure><ul><li>3)例子:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">      <span class="keyword">const</span> action = &#123;</span><br><span class="line"><span class="attr">type</span>: <span class="string">&#x27;INCREMENT&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>4)Action Creator(创建Action的工厂函数)<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> increment = <span class="function">(<span class="params">number</span>) =&gt;</span> (&#123;<span class="attr">type</span>: <span class="string">&#x27;INCREMENT&#x27;</span>, <span class="attr">data</span>: number&#125;)</span><br></pre></td></tr></table></figure></li></ul><h5 id="2、reducer"><a href="#2、reducer" class="headerlink" title="2、reducer"></a>2、reducer</h5><ul><li>1)根据老的state和action, 产生新的state的纯函数</li><li>2)样例</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">counter</span>(<span class="params">state = <span class="number">0</span>, action</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;INCREMENT&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> state + action.data</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;DECREMENT&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> state - action.data</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>3)注意</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.返回一个新的状态</span><br><span class="line">b.不要修改原来的状态</span><br></pre></td></tr></table></figure><h5 id="4、store"><a href="#4、store" class="headerlink" title="4、store"></a>4、store</h5><ul><li>1)将state,action与reducer联系在一起的对象</li><li>2)如何得到此对象?</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">      <span class="keyword">import</span> &#123;createStore&#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span></span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">&#x27;./reducers&#x27;</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer)</span><br></pre></td></tr></table></figure><ul><li>3)此对象的功能?</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">      getState(): 得到state</span><br><span class="line">dispatch(action): 分发action, 触发reducer调用, 产生新的state</span><br><span class="line">subscribe(listener): 注册监听, 当产生了新的state时, 自动调用</span><br></pre></td></tr></table></figure><h4 id="四、redux工作流程"><a href="#四、redux工作流程" class="headerlink" title="四、redux工作流程"></a>四、redux工作流程</h4><p><img src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016091802.jpg"><br><img src="D:\File\GitFile\MiChongGET.github.io\source_posts\2R5G8bG.png"></p><h4 id="五、-使用redux及相关库编码"><a href="#五、-使用redux及相关库编码" class="headerlink" title="五、 使用redux及相关库编码"></a>五、 使用redux及相关库编码</h4><pre><code>需要引入的库:     redux    react-redux    redux-thunk    redux-devtools-extension(这个只在开发时需要)redux文件夹:     action-types.js    actions.js    reducers.js    store.js组件分2类:     ui组件(components): 不使用redux相关PAI    容器组件(containers): 使用redux相关API</code></pre><h5 id="1、-react-redux"><a href="#1、-react-redux" class="headerlink" title="1、 react-redux"></a>1、 react-redux</h5><h6 id="下载依赖包"><a href="#下载依赖包" class="headerlink" title="下载依赖包"></a>下载依赖包</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save react-redux</span><br></pre></td></tr></table></figure><h6 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h6><ul><li>1)一个react插件库</li><li>2)专门用来简化react应用中使用redux</li></ul><h6 id="React-Redux将所有组件分成两大类"><a href="#React-Redux将所有组件分成两大类" class="headerlink" title="React-Redux将所有组件分成两大类"></a>React-Redux将所有组件分成两大类</h6><ul><li>1)UI组件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a.只负责 UI 的呈现，不带有任何业务逻辑</span><br><span class="line">b.通过props接收数据(一般数据和函数)</span><br><span class="line">c.不使用任何 Redux 的 API</span><br><span class="line">d.一般保存在components文件夹下</span><br></pre></td></tr></table></figure><ul><li>2)容器组件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.负责管理数据和业务逻辑，不负责UI的呈现</span><br><span class="line">b.使用 Redux 的 API</span><br><span class="line">c.一般保存在containers文件夹下</span><br></pre></td></tr></table></figure><h6 id="相关API"><a href="#相关API" class="headerlink" title="相关API"></a>相关API</h6><ul><li>1)Provider<br>  让所有组件都可以得到state数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span></span><br><span class="line">&lt;/Provider&gt;</span><br></pre></td></tr></table></figure><ul><li>2)connect()<br>  用于包装 UI 组件生成容器组件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span></span><br><span class="line">      connect(</span><br><span class="line">        mapStateToprops,</span><br><span class="line">        mapDispatchToProps</span><br><span class="line">      )(Counter)</span><br></pre></td></tr></table></figure><ul><li><p>3)mapStateToprops()<br>  将外部的数据（即state对象）转换为UI组件的标签属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mapStateToprops = <span class="function"><span class="keyword">function</span> (<span class="params">state</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">     <span class="attr">value</span>: state</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>4)mapDispatchToProps()</p><pre><code>  将分发action的函数转换为UI组件的标签属性  简洁语法可以直接指定为actions对象或包含多个action方法的对象</code></pre></li></ul><h5 id="2、redux异步编程"><a href="#2、redux异步编程" class="headerlink" title="2、redux异步编程"></a>2、redux异步编程</h5><h6 id="下载redux插件-异步中间件"><a href="#下载redux插件-异步中间件" class="headerlink" title="下载redux插件(异步中间件)"></a>下载redux插件(异步中间件)</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save redux-thunk</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> React </tag>
            
            <tag> redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端模块化开发--React框架（三）：应用进阶（react-router4&amp;&amp;antd框架）</title>
      <link href="/2019/05/16/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91-React%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%BA%94%E7%94%A8%E8%BF%9B%E9%98%B6%EF%BC%88react-router4-antd%E6%A1%86%E6%9E%B6%EF%BC%89/"/>
      <url>/2019/05/16/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91-React%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%89%EF%BC%89%EF%BC%9A%E5%BA%94%E7%94%A8%E8%BF%9B%E9%98%B6%EF%BC%88react-router4-antd%E6%A1%86%E6%9E%B6%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="https://github.com/MiChongGET/react-router">GitHub地址</a></p><h4 id="一、react-router4"><a href="#一、react-router4" class="headerlink" title="一、react-router4"></a>一、react-router4</h4><h5 id="1、react-router4理解"><a href="#1、react-router4理解" class="headerlink" title="1、react-router4理解"></a>1、react-router4理解</h5><ul><li><ol><li>   react的一个插件库</li></ol></li><li><ol start="2"><li>   专门用来实现一个SPA应用</li></ol></li><li><ol start="3"><li>   基于react的项目基本都会用到此库</li></ol></li></ul><h5 id="2、SPA的理解"><a href="#2、SPA的理解" class="headerlink" title="2、SPA的理解"></a>2、SPA的理解</h5><ul><li><ol><li>  单页Web应用（single page web application，SPA</li></ol></li><li><ol start="2"><li>   整个应用只有一个完整的页面</li></ol></li><li><ol start="3"><li>   点击页面中的链接不会刷新页面, 本身也不会向服务器发请求</li></ol></li><li><ol start="4"><li>   当点击路由链接时, 只会做页面的局部更新</li></ol></li><li><ol start="5"><li>   数据都需要通过ajax请求获取, 并在前端异步展现</li></ol></li></ul><h5 id="3、路由的理解"><a href="#3、路由的理解" class="headerlink" title="3、路由的理解"></a>3、路由的理解</h5><ul><li><ol><li>什么是路由?</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- a.一个路由就是一个映射关系(key:value)</span><br><span class="line">- b.key为路由路径, value可能是function/component</span><br></pre></td></tr></table></figure><ul><li><ol start="2"><li>路由分类</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- a.后台路由: node服务器端路由, value是function, 用来处理客户端提交的请求并返回一个响应数据</span><br><span class="line">- b.前台路由: 浏览器端路由, value是component, 当请求的是路由path时, 浏览器端前没有发送http请求, 但界面会更新显示对应的组件</span><br></pre></td></tr></table></figure><ul><li><ol start="3"><li>后台路由</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- a.注册路由: router.get(path, function(req, res))</span><br><span class="line">- b.当node接收到一个请求时, 根据请求路径找到匹配的路由, 调用路由中的函数来处理请求, 返回响应数据</span><br></pre></td></tr></table></figure><ul><li><ol start="4"><li>   前端路由</li></ol></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- a.注册路由: &lt;Route path=&quot;/about&quot; component=&#123;About&#125;&gt;</span><br><span class="line">- b.当浏览器的hash变为#about时, 当前路由组件就会变为About组件</span><br></pre></td></tr></table></figure><h5 id="4、前端路由"><a href="#4、前端路由" class="headerlink" title="4、前端路由"></a>4、前端路由</h5><h6 id="history库"><a href="#history库" class="headerlink" title="history库"></a>history库</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.网址: https://github.com/ReactTraining/history</span><br><span class="line">b.管理浏览器会话历史(history)的工具库</span><br><span class="line">c.包装的是原生BOM中window.history和window.location.hash</span><br></pre></td></tr></table></figure><p>代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>history test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/test1&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;return push(&#x27;/test1&#x27;)&quot;</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&quot;push(&#x27;/test2&#x27;)&quot;</span>&gt;</span>push test2<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&quot;back()&quot;</span>&gt;</span>回退<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&quot;forword()&quot;</span>&gt;</span>前进<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&quot;replace(&#x27;/test3&#x27;)&quot;</span>&gt;</span>replace test3<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/history/4.7.2/history.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> history = History.createBrowserHistory() <span class="comment">// 方式一、a.得到封装window.history的管理对象</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// history = History.createHashHistory() // 方式二、得到封装window.location.hash的管理对象</span></span></span><br><span class="line"><span class="javascript">    <span class="comment">// console.log(history)</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">push</span> (<span class="params">to</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//添加一个新的历史记录</span></span></span><br><span class="line"><span class="javascript">      history.push(to)</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">back</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//回退到上一个历史记录</span></span></span><br><span class="line"><span class="javascript">      history.goBack()</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">forword</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//前进到下一个历史记录</span></span></span><br><span class="line"><span class="javascript">      history.goForward()</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">replace</span> (<span class="params">to</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">//用一个新的历史记录替换当前的记录</span></span></span><br><span class="line"><span class="javascript">      history.replace(to)</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//监视历史记录的变化</span></span></span><br><span class="line"><span class="javascript">    history.listen(<span class="function">(<span class="params">location</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;请求路由路径变化了&#x27;</span>, location)</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="5、react-router相关API"><a href="#5、react-router相关API" class="headerlink" title="5、react-router相关API"></a>5、react-router相关API</h5><h6 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1)&lt;BrowserRouter&gt;</span><br><span class="line">2)&lt;HashRouter&gt;</span><br><span class="line">3)&lt;Route&gt;</span><br><span class="line">4)&lt;Redirect&gt;</span><br><span class="line">5)&lt;Link&gt;</span><br><span class="line">6)&lt;NavLink&gt;</span><br><span class="line">7)&lt;Switch&gt;</span><br><span class="line"></span><br><span class="line">//其它</span><br><span class="line">1)history对象</span><br><span class="line">2)match对象</span><br><span class="line">3)withRouter函数</span><br></pre></td></tr></table></figure><h5 id="6、使用"><a href="#6、使用" class="headerlink" title="6、使用"></a>6、使用</h5><h6 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//下载版本4的，如果不指定会下载最新的5版本</span><br><span class="line">npm install --save react-router-dom@4</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">h2</span>&gt;</span>home router component<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">className</span>=<span class="string">&#x27;nav nav-tabs&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/home/news&#x27;</span>&gt;</span>News<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#x27;/home/message&#x27;</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/home/news&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;News&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/home/message&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;Message&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">Redirect</span> <span class="attr">to</span>=<span class="string">&#x27;/home/news&#x27;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">Switch</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br></pre></td></tr></table></figure><h5 id="7、向路由组件传递数据"><a href="#7、向路由组件传递数据" class="headerlink" title="7、向路由组件传递数据"></a>7、向路由组件传递数据</h5><h6 id="路由设置"><a href="#路由设置" class="headerlink" title="路由设置"></a>路由设置</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;</span></span><br><span class="line"><span class="xml">            this.state.messages.map((message, index) =&gt; (</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#123;/*<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;</span>`/<span class="attr">home</span>/<span class="attr">message</span>/<span class="attr">detail</span>/$&#123;<span class="attr">message.id</span>&#125;`&#125;&gt;</span>&#123;message.title&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span>*/&#125;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">MyNavLink</span> <span class="attr">to</span>=<span class="string">&#123;</span>`/<span class="attr">home</span>/<span class="attr">message</span>/<span class="attr">detail</span>/$&#123;<span class="attr">message.id</span>&#125;`&#125;&gt;</span>&#123;message.title&#125;<span class="tag">&lt;/<span class="name">MyNavLink</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&#x27;btn btn-info&#x27;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.showDetailByPush(message.id)&#125;&gt;查看<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&#x27;btn btn-danger&#x27;</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.showDetailByReplace(message.id)&#125;&gt;查看<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            ))</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">Route</span> <span class="attr">path</span>=<span class="string">&#x27;/home/message/detail/:id&#x27;</span> <span class="attr">component</span>=<span class="string">&#123;MsgDetail&#125;/</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h6 id="接收数据"><a href="#接收数据" class="headerlink" title="接收数据"></a>接收数据</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">       <span class="comment">//获取上面id的数值</span></span><br><span class="line">       <span class="keyword">const</span> &#123;id&#125; = <span class="built_in">this</span>.props.match.params</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">&#x27;id:&#x27;</span> + id)</span><br><span class="line">       <span class="keyword">const</span> message = <span class="built_in">this</span>.state.msg_detail.find(<span class="function">(<span class="params">m</span>) =&gt;</span> m.id === id * <span class="number">1</span>)</span><br><span class="line">       <span class="built_in">console</span>.log(message)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> (</span><br><span class="line">           <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">               <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                   <span class="tag">&lt;<span class="name">li</span>&gt;</span>ID:&#123;message.id&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                   <span class="tag">&lt;<span class="name">li</span>&gt;</span>TITLE:&#123;message.title&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                   <span class="tag">&lt;<span class="name">li</span>&gt;</span>CONTENT:&#123;message.content&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">               <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">       )</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h5 id="8、props里面的几个方法"><a href="#8、props里面的几个方法" class="headerlink" title="8、props里面的几个方法"></a>8、props里面的几个方法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">showDetailByPush = <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//在原来的基础上添加</span></span><br><span class="line">    <span class="built_in">this</span>.props.history.push(<span class="string">`/home/message/detail/<span class="subst">$&#123;id&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line">showDetailByReplace = <span class="function">(<span class="params">id</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//删除原来的之后再添加</span></span><br><span class="line">    <span class="built_in">this</span>.props.history.replace(<span class="string">`/home/message/detail/<span class="subst">$&#123;id&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">back = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//返回</span></span><br><span class="line">    <span class="built_in">this</span>.props.history.goBack()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">forward = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//前进，下一个</span></span><br><span class="line">    <span class="built_in">this</span>.props.history.goForward()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二、ant-design前端UI框架"><a href="#二、ant-design前端UI框架" class="headerlink" title="二、ant design前端UI框架"></a>二、ant design前端UI框架</h4><p><img src="https://gw.alipayobjects.com/zos/rmsportal/KDpgvguMpGfqaHPjicRK.svg"></p><h6 id="官网地址"><a href="#官网地址" class="headerlink" title="官网地址"></a>官网地址</h6><blockquote><p>蚂蚁金服的前端UI框架，基于react实现的，详情看官方文档</p></blockquote><p><a href="https://ant.design/index-cn">https://ant.design/index-cn</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> React </tag>
            
            <tag> react-router4 </tag>
            
            <tag> antd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端模块化开发--React框架（二）：脚手架&amp;&amp;网络请求框架</title>
      <link href="/2019/05/14/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91-React%E6%A1%86%E6%9E%B6%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E8%84%9A%E6%89%8B%E6%9E%B6-%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E6%A1%86%E6%9E%B6/"/>
      <url>/2019/05/14/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91-React%E6%A1%86%E6%9E%B6%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E8%84%9A%E6%89%8B%E6%9E%B6-%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="https://github.com/MiChongGET/react-app">GitHub地址</a></p><h4 id="一、React脚手架"><a href="#一、React脚手架" class="headerlink" title="一、React脚手架"></a>一、React脚手架</h4><h5 id="1、react脚手架说明"><a href="#1、react脚手架说明" class="headerlink" title="1、react脚手架说明"></a>1、react脚手架说明</h5><ul><li>1)xxx脚手架: 用来帮助程序员快速创建一个基于xxx库的模板项目<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- a.包含了所有需要的配置</span><br><span class="line">- b.指定好了所有的依赖</span><br><span class="line">- c.可以直接安装/编译/运行一个简单效果</span><br></pre></td></tr></table></figure></li><li>2)react提供了一个用于创建react项目的脚手架库: create-react-app</li><li>3)项目的整体技术架构为:  react + webpack + es6 + eslint</li><li>4)使用脚手架开发的项目的特点: 模块化, 组件化, 工程化</li></ul><h5 id="2、使用命令"><a href="#2、使用命令" class="headerlink" title="2、使用命令"></a>2、使用命令</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//设置安装全局</span><br><span class="line">npm install -g create-react-app</span><br><span class="line">//创建名称为hello-react的脚手架</span><br><span class="line">create-react-app hello-react</span><br><span class="line">//进入到项目的目录</span><br><span class="line">cd hello-react</span><br><span class="line">//运行项目</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure><h5 id="3、react脚手架项目结构"><a href="#3、react脚手架项目结构" class="headerlink" title="3、react脚手架项目结构"></a>3、react脚手架项目结构</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ReactNews</span><br><span class="line">|--node_modules---第三方依赖模块文件夹</span><br><span class="line">|--public</span><br><span class="line">|-- index.html-----------------主页面</span><br><span class="line">|--scripts</span><br><span class="line">|-- build.js-------------------build打包引用配置</span><br><span class="line">|-- start.js-------------------start运行引用配置</span><br><span class="line">|--src------------源码文件夹</span><br><span class="line">|--components-----------------react组件</span><br><span class="line">|--index.js-------------------应用入口js</span><br><span class="line">|--.gitignore------git版本管制忽略的配置</span><br><span class="line">|--package.json----应用包配置文件 </span><br><span class="line">|--README.md-------应用描述说明的readme文件</span><br></pre></td></tr></table></figure><h5 id="4、WebStorm配置代码模板"><a href="#4、WebStorm配置代码模板" class="headerlink" title="4、WebStorm配置代码模板"></a>4、WebStorm配置代码模板</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> $<span class="title">className</span>$ <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span>(</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二、react-ajax"><a href="#二、react-ajax" class="headerlink" title="二、react ajax"></a>二、react ajax</h4><h5 id="1、说明"><a href="#1、说明" class="headerlink" title="1、说明"></a>1、说明</h5><ul><li>1)React本身只关注于界面, 并不包含发送ajax请求的代码</li><li>2)前端应用需要通过ajax请求与后台进行交互(json数据)</li><li>3)react应用中需要集成第三方ajax库(或自己封装)</li></ul><h5 id="2、常用的ajax库"><a href="#2、常用的ajax库" class="headerlink" title="2、常用的ajax库"></a>2、常用的ajax库</h5><ul><li>1)jQuery: 比较重, 如果需要另外引入不建议使用</li><li>2)axios: 轻量级, 建议使用</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- a.封装XmlHttpRequest对象的ajax</span><br><span class="line">- b. promise风格</span><br><span class="line">- c.可以用在浏览器端和node服务器端</span><br></pre></td></tr></table></figure><ul><li>3)fetch: 原生函数, 但老版本浏览器不支持</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- a.不再使用XmlHttpRequest对象提交ajax请求</span><br><span class="line">- b.为了兼容低版本的浏览器, 可以引入兼容库fetch.js</span><br></pre></td></tr></table></figure><h5 id="3、axios"><a href="#3、axios" class="headerlink" title="3、axios"></a>3、axios</h5><p><a href="https://github.com/axios/axios">GitHub</a></p><h6 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install axios</span></span><br></pre></td></tr></table></figure><h6 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h6><ul><li>GET方式<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用axios发送异步的ajax请求</span></span><br><span class="line">        <span class="keyword">const</span> url = <span class="string">&#x27;https://api.github.com/search/repositories&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        axios.get(url,&#123;</span><br><span class="line">            <span class="attr">params</span>:&#123;</span><br><span class="line">                <span class="attr">q</span>:<span class="string">&#x27;r&#x27;</span>,</span><br><span class="line">                <span class="attr">sort</span>:<span class="string">&#x27;starts&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> result = response.data</span><br><span class="line">            <span class="keyword">const</span> &#123;owner=&#123;&#125;&#125; = result.items[<span class="number">0</span>]</span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;<span class="attr">avatar_url</span>: owner.avatar_url,<span class="attr">repoName</span>:<span class="string">&#x27;logo&#x27;</span>&#125;);</span><br><span class="line">        &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(error)</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line"><span class="comment">// Want to use async/await? Add the `async` keyword to your outer function/method.</span></span><br><span class="line">        <span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getUser</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> response = <span class="keyword">await</span> axios.get(<span class="string">&#x27;/user?ID=12345&#x27;</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(response);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="built_in">console</span>.error(error);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br></pre></td></tr></table></figure></li><li>POST方式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">axios.post(<span class="string">&#x27;/user&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&#x27;Flintstone&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h5 id="4、fetch"><a href="#4、fetch" class="headerlink" title="4、fetch"></a>4、fetch</h5><p><a href="https://github.github.io/fetch/">GitHub</a></p><h6 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">fetchRequire</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">&#x27;https://api.github12.com/search/repositories?q=r&amp;sort=stars&#x27;</span>;</span><br><span class="line">    fetch(url).then(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> response.json()</span><br><span class="line">    &#125;).then(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;owner=&#123;&#125;&#125; = data.items[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;<span class="attr">avatar_url</span>: owner.avatar_url,<span class="attr">repoName</span>:<span class="string">&#x27;logo&#x27;</span>&#125;)</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">e</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//请求错误的时候</span></span><br><span class="line">        <span class="built_in">console</span>.log(e+<span class="string">&#x27;==&gt;请求错误&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fetch(url, &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">  <span class="attr">body</span>: <span class="built_in">JSON</span>.stringify(data),</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="三、重要总结"><a href="#三、重要总结" class="headerlink" title="三、重要总结"></a>三、重要总结</h4><h5 id="1、组件间通信"><a href="#1、组件间通信" class="headerlink" title="1、组件间通信"></a>1、组件间通信</h5><h6 id="方式一-通过props传递"><a href="#方式一-通过props传递" class="headerlink" title="方式一: 通过props传递"></a>方式一: 通过props传递</h6><ul><li>1)共同的数据放在父组件上, 特有的数据放在自己组件内部(state)</li><li>2)通过props可以传递一般数据和函数数据, 只能一层一层传递</li><li>3)一般数据–&gt;父组件传递数据给子组件–&gt;子组件读取数据</li><li>4)函数数据–&gt;子组件传递数据给父组件–&gt;子组件调用函数</li></ul><h6 id="方式二-使用消息订阅-subscribe-发布-publish-机制"><a href="#方式二-使用消息订阅-subscribe-发布-publish-机制" class="headerlink" title="方式二: 使用消息订阅(subscribe)-发布(publish)机制"></a>方式二: 使用消息订阅(subscribe)-发布(publish)机制</h6><ul><li>1)工具库: PubSubJS</li><li>2)下载: npm install pubsub-js –save</li><li>3)使用: </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> PubSub <span class="keyword">from</span> <span class="string">&#x27;pubsub-js&#x27;</span> <span class="comment">//引入</span></span><br><span class="line"><span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  PubSub.subscribe(<span class="string">&#x27;delete&#x27;</span>, <span class="function">(<span class="params">msg,data</span>)=&gt;</span>&#123; &#125;); <span class="comment">//订阅  </span></span><br><span class="line">&#125;</span><br><span class="line">PubSub.publish(<span class="string">&#x27;delete&#x27;</span>, data) <span class="comment">//发布消息</span></span><br></pre></td></tr></table></figure><h6 id="方式三-redux"><a href="#方式三-redux" class="headerlink" title="方式三: redux"></a>方式三: redux</h6><p>暂时不介绍</p><h5 id="2、事件监听理解"><a href="#2、事件监听理解" class="headerlink" title="2、事件监听理解"></a>2、事件监听理解</h5><h6 id="原生DOM事件"><a href="#原生DOM事件" class="headerlink" title="原生DOM事件"></a>原生DOM事件</h6><ul><li>1)绑定事件监听</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.事件名(类型): 只有有限的几个, 不能随便写</span><br><span class="line">b.回调函数</span><br></pre></td></tr></table></figure><ul><li>2)触发事件</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.用户操作界面</span><br><span class="line">b.事件名(类型)</span><br><span class="line">c.数据()</span><br></pre></td></tr></table></figure><h6 id="自定义事件-消息机制"><a href="#自定义事件-消息机制" class="headerlink" title="自定义事件(消息机制)"></a>自定义事件(消息机制)</h6><ul><li>1)绑定事件监听</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.事件名(类型): 任意</span><br><span class="line">b.回调函数: 通过形参接收数据, 在函数体处理事件</span><br></pre></td></tr></table></figure><ul><li>2)触发事件(编码)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.事件名(类型): 与绑定的事件监听的事件名一致</span><br><span class="line">b.数据: 会自动传递给回调函数</span><br></pre></td></tr></table></figure><h5 id="3、ES6常用新语法"><a href="#3、ES6常用新语法" class="headerlink" title="3、ES6常用新语法"></a>3、ES6常用新语法</h5><ul><li>1)定义常量/变量:  const/let</li><li>2)解构赋值: let {a, b} = this.props   import {aa} from ‘xxx’</li><li>3)对象的简洁表达: {a, b}</li><li>4)箭头函数: </li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a.常用场景</span><br><span class="line">    * 组件的自定义方法: xxx = () =&gt; &#123;&#125;</span><br><span class="line">    * 参数匿名函数</span><br><span class="line">b.优点:</span><br><span class="line">    * 简洁</span><br><span class="line">    * 没有自己的this,使用引用this查找的是外部this</span><br></pre></td></tr></table></figure><ul><li>5)扩展(三点)运算符: 拆解对象(const MyProps = {}, &lt;Xxx {…MyProps}&gt;)</li><li>6)类:  class/extends/constructor/super</li><li>7)ES6模块化:  export default | import</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> React </tag>
            
            <tag> 脚手架 </tag>
            
            <tag> axios </tag>
            
            <tag> fetch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端模块化开发--React框架（一）: 入门和面向组件编程</title>
      <link href="/2019/05/10/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91-React%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%85%A5%E9%97%A8%E5%92%8C%E9%9D%A2%E5%90%91%E7%BB%84%E4%BB%B6%E7%BC%96%E7%A8%8B/"/>
      <url>/2019/05/10/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91-React%E6%A1%86%E6%9E%B6%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E5%85%A5%E9%97%A8%E5%92%8C%E9%9D%A2%E5%90%91%E7%BB%84%E4%BB%B6%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="http://myfile.buildworld.cn/react.jpg" alt="React"></p><p><a href="https://react.docschina.org/">React中文官网</a></p><h4 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h4><h5 id="1、特点"><a href="#1、特点" class="headerlink" title="1、特点"></a>1、特点</h5><ul><li>1)Declarative(声明式编码)</li><li>2)Component-Based(组件化编码)</li><li>3)Learn Once, Write Anywhere(支持客户端与服务器渲染)</li><li>4)高效</li><li>5)单向数据流</li></ul><h5 id="2、React高效的原因"><a href="#2、React高效的原因" class="headerlink" title="2、React高效的原因"></a>2、React高效的原因</h5><ul><li>1)虚拟(virtual)DOM, 不总是直接操作DOM</li><li>2)DOM Diff算法, 最小化页面重绘</li></ul><h5 id="3、相关的js核心库"><a href="#3、相关的js核心库" class="headerlink" title="3、相关的js核心库"></a>3、相关的js核心库</h5><ul><li>1)react.js: React的核心库</li><li>2)react-dom.js: 提供操作DOM的react扩展库</li><li>3)babel.min.js: 解析JSX语法代码转为纯JS语法代码的库</li></ul><h5 id="4、简单的例子"><a href="#4、简单的例子" class="headerlink" title="4、简单的例子"></a>4、简单的例子</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="javascript"> <span class="comment">//声明babel</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//创建虚拟dom元素</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> dom = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello React<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//将虚拟DOM渲染到真实的DOM中</span></span></span><br><span class="line"><span class="javascript">        ReactDOM.render(dom, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>));</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="5、虚拟DOM"><a href="#5、虚拟DOM" class="headerlink" title="5、虚拟DOM"></a>5、虚拟DOM</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1)React提供了一些API来创建一种 `特别` 的一般js对象</span><br><span class="line">    a.var element = React.createElement(&#x27;h1&#x27;, &#123;id:&#x27;myTitle&#x27;&#125;,&#x27;hello&#x27;)</span><br><span class="line">    b.上面创建的就是一个简单的虚拟DOM对象</span><br><span class="line">2)虚拟DOM对象最终都会被React转换为真实的DOM</span><br><span class="line">3)我们编码时基本只需要操作react的虚拟DOM相关数据, react会转换为真实DOM变化而更新界面</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt; <span class="comment">//声明babel</span></span><br><span class="line">        <span class="comment">//创建虚拟dom元素</span></span><br><span class="line">        <span class="keyword">let</span> id = <span class="string">&#x27;qjzxzxd&#x27;</span>;</span><br><span class="line">     </span><br><span class="line">        <span class="comment">//三种创建dom元素的方法</span></span><br><span class="line">        <span class="keyword">const</span> dom = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello React<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">        <span class="keyword">const</span> dom2 = React.createElement(<span class="string">&#x27;h2&#x27;</span>,&#123;<span class="attr">id</span>:<span class="string">&#x27;name&#x27;</span>&#125;,<span class="string">&#x27;MiChong&#x27;</span>)</span><br><span class="line">        <span class="keyword">const</span> test3 =<span class="xml"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">&#123;id.toUpperCase()&#125;</span>&gt;</span>&#123;id.toUpperCase()&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//将虚拟DOM渲染到真实的DOM中</span></span><br><span class="line">        ReactDOM.render(dom, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>));</span><br><span class="line">        ReactDOM.render(dom2,<span class="built_in">document</span>.getElementById(<span class="string">&#x27;name&#x27;</span>));</span><br><span class="line">        ReactDOM.render(test3,<span class="built_in">document</span>.getElementById(<span class="string">&#x27;test3&#x27;</span>));</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="二、JSX（JavaScript-XML）介绍和使用"><a href="#二、JSX（JavaScript-XML）介绍和使用" class="headerlink" title="二、JSX（JavaScript XML）介绍和使用"></a>二、JSX（JavaScript XML）介绍和使用</h4><h5 id="1、介绍"><a href="#1、介绍" class="headerlink" title="1、介绍"></a>1、介绍</h5><ul><li>1)全称:  <code>JavaScript XML</code></li><li>2)react定义的一种类似于XML的JS扩展语法: XML+JS</li><li>3)作用: 用来创建react虚拟DOM(元素)对象</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a.var ele = &lt;h1&gt;Hello JSX!&lt;/h1&gt;</span><br><span class="line">b.注意1: 它不是字符串, 也不是HTML/XML标签</span><br><span class="line">c.注意2: 它最终产生的就是一个JS对象</span><br></pre></td></tr></table></figure><ul><li><p>4)标签名任意: HTML标签或其它标签</p></li><li><p>5)标签属性任意: HTML标签属性或其它</p></li><li><p>6)基本语法规则</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.遇到 &lt;开头的代码, 以标签的语法解析: html同名标签转换为html同名元素, 其它标签需要特别解析</span><br><span class="line">b.遇到以 &#123; 开头的代码，以JS语法解析: 标签中的js代码必须用&#123; &#125;包含</span><br></pre></td></tr></table></figure></li><li><p>7)babel.js的作用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.浏览器不能直接解析JSX代码, 需要babel转译为纯JS的代码才能运行</span><br><span class="line">b.只要用了JSX，都要加上type=&quot;text/babel&quot;, 声明需要babel来处理</span><br></pre></td></tr></table></figure><h5 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h5><h6 id="将数据的数组转为标签的数组"><a href="#将数据的数组转为标签的数组" class="headerlink" title="将数据的数组转为标签的数组"></a>将数据的数组转为标签的数组</h6></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//数组集合</span></span><br><span class="line">    <span class="keyword">let</span> names = [<span class="string">&#x27;java&#x27;</span>,<span class="string">&#x27;vue&#x27;</span>,<span class="string">&#x27;React&#x27;</span>,<span class="string">&#x27;Angular&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新建DOM元素</span></span><br><span class="line">    <span class="keyword">let</span> ul = (<span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123;</span></span><br><span class="line"><span class="xml">            names.map((name,index)=&gt;<span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>)</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//渲染DOM</span></span><br><span class="line">    ReactDOM.render(ul,<span class="built_in">document</span>.getElementById(<span class="string">&#x27;names&#x27;</span>));</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="三、模块化"><a href="#三、模块化" class="headerlink" title="三、模块化"></a>三、模块化</h4><h5 id="1-模块"><a href="#1-模块" class="headerlink" title="1.模块"></a>1.模块</h5><ul><li>1)理解: 向外提供特定功能的js程序, 一般就是一个js文件</li><li>2)为什么:  js代码更多更复杂</li><li>3)作用: 复用js, 简化js的编写, 提高js运行效率<h5 id="2-组件"><a href="#2-组件" class="headerlink" title="2.组件"></a>2.组件</h5></li><li>1)理解: 用来实现特定(局部)功能效果的代码集合(html/css/js)</li><li>2)为什么: 一个界面的功能更复杂</li><li>3)作用: 复用编码, 简化项目编码, 提高运行效率<h5 id="3-模块化"><a href="#3-模块化" class="headerlink" title="3.模块化"></a>3.模块化</h5></li><li>当应用的js都以模块来编写的, 这个应用就是一个模块化的应用</li></ul><h4 id="四、React面向组件编程"><a href="#四、React面向组件编程" class="headerlink" title="四、React面向组件编程"></a>四、React面向组件编程</h4><h5 id="1、自定义组件-Component"><a href="#1、自定义组件-Component" class="headerlink" title="1、自定义组件(Component)"></a>1、自定义组件(Component)</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、定义组件</span></span><br><span class="line">    <span class="comment">//方式1：工厂函数组件（简单组件）</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">MyComponent</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>MiChong<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式2、ES6类组件（复杂组件）</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyComponent2</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>qjzxzxd<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、渲染组件标签</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">MyComponent</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test1&#x27;</span>));</span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">MyComponent2</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test2&#x27;</span>));</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2、组件三大属性"><a href="#2、组件三大属性" class="headerlink" title="2、组件三大属性"></a>2、组件三大属性</h5><p>==<code>state</code>==</p><ul><li>1)state是组件对象最重要的属性, 值是对象(可以包含多个数据)</li><li>2)组件被称为”状态机”, 通过更新组件的state来更新对应的页面显示(重新渲染组件)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需求：自定义组件</span></span><br><span class="line"><span class="comment">     * 1、显示h2标题，初始文本为：你喜欢我</span></span><br><span class="line"><span class="comment">     * 2、点击标题更新为：我喜欢你</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">        <span class="comment">//1、定义组件</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Like</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(props);</span><br><span class="line">            <span class="comment">//初始化状态</span></span><br><span class="line">            <span class="built_in">this</span>.state = &#123;</span><br><span class="line">                <span class="attr">isLikeMe</span>: <span class="literal">false</span></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将新增方法中的this强制绑定为组件对象</span></span><br><span class="line">            <span class="built_in">this</span>.handleClick = <span class="built_in">this</span>.handleClick.bind(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//新添加的方法：内部的this默认不是组件对象</span></span><br><span class="line">        <span class="comment">//设置点击事件处理</span></span><br><span class="line">        <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="comment">//得到状态</span></span><br><span class="line">            <span class="keyword">const</span> isLikeMe = !<span class="built_in">this</span>.state.isLikeMe;</span><br><span class="line">            <span class="comment">//更新状态</span></span><br><span class="line">            <span class="built_in">this</span>.setState (&#123;isLikeMe&#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重写组件类方法</span></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="comment">//读取状态</span></span><br><span class="line">            <span class="keyword">const</span> &#123;isLikeMe&#125; = <span class="built_in">this</span>.state;</span><br><span class="line">            <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>&#123;isLikeMe ? &#x27;你喜欢我&#x27; : &#x27;我喜欢你&#x27;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、渲染组件标签</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Like</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>));</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>==<code>props</code>==</p><ul><li>1)每个组件对象都会有props(properties的简写)属性</li><li>2)组件标签的所有属性都保存在props中</li><li>3)通过标签属性从组件外向组件内传递变化的数据</li><li>4)注意: 组件内部不要修改props数据</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需求: 自定义用来显示一个人员信息的组件</span></span><br><span class="line"><span class="comment">     1). 姓名必须指定</span></span><br><span class="line"><span class="comment">     2). 如果性别没有指定, 默认为男</span></span><br><span class="line"><span class="comment">     3). 如果年龄没有指定, 默认为18</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//1、定义组件</span></span><br><span class="line">    <span class="comment">//方式一、使用工厂</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名：&#123;props.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄：&#123;props.age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>性别：&#123;props.sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//方式二、使用ES6类组件</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名：&#123;this.props.name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄：&#123;this.props.age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">li</span>&gt;</span>性别：&#123;this.props.sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置自定义标签的默认值</span></span><br><span class="line">    Person.defaultProps = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;米虫&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">        <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//设置自定义组件属性值的类型和必要性(要导入prop-types.js)</span></span><br><span class="line">    Person.propTypes = &#123;</span><br><span class="line">        <span class="attr">name</span>: PropTypes.string.isRequired,</span><br><span class="line">        <span class="attr">age</span>: PropTypes.number</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、渲染组件标签</span></span><br><span class="line">    <span class="keyword">const</span> p1 = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;MiChong&#x27;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">        <span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">//ReactDOM.render(&lt;Person name=&#123;p1.name&#125; age=&#123;p1.age&#125; sex=&#123;p1.sex&#125;/&gt;, document.getElementById(&#x27;test&#x27;));</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Person</span> &#123;<span class="attr">...p1</span>&#125;/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>));</span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">age</span>=<span class="string">&#123;p1.age&#125;</span> <span class="attr">sex</span>=<span class="string">&#123;p1.sex&#125;/</span>&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test2&#x27;</span>));</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>==<code>refs</code>==</p><ul><li>1)组件内的标签都可以定义ref属性来标识自己</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.&lt;input type=&quot;text&quot; ref=&#123;input =&gt; this.msgInput = input&#125;/&gt;</span><br><span class="line">b.回调函数在组件初始化渲染完或卸载时自动调用</span><br></pre></td></tr></table></figure><ul><li>2)在组件中可以通过this.msgInput来得到对应的真实DOM元素</li><li>3)作用: 通过ref获取组件内容特定标签对象, 进行读取其相关数据<h6 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h6></li><li>1)通过onXxx属性指定组件的事件处理函数(注意大小写)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.React使用的是自定义(合成)事件, 而不是使用的原生DOM事件</span><br><span class="line">b.React中的事件是通过事件委托方式处理的(委托给组件最外层的元素)</span><br></pre></td></tr></table></figure><ul><li>2)通过event.target得到发生事件的DOM元素对象<h6 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;input onFocus=&#123;<span class="built_in">this</span>.handleClick&#125;/&gt;</span><br><span class="line"><span class="function"><span class="title">handleFocus</span>(<span class="params">event</span>)</span> &#123;</span><br><span class="line">    event.target  <span class="comment">//返回input对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、定义组件</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//固定格式</span></span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">super</span>(props);</span><br><span class="line">            <span class="comment">//添加自定义方法</span></span><br><span class="line">            <span class="built_in">this</span>.showInput = <span class="built_in">this</span>.showInput.bind(<span class="built_in">this</span>);</span><br><span class="line">            <span class="built_in">this</span>.handleBlur = <span class="built_in">this</span>.handleBlur.bind(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自定义事件方法</span></span><br><span class="line">        <span class="function"><span class="title">showInput</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> input = <span class="built_in">this</span>.refs.content;</span><br><span class="line">            <span class="comment">//第一种写法的输出</span></span><br><span class="line">            <span class="comment">//alert(input.value);</span></span><br><span class="line">            <span class="comment">//第二种写法的输出</span></span><br><span class="line">            alert(<span class="built_in">this</span>.input.value);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="function"><span class="title">handleBlur</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">            alert(event.target.value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    //第一种写法</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;content&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                    //第二种写法</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;input</span>=&gt;</span>this.input = input&#125;/&gt;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.showInput&#125;</span>&gt;</span>提示输入<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;失去焦点提示内容&quot;</span> <span class="attr">onBlur</span>=<span class="string">&#123;this.handleBlur&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">MyComponent</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;test&#x27;</span>));</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="3、组件的组合"><a href="#3、组件的组合" class="headerlink" title="3、组件的组合"></a>3、组件的组合</h5><p>代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、自定义组件</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(props);</span><br><span class="line">            <span class="built_in">this</span>.state = &#123;</span><br><span class="line">                <span class="attr">todos</span>: [<span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;go&#x27;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.addTodos = <span class="built_in">this</span>.addTodos.bind(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">addTodos</span>(<span class="params">todo</span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;todos&#125; = <span class="built_in">this</span>.state;</span><br><span class="line">            todos.unshift(todo)</span><br><span class="line">            <span class="comment">//更新状态</span></span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;todos&#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;todos&#125; = <span class="built_in">this</span>.state;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Sample TODO Add<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">Add</span> <span class="attr">count</span>=<span class="string">&#123;todos.length&#125;</span> <span class="attr">addTodos</span>=<span class="string">&#123;this.addTodos&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">List</span> <span class="attr">todos</span>=<span class="string">&#123;todos&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Add</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(props);</span><br><span class="line">            <span class="built_in">this</span>.add = <span class="built_in">this</span>.add.bind(<span class="built_in">this</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//自定义方法</span></span><br><span class="line">        <span class="function"><span class="title">add</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="comment">//1、读取输入的数据</span></span><br><span class="line">            <span class="keyword">const</span> inputValue = <span class="built_in">this</span>.addInput.value.trim();</span><br><span class="line">            <span class="comment">//2、列表添加数据</span></span><br><span class="line">            <span class="built_in">this</span>.props.addTodos(inputValue)</span><br><span class="line">            <span class="comment">//3、清除输入</span></span><br><span class="line">            <span class="built_in">this</span>.addInput.value = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;input</span> =&gt;</span> this.addInput = input&#125;/&gt;</span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.add&#125;</span>&gt;</span>添加&#123;this.props.count&#125;<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">List</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123;todos&#125; = <span class="built_in">this</span>.props;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    &#123;todos.map((todo, index) =&gt; <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;todo&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span>)&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、渲染到真实的DOM中去</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;sample&#x27;</span>))</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="4、收集表单数据"><a href="#4、收集表单数据" class="headerlink" title="4、收集表单数据"></a>4、收集表单数据</h5><ul><li>1)问题: 在react应用中, 如何收集表单输入数据</li><li>2)包含表单的组件分类</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a.受控组件: 表单项输入数据能自动收集成状态</span><br><span class="line">b.非受控组件: 需要时才手动读取表单输入框中的数据</span><br></pre></td></tr></table></figure><p>示意代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需求: 自定义包含表单的组件</span></span><br><span class="line"><span class="comment">     1. 输入用户名密码后, 点击登陆提示输入信息</span></span><br><span class="line"><span class="comment">     2. 不提交表单</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">        <span class="comment">//1、自定义组件</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(props);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//初始化状态</span></span><br><span class="line">            <span class="built_in">this</span>.state = &#123;</span><br><span class="line">                <span class="attr">pwd</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">this</span>.handleSubmit = <span class="built_in">this</span>.handleSubmit.bind(<span class="built_in">this</span>);</span><br><span class="line">            <span class="built_in">this</span>.handleChange = <span class="built_in">this</span>.handleChange.bind(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">handleSubmit</span>(<span class="params">event</span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> name = <span class="built_in">this</span>.inputName.value;</span><br><span class="line">            <span class="keyword">const</span> &#123;pwd&#125; = <span class="built_in">this</span>.state;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//阻止时间的默认行为（提交）</span></span><br><span class="line">            event.preventDefault()</span><br><span class="line">            alert(<span class="string">`用户名<span class="subst">$&#123;name&#125;</span>,密码<span class="subst">$&#123;pwd&#125;</span>`</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">handleChange</span>(<span class="params">event</span>)</span> &#123;</span><br><span class="line">            <span class="comment">//读取密码</span></span><br><span class="line">            <span class="keyword">const</span> pwd = event.target.value;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//更新状态</span></span><br><span class="line">            <span class="built_in">this</span>.setState(&#123;pwd&#125;)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/test&quot;</span> <span class="attr">onSubmit</span>=<span class="string">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">ref</span>=<span class="string">&#123;input</span> =&gt;</span> this.inputName = input&#125;/&gt;</span></span><br><span class="line"><span class="xml">                    密码： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&#123;this.state.pwd&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;this.handleChange&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、渲染到真实的DOM中去</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">LoginForm</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;sample&#x27;</span>))</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="5、组件的生命周期"><a href="#5、组件的生命周期" class="headerlink" title="5、组件的生命周期"></a>5、组件的生命周期</h5><p><img src="http://myfile.buildworld.cn/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png" alt="react生命周期"></p><h6 id="1、生命周期流程"><a href="#1、生命周期流程" class="headerlink" title="1、生命周期流程:"></a>1、生命周期流程:</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a.第一次初始化渲染显示: ReactDOM.render()</span><br><span class="line">      * constructor(): 创建对象初始化state</span><br><span class="line">      * componentWillMount() : 将要插入回调</span><br><span class="line">      * render() : 用于插入虚拟DOM回调</span><br><span class="line">      * componentDidMount() : 已经插入回调</span><br><span class="line">b.每次更新state: this.setSate()</span><br><span class="line">      * componentWillUpdate() : 将要更新回调</span><br><span class="line">      * render() : 更新(重新渲染)</span><br><span class="line">      * componentDidUpdate() : 已经更新回调</span><br><span class="line">c.移除组件: ReactDOM.unmountComponentAtNode(containerDom)</span><br><span class="line">      * componentWillUnmount() : 组件将要被移除回调</span><br></pre></td></tr></table></figure><h6 id="2、-重要的勾子"><a href="#2、-重要的勾子" class="headerlink" title="2、 重要的勾子"></a>2、 重要的勾子</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1)render(): 初始化渲染或更新渲染调用</span><br><span class="line">2)componentDidMount(): 开启监听, 发送ajax请求</span><br><span class="line">3)componentWillUnmount(): 做一些收尾工作, 如: 清理定时器</span><br><span class="line">4)componentWillReceiveProps(): 后面需要时讲</span><br></pre></td></tr></table></figure><h6 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需求: 自定义组件</span></span><br><span class="line"><span class="comment">     1. 让指定的文本做显示/隐藏的渐变动画</span></span><br><span class="line"><span class="comment">     2. 切换持续时间为2S</span></span><br><span class="line"><span class="comment">     3. 点击按钮从界面中移除组件界面</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">        <span class="comment">//1、自定义组件</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Life</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">            <span class="built_in">super</span>(props);</span><br><span class="line">            <span class="built_in">this</span>.state = &#123;</span><br><span class="line">                <span class="attr">opacity</span>: <span class="number">1</span></span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="built_in">this</span>.destroyComponent = <span class="built_in">this</span>.destroyComponent.bind(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">destroyComponent</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            ReactDOM.unmountComponentAtNode(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;sample&#x27;</span>))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置循环定时器</span></span><br><span class="line">        <span class="function"><span class="title">componentDidMount</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.intervalId = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">let</span> &#123;opacity&#125; = <span class="built_in">this</span>.state</span><br><span class="line">                opacity -= <span class="number">0.1</span></span><br><span class="line">                <span class="keyword">if</span> (opacity &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    opacity = <span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 更新状态</span></span><br><span class="line">                <span class="built_in">this</span>.setState(&#123;opacity&#125;)</span><br><span class="line">                <span class="built_in">console</span>.log(opacity)</span><br><span class="line">            &#125;.bind(<span class="built_in">this</span>), <span class="number">200</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//组件将要被移除回调</span></span><br><span class="line">        <span class="function"><span class="title">componentWillUnmount</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(<span class="built_in">this</span>.intervalId);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> &#123;opacity&#125; = <span class="built_in">this</span>.state;</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&#123;&#123;opacity:</span> <span class="attr">opacity</span>&#125;&#125;&gt;</span>&#123;this.props.content&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.destroyComponent&#125;</span>&gt;</span>change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、渲染到真实的DOM中去</span></span><br><span class="line">    ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Life</span> <span class="attr">content</span>=<span class="string">&quot;准时下班&quot;</span>/&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;sample&#x27;</span>))</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="6、虚拟DOM与DOM-Diff算法"><a href="#6、虚拟DOM与DOM-Diff算法" class="headerlink" title="6、虚拟DOM与DOM Diff算法"></a>6、虚拟DOM与DOM Diff算法</h5><p><img src="http://myfile.buildworld.cn/diff%E7%AE%97%E6%B3%95%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="image"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  验证:</span></span><br><span class="line"><span class="comment">  虚拟DOM+DOM Diff算法: 最小化页面重绘</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">super</span>(props)</span><br><span class="line">      <span class="built_in">this</span>.state = &#123;</span><br><span class="line">          <span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidMount () &#123;</span><br><span class="line">      <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setState(&#123;</span><br><span class="line">            <span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render () &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;render()&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">          Hello, <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Your name here&quot;</span>/&gt;</span>!<span class="symbol">&amp;nbsp;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">span</span>&gt;</span>It is &#123;this.state.date.toTimeString()&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ReactDOM.render(</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">HelloWorld</span>/&gt;</span></span>,</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">&#x27;example&#x27;</span>)</span><br><span class="line">  )</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端模块化开发--ES6相关知识</title>
      <link href="/2019/05/08/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91-ES6%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/"/>
      <url>/2019/05/08/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91-ES6%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="http://myfile.buildworld.cn/es6.jpg" alt="ES6"></p><h4 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h4><ul><li>ES全名：ECMAScript </li><li>ES由ECMA进行标准化的一套规范</li><li>ES涵盖各种环境中JS使用场景，无论是浏览器环境还是类似node.js的非浏览器环境</li><li>ES版本：1、2、3、5、6</li><li>ES6是最新标准，目标是使JS可以编写复杂的大型应用程序，成为企业级开发语言。</li></ul><h4 id="二、新特性"><a href="#二、新特性" class="headerlink" title="二、新特性"></a>二、新特性</h4><h5 id="1、变量声明-let"><a href="#1、变量声明-let" class="headerlink" title="1、变量声明 let"></a>1、变量声明 let</h5><h6 id="使用var关键字，意味着a变量是全局的，打印结果是abc"><a href="#使用var关键字，意味着a变量是全局的，打印结果是abc" class="headerlink" title="使用var关键字，意味着a变量是全局的，打印结果是abc"></a>使用var关键字，意味着a变量是全局的，打印结果是abc</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">info</span>(<span class="params">bol</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bol) &#123;</span><br><span class="line">        <span class="keyword">var</span> a  = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(a)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">info(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h6 id="使用let关键字，此时就会报错"><a href="#使用let关键字，此时就会报错" class="headerlink" title="使用let关键字，此时就会报错"></a>使用let关键字，此时就会报错</h6><ul><li>ES6之前，声明变量使用var，该关键字声明的变量会在函数最顶部（不在函数内的即在全局作用域的最顶部）</li><li>ES6声明变量使用let，常量使用const，它们声明的变量都属于块级作用域，即在声明的{}中有效</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">info</span>(<span class="params">bol</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (bol) &#123;</span><br><span class="line">        <span class="keyword">let</span> a  = <span class="string">&#x27;abc&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line">info(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h5 id="2、常量声明：const"><a href="#2、常量声明：const" class="headerlink" title="2、常量声明：const"></a>2、常量声明：const</h5><blockquote><p>关键字const声明的常量只能赋值一次</p></blockquote><h5 id="3、模版字符串："><a href="#3、模版字符串：" class="headerlink" title="3、模版字符串："></a>3、模版字符串：</h5><blockquote><p>单行字符串拼接：<code>$&#123;&#125;</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;michong&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`你好，欢迎<span class="subst">$&#123;name&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><h5 id="4、参数默认值："><a href="#4、参数默认值：" class="headerlink" title="4、参数默认值："></a>4、参数默认值：</h5><blockquote><p>ES6为函数参数提供了默认值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params">age = <span class="number">24</span></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(age);</span><br><span class="line">&#125;</span><br><span class="line">getAge();</span><br></pre></td></tr></table></figure><h5 id="5、箭头函数"><a href="#5、箭头函数" class="headerlink" title="5、箭头函数"></a>5、箭头函数</h5><blockquote><p>箭头代替函数，简化函数定义，箭头函数最直观的三个特点。</p></blockquote><ul><li>不需要function关键字来创建函数</li><li>省略return关键字</li><li>继承当前上下文的 this 关键字</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">getName = <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;</span><br><span class="line">getName(<span class="string">&#x27;米虫&#x27;</span>);</span><br></pre></td></tr></table></figure><h5 id="6、对象初始化简写"><a href="#6、对象初始化简写" class="headerlink" title="6、对象初始化简写"></a>6、对象初始化简写</h5><blockquote><p>ES5我们对于对象都是以键值对的形式书写，是有可能出现键值对重名的</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">People = <span class="function">(<span class="params">name, age</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        name,</span><br><span class="line">        age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(People(<span class="string">&#x27;米虫&#x27;</span>,<span class="number">24</span>))</span><br></pre></td></tr></table></figure><p>==返回值==</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; name: &#x27;米虫&#x27;, age: <span class="number">24</span> &#125;</span><br></pre></td></tr></table></figure><h5 id="7、解构"><a href="#7、解构" class="headerlink" title="7、解构"></a>7、解构</h5><blockquote><p>数组和对象是JS中最常用也是最重要表示形式。为了简化提取信息，ES6新增了解构，这是将一个数据结构分解为更小的部分的过程</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象</span></span><br><span class="line">People = <span class="function">(<span class="params">name, age</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        name,</span><br><span class="line">        age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;name,age&#125; = People(<span class="string">&#x27;米虫&#x27;</span>,<span class="number">24</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`姓名：<span class="subst">$&#123;name&#125;</span>======年龄：<span class="subst">$&#123;age&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组</span></span><br><span class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> [one,second] = nums;</span><br><span class="line"><span class="built_in">console</span>.log(one+second)</span><br></pre></td></tr></table></figure><h5 id="8、Spread-Operator"><a href="#8、Spread-Operator" class="headerlink" title="8、Spread Operator"></a>8、Spread Operator</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组</span></span><br><span class="line"><span class="keyword">const</span> color = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;yellow&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> colorful = [...color, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;pink&#x27;</span>]</span><br><span class="line"><span class="built_in">console</span>.log(colorful) <span class="comment">//[red, yellow, green, pink]</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">//对象</span></span><br><span class="line"><span class="keyword">const</span> alp = &#123; <span class="attr">fist</span>: <span class="string">&#x27;a&#x27;</span>, <span class="attr">second</span>: <span class="string">&#x27;b&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">const</span> alphabets = &#123; ...alp, <span class="attr">third</span>: <span class="string">&#x27;c&#x27;</span> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(alphabets) <span class="comment">//&#123; &quot;fist&quot;: &quot;a&quot;, &quot;second&quot;: &quot;b&quot;, &quot;third&quot;: &quot;c&quot;</span></span><br></pre></td></tr></table></figure><h5 id="9、NodeJS对ES6支持"><a href="#9、NodeJS对ES6支持" class="headerlink" title="9、NodeJS对ES6支持"></a>9、NodeJS对ES6支持</h5><ul><li>1)在项目根目录添加.babelrc文件，配置es2015插件</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;presets&quot;</span>: [<span class="string">&quot;es2015&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">注：</span><br><span class="line">es2015 === es6</span><br><span class="line">es2016 === es7</span><br><span class="line">es2017 === es8</span><br></pre></td></tr></table></figure><ul><li><p>2)安装es2015插件<br>运行安装命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install babel-preset-es2015 --save-dev</span><br></pre></td></tr></table></figure><blockquote><p>babel-preset-es2015: 可以将es2015即es6的js代码编译为es5</p></blockquote></li><li><p>3)全局安装命令行工具</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cnpm install babel-cli -g</span><br></pre></td></tr></table></figure><ul><li>4)使用<br>babel-node js文件名</li></ul><h5 id="10、Import和Export（Node中不支持这个，所有参考上面第九条的内容）"><a href="#10、Import和Export（Node中不支持这个，所有参考上面第九条的内容）" class="headerlink" title="10、Import和Export（Node中不支持这个，所有参考上面第九条的内容）"></a>10、Import和Export（Node中不支持这个，所有参考上面第九条的内容）</h5><blockquote><p>ES6中的新语法，类似于exports和require，可以实现函数跨文件使用</p></blockquote><p>test.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象</span></span><br><span class="line"><span class="keyword">let</span> People = <span class="function"><span class="keyword">function</span>(<span class="params">name, age</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        name,</span><br><span class="line">        age</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//导出模块</span></span><br><span class="line"><span class="keyword">export</span>&#123;People&#125;</span><br></pre></td></tr></table></figure><p>test2.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;People&#125; <span class="keyword">from</span> <span class="string">&#x27;./test&#x27;</span></span><br><span class="line"><span class="keyword">let</span> &#123;name,age&#125; = People(<span class="string">&#x27;米虫&#x27;</span>,<span class="number">24</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`姓名：<span class="subst">$&#123;name&#125;</span>======年龄：<span class="subst">$&#123;age&#125;</span>`</span>)</span><br></pre></td></tr></table></figure><h5 id="11、Promise-对象-异步处理，Ajax等"><a href="#11、Promise-对象-异步处理，Ajax等" class="headerlink" title="11、Promise 对象(异步处理，Ajax等)"></a>11、Promise 对象(异步处理，Ajax等)</h5><p><code>Promise</code> 是异步编程的一种解决方案，避免了传统的回调函数的层层嵌套，也就是常说的“回调地狱”。</p><p><code>Promise</code> 一旦新建就会立即执行，无法中途取消。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 异步操作成功</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        resolve(<span class="string">&#x27;执行成功&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(<span class="string">&#x27;执行失败&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以获取上面异步操作结果得到数据，并打印出来</span></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//成功的</span></span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//失败的</span></span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="补充-async-await"><a href="#补充-async-await" class="headerlink" title="补充 async await"></a>补充 <code>async</code> <code>await</code></h5><blockquote><p>Async/await建立于Promise之上，很多人认为的最高境界，就是根本不用关心它是不是异步。async await就是异步操作的终极解决方案。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">getJSON = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">reslove, rejcet</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            reslove(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用promise</span></span><br><span class="line"><span class="keyword">let</span> makeRequest2 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    getJSON().then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;done&#x27;</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//先打印出来</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;成功&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用async</span></span><br><span class="line"><span class="keyword">let</span> makeRequest = <span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="comment">//先等待promise中的resolve()方法执行完成之后才会接着执行下面的语句</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">await</span> getJSON());</span><br><span class="line">    <span class="comment">//等待上一步执行完成之后才会执行</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;成功&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;done&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(makeRequest2());</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端模块化开发--Node基础&amp;&amp;WebPack模块化开发</title>
      <link href="/2019/05/07/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91-Node%E5%9F%BA%E7%A1%80-WebPack%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91/"/>
      <url>/2019/05/07/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91-Node%E5%9F%BA%E7%A1%80-WebPack%E6%A8%A1%E5%9D%97%E5%8C%96%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="http://myfile.buildworld.cn/node.jpg" alt="Node"></p><h4 id="一、Node-开发"><a href="#一、Node-开发" class="headerlink" title="一、Node 开发"></a>一、Node 开发</h4><h5 id="1、模块化开发"><a href="#1、模块化开发" class="headerlink" title="1、模块化开发"></a>1、模块化开发</h5><h6 id="定义统一的方法：function-js"><a href="#定义统一的方法：function-js" class="headerlink" title="定义统一的方法：function.js"></a>定义统一的方法：function.js</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.sum = <span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="导入方法：use-js"><a href="#导入方法：use-js" class="headerlink" title="导入方法：use.js"></a>导入方法：use.js</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = <span class="built_in">require</span>(<span class="string">&#x27;./function&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(fun.sum(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><h5 id="2、服务器"><a href="#2、服务器" class="headerlink" title="2、服务器"></a>2、服务器</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建服务器</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 发送 HTTP 头部</span></span><br><span class="line">    <span class="comment">// HTTP 状态值: 200 : OK</span></span><br><span class="line">    <span class="comment">// 内容类型: text/plain</span></span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/plain&#x27;</span> &#125;);</span><br><span class="line">    <span class="comment">//页面显示内容</span></span><br><span class="line">    response.write(<span class="string">&#x27;hi michong\n&#x27;</span>) <span class="comment">//可以调用多次</span></span><br><span class="line">    response.end(<span class="string">&#x27;hello world!&#x27;</span>)    <span class="comment">//只可以调用一次</span></span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br></pre></td></tr></table></figure><h5 id="3、接收参数"><a href="#3、接收参数" class="headerlink" title="3、接收参数"></a>3、接收参数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接收参数(http://localhost:8888/?name=michong)</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 发送 HTTP 头部</span></span><br><span class="line">    <span class="comment">// HTTP 状态值: 200 : OK</span></span><br><span class="line">    <span class="comment">// 内容类型: text/plain</span></span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123; <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;text/plain&#x27;</span> &#125;);</span><br><span class="line">    <span class="comment">//解析url参数</span></span><br><span class="line">    <span class="keyword">var</span> params = url.parse(request.url,<span class="literal">true</span>).query;</span><br><span class="line">    response.end(<span class="string">&#x27;姓名：&#x27;</span>+params.name);</span><br><span class="line">&#125;).listen(<span class="number">8888</span>);</span><br></pre></td></tr></table></figure><h4 id="二、-包资源管理器NPM"><a href="#二、-包资源管理器NPM" class="headerlink" title="二、 包资源管理器NPM"></a>二、 包资源管理器NPM</h4><blockquote><p>npm全称Node Package Manager，他是node包管理和分发工具。其实我们可以把NPM<br>理解为前端的Maven</p></blockquote><h6 id="npm的镜像替换成淘宝"><a href="#npm的镜像替换成淘宝" class="headerlink" title="npm的镜像替换成淘宝"></a>npm的镜像替换成淘宝</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry http://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure><h6 id="全局下载"><a href="#全局下载" class="headerlink" title="全局下载"></a>全局下载</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install xxx -g</span><br></pre></td></tr></table></figure><h6 id="运行工程"><a href="#运行工程" class="headerlink" title="运行工程"></a>运行工程</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">如果我们想运行某个工程，则使用run命令</span><br><span class="line">如果package.json中定义的脚本如下</span><br><span class="line">dev是开发阶段测试运行</span><br><span class="line">build是构建编译工程</span><br><span class="line">lint 是运行js代码检测</span><br></pre></td></tr></table></figure><h4 id="三、Webpack"><a href="#三、Webpack" class="headerlink" title="三、Webpack"></a>三、Webpack</h4><blockquote><p>Webpack 是一个前端资源加载/打包工具。它将根据模块的依赖关系进行静态分<br>析，然后将这些模块按照指定的规则生成对应的静态资源。</p></blockquote><p><img src="http://myfile.buildworld.cn/webpack.png" alt="webpack示意图"></p><h6 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack ‐g</span><br><span class="line">npm install webpack‐cli ‐g</span><br></pre></td></tr></table></figure><h5 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h5><h5 id="1、js打包"><a href="#1、js打包" class="headerlink" title="1、js打包"></a>1、js打包</h5><ul><li>创建src文件夹，创建bar.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.info = <span class="function"><span class="keyword">function</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>src下创建logic.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.add = <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>src下创建main.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bar = <span class="built_in">require</span>(<span class="string">&#x27;./bar&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> logic = <span class="built_in">require</span>(<span class="string">&#x27;./logic&#x27;</span>);</span><br><span class="line">bar.info(<span class="string">&#x27;hello world!&#x27;</span> + logic.add(<span class="number">1</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure><ul><li>创建配置文件webpack.config.js ，该文件与src处于同级目录</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/main.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="attr">path</span>: path.resolve(__dirname,<span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>以上代码的意思是：读取当前目录下src文件夹中的main.js（入口文件）内容，把对应的<br>js文件打包，打包后的文件放入当前目录的dist文件夹下，打包后的js文件名为bundle.js</p></blockquote><ul><li>执行编译命令</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack</span><br></pre></td></tr></table></figure><ul><li>创建index.html ,引用bundle.js</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;dist/bundle.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2、css打包"><a href="#2、css打包" class="headerlink" title="2、css打包"></a>2、css打包</h5><blockquote><p>Webpack 本身只能处理 JavaScript 模块，如果要处理其他类型的文件，就需要使用<br>loader 进行转换。<br>Loader 可以理解为是模块和资源的转换器，它本身是一个函数，接受源文件作为参数，<br>返回转换的结果。这样，我们就可以通过 require 来加载任何类型的模块或文件，比如<br>CoffeeScript、 JSX、 LESS 或图片。首先我们需要安装相关Loader插件，css-loader 是<br>将 css 装载到 javascript；style-loader 是让 javascript 认识css</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install style-loader css-loader --save-dev</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">npm install --save moduleName 命令</span><br><span class="line">1.安装模块到项目node_modules目录下。</span><br><span class="line">2.会将模块依赖写入dependencies 节点。</span><br><span class="line">3.运行 npm install 初始化项目时，会将模块下载到项目目录下。</span><br><span class="line">4.运行npm install --production或者注明NODE_ENV变量值为production时，会自动下载模块到node_modules目录中。</span><br><span class="line">npm install --save-dev moduleName 命令</span><br><span class="line">1.安装模块到项目node_modules目录下。</span><br><span class="line">2.会将模块依赖写入devDependencies 节点。</span><br><span class="line">3.运行 npm install 初始化项目时，会将模块下载到项目目录下。</span><br><span class="line">4.运行npm install --production或者注明NODE_ENV变量值为production时，不会自动下载模块到node_modules目录中。</span><br></pre></td></tr></table></figure><ul><li>修改webpack.config.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/main.js&#x27;</span>,</span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="attr">path</span>: path.resolve(__dirname,<span class="string">&#x27;./dist&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line"><span class="attr">rules</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">test</span>:<span class="regexp">/\.css$/</span>,</span><br><span class="line">use:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>在src文件夹创建css文件夹,css文件夹下创建css1</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>修改main.js ，引入css1.css</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;./css/css1.css&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li>重新webpack一下</li></ul><h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><h5 id="vscode-Chrome-debug插件"><a href="#vscode-Chrome-debug插件" class="headerlink" title="vscode Chrome-debug插件"></a>vscode Chrome-debug插件</h5><blockquote><p>在launch.json中添加</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">, &#123;</span><br><span class="line">        <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;使用本机 Chrome 调试&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;type&quot;</span>: <span class="string">&quot;chrome&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,</span><br><span class="line">         <span class="attr">&quot;file&quot;</span>: <span class="string">&quot;$&#123;workspaceRoot&#125;/index.html&quot;</span>,</span><br><span class="line">    <span class="comment">//  &quot;url&quot;: &quot;http://mysite.com/index.html&quot;, //使用外部服务器时,请注释掉 file, 改用 url, 并将 useBuildInServer 设置为 false &quot;http://mysite.com/index.html</span></span><br><span class="line">        <span class="attr">&quot;runtimeExecutable&quot;</span>: <span class="string">&quot;C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe&quot;</span>, <span class="comment">// 改成您的 Chrome 安装路径</span></span><br><span class="line">        <span class="attr">&quot;sourceMaps&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;webRoot&quot;</span>: <span class="string">&quot;$&#123;workspaceRoot&#125;&quot;</span>,</span><br><span class="line">    <span class="comment">//  &quot;preLaunchTask&quot;:&quot;build&quot;,</span></span><br><span class="line">        <span class="attr">&quot;userDataDir&quot;</span>:<span class="string">&quot;$&#123;tmpdir&#125;&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;port&quot;</span>:<span class="number">5433</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CNN神经网络--手写数字识别</title>
      <link href="/2019/04/16/CNN%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/"/>
      <url>/2019/04/16/CNN%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C-%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="CNN神经网络–手写数字识别"><a href="#CNN神经网络–手写数字识别" class="headerlink" title="CNN神经网络–手写数字识别"></a>CNN神经网络–手写数字识别</h1><p><img src="http://myfile.buildworld.cn/%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97.jpg" alt="训练流程图"></p><h3 id="引入包"><a href="#引入包" class="headerlink" title="引入包"></a>引入包</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br></pre></td></tr></table></figure><h3 id="下载并载入-MNIST-手写数字库（55000-28-28）55000-张训练图像"><a href="#下载并载入-MNIST-手写数字库（55000-28-28）55000-张训练图像" class="headerlink" title="下载并载入 MNIST 手写数字库（55000 * 28 * 28）55000 张训练图像"></a>下载并载入 MNIST 手写数字库（55000 * 28 * 28）55000 张训练图像</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">&#x27;mnist_data&#x27;</span>, one_hot=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">input_x = tf.placeholder(tf.float32,[<span class="literal">None</span>,<span class="number">28</span>*<span class="number">28</span>])/<span class="number">255</span></span><br><span class="line">output_y = tf.placeholder(tf.int32,[<span class="literal">None</span>,<span class="number">10</span>])</span><br><span class="line">input_x_images = tf.reshape(input_x,[-<span class="number">1</span>,<span class="number">28</span>,<span class="number">28</span>,<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h3 id="从Test数据集里选取3000个手写数字的图片和对应标签"><a href="#从Test数据集里选取3000个手写数字的图片和对应标签" class="headerlink" title="从Test数据集里选取3000个手写数字的图片和对应标签"></a>从Test数据集里选取3000个手写数字的图片和对应标签</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test_x = mnist.test.images[:<span class="number">3000</span>]</span><br><span class="line">test_y = mnist.test.labels[:<span class="number">3000</span>]</span><br></pre></td></tr></table></figure><h2 id="构建我们的卷积神经网络"><a href="#构建我们的卷积神经网络" class="headerlink" title="构建我们的卷积神经网络"></a>构建我们的卷积神经网络</h2><h3 id="第1层卷积"><a href="#第1层卷积" class="headerlink" title="第1层卷积"></a>第1层卷积</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">conv1  = tf.layers.conv2d(</span><br><span class="line">    inputs = input_x_images,</span><br><span class="line">    filters = <span class="number">32</span>,</span><br><span class="line">    kernel_size=[<span class="number">5</span>,<span class="number">5</span>],</span><br><span class="line">    strides=<span class="number">1</span>,</span><br><span class="line">    padding=<span class="string">&#x27;same&#x27;</span>,</span><br><span class="line">    activation=tf.nn.relu</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h3 id="第一层池化-亚采样"><a href="#第一层池化-亚采样" class="headerlink" title="第一层池化(亚采样)"></a>第一层池化(亚采样)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pool1 = tf.layers.max_pooling2d(</span><br><span class="line">    inputs=conv1,</span><br><span class="line">    pool_size=[<span class="number">2</span>,<span class="number">2</span>],</span><br><span class="line">    strides=<span class="number">2</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="第2层卷积"><a href="#第2层卷积" class="headerlink" title="第2层卷积"></a>第2层卷积</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">conv2  = tf.layers.conv2d(</span><br><span class="line">    inputs = pool1,</span><br><span class="line">    filters = <span class="number">64</span>,</span><br><span class="line">    kernel_size=[<span class="number">5</span>,<span class="number">5</span>],</span><br><span class="line">    strides=<span class="number">1</span>,</span><br><span class="line">    padding=<span class="string">&#x27;same&#x27;</span>,</span><br><span class="line">    activation=tf.nn.relu</span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h3 id="第二层池化-亚采样"><a href="#第二层池化-亚采样" class="headerlink" title="第二层池化(亚采样)"></a>第二层池化(亚采样)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pool2 = tf.layers.max_pooling2d(</span><br><span class="line">    inputs=conv2,</span><br><span class="line">    pool_size=[<span class="number">2</span>,<span class="number">2</span>],</span><br><span class="line">    strides=<span class="number">2</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="平坦化（flat）"><a href="#平坦化（flat）" class="headerlink" title="平坦化（flat）"></a>平坦化（flat）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flat = tf.reshape(pool2,[-<span class="number">1</span>,<span class="number">7</span>*<span class="number">7</span>*<span class="number">64</span>])</span><br></pre></td></tr></table></figure><h3 id="1024个神经元的全连接层"><a href="#1024个神经元的全连接层" class="headerlink" title="1024个神经元的全连接层"></a>1024个神经元的全连接层</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dense = tf.layers.dense(inputs=flat,units=<span class="number">1024</span>,activation=tf.nn.relu)</span><br></pre></td></tr></table></figure><h3 id="Dropout-丢弃50"><a href="#Dropout-丢弃50" class="headerlink" title="Dropout 丢弃50%"></a>Dropout 丢弃50%</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dropout = tf.layers.dropout(inputs=dense,rate=<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><h3 id="10个神经元的全连接层，这里不用激活函数来做非线性化"><a href="#10个神经元的全连接层，这里不用激活函数来做非线性化" class="headerlink" title="10个神经元的全连接层，这里不用激活函数来做非线性化"></a>10个神经元的全连接层，这里不用激活函数来做非线性化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logits = tf.layers.dense(inputs=dropout,units=<span class="number">10</span>) <span class="comment">#最终输出[1,1,10]</span></span><br></pre></td></tr></table></figure><h3 id="计算误差（计算Cross-entropy-交叉熵-，再用Softmax计算百分比概率）"><a href="#计算误差（计算Cross-entropy-交叉熵-，再用Softmax计算百分比概率）" class="headerlink" title="计算误差（计算Cross entropy(交叉熵)，再用Softmax计算百分比概率）"></a>计算误差（计算Cross entropy(交叉熵)，再用Softmax计算百分比概率）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">loss = tf.losses.softmax_cross_entropy(onehot_labels=output_y,logits=logits)</span><br></pre></td></tr></table></figure><h3 id="Adam优化器来最小化误差，学习率0-001"><a href="#Adam优化器来最小化误差，学习率0-001" class="headerlink" title="Adam优化器来最小化误差，学习率0.001"></a>Adam优化器来最小化误差，学习率0.001</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">train_op = tf.train.AdamOptimizer(learning_rate=<span class="number">0.001</span>).minimize(loss)</span><br></pre></td></tr></table></figure><h3 id="精度。计算-预测值和实际标签的匹配程度"><a href="#精度。计算-预测值和实际标签的匹配程度" class="headerlink" title="精度。计算 预测值和实际标签的匹配程度"></a>精度。计算 预测值和实际标签的匹配程度</h3><h3 id="返回（accuracy-update-op），会创建两个局部变量"><a href="#返回（accuracy-update-op），会创建两个局部变量" class="headerlink" title="返回（accuracy,update_op），会创建两个局部变量"></a>返回（accuracy,update_op），会创建两个局部变量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">accuracy = tf.metrics.accuracy(</span><br><span class="line">    labels=tf.argmax(output_y,axis=<span class="number">1</span>),</span><br><span class="line">    predictions=tf.argmax(logits,axis=<span class="number">1</span>),)[<span class="number">1</span>]</span><br></pre></td></tr></table></figure><h3 id="创建回话"><a href="#创建回话" class="headerlink" title="创建回话"></a>创建回话</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sess = tf.Session()</span><br></pre></td></tr></table></figure><h3 id="初始化变量：-全局和局部变量"><a href="#初始化变量：-全局和局部变量" class="headerlink" title="初始化变量： 全局和局部变量"></a>初始化变量： 全局和局部变量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">init = tf.group(tf.global_variables_initializer(),tf.local_variables_initializer())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sess.run(init)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    batch = mnist.train.next_batch(<span class="number">50</span>)  <span class="comment"># 从 Train（训练）数据集里取 “下一个” 50 个样本</span></span><br><span class="line">    train_loss, train_op_= sess.run([loss, train_op], &#123;input_x: batch[<span class="number">0</span>], output_y: batch[<span class="number">1</span>]&#125;)</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">        test_accuracy = sess.run(accuracy, &#123;input_x: test_x, output_y: test_y&#125;)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;第 &#123;&#125; 步的 训练损失=&#123;:.4f&#125;, 测试精度=&#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(i, train_loss, test_accuracy))</span><br></pre></td></tr></table></figure><pre><code>第 0 步的 训练损失=0.0216, 测试精度=0.94第 100 步的 训练损失=0.0251, 测试精度=0.94第 200 步的 训练损失=0.1048, 测试精度=0.94第 300 步的 训练损失=0.1411, 测试精度=0.94第 400 步的 训练损失=0.0009, 测试精度=0.94第 500 步的 训练损失=0.0154, 测试精度=0.94第 600 步的 训练损失=0.0005, 测试精度=0.95第 700 步的 训练损失=0.0208, 测试精度=0.95第 800 步的 训练损失=0.0017, 测试精度=0.95第 900 步的 训练损失=0.0006, 测试精度=0.95</code></pre><h3 id="测试：打印20个预测值和真实值的对"><a href="#测试：打印20个预测值和真实值的对" class="headerlink" title="测试：打印20个预测值和真实值的对"></a>测试：打印20个预测值和真实值的对</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">test_output = sess.run(logits,&#123;input_x:test_x[:<span class="number">20</span>]&#125;)</span><br><span class="line">inferenced_y = np.argmax(test_output,<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(inferenced_y,<span class="string">&quot;Inferenced numbers&quot;</span>) <span class="comment">#推测的数字</span></span><br><span class="line"><span class="built_in">print</span>(np.argmax(test_y[:<span class="number">20</span>],<span class="number">1</span>),<span class="string">&quot;Real numbers&quot;</span>) <span class="comment">#真实的数字</span></span><br></pre></td></tr></table></figure><pre><code>[7 2 1 0 4 1 4 9 5 9 0 6 9 0 1 5 9 7 8 4] Inferenced numbers[7 2 1 0 4 1 4 9 5 9 0 6 9 0 1 5 9 7 3 4] Real numbers</code></pre><h3 id="完整代码："><a href="#完整代码：" class="headerlink" title="完整代码："></a>完整代码：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载并载入 MNIST 手写数字库（55000 * 28 * 28）55000 张训练图像</span></span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line">mnist = input_data.read_data_sets(<span class="string">&#x27;mnist_data&#x27;</span>, one_hot=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># one_hot 独热码的编码（encoding）形式</span></span><br><span class="line"><span class="comment"># 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 的十位数字</span></span><br><span class="line"><span class="comment"># 0 : 1000000000</span></span><br><span class="line"><span class="comment"># 1 : 0100000000</span></span><br><span class="line"><span class="comment"># 2 : 0010000000</span></span><br><span class="line"><span class="comment"># 3 : 0001000000</span></span><br><span class="line"><span class="comment"># 4 : 0000100000</span></span><br><span class="line"><span class="comment"># 5 : 0000010000</span></span><br><span class="line"><span class="comment"># 6 : 0000001000</span></span><br><span class="line"><span class="comment"># 7 : 0000000100</span></span><br><span class="line"><span class="comment"># 8 : 0000000010</span></span><br><span class="line"><span class="comment"># 9 : 0000000001</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># None 表示张量（Tensor）的第一个维度可以是任何长度</span></span><br><span class="line"><span class="comment"># 除以 255 是为了做 归一化（Normalization），把灰度值从 [0, 255] 变成 [0, 1] 区间</span></span><br><span class="line"><span class="comment"># 归一话可以让之后的优化器（optimizer）更快更好地找到误差最小值</span></span><br><span class="line">input_x = tf.placeholder(tf.float32, [<span class="literal">None</span>, <span class="number">28</span> * <span class="number">28</span>]) / <span class="number">255.</span>  <span class="comment"># 输入</span></span><br><span class="line"></span><br><span class="line">output_y = tf.placeholder(tf.int32, [<span class="literal">None</span>, <span class="number">10</span>])  <span class="comment"># 输出：10个数字的标签</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -1 表示自动推导维度大小。让计算机根据其他维度的值</span></span><br><span class="line"><span class="comment"># 和总的元素大小来推导出 -1 的地方的维度应该是多少</span></span><br><span class="line">input_x_images = tf.reshape(input_x, [-<span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>])  <span class="comment"># 改变形状之后的输入</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从 Test（测试）数据集里选取 3000 个手写数字的图片和对应标签</span></span><br><span class="line">test_x = mnist.test.images[:<span class="number">3000</span>]  <span class="comment"># 图片</span></span><br><span class="line">test_y = mnist.test.labels[:<span class="number">3000</span>]  <span class="comment"># 标签</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建我们的卷积神经网络：</span></span><br><span class="line"><span class="comment"># 第 1 层卷积</span></span><br><span class="line">conv1 = tf.layers.conv2d(</span><br><span class="line">    inputs=input_x_images,  <span class="comment"># 形状 [28, 28, 1]</span></span><br><span class="line">    filters=<span class="number">32</span>,             <span class="comment"># 32 个过滤器，输出的深度（depth）是32</span></span><br><span class="line">    kernel_size=[<span class="number">5</span>, <span class="number">5</span>],     <span class="comment"># 过滤器在二维的大小是 (5 * 5)</span></span><br><span class="line">    strides=<span class="number">1</span>,              <span class="comment"># 步长是 1</span></span><br><span class="line">    padding=<span class="string">&#x27;same&#x27;</span>,         <span class="comment"># same 表示输出的大小不变，因此需要在外围补零 2 圈</span></span><br><span class="line">    activation=tf.nn.relu   <span class="comment"># 激活函数是 Relu</span></span><br><span class="line">)  <span class="comment"># 形状 [28, 28, 32]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第 1 层池化（亚采样）</span></span><br><span class="line">pool1 = tf.layers.max_pooling2d(</span><br><span class="line">    inputs=conv1,      <span class="comment"># 形状 [28, 28, 32]</span></span><br><span class="line">    pool_size=[<span class="number">2</span>, <span class="number">2</span>],  <span class="comment"># 过滤器在二维的大小是（2 * 2）</span></span><br><span class="line">    strides=<span class="number">2</span>          <span class="comment"># 步长是 2</span></span><br><span class="line">)  <span class="comment"># 形状 [14, 14, 32]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第 2 层卷积</span></span><br><span class="line">conv2 = tf.layers.conv2d(</span><br><span class="line">    inputs=pool1,          <span class="comment"># 形状 [14, 14, 32]</span></span><br><span class="line">    filters=<span class="number">64</span>,            <span class="comment"># 64 个过滤器，输出的深度（depth）是64</span></span><br><span class="line">    kernel_size=[<span class="number">5</span>, <span class="number">5</span>],    <span class="comment"># 过滤器在二维的大小是 (5 * 5)</span></span><br><span class="line">    strides=<span class="number">1</span>,             <span class="comment"># 步长是 1</span></span><br><span class="line">    padding=<span class="string">&#x27;same&#x27;</span>,        <span class="comment"># same 表示输出的大小不变，因此需要在外围补零 2 圈</span></span><br><span class="line">    activation=tf.nn.relu  <span class="comment"># 激活函数是 Relu</span></span><br><span class="line">)  <span class="comment"># 形状 [14, 14, 64]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第 2 层池化（亚采样）</span></span><br><span class="line">pool2 = tf.layers.max_pooling2d(</span><br><span class="line">    inputs=conv2,      <span class="comment"># 形状 [14, 14, 64]</span></span><br><span class="line">    pool_size=[<span class="number">2</span>, <span class="number">2</span>],  <span class="comment"># 过滤器在二维的大小是（2 * 2）</span></span><br><span class="line">    strides=<span class="number">2</span>          <span class="comment"># 步长是 2</span></span><br><span class="line">)  <span class="comment"># 形状 [7, 7, 64]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 平坦化（flat）。降维</span></span><br><span class="line">flat = tf.reshape(pool2, [-<span class="number">1</span>, <span class="number">7</span> * <span class="number">7</span> * <span class="number">64</span>])  <span class="comment"># 形状 [7 * 7 * 64, ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1024 个神经元的全连接层</span></span><br><span class="line">dense = tf.layers.dense(inputs=flat, units=<span class="number">1024</span>, activation=tf.nn.relu)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Dropout : 丢弃 50%（rate=0.5）</span></span><br><span class="line">dropout = tf.layers.dropout(inputs=dense, rate=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 10 个神经元的全连接层，这里不用激活函数来做非线性化了</span></span><br><span class="line">logits = tf.layers.dense(inputs=dropout, units=<span class="number">10</span>)  <span class="comment"># 输出。形状 [1, 1, 10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算误差（先用 Softmax 计算百分比概率，</span></span><br><span class="line"><span class="comment"># 再用 Cross entropy（交叉熵）来计算百分比概率和对应的独热码之间的误差）</span></span><br><span class="line">loss = tf.losses.softmax_cross_entropy(onehot_labels=output_y, logits=logits)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Adam 优化器来最小化误差，学习率 0.001</span></span><br><span class="line">train_op = tf.train.AdamOptimizer(learning_rate=<span class="number">0.001</span>).minimize(loss)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 精度。计算 预测值 和 实际标签 的匹配程度</span></span><br><span class="line"><span class="comment"># 返回 (accuracy, update_op), 会创建两个 局部变量</span></span><br><span class="line">accuracy = tf.metrics.accuracy(</span><br><span class="line">    labels=tf.argmax(output_y, axis=<span class="number">1</span>),</span><br><span class="line">    predictions=tf.argmax(logits, axis=<span class="number">1</span>),)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建会话</span></span><br><span class="line">sess = tf.Session()</span><br><span class="line"><span class="comment"># 初始化变量：全局和局部</span></span><br><span class="line">init = tf.group(tf.global_variables_initializer(), tf.local_variables_initializer())</span><br><span class="line">sess.run(init)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练 5000 步。这个步数可以调节</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5000</span>):</span><br><span class="line">    batch = mnist.train.next_batch(<span class="number">50</span>)  <span class="comment"># 从 Train（训练）数据集里取 “下一个” 50 个样本</span></span><br><span class="line">    train_loss, train_op_ = sess.run([loss, train_op], &#123;input_x: batch[<span class="number">0</span>], output_y: batch[<span class="number">1</span>]&#125;)</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">        test_accuracy = sess.run(accuracy, &#123;input_x: test_x, output_y: test_y&#125;)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;第 &#123;&#125; 步的 训练损失=&#123;:.4f&#125;, 测试精度=&#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(i, train_loss, test_accuracy))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试：打印 20 个预测值 和 真实值</span></span><br><span class="line">test_output = sess.run(logits, &#123;input_x: test_x[:<span class="number">20</span>]&#125;)</span><br><span class="line">inferred_y = np.argmax(test_output, <span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(inferred_y, <span class="string">&#x27;推测的数字&#x27;</span>)  <span class="comment"># 推测的数字</span></span><br><span class="line"><span class="built_in">print</span>(np.argmax(test_y[:<span class="number">20</span>], <span class="number">1</span>), <span class="string">&#x27;真实的数字&#x27;</span>)  <span class="comment"># 真实的数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭会话</span></span><br><span class="line">sess.close()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 人工智能 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CNN </tag>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot微服务架构项目--Union社交平台</title>
      <link href="/2019/02/10/SpringBoot%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E9%A1%B9%E7%9B%AE-Union%E7%A4%BE%E4%BA%A4%E5%B9%B3%E5%8F%B0/"/>
      <url>/2019/02/10/SpringBoot%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E9%A1%B9%E7%9B%AE-Union%E7%A4%BE%E4%BA%A4%E5%B9%B3%E5%8F%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img src="https://file.buildworld.cn/img/6dc7724665fb0fa34d8d2872f6b40d22_224859_0cf8011f_759177.png"><br><a href="https://gitee.com/union_project/union_parent">Gitee项目地址</a></p><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote><p>本项目是采用Spring全家桶的java后端框架，采用目前WEB端比较流行的前后端分离的开发方式，后端采用微服务架构思想，将业务各个拆分出来，通过SpringCloud微服务框架将各个微服务业务连接起来，使得项目业务之间独立运行，在服务部署和运行时不会相互影响。</p></blockquote><h4 id="一、系统概况"><a href="#一、系统概况" class="headerlink" title="一、系统概况"></a>一、系统概况</h4><h5 id="1、系统技术栈示意图"><a href="#1、系统技术栈示意图" class="headerlink" title="1、系统技术栈示意图"></a>1、系统技术栈示意图</h5><p><img src="http://myfile.buildworld.cn/224859_801038ac_759177.jpeg" alt="系统技术栈示意图"></p><h5 id="2、后端系统架构图"><a href="#2、后端系统架构图" class="headerlink" title="2、后端系统架构图"></a>2、后端系统架构图</h5><p><img src="http://myfile.buildworld.cn/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%E5%9B%BE%E6%96%B0.png" alt="后端系统架构图"></p><h5 id="3、后台微服务系统"><a href="#3、后台微服务系统" class="headerlink" title="3、后台微服务系统"></a>3、后台微服务系统</h5><table><thead><tr><th>微服务系统</th><th>名称</th><th>端口</th></tr></thead><tbody><tr><td>union_config</td><td>配置服务器</td><td>12000</td></tr><tr><td>union_eureka</td><td>Eureka服务器</td><td>8110</td></tr><tr><td>union-base</td><td>基础服务器</td><td>9001</td></tr><tr><td>union-recruit</td><td>招聘服务器</td><td>9002</td></tr><tr><td>union-qa</td><td>用户问题服务器</td><td>9003</td></tr><tr><td>union-article</td><td>文章服务器</td><td>9004</td></tr><tr><td>union-gathering</td><td>用户活动服务器</td><td>9005</td></tr><tr><td>union-spit</td><td>用户吐槽服务器</td><td>9006</td></tr><tr><td>union-search</td><td>ES搜索服务器</td><td>9007</td></tr><tr><td>union-user</td><td>用户服务器</td><td>9008</td></tr><tr><td>union-friend</td><td>交友服务器</td><td>9009</td></tr><tr><td>union-manager</td><td>管理员管理服务器</td><td>9010</td></tr><tr><td>union-web</td><td>用户管理服务器</td><td>9011</td></tr><tr><td>union_rabbitmqtest</td><td>RM测试服务器</td><td>8002</td></tr><tr><td>union_ai</td><td>Ai人工智能服务器</td><td>未开发</td></tr></tbody></table><h4 id="二、SpringCloud使用说明"><a href="#二、SpringCloud使用说明" class="headerlink" title="二、SpringCloud使用说明"></a>二、SpringCloud使用说明</h4><h5 id="1、主要框架"><a href="#1、主要框架" class="headerlink" title="1、主要框架"></a>1、主要框架</h5><ul><li>服务发现——Netflix Eureka</li><li>服务调用——Netflix Feign</li><li>熔断器——Netflix Hystrix</li><li>服务网关——Netflix Zuul</li><li>分布式配置——Spring Cloud Config</li><li>消息总线 —— Spring Cloud Bus</li></ul><h5 id="注意一下Cloud版本"><a href="#注意一下Cloud版本" class="headerlink" title="注意一下Cloud版本"></a>注意一下Cloud版本</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Release TrainBoot Version</span><br><span class="line">Greenwich       2.1.x</span><br><span class="line">Finchley        2.0.x</span><br><span class="line">Edgware         1.5.x</span><br><span class="line">Dalston         1.5.x</span><br></pre></td></tr></table></figure><h5 id="2、服务发现组件–Eureka"><a href="#2、服务发现组件–Eureka" class="headerlink" title="2、服务发现组件–Eureka"></a>2、服务发现组件–Eureka</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  Eureka是Netflix开发的服务发现框架，SpringCloud将它集成在自己的子项目</span><br><span class="line">spring-cloud-netflix中，实现SpringCloud的服务发现功能。Eureka包含两个组件：</span><br><span class="line">  Eureka Server和Eureka Client。</span><br><span class="line">    </span><br><span class="line">  Eureka Server提供服务注册服务，各个节点启动后，会在Eureka Server中进行注</span><br><span class="line">册，这样EurekaServer中的服务注册表中将会存储所有可用服务节点的信息，服务节点</span><br><span class="line">的信息可以在界面中直观的看到。</span><br><span class="line"></span><br><span class="line">  Eureka Client是一个java客户端，用于简化与Eureka Server的交互，客户端同时也</span><br><span class="line">就别一个内置的、使用轮询(round-robin)负载算法的负载均衡器。在应用启动后，将会</span><br><span class="line">向Eureka Server发送心跳,默认周期为30秒，如果Eureka Server在多个心跳周期内没有</span><br><span class="line">接收到某个节点的心跳，Eureka Server将会从服务注册表中把这个服务节点移除(默认90</span><br><span class="line">秒)。</span><br><span class="line"></span><br><span class="line">  Eureka Server之间通过复制的方式完成数据的同步，Eureka还提供了客户端缓存机</span><br><span class="line">制，即使所有的Eureka Server都挂掉，客户端依然可以利用缓存中的信息消费其他服务</span><br><span class="line">的API。综上，Eureka通过心跳检查、客户端缓存等机制，确保了系统的高可用性、灵活</span><br><span class="line">性和可伸缩性。</span><br></pre></td></tr></table></figure><blockquote><p>下面是项目全部跑起来的结果</p></blockquote><p><img src="https://images.gitee.com/uploads/images/2019/0202/224900_36c8b6c3_759177.jpeg" alt="Eureka服务器"></p><h5 id="3、服务间调用组件–Feign"><a href="#3、服务间调用组件–Feign" class="headerlink" title="3、服务间调用组件–Feign"></a>3、服务间调用组件–Feign</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  Feign是简化Java HTTP客户端开发的工具（java-to-httpclient-binder），它的灵感</span><br><span class="line">来自于Retrofit、JAXRS-2.0和WebSocket。Feign的初衷是降低统一绑定Denominator到</span><br><span class="line">HTTP API的复杂度，不区分是否为restful。</span><br></pre></td></tr></table></figure><h5 id="4、熔断器Hystrix"><a href="#4、熔断器Hystrix" class="headerlink" title="4、熔断器Hystrix"></a>4、熔断器Hystrix</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  在微服务架构中通常会有多个服务层调用，基础服务的故障可能会导致级联故障，进而</span><br><span class="line">造成整个系统不可用的情况，这种现象被称为服务雪崩效应。服务雪崩效应是一种</span><br><span class="line">因“服务提供者”的不可用导致“服务消费者”的不可用,并将不可用逐渐放大的过程。</span><br><span class="line"></span><br><span class="line">  Hystrix 能使你的系统在出现依赖服务失效的时候，通过隔离系统所依赖的服务，防</span><br><span class="line">止服务级联失败，同时提供失败回退机制，更优雅地应对失效，并使你的系统能更快地</span><br><span class="line">从异常中恢复。</span><br></pre></td></tr></table></figure><h5 id="5、微服务网关Zuul"><a href="#5、微服务网关Zuul" class="headerlink" title="5、微服务网关Zuul"></a>5、微服务网关Zuul</h5><blockquote><p>Zuul是Netflix开源的微服务网关，他可以和Eureka,Ribbon,Hystrix等组件配合使<br>用。<br>Zuul组件的核心是一系列的过滤器，这些过滤器可以完成以下功能：</p></blockquote><ul><li> 身份认证和安全: 识别每一个资源的验证要求，并拒绝那些不符的请求</li><li> 审查与监控：</li><li> 动态路由：动态将请求路由到不同后端集群</li><li> 压力测试：逐渐增加指向集群的流量，以了解性能</li><li> 负载分配：为每一种负载类型分配对应容量，并弃用超出限定值的请求</li><li> 静态响应处理：边缘位置进行响应，避免转发到内部集群</li><li> 多区域弹性：跨域AWS Region进行请求路由，旨在实现ELB(ElasticLoad Balancing)使用多样化</li></ul><h5 id="6、微服务配置文件集中管理Spring-Cloud-Config"><a href="#6、微服务配置文件集中管理Spring-Cloud-Config" class="headerlink" title="6、微服务配置文件集中管理Spring Cloud Config"></a>6、微服务配置文件集中管理Spring Cloud Config</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  在分布式系统中，由于服务数量巨多，为了方便服务配置文件统一管理，实时更新，所</span><br><span class="line">以需要分布式配置中心组件。在Spring Cloud中，有分布式配置中心组件spring cloud</span><br><span class="line">config ，它支持配置服务放在配置服务的内存中（即本地），也支持放在远程Git仓库</span><br><span class="line">中。在spring cloud config 组件中，分两个角色，一是config server，二是config</span><br><span class="line">client。</span><br><span class="line">  Config Server是一个可横向扩展、集中式的配置服务器，它用于集中管理应用程序各个</span><br><span class="line">环境下的配置，默认使用Git存储配置文件内容，也可以使用SVN存储，或者是本地文件</span><br><span class="line">存储。</span><br><span class="line">  Config Client是Config Server的客户端，用于操作存储在Config Server中的配置内容。</span><br><span class="line">  微服务在启动时会请求Config Server获取配置文件的内容，请求到后再启动容器。</span><br><span class="line">详细内容看在线文档： https://springcloud.cc/spring-cloud-config.html</span><br></pre></td></tr></table></figure><h5 id="7、消息总线组件SpringCloudBus"><a href="#7、消息总线组件SpringCloudBus" class="headerlink" title="7、消息总线组件SpringCloudBus"></a>7、消息总线组件SpringCloudBus</h5><blockquote><p>可以用于动态修改各个微服务系统的配置文件，而不要重新启动微服务</p></blockquote><h4 id="三、系统运维"><a href="#三、系统运维" class="headerlink" title="三、系统运维"></a>三、系统运维</h4><h5 id="1、新建一个Mysql服务器容器"><a href="#1、新建一个Mysql服务器容器" class="headerlink" title="1、新建一个Mysql服务器容器"></a>1、新建一个Mysql服务器容器</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name=union_mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=root centos/mysql-57-centos7</span><br></pre></td></tr></table></figure><h5 id="2、新建一个redis服务器"><a href="#2、新建一个redis服务器" class="headerlink" title="2、新建一个redis服务器"></a>2、新建一个redis服务器</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name=union_redis -p 6379:6379 redis</span><br></pre></td></tr></table></figure><h5 id="3、elasticsearch容器"><a href="#3、elasticsearch容器" class="headerlink" title="3、elasticsearch容器"></a>3、elasticsearch容器</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name=es -p 5601:5601 -p 9200:9200 nshou/elasticsearch-kibana</span><br><span class="line">带挂载文件的创建方式</span><br><span class="line">docker run -di --name=union_es -p 9200:9200 -p 9300:9300 -v /usr/local/es/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml elasticsearch:5.6.8</span><br></pre></td></tr></table></figure><blockquote><p>head安装</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker -di --name=union_eshead -p 9100:9100 mobz/elasticsearch-head:5</span><br></pre></td></tr></table></figure><h5 id="4、导出某个容器"><a href="#4、导出某个容器" class="headerlink" title="4、导出某个容器"></a>4、导出某个容器</h5><blockquote><p>导出某个容器，非常简单，使用docker export命令，语法：docker export $container_id &gt; 容器快照名</p></blockquote><h5 id="5、导入某个容器–docker-import命令"><a href="#5、导入某个容器–docker-import命令" class="headerlink" title="5、导入某个容器–docker import命令"></a>5、导入某个容器–docker import命令</h5><blockquote><p>有了容器快照之后，我们可以在想要的时候随时导入。导入快照使用docker import命令。<br>例如我们可以使用cat centos.tar | docker import - my/centos:v888 导入容器快照作为镜像</p></blockquote><blockquote><p>镜像保存/载入：docker load/docker save；将一个镜像导出为文件，再使用docker load命令将文件导入为一个镜像，会保存该镜像的的所有历史记录。比docker export命令导出的文件大，很好理解，因为会保存镜像的所有历史记录。<br>容器导入/导出：docker import/docker export；将一个容器导出为文件，再使用docker import命令将容器导入成为一个新的镜像，但是相比docker save命令，容器文件会丢失所有元数据和历史记录，仅保存容器当时的状态，相当于虚拟机快照。</p></blockquote><h5 id="6、rabbitMq创建"><a href="#6、rabbitMq创建" class="headerlink" title="6、rabbitMq创建"></a>6、rabbitMq创建</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name=union_rm -p 5671:5617 -p 5672:5672 -p 4369:4369 -p 15671:15671 -p 15672:15672 -p 25672:25672 rabbitmq:management</span><br></pre></td></tr></table></figure><h5 id="7、创建私有仓库容器"><a href="#7、创建私有仓库容器" class="headerlink" title="7、创建私有仓库容器"></a>7、创建私有仓库容器</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -di --name=registry -p 5000:5000 registry</span><br><span class="line">&#123;&quot;registry-mirrors&quot;:[&quot;https://docker.mirrors.ustc.edu.cn&quot;],&quot;insecure-registries&quot;:[&quot;192.168.255.128:5000&quot;]&#125;</span><br><span class="line">刷新配置systemctl daemon-reload</span><br><span class="line">通过Maven插件自动部署。</span><br><span class="line">对于数量众多的微服务，手动部署无疑是非常麻烦的做法，并且容易出错。所以我们这</span><br><span class="line">里学习如何自动部署，这也是企业实际开发中经常使用的方法。</span><br></pre></td></tr></table></figure><h5 id="8、Maven插件自动部署步骤："><a href="#8、Maven插件自动部署步骤：" class="headerlink" title="8、Maven插件自动部署步骤："></a>8、Maven插件自动部署步骤：</h5><h6 id="（1）修改宿主机的docker配置，让其可以远程访问"><a href="#（1）修改宿主机的docker配置，让其可以远程访问" class="headerlink" title="（1）修改宿主机的docker配置，让其可以远程访问"></a>（1）修改宿主机的docker配置，让其可以远程访问</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure><blockquote><p>其中ExecStart=后添加配置 -H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock</p></blockquote><h6 id="（2）修改pom-xml文件，添加插件"><a href="#（2）修改pom-xml文件，添加插件" class="headerlink" title="（2）修改pom.xml文件，添加插件"></a>（2）修改pom.xml文件，添加插件</h6> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>config<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!-- docker的maven插件，官网 https://github.com/spotify/docker-maven-plugin --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.spotify<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">imageName</span>&gt;</span>192.168.255.128:5000/$&#123;project.artifactId&#125;:$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">imageName</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">baseImage</span>&gt;</span>jdk1.8<span class="tag">&lt;/<span class="name">baseImage</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">entryPoint</span>&gt;</span>[&quot;java&quot;, &quot;-jar&quot;,&quot;/$&#123;project.build.finalName&#125;.jar&quot;]<span class="tag">&lt;/<span class="name">entryPoint</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">targetPath</span>&gt;</span>/<span class="tag">&lt;/<span class="name">targetPath</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                           <span class="tag">&lt;<span class="name">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">dockerHost</span>&gt;</span>http://192.168.255.128:2375<span class="tag">&lt;/<span class="name">dockerHost</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="9、Gogs安装与配置"><a href="#9、Gogs安装与配置" class="headerlink" title="9、Gogs安装与配置"></a>9、Gogs安装与配置</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull gogs/gogs</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir -p /var/gogs</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -di --name=gogs -p 10022:22 -p 3000:3000 -v /var/gogsdata:/data gogs/gogs</span></span><br></pre></td></tr></table></figure><h5 id="10、容器管理工具Rancher"><a href="#10、容器管理工具Rancher" class="headerlink" title="10、容器管理工具Rancher"></a>10、容器管理工具Rancher</h5><blockquote><p>Rancher是一个开源的企业级全栈化容器部署及管理平台。Rancher为容器提供一揽<br>子基础架构服务：CNI兼容的网络服务、存储服务、主机管理、负载均衡、防护墙……<br>Rancher让上述服务跨越公有云、私有云、虚拟机、物理机环境运行，真正实现一键式应<br>用部署和管理。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=rancher --restart=always -p 9090:8080 rancher/server</span><br></pre></td></tr></table></figure><h5 id="11、influxDB监控"><a href="#11、influxDB监控" class="headerlink" title="11、influxDB监控"></a>11、influxDB监控</h5><blockquote><p>influxDB是一个分布式时间序列数据库。cAdvisor仅仅显示实时信息，但是不存储<br>监视数据。因此，我们需要提供时序数据库用于存储cAdvisor组件所提供的监控信息，<br>以便显示除实时信息之外的时序数据。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -di -p 8083:8083 -p 8086:8086 --expose 8090 --expose 8099 --name influxsrv tutum/influxdb</span><br></pre></td></tr></table></figure><p>端口概述： 8083端口:web访问端口 8086:数据写入端口</p><h6 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h6><ul><li>创建数据库<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE &quot;cadvisor&quot;</span><br></pre></td></tr></table></figure><h5 id="12、cAdvisor"><a href="#12、cAdvisor" class="headerlink" title="12、cAdvisor"></a>12、cAdvisor</h5><blockquote><p>Google开源的用于监控基础设施应用的工具，它是一个强大的监控工具，不需要任<br>何配置就可以通过运行在Docker主机上的容器来监控Docker容器，而且可以监控Docker<br>主机。更多详细操作和配置选项可以查看Github上的cAdvisor项目文档。</p></blockquote></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --volume=/:/rootfs:ro --volume=/var/run:/var/run:rw --volume=/sys:/sys:ro --volume=/var/lib/docker/:/var/lib/docker:ro --publish=8080:8080 --detach=true --link influxsrv:influxsrv --name=cadvisor google/cadvisor -storage_driver=influxdb -storage_driver_db=union-db -storage_driver_host=influxsrv:8086</span><br></pre></td></tr></table></figure><h5 id="13、Grafana"><a href="#13、Grafana" class="headerlink" title="13、Grafana"></a>13、Grafana</h5><blockquote><p>Grafana是一个可视化面板（Dashboard），有着非常漂亮的图表和布局展示，功<br>能齐全的度量仪表盘和图形编辑器。支持Graphite、zabbix、InfluxDB、Prometheus和<br>OpenTSDB作为数据源。<br>Grafana主要特性：灵活丰富的图形化选项；可以混合多种风格；支持白天和夜间模式；<br>多个数据源。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3001:3000 -e INFLUXDB_HOST=influxsrv -e INFLUXDB_PORT=8086 -e INFLUXDB_NAME=cadvisor -e INFLUXDB_USER=root -e INFLUXDB_PASS=root --link influxsrv:influxsrv --name grafana grafana/grafana</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> SpringCloud </tag>
            
            <tag> 微服务架构 </tag>
            
            <tag> SpringDataJpa </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>轻量级文件存储系统</title>
      <link href="/2019/01/27/%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F/"/>
      <url>/2019/01/27/%E8%BD%BB%E9%87%8F%E7%BA%A7%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="Easy-File-Upload-轻量级文件存储系统"><a href="#Easy-File-Upload-轻量级文件存储系统" class="headerlink" title="Easy File Upload 轻量级文件存储系统"></a>Easy File Upload 轻量级文件存储系统</h2><p><a href="https://gitee.com/mi_chong/EasyFileUpload/">Gitee项目地址</a></p><p><img src="https://file.buildworld.cn/img/ea92cb20ac076f7ad36592c9609f773a_esfu_logo.png" alt="image"></p><blockquote><p>此项目是后端是基于SpringBoot2.x，前端是基于layui，存储仓库是基于七牛云，开箱即用，可以上传本地和云端文件，支持MD5文件校检，防止文件重复上传。前端文件放入Nginx服务器即可，后端项目可以打包位war包，部署到tomcat服务器下即可，完全前后端分离。你可以当做图床，也可以当做网盘，存储文件。</p></blockquote><h4 id="一、测试环境"><a href="#一、测试环境" class="headerlink" title="一、测试环境"></a>一、测试环境</h4><p><a href="http://www.ai2art.com/fileupload/">官网地址-www.ai2art.com/fileupload</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">前端：Nginx-1.12.0</span><br><span class="line">后端：Apache-tomcat-8.5.29</span><br><span class="line">数据库：Mysql</span><br></pre></td></tr></table></figure><p><img src="http://myfile.buildworld.cn/360%E6%88%AA%E5%9B%BE16751025435782.jpg" alt="image"></p><hr><h4 id="二、用户使用"><a href="#二、用户使用" class="headerlink" title="二、用户使用"></a>二、用户使用</h4><h5 id="1、单个文件上传"><a href="#1、单个文件上传" class="headerlink" title="1、单个文件上传"></a>1、单个文件上传</h5><blockquote><p>点击上传或者拖拽文件实现上传，上传完成，自动回调显示文件地址</p></blockquote><p><img src="http://myfile.buildworld.cn/360%E6%88%AA%E5%9B%BE16520817898671.jpg" alt="image"><br><img src="http://myfile.buildworld.cn/360%E6%88%AA%E5%9B%BE1793072184105113.jpg" alt="image"></p><blockquote><p>服务器支持文件MD5校检，实现文件查重。点击上传按钮可以实现云端文件上传，即用户只要提供文件的网络地址，无需下载实现云端存储</p></blockquote><p><img src="http://myfile.buildworld.cn/360%E6%88%AA%E5%9B%BE174012037168101.jpg" alt="image"></p><h5 id="2、多个文件上传"><a href="#2、多个文件上传" class="headerlink" title="2、多个文件上传"></a>2、多个文件上传</h5><blockquote><p>多文件上传，包含了本地文件查重，上传，秒传，上传失败重传，删除功能。</p></blockquote><p><img src="http://myfile.buildworld.cn/360%E6%88%AA%E5%9B%BE17860604528594.jpg" alt="image"></p><h5 id="3、文件列表"><a href="#3、文件列表" class="headerlink" title="3、文件列表"></a>3、文件列表</h5><blockquote><p>文件列表包括文件分页显示，文件搜索，显示文件名称，文件大小，文件MD5，文件网络地址，文件上传时间。暂时不支持删除！开发者可以自己加。</p></blockquote><p><img src="http://myfile.buildworld.cn/360%E6%88%AA%E5%9B%BE17571116264764.jpg" alt="image"></p><hr><h4 id="三、开发者"><a href="#三、开发者" class="headerlink" title="三、开发者"></a>三、开发者</h4><h5 id="1、后端"><a href="#1、后端" class="headerlink" title="1、后端"></a>1、后端</h5><blockquote><p>后端采用SpringBoot+SpringDataJpa框架开发，采用目前最新的SpringBoot稳定版，测试运行正常，部署到Tomcat8+版本即可。数据库名称qiniuyun。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SpringBoot: 2.1.2.RELEASE</span><br></pre></td></tr></table></figure><ul><li>修改application.yml文件配置</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#七牛云配置，自己到七牛云控制台获取</span><br><span class="line">qiniuyun:</span><br><span class="line">  config:</span><br><span class="line">    accesskey: XXXXXXXXXXXXXXXXXX</span><br><span class="line">    secretkey: XXXXXXXXXXXXXXXXXXXX</span><br><span class="line">    bucket: 七牛云存储空间名称</span><br><span class="line">    fileurl: 文件地址前缀（如 http://myfile.buildworld.cn/）</span><br></pre></td></tr></table></figure><h5 id="2、前端"><a href="#2、前端" class="headerlink" title="2、前端"></a>2、前端</h5><blockquote><p>前端使用layui框架，使用时注意修改请求接口的地址即可</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
            <tag> SpringDataJpa </tag>
            
            <tag> layui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>毕业纪念</title>
      <link href="/2018/05/23/%E6%AF%95%E4%B8%9A%E7%BA%AA%E5%BF%B5/"/>
      <url>/2018/05/23/%E6%AF%95%E4%B8%9A%E7%BA%AA%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>    <div id="aplayer-LGBaEZke" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="28892408" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="true" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div><p></p><div class="note success flat"><h2 id="2014年10月"><a href="#2014年10月" class="headerlink" title="2014年10月"></a>2014年10月</h2><p><strong>大半夜</strong> 打了个的就是为了去看这个 <strong>大提琴</strong></p></div><div class="justified-gallery"><p><img src="http://myuniversity.buildworld.cn/123.jpg"></p>          </div><div class="note success flat"><h2 id="2015年03月"><a href="#2015年03月" class="headerlink" title="2015年03月"></a>2015年03月</h2></div><blockquote><p>冒着被宿管打死的危险，煮了一波元宵🥘</p></blockquote><div class="justified-gallery"><p><img src="http://myuniversity.buildworld.cn/IMG_20150305_180932.jpg"></p>          </div><blockquote><p>三个追风少年🤪</p></blockquote><div class="justified-gallery"><p><img src="http://myuniversity.buildworld.cn/IMG_20150305_205340.jpg"><br><img src="http://myuniversity.buildworld.cn/IMG_20150305_205712.jpg"><br><img src="http://myuniversity.buildworld.cn/IMG_20150305_205300.jpg"></p>          </div><blockquote><p>小小的孔明灯放飞梦想🛫  </p></blockquote><div class="justified-gallery"><p><img src="http://myuniversity.buildworld.cn/IMG_20150305_214910.jpg"></p>          </div><blockquote><p>老大辛苦了，也没有白白浪费你一米九二的个子。🤣</p></blockquote><div class="justified-gallery"><p><img src="http://myuniversity.buildworld.cn/IMG_20150331_214241.jpg"></p>          </div><div class="note success flat"><h2 id="2015年04月"><a href="#2015年04月" class="headerlink" title="2015年04月"></a>2015年04月</h2><p>爱 <strong>健身</strong> 的室友🥱</p></div><div class="justified-gallery"><p><img src="http://myuniversity.buildworld.cn/IMG_20150421_001616.jpg"></p>          </div><div class="note success flat"><h2 id="2015年06月"><a href="#2015年06月" class="headerlink" title="2015年06月"></a>2015年06月</h2><p>咦！。。。🤣</p></div><div class="justified-gallery"><p><img src="http://myuniversity.buildworld.cn/IMG_20150614_221100.jpg"></p>          </div><div class="note success flat"><h2 id="2015年11月"><a href="#2015年11月" class="headerlink" title="2015年11月"></a>2015年11月</h2></div><blockquote><p>你这线接的，你确定老师不来打你嘛 <strong>（背景那个人怎么回事）</strong></p></blockquote><div class="justified-gallery"><p><img src="http://myuniversity.buildworld.cn/IMG_20151109_171503.jpg"></p>          </div><blockquote><p>天气确实有点冷 <strong>（这张照片差点被老大打死）</strong></p></blockquote><div class="justified-gallery"><p><img src="http://myuniversity.buildworld.cn/IMG_20151110_122535.jpg"></p>          </div><div class="note success flat"><h2 id="2015年12月"><a href="#2015年12月" class="headerlink" title="2015年12月"></a>2015年12月</h2></div><blockquote><p>睡的香吗，又熬夜打游戏了吧</p></blockquote><div class="justified-gallery"><p><img src="http://myuniversity.buildworld.cn/IMG_20151203_082134.jpg"></p>          </div><blockquote><p><strong>2015</strong>年的最后一天</p></blockquote><div class="justified-gallery"><p><img src="http://myuniversity.buildworld.cn/IMG_20151231_184115.jpg"></p>          </div>        <div class="note success flat"><h2 id="2016年3月"><a href="#2016年3月" class="headerlink" title="2016年3月"></a>2016年3月</h2><p>这个比赛我们学校可神气了</p></div><div class="justified-gallery"><p><img src="http://myuniversity.buildworld.cn/IMG_20160324_191007.jpg"></p>          </div><div class="note success flat"><h2 id="2016年5月"><a href="#2016年5月" class="headerlink" title="2016年5月"></a>2016年5月</h2></div><blockquote><p>花式秀技术👍</p></blockquote><div class="justified-gallery"><p><img src="http://myuniversity.buildworld.cn/IMG_20160507_172319.jpg"><br><img src="http://myuniversity.buildworld.cn/IMG_20160507_172332.jpg"><br><img src="http://myuniversity.buildworld.cn/IMG_20160519_225550.jpg"></p>          </div><blockquote><p><strong>可爱不🤣</strong></p></blockquote><div class="justified-gallery"><p><img src="http://myuniversity.buildworld.cn/IMG_20160520_203302.jpg"></p>          </div><blockquote><p>什么时候英雄联盟出电影，当年的人不知道能不能聚在一起了</p></blockquote><div class="justified-gallery"><p><img src="http://myuniversity.buildworld.cn/IMG_20160608_204202.jpg"></p>          </div><blockquote><p>到了国家需要我的时候了💪</p></blockquote><div class="justified-gallery"><p><img src="http://myuniversity.buildworld.cn/IMG_20160617_173758_HDR.jpg"></p>          </div><div class="note success flat"><h2 id="2016年7月"><a href="#2016年7月" class="headerlink" title="2016年7月"></a>2016年7月</h2></div><blockquote><p>那个好像是<strong>RIO</strong>，某人倒了</p></blockquote><div class="justified-gallery"><p><img src="http://myuniversity.buildworld.cn/IMG_20160507_194028.jpg"><br><img src="http://myuniversity.buildworld.cn/IMG_20160507_210101.jpg"></p>          </div><blockquote><p>感谢大家😛</p></blockquote><div class="justified-gallery"><p><img src="http://myuniversity.buildworld.cn/IMG_20160701_224822.jpg"></p>          </div><div class="note success flat"><h2 id="2016年11月"><a href="#2016年11月" class="headerlink" title="2016年11月"></a>2016年11月</h2><p>有<strong>故事</strong>的两个男人</p></div><div class="justified-gallery"><p><img src="http://myuniversity.buildworld.cn/IMG_20161125_121947.jpg"><br><img src="http://myuniversity.buildworld.cn/IMG_20161125_121934.jpg"></p>          </div><div class="note success flat"><h2 id="2017年2月"><a href="#2017年2月" class="headerlink" title="2017年2月"></a>2017年2月</h2><p>曾经也为梦想打拼过</p></div><div class="justified-gallery"><p><img src="http://myuniversity.buildworld.cn/IMG_20170218_174815.jpg"><br><img src="http://myuniversity.buildworld.cn/IMG_20170303_174611.jpg"></p>          </div><div class="note success flat"><h2 id="2017年3月"><a href="#2017年3月" class="headerlink" title="2017年3月"></a>2017年3月</h2></div><blockquote><p>去探望两个<strong>犯人</strong></p></blockquote><div class="justified-gallery"><p><img src="http://myuniversity.buildworld.cn/IMG_20170325_214811.jpg"><br><img src="http://myuniversity.buildworld.cn/IMG_20170325_221042.jpg"></p>          </div><blockquote><p>一个个会享受</p></blockquote><div class="justified-gallery"><p><img src="http://myuniversity.buildworld.cn/IMG_20170312_195019.jpg"></p>          </div><div class="note success flat"><h2 id="2017年4月"><a href="#2017年4月" class="headerlink" title="2017年4月"></a>2017年4月</h2><p>没错，<strong>辣个男人</strong>又来了，解锁一波新姿势🤣</p></div><div class="justified-gallery"><p><img src="http://myuniversity.buildworld.cn/IMG_20170430_213004.jpg"><br><img src="http://myuniversity.buildworld.cn/IMG_20170430_215255.jpg"></p>          </div><div class="note success flat"><h2 id="2018年5月"><a href="#2018年5月" class="headerlink" title="2018年5月"></a>2018年5月</h2></div><blockquote><p>409棋牌室欢迎您</p></blockquote><div class="justified-gallery"><p><img src="http://myuniversity.buildworld.cn/IMG_20180523_235804.jpg"><br><img src="http://myuniversity.buildworld.cn/IMG_20180521_114932.jpg"></p>          </div><blockquote><p>上次一起吃饭还是去年考试</p></blockquote><div class="justified-gallery"><p><img src="http://myuniversity.buildworld.cn/IMG_20180523_124637.jpg"></p>          </div><blockquote><p>我们毕业啦</p></blockquote><div class="justified-gallery"><p><img src="http://myuniversity.buildworld.cn/mmexport1527150846686.jpg"></p>          </div>]]></content>
      
      
      <categories>
          
          <category> 回忆录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大学 </tag>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker（二）基础使用</title>
      <link href="/2018/05/22/Docker%EF%BC%88%E4%BA%8C%EF%BC%89%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/05/22/Docker%EF%BC%88%E4%BA%8C%EF%BC%89%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="一、基础配置命令"><a href="#一、基础配置命令" class="headerlink" title="一、基础配置命令"></a>一、基础配置命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看所有容器</span></span><br><span class="line">docker ps -a</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看运行中的容器</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动容器</span></span><br><span class="line">docker start 容器名或ID</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入容器</span></span><br><span class="line">docker attach 容器名或ID</span><br></pre></td></tr></table></figure><h5 id="dokcer-run命令"><a href="#dokcer-run命令" class="headerlink" title="dokcer run命令"></a>dokcer run命令</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">docker run &lt;相关参数&gt; &lt;镜像 ID&gt; &lt;初始命令&gt;</span><br><span class="line"></span><br><span class="line">-i：表示以“交互模式”运行容器</span><br><span class="line">-t：表示容器启动后会进入其命令行</span><br><span class="line">-v：表示需要将本地哪个目录挂载到容器中，格式：-v &lt;宿主机目录&gt;:&lt;容器目录&gt;</span><br><span class="line"></span><br><span class="line">Usage: docker run [OPTIONS] IMAGE [COMMAND] [ARG...]  </span><br><span class="line"></span><br><span class="line">  -d, --detach=false         指定容器运行于前台还是后台，默认为false   </span><br><span class="line">  -i, --interactive=false   打开STDIN，用于控制台交互  </span><br><span class="line">  -t, --tty=false            分配tty设备，该可以支持终端登录，默认为false  </span><br><span class="line">  -u, --user=&quot;&quot;              指定容器的用户  </span><br><span class="line">  -a, --attach=[]            登录容器（必须是以docker run -d启动的容器）</span><br><span class="line">  -w, --workdir=&quot;&quot;           指定容器的工作目录 </span><br><span class="line">  -c, --cpu-shares=0        设置容器CPU权重，在CPU共享场景使用  </span><br><span class="line">  -e, --env=[]               指定环境变量，容器中可以使用该环境变量  </span><br><span class="line">  -m, --memory=&quot;&quot;            指定容器的内存上限  </span><br><span class="line">  -P, --publish-all=false    指定容器暴露的端口  </span><br><span class="line">  -p, --publish=[]           指定容器暴露的端口 </span><br><span class="line">  -h, --hostname=&quot;&quot;          指定容器的主机名  </span><br><span class="line">  -v, --volume=[]            给容器挂载存储卷，挂载到容器的某个目录  </span><br><span class="line">  --volumes-from=[]          给容器挂载其他容器上的卷，挂载到容器的某个目录</span><br><span class="line">  --cap-add=[]               添加权限，权限清单详见：http://linux.die.net/man/7/capabilities  </span><br><span class="line">  --cap-drop=[]              删除权限，权限清单详见：http://linux.die.net/man/7/capabilities  </span><br><span class="line">  --cidfile=&quot;&quot;               运行容器后，在指定文件中写入容器PID值，一种典型的监控系统用法  </span><br><span class="line">  --cpuset=&quot;&quot;                设置容器可以使用哪些CPU，此参数可以用来容器独占CPU  </span><br><span class="line">  --device=[]                添加主机设备给容器，相当于设备直通  </span><br><span class="line">  --dns=[]                   指定容器的dns服务器  </span><br><span class="line">  --dns-search=[]            指定容器的dns搜索域名，写入到容器的/etc/resolv.conf文件  </span><br><span class="line">  --entrypoint=&quot;&quot;            覆盖image的入口点  </span><br><span class="line">  --env-file=[]              指定环境变量文件，文件格式为每行一个环境变量  </span><br><span class="line">  --expose=[]                指定容器暴露的端口，即修改镜像的暴露端口  </span><br><span class="line">  --link=[]                  指定容器间的关联，使用其他容器的IP、env等信息  </span><br><span class="line">  --lxc-conf=[]              指定容器的配置文件，只有在指定--exec-driver=lxc时使用  </span><br><span class="line">  --name=&quot;&quot;                  指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字  </span><br><span class="line">  --net=&quot;bridge&quot;             容器网络设置:</span><br><span class="line">                                bridge 使用docker daemon指定的网桥     </span><br><span class="line">                                host     //容器使用主机的网络  </span><br><span class="line">                                container:NAME_or_ID  &gt;//使用其他容器的网路，共享IP和PORT等网络资源  </span><br><span class="line">                                none 容器使用自己的网络（类似--net=bridge），但是不进行配置 </span><br><span class="line">  --privileged=false         指定容器是否为特权容器，特权容器拥有所有的capabilities  </span><br><span class="line">  --restart=&quot;no&quot;             指定容器停止后的重启策略:</span><br><span class="line">                                no：容器退出时不重启  </span><br><span class="line">                                on-failure：容器故障退出（返回值非零）时重启 </span><br><span class="line">                                always：容器退出时总是重启  </span><br><span class="line">  --rm=false                 指定容器停止后自动删除容器(不支持以docker run -d启动的容器)  </span><br><span class="line">  --sig-proxy=true           设置由代理接受并处理信号，但是SIGCHLD、SIGSTOP和SIGKILL不能被代理  </span><br></pre></td></tr></table></figure><h4 id="二、Docker命令"><a href="#二、Docker命令" class="headerlink" title="二、Docker命令"></a>二、Docker命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">镜像操作：</span><br><span class="line">    build     Build an image from a Dockerfile</span><br><span class="line">    commit    Create a new image from a container&#x27;s changes</span><br><span class="line">    images    List images</span><br><span class="line">    load      Load an image from a tar archive or STDIN</span><br><span class="line">    pull      Pull an image or a repository from a registry</span><br><span class="line">    push      Push an image or a repository to a registry</span><br><span class="line">    rmi       Remove one or more images</span><br><span class="line">    search    Search the Docker Hub for images</span><br><span class="line">    tag       Tag an image into a repository</span><br><span class="line">    save      Save one or more images to a tar archive </span><br><span class="line">    history   显示某镜像的历史</span><br><span class="line">    inspect   获取镜像的详细信息</span><br><span class="line"></span><br><span class="line">    容器及其中应用的生命周期操作：</span><br><span class="line">    create    创建一个容器</span><br><span class="line">    kill      Kill one or more running containers</span><br><span class="line">    inspect   Return low-level information on a container, image or task</span><br><span class="line">    pause     Pause all processes within one or more containers</span><br><span class="line">    ps        List containers</span><br><span class="line">    rm        删除一个或者多个容器</span><br><span class="line">    rename    Rename a container</span><br><span class="line">    restart   Restart a container</span><br><span class="line">    run       创建并启动一个容器</span><br><span class="line">    start     启动一个处于停止状态的容器</span><br><span class="line">    stats     显示容器实时的资源消耗信息</span><br><span class="line">    stop      停止一个处于运行状态的容器</span><br><span class="line">    top       Display the running processes of a container</span><br><span class="line">    unpause   Unpause all processes within one or more containers</span><br><span class="line">    update    Update configuration of one or more containers</span><br><span class="line">    wait      Block until a container stops, then print its exit code</span><br><span class="line">    attach    Attach to a running container</span><br><span class="line">    exec      Run a command in a running container</span><br><span class="line">    port      List port mappings or a specific mapping for the container</span><br><span class="line">    logs      获取容器的日志</span><br><span class="line"></span><br><span class="line">    容器文件系统操作：</span><br><span class="line">    cp        Copy files/folders between a container and the local filesystem</span><br><span class="line">    diff      Inspect changes on a container&#x27;s filesystem</span><br><span class="line">    export    Export a container&#x27;s filesystem as a tar archive</span><br><span class="line">    import    Import the contents from a tarball to create a filesystem image</span><br><span class="line"></span><br><span class="line">    Docker registry 操作：</span><br><span class="line">    login     Log in to a Docker registry.</span><br><span class="line">    logout    Log out from a Docker registry.</span><br><span class="line"></span><br><span class="line">    Volume 操作</span><br><span class="line">    volume    Manage Docker volumes</span><br><span class="line"></span><br><span class="line">    网络操作</span><br><span class="line">    network   Manage Docker networks</span><br><span class="line"></span><br><span class="line">    Swarm 相关操作</span><br><span class="line">    swarm     Manage Docker Swarm</span><br><span class="line">    service   Manage Docker services</span><br><span class="line">    node      Manage Docker Swarm nodes</span><br><span class="line"></span><br><span class="line">    系统操作：</span><br><span class="line">    version   Show the Docker version information</span><br><span class="line">    events    持续返回docker 事件</span><br><span class="line">    info      显示Docker 主机系统范围内的信息</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看运行中的容器</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看所有容器</span></span><br><span class="line">docker ps -a</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出容器</span></span><br><span class="line">按Ctrl+D 即可退出当前容器【但退出后会停止容器】</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出不停止容器：</span></span><br><span class="line">组合键：Ctrl+P+Q</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动容器</span></span><br><span class="line">docker start 容器名或ID</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入容器</span></span><br><span class="line">docker attach 容器名或ID</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止容器</span></span><br><span class="line">docker stop 容器名或ID</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 暂停容器</span></span><br><span class="line">docker pause 容器名或ID</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">继续容器</span></span><br><span class="line">docker unpause 容器名或ID</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除容器</span></span><br><span class="line">docker rm 容器名或ID</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除全部容器--慎用</span></span><br><span class="line">docker stop $(docker ps -q) &amp; docker rm $(docker ps -aq)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">保存容器，生成镜像</span></span><br><span class="line">docker commit 容器ID 镜像名称</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">从 host 拷贝文件到 container 里面</span></span><br><span class="line">docker cp /home/soft centos:/webapp</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker（一）安装和配置</title>
      <link href="/2018/05/19/Docker%EF%BC%88%E4%B8%80%EF%BC%89%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/05/19/Docker%EF%BC%88%E4%B8%80%EF%BC%89%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h4><p>Docker这个名称大家估计已经不陌生了吧，在我大三的时候就听说过这个，也研究过一阵子，也就知道点皮毛，现在由于线上服务器资源紧张，本地搭建虚拟机也过于浪费，所以这段时间好好研究一下Docker技术，也为后面的后端开发提供各种环境保障，比如服务器集群，es，Nginx等等。</p><p><img src="https://ws1.sinaimg.cn/large/005EneYkgy1frgtavax6jj30cr079mxp.jpg"></p><p>从上面的图像就可以看到，一个大鲸鱼上面有好多集装箱，大鲸鱼就好像是我们的产品（大容器），集装箱就是一个个服务器。</p><p>下面看看传统虚拟机和Docker架构的区别：</p><p><img src="https://ws1.sinaimg.cn/large/005EneYkgy1frgto9v4xaj30ok0dtwen.jpg"></p><p>从上面的两张图片可以看出，传统的虚拟机架构和Docker体系架构的区别是，在传统的虚拟机中有一层虚拟机操作系统，而Docker却没有。所以Docker的启动速度和存储空间远远优于传统的虚拟机。</p><p>下面大家看看Docker官方的架构图：</p><p><img src="https://ws1.sinaimg.cn/large/005EneYkgy1frgyjprvcbj30qm0e640h.jpg"></p><h4 id="windows安装"><a href="#windows安装" class="headerlink" title="windows安装"></a>windows安装</h4><h5 id="1、使用的软件"><a href="#1、使用的软件" class="headerlink" title="1、使用的软件"></a>1、使用的软件</h5><p><a href="http://mirrors.aliyun.com/docker-toolbox/windows/">http://mirrors.aliyun.com/docker-toolbox/windows/</a></p><p><img src="https://ws1.sinaimg.cn/large/005EneYkgy1frh21puistj30hg03uq2v.jpg"></p><p>docker-for-windows适合于在win10上面使用，默认使用的是win10自带的虚拟机软件Hyper，直接安装即可，提供官方的账号登录。</p><p>docker-toolbox加载boot2docker.iso镜像到virtualbox中去，通过xshell等连接软件即可连接到docker系统。使用这种方式注意，主要是这个镜像是放在github上面的，国内通常下载不下来，因为软件第一次打开的时候回去联网查询最新的版本并且下载下来，国内网通常导致连接超时，无法下载镜像，进而导致软件无法使用，也就无法使用docker了。</p><p><code>Docker Quickstart Terminal</code>启动后会复制<code>C:\Users\Administrator\.docker\machine\cache</code>下的镜像<code>boot2docker.iso</code>到<code>C:\Users\Administrator\.docker\machine\machines\default</code>下面。</p><p>检测到默认的镜像不是最新版本的，需要到<a href="https://github.com/boot2docker/boot2docker/releases">https://github.com/boot2docker/boot2docker/releases</a>下载最新的，并复制到<code>C:\Users\Administrator\.docker\machine\cache</code>目录下。</p><p><img src="https://ws1.sinaimg.cn/large/005EneYkgy1frh28u5bwcj30ra0dtwf3.jpg"></p><h5 id="2、安装步骤"><a href="#2、安装步骤" class="headerlink" title="2、安装步骤"></a>2、安装步骤</h5><p>我的是在windows上面安装的，大家如果有需要去看看这这两篇博客，下面都是基于docker-toolbox来安装的：</p><p><a href="https://blog.csdn.net/tina_ttl/article/details/51372604">https://blog.csdn.net/tina_ttl/article/details/51372604</a></p><p><a href="https://blog.csdn.net/zistxym/article/details/42918339">https://blog.csdn.net/zistxym/article/details/42918339</a></p><h4 id="Linux安装"><a href="#Linux安装" class="headerlink" title="Linux安装"></a>Linux安装</h4><h5 id="1、Ubuntu-14-04-16-04-使用apt-get进行安装"><a href="#1、Ubuntu-14-04-16-04-使用apt-get进行安装" class="headerlink" title="1、Ubuntu 14.04 16.04 (使用apt-get进行安装)"></a>1、Ubuntu 14.04 16.04 (使用apt-get进行安装)</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> step 1: 安装必要的一些系统工具</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line"><span class="meta">#</span><span class="bash"> step 2: 安装GPG证书</span></span><br><span class="line">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"><span class="meta">#</span><span class="bash"> Step 3: 写入软件源信息</span></span><br><span class="line">sudo add-apt-repository &quot;deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> Step 4: 更新并安装 Docker-CE</span></span><br><span class="line">sudo apt-get -y update</span><br><span class="line">sudo apt-get -y install docker-ce</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装指定版本的Docker-CE:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Step 1: 查找Docker-CE的版本:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> apt-cache madison docker-ce</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   docker-ce | 17.03.1~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   docker-ce | 17.03.0~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Step 2: 安装指定版本的Docker-CE: (VERSION 例如上面的 17.03.1~ce-0~ubuntu-xenial)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sudo apt-get -y install docker-ce=[VERSION]</span></span><br></pre></td></tr></table></figure><h5 id="2、CentOS-7-使用yum进行安装"><a href="#2、CentOS-7-使用yum进行安装" class="headerlink" title="2、CentOS 7 (使用yum进行安装)"></a>2、CentOS 7 (使用yum进行安装)</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> step 1: 安装必要的一些系统工具</span></span><br><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="meta">#</span><span class="bash"> Step 2: 添加软件源信息</span></span><br><span class="line">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta">#</span><span class="bash"> Step 3: 更新并安装 Docker-CE</span></span><br><span class="line">sudo yum makecache fast</span><br><span class="line">sudo yum -y install docker-ce</span><br><span class="line"><span class="meta">#</span><span class="bash"> Step 4: 开启Docker服务</span></span><br><span class="line">sudo service docker start</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 官方软件源默认启用了最新的软件，您可以通过编辑软件源的方式获取各个版本的软件包。例如官方并没有将测试版本的软件源置为可用，你可以通过以下方式开启。同理可以开启各种测试版本等。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> vim /etc/yum.repos.d/docker-ee.repo</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   将 [docker-ce-test] 下方的 enabled=0 修改为 enabled=1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># 安装指定版本的Docker-CE:</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Step 1: 查找Docker-CE的版本:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> yum list docker-ce.x86_64 --showduplicates | sort -r</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   Loading mirror speeds from cached hostfile</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   Loaded plugins: branch, fastestmirror, langpacks</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   docker-ce.x86_64            17.03.1.ce-1.el7.centos            docker-ce-stable</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   docker-ce.x86_64            17.03.1.ce-1.el7.centos            @docker-ce-stable</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   docker-ce.x86_64            17.03.0.ce-1.el7.centos            docker-ce-stable</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   Available Packages</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Step2 : 安装指定版本的Docker-CE: (VERSION 例如上面的 17.03.0.ce.1-1.el7.centos)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sudo yum -y install docker-ce-[VERSION]</span></span><br></pre></td></tr></table></figure><h5 id="安装校验"><a href="#安装校验" class="headerlink" title="安装校验"></a>安装校验</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">root@iZbp12adskpuoxodbkqzjfZ:$ docker version</span><br><span class="line">Client:</span><br><span class="line"> Version:      17.03.0-ce</span><br><span class="line"> API version:  1.26</span><br><span class="line"> Go version:   go1.7.5</span><br><span class="line"> Git commit:   3a232c8</span><br><span class="line"> Built:        Tue Feb 28 07:52:04 2017</span><br><span class="line"> OS/Arch:      linux/amd64</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Version:      17.03.0-ce</span><br><span class="line"> API version:  1.26 (minimum version 1.12)</span><br><span class="line"> Go version:   go1.7.5</span><br><span class="line"> Git commit:   3a232c8</span><br><span class="line"> Built:        Tue Feb 28 07:52:04 2017</span><br><span class="line"> OS/Arch:      linux/amd64</span><br><span class="line"> Experimental: false</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈线程</title>
      <link href="/2018/05/18/%E8%B0%88%E8%B0%88%E7%BA%BF%E7%A8%8B/"/>
      <url>/2018/05/18/%E8%B0%88%E8%B0%88%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>关于Java 的线程问题，我们上大学的时候，计算机专业的学生肯定会遇到这两个名词–线程和进程，老师和我们说一个进程里面可以有多个线程，这里也引出了多线程的概念。可以看一看下面这张图</p><p><img src="https://ws1.sinaimg.cn/large/005EneYkgy1freg81tlhwj30lr0edmxv.jpg"></p><p>提到Java中的线程，我们就会想到Thread以及Runnable，也了解了Thread的生命周期，请看下图：</p><p><img src="https://ws1.sinaimg.cn/large/005EneYkgy1fregagxh1zj30mb07kab6.jpg"></p><p>相信大家也写过关于线程的小程序，比如卖火车票啊，生产者消费者模式等。我们使用到了synchronized加锁技术（或者使用Lock方法），也用到了关于线程通知，等待任务的notifyAll()和wait()方法。更多的使用大家找一本大书去看吧，比如《Java核心技术》什么的，Java基础不是本文的重点。下面我们谈谈线程池和多线程的原理和使用，以及整合springboot框架。</p><h4 id="一、线程池"><a href="#一、线程池" class="headerlink" title="一、线程池"></a>一、线程池</h4><p>在多线程任务环境中，每次开启一个任务，我们把它提交到线程池中，交给线程池来管理，由线程池来调度任务。如果每次开启任务都要创建一个线程，那么对于大量任务的环境下，服务器资源将会很快耗尽，不仅对服务是一个灾难，对于用户体验来说也是一个灾难。此时，我们来谈谈Java中线程池技术。</p><h5 id="1、线程池种类"><a href="#1、线程池种类" class="headerlink" title="1、线程池种类"></a>1、线程池种类</h5><h6 id="（1）newSingleThreadExecutor"><a href="#（1）newSingleThreadExecutor" class="headerlink" title="（1）newSingleThreadExecutor"></a>（1）newSingleThreadExecutor</h6><p>单线程的线程池，在这个线程池中的所有任务只有一个线程去执行，如果当前的线程因为异常结束，将会有新的线程来执行，保证任务按照顺序执行下去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService pool = Executors.newSingleThreadExecutor();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            pool.execute(() -&gt; &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName());</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="（2）newFixedThreadPool"><a href="#（2）newFixedThreadPool" class="headerlink" title="（2）newFixedThreadPool"></a>（2）newFixedThreadPool</h6><p>创建一个固定线程数目的线程池，每次执行一个新的任务都会创建一个新的线程，直到达到我们设定的线程数。同样的，如果某个线程因为异常而结束，就会补充一个新的线程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService pool = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            pool.execute(() -&gt; &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName());</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="（3）newCachedThreadPool"><a href="#（3）newCachedThreadPool" class="headerlink" title="（3）newCachedThreadPool"></a>（3）<strong>newCachedThreadPool</strong></h6><p>创建一个可缓存的线程池，如果线程池大小超过了任务所需的线程数目，线程池将会回收多余的线程，相反，任务所需线程增加，线程池也会增加线程，弹性修改线程池中的线程数目。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService pool = Executors.newCachedThreadPool();</span><br></pre></td></tr></table></figure><h6 id="（4）newScheduledThreadPool"><a href="#（4）newScheduledThreadPool" class="headerlink" title="（4）newScheduledThreadPool"></a>（4）<strong>newScheduledThreadPool</strong></h6><p>此线程支持周期性和定时任务。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ScheduledExecutorService pool = Executors.newScheduledThreadPool(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            pool.schedule(() -&gt; &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t开始发车啦....&quot;</span>);</span><br><span class="line">            &#125;, <span class="number">10</span>, TimeUnit.SECONDS);<span class="comment">//延迟10秒执行任务</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们有定时和周期性任务需求的时候，下面是每隔1秒执行一次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//pool.scheduleWithFixedDelay也可以</span></span><br><span class="line">pool.scheduleAtFixedRate(() -&gt; &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;\t开始发车啦....&quot;</span>);</span><br><span class="line">&#125;, <span class="number">1</span>, <span class="number">1</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure><h6 id="（5）newWorkStealingPool"><a href="#（5）newWorkStealingPool" class="headerlink" title="（5）newWorkStealingPool"></a>（5）<strong>newWorkStealingPool</strong></h6><p>jdk8才有的，会根据所给的并行层次来动态地开启关闭线程，通过使用多个队列减少竞争，底层使用ForkJoinPool来实现的。充分利用多CPU多核，将一个任务拆分位多个小任务，放到多个处理器中执行，等这些小任务完成之后，再次合并为这个完整的任务。</p><p><strong>源码：参数parallelism应该是并行层次吧，参考无参的那个方法，这个parallelism应该是可用处理器数目</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a thread pool that maintains enough threads to support</span></span><br><span class="line"><span class="comment">     * the given parallelism level, and may use multiple queues to</span></span><br><span class="line"><span class="comment">     * reduce contention. The parallelism level corresponds to the</span></span><br><span class="line"><span class="comment">     * maximum number of threads actively engaged in, or available to</span></span><br><span class="line"><span class="comment">     * engage in, task processing. The actual number of threads may</span></span><br><span class="line"><span class="comment">     * grow and shrink dynamically. A work-stealing pool makes no</span></span><br><span class="line"><span class="comment">     * guarantees about the order in which submitted tasks are</span></span><br><span class="line"><span class="comment">     * executed.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> parallelism the targeted parallelism level</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the newly created thread pool</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IllegalArgumentException if &#123;<span class="doctag">@code</span> parallelism &lt;= 0&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newWorkStealingPool</span><span class="params">(<span class="keyword">int</span> parallelism)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ForkJoinPool</span><br><span class="line">            (parallelism,</span><br><span class="line">             ForkJoinPool.defaultForkJoinWorkerThreadFactory,</span><br><span class="line">             <span class="keyword">null</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a work-stealing thread pool using all</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> Runtime#availableProcessors available processors&#125;</span></span><br><span class="line"><span class="comment">     * as its target parallelism level.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the newly created thread pool</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> #newWorkStealingPool(int)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newWorkStealingPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ForkJoinPool</span><br><span class="line">            <span class="comment">//Runtime.getRuntime().availableProcessors()返回的是可用处理器数目</span></span><br><span class="line">            (Runtime.getRuntime().availableProcessors(),</span><br><span class="line">             ForkJoinPool.defaultForkJoinWorkerThreadFactory,</span><br><span class="line">             <span class="keyword">null</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><ul><li><code>newSingleThreadExecutor：一个单线程的线程池，可以用于需要保证顺序执行的场景，并且只有一个线程在执行。</code></li><li><code>newFixedThreadPool：一个固定大小的线程池，可以用于已知并发压力的情况下，对线程数做限制。</code></li><li><code>newCachedThreadPool：一个可以无限扩大的线程池，比较适合处理执行时间比较小的任务。</code></li><li><code>newScheduledThreadPool：可以延时启动，定时启动的线程池，适用于需要多个后台线程执行周期任务的场景。</code></li><li><code>newWorkStealingPool：一个拥有多个任务队列的线程池，可以减少连接数，创建当前可用cpu数量的线程来并行执行。</code></li></ul><h5 id="2、线程池的拒绝策略"><a href="#2、线程池的拒绝策略" class="headerlink" title="2、线程池的拒绝策略"></a>2、线程池的拒绝策略</h5><p>当任务过多，而且处理器无法处理额外的任务，我们所要要做的就是拒绝服务，java中提供了RejectedExecutionHandler接口，通过实现这个接口的rejectedExecution()方法实现不同的拒绝策略。下面是源码查看一波。</p><h6 id="（1）AbortPolicy策略"><a href="#（1）AbortPolicy策略" class="headerlink" title="（1）AbortPolicy策略"></a>（1）AbortPolicy策略</h6><p><strong>该策略直接抛出异常，阻止系统正常运行</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AbortPolicy</span> <span class="keyword">implements</span> <span class="title">RejectedExecutionHandler</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">AbortPolicy</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 总是抛出异常</span></span><br><span class="line"><span class="comment">         * Always throws RejectedExecutionException.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> r the runnable task requested to be executed</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> e the executor attempting to execute this task</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> RejectedExecutionException always</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RejectedExecutionException(<span class="string">&quot;Task &quot;</span> + r.toString() +</span><br><span class="line">                                                 <span class="string">&quot; rejected from &quot;</span> +</span><br><span class="line">                                                 e.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="（2）CallerRunsPolicy-策略"><a href="#（2）CallerRunsPolicy-策略" class="headerlink" title="（2）CallerRunsPolicy 策略"></a>（2）CallerRunsPolicy 策略</h6><p><strong>只要线程池未关闭，该策略直接在调用者线程中，运行当前的被丢弃的任务。</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A handler for rejected tasks that runs the rejected task</span></span><br><span class="line"><span class="comment">     * directly in the calling thread of the &#123;<span class="doctag">@code</span> execute&#125; method,</span></span><br><span class="line"><span class="comment">     * unless the executor has been shut down, in which case the task</span></span><br><span class="line"><span class="comment">     * is discarded.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CallerRunsPolicy</span> <span class="keyword">implements</span> <span class="title">RejectedExecutionHandler</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">CallerRunsPolicy</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> r the runnable task requested to be executed</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> e the executor attempting to execute this task</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!e.isShutdown()) &#123;</span><br><span class="line">                r.run();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h6 id="（3）DiscardOldestPolicy策略"><a href="#（3）DiscardOldestPolicy策略" class="headerlink" title="（3）DiscardOldestPolicy策略"></a>（3）DiscardOldestPolicy策略</h6><p><strong>该策略将丢弃最老的一个请求，也就是即将被执行的任务，并尝试再次提交当前任务。</strong> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * A handler for rejected tasks that discards the oldest unhandled</span></span><br><span class="line"><span class="comment">  * request and then retries &#123;<span class="doctag">@code</span> execute&#125;, unless the executor</span></span><br><span class="line"><span class="comment">  * is shut down, in which case the task is discarded.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DiscardOldestPolicy</span> <span class="keyword">implements</span> <span class="title">RejectedExecutionHandler</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">DiscardOldestPolicy</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * Obtains and ignores the next task that the executor</span></span><br><span class="line"><span class="comment">      * would otherwise execute, if one is immediately available,</span></span><br><span class="line"><span class="comment">      * and then retries execution of task r, unless the executor</span></span><br><span class="line"><span class="comment">      * is shut down, in which case task r is instead discarded.</span></span><br><span class="line"><span class="comment">      *</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> r the runnable task requested to be executed</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> e the executor attempting to execute this task</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;</span><br><span class="line">         <span class="keyword">if</span> (!e.isShutdown()) &#123;</span><br><span class="line">             <span class="comment">//获取队列，并且将e插入到队列中，等待合适的时间去执行</span></span><br><span class="line">             e.getQueue().poll();</span><br><span class="line">             <span class="comment">//执行任务</span></span><br><span class="line">             e.execute(r);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h6 id="（4）DiscardPolicy-策略"><a href="#（4）DiscardPolicy-策略" class="headerlink" title="（4）DiscardPolicy 策略"></a>（4）DiscardPolicy 策略</h6><p><strong>这个策略默默丢弃无法处理的任务，并且不做任何处理</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A handler for rejected tasks that silently discards the</span></span><br><span class="line"><span class="comment"> * rejected task.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DiscardPolicy</span> <span class="keyword">implements</span> <span class="title">RejectedExecutionHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DiscardPolicy</span><span class="params">()</span> </span>&#123; &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//什么也不做</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3、线程池关闭"><a href="#3、线程池关闭" class="headerlink" title="3、线程池关闭"></a>3、线程池关闭</h5><p><code>shutdownNow：对未开始的任务全部取消执行，并且返回未执行任务的list集合。</code></p><p><code>shutdown：不接受新提交的任务，不影响已经提交的任务执行。</code></p><h4 id="二、生产活动中使用"><a href="#二、生产活动中使用" class="headerlink" title="二、生产活动中使用"></a>二、生产活动中使用</h4><h5 id="1、CountDownLatch-方式"><a href="#1、CountDownLatch-方式" class="headerlink" title="1、CountDownLatch 方式"></a>1、CountDownLatch 方式</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StatsDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(</span><br><span class="line">            <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> String startTime = sdf.format(<span class="keyword">new</span> Date());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * IO密集型任务  = 一般为2*CPU核心数（常出现于线程中：数据库数据交互、文件上传下载、网络数据传输等等）</span></span><br><span class="line"><span class="comment">     * CPU密集型任务 = 一般为CPU核心数+1（常出现于线程中：复杂算法）</span></span><br><span class="line"><span class="comment">     * 混合型任务  = 视机器配置和复杂度自测而定</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> corePoolSize = Runtime.getRuntime().availableProcessors();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * public ThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,</span></span><br><span class="line"><span class="comment">     *                           TimeUnit unit,BlockingQueue&lt;Runnable&gt; workQueue)</span></span><br><span class="line"><span class="comment">     * corePoolSize用于指定核心线程数量</span></span><br><span class="line"><span class="comment">     * maximumPoolSize指定最大线程数</span></span><br><span class="line"><span class="comment">     * keepAliveTime和TimeUnit指定线程空闲后的最大存活时间</span></span><br><span class="line"><span class="comment">     * workQueue则是线程池的缓冲队列,还未执行的线程会在队列中等待</span></span><br><span class="line"><span class="comment">     * 监控队列长度，确保队列有界</span></span><br><span class="line"><span class="comment">     * 不当的线程池大小会使得处理速度变慢，稳定性下降，并且导致内存泄露。如果配置的线程过少，则队列会持续变大，消耗过多内存。</span></span><br><span class="line"><span class="comment">     * 而过多的线程又会 由于频繁的上下文切换导致整个系统的速度变缓——殊途而同归。队列的长度至关重要，它必须得是有界的，这样如果线程池不堪重负了它可以暂时拒绝掉新的请求。</span></span><br><span class="line"><span class="comment">     * ExecutorService 默认的实现是一个无界的 LinkedBlockingQueue。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ThreadPoolExecutor executor  = <span class="keyword">new</span> ThreadPoolExecutor(corePoolSize, corePoolSize+<span class="number">1</span>, <span class="number">10l</span>, TimeUnit.SECONDS,</span><br><span class="line">            <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(<span class="number">1000</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">//使用execute方法</span></span><br><span class="line">          executor.execute(<span class="keyword">new</span> Stats(<span class="string">&quot;任务A&quot;</span>, <span class="number">1000</span>, latch));</span><br><span class="line">          executor.execute(<span class="keyword">new</span> Stats(<span class="string">&quot;任务B&quot;</span>, <span class="number">1000</span>, latch));</span><br><span class="line">          executor.execute(<span class="keyword">new</span> Stats(<span class="string">&quot;任务C&quot;</span>, <span class="number">1000</span>, latch));</span><br><span class="line">          executor.execute(<span class="keyword">new</span> Stats(<span class="string">&quot;任务D&quot;</span>, <span class="number">1000</span>, latch));</span><br><span class="line">          executor.execute(<span class="keyword">new</span> Stats(<span class="string">&quot;任务E&quot;</span>, <span class="number">1000</span>, latch));</span><br><span class="line">        latch.await();<span class="comment">// 等待所有人任务结束</span></span><br><span class="line">        System.out.println(<span class="string">&quot;所有的统计任务执行完成:&quot;</span> + sdf.format(<span class="keyword">new</span> Date()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Stats</span> <span class="keyword">implements</span> <span class="title">Runnable</span>  </span>&#123;</span><br><span class="line">        String statsName;</span><br><span class="line">        <span class="keyword">int</span> runTime;</span><br><span class="line">        CountDownLatch latch;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Stats</span><span class="params">(String statsName, <span class="keyword">int</span> runTime, CountDownLatch latch)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.statsName = statsName;</span><br><span class="line">            <span class="keyword">this</span>.runTime = runTime;</span><br><span class="line">            <span class="keyword">this</span>.latch = latch;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(statsName+ <span class="string">&quot; do stats begin at &quot;</span>+ startTime);</span><br><span class="line">                <span class="comment">//模拟任务执行时间</span></span><br><span class="line">                Thread.sleep(runTime);</span><br><span class="line">                System.out.println(statsName + <span class="string">&quot; do stats complete at &quot;</span>+ sdf.format(<span class="keyword">new</span> Date()));</span><br><span class="line">                latch.countDown();<span class="comment">//单次任务结束，计数器减一</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h6><p><img src="https://ws1.sinaimg.cn/large/005EneYkgy1frax2svvguj30f509qq43.jpg"></p><h5 id="2、Future-方式"><a href="#2、Future-方式" class="headerlink" title="2、Future    方式"></a>2、Future    方式</h5><p><code>重点是和springboot整合，采用注解bean方式生成ThreadPoolTaskExecutor</code></p><p>@Bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//spring依赖包</span></span><br><span class="line"><span class="keyword">import</span> org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认线程池线程池</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Executor</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ThreadPoolTaskExecutor <span class="title">defaultThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ThreadPoolTaskExecutor executor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        <span class="comment">//核心线程数目</span></span><br><span class="line">        executor.setCorePoolSize(<span class="number">16</span>);</span><br><span class="line">        <span class="comment">//指定最大线程数</span></span><br><span class="line">        executor.setMaxPoolSize(<span class="number">64</span>);</span><br><span class="line">        <span class="comment">//队列中最大的数目</span></span><br><span class="line">        executor.setQueueCapacity(<span class="number">16</span>);</span><br><span class="line">        <span class="comment">//线程名称前缀</span></span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">&quot;defaultThreadPool_&quot;</span>);</span><br><span class="line">        <span class="comment">//rejection-policy：当pool已经达到max size的时候，如何处理新任务</span></span><br><span class="line">        <span class="comment">//CALLER_RUNS：不在新线程中执行任务，而是由调用者所在的线程来执行</span></span><br><span class="line">        <span class="comment">//对拒绝task的处理策略</span></span><br><span class="line">        executor.setRejectedExecutionHandler(<span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line">        <span class="comment">//线程空闲后的最大存活时间</span></span><br><span class="line">        executor.setKeepAliveSeconds(<span class="number">60</span>);</span><br><span class="line">        <span class="comment">//加载</span></span><br><span class="line">        executor.initialize();</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过注解引入配置</span></span><br><span class="line"><span class="meta">@Resource(name = &quot;defaultThreadPool&quot;)</span></span><br><span class="line"><span class="keyword">private</span> ThreadPoolTaskExecutor executor;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用Future方式执行多任务</span></span><br><span class="line"><span class="comment">//生成一个集合</span></span><br><span class="line">List&lt;Future&gt; futures = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取后台全部有效运营人员的集合</span></span><br><span class="line">List&lt;AdminUserMsgResponse&gt; adminUserDOList = adminManagerService.GetUserToSentMsg(<span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (AdminUserMsgResponse response : adminUserDOList) &#123;</span><br><span class="line">           <span class="comment">//并发处理</span></span><br><span class="line">           <span class="keyword">if</span> (response.getMobile() != <span class="keyword">null</span>) &#123;</span><br><span class="line">           Future&lt;?&gt; future = executor.submit(() -&gt; &#123;</span><br><span class="line">           <span class="comment">//发送短信</span></span><br><span class="line">           mobileMessageFacade.sendCustomerMessage(response.getMobile(), msgConfigById.getContent());</span><br><span class="line">           &#125;);</span><br><span class="line">          futures.add(future);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询任务执行的结果</span></span><br><span class="line"><span class="keyword">for</span> (Future&lt;?&gt; future : futureList) &#123;</span><br><span class="line">     <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">     <span class="comment">//CPU高速轮询：每个future都并发轮循，判断完成状态然后获取结果，这一行，是本实现方案的精髓所在。即有10个future在高速轮询，完成一个future的获取结果，就关闭一个轮询</span></span><br><span class="line">     <span class="keyword">if</span> (future.isDone()&amp;&amp; !future.isCancelled()) &#123;</span><br><span class="line">     <span class="comment">//获取future成功完成状态，如果想要限制每个任务的超时时间，取消本行的状态判断+future.get(1000*1, TimeUnit.MILLISECONDS)+catch超时异常使用即可。</span></span><br><span class="line">     </span><br><span class="line">     <span class="keyword">break</span>;<span class="comment">//当前future获取结果完毕，跳出while</span></span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       Thread.sleep(<span class="number">1</span>);<span class="comment">//每次轮询休息1毫秒（CPU纳秒级），避免CPU高速轮循耗空CPU---》新手别忘记这个</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 线程 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot整合定时框架-Elastic-job-lite</title>
      <link href="/2018/05/17/springboot%E6%95%B4%E5%90%88%E5%AE%9A%E6%97%B6%E6%A1%86%E6%9E%B6-Elastic-job-lite/"/>
      <url>/2018/05/17/springboot%E6%95%B4%E5%90%88%E5%AE%9A%E6%97%B6%E6%A1%86%E6%9E%B6-Elastic-job-lite/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h4><p><a href="https://github.com/MiChongGET/elastic-job">本文Github地址</a></p><p><a href="http://elasticjob.io/index_zh.html">官网地址</a></p><blockquote><p>当当网张亮主导开发的分布式任务调度框架，结合zookeeper技术解决quartz框架在分布式系统中重复的定时任务导致的不可预见的错误！</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Elastic-Job是一个分布式调度解决方案，由两个相互独立的子项目Elastic-Job-Lite和Elastic-Job-Cloud组成。</span><br><span class="line"></span><br><span class="line">Elastic-Job-Lite定位为轻量级无中心化解决方案，使用jar包的形式提供分布式任务的协调服务；Elastic-Job-Cloud采用自研Mesos Framework的解决方案，额外提供资源治理、应用分发以及进程隔离等功能。</span><br></pre></td></tr></table></figure><p><img src="http://ovfotjrsi.bkt.clouddn.com/docs/img/architecture/elastic_job_lite.png" alt="架构图"></p><h4 id="二、SpringBoot整合"><a href="#二、SpringBoot整合" class="headerlink" title="二、SpringBoot整合"></a>二、SpringBoot整合</h4><blockquote><p>官网给的例子是基于spring xml来的，有兴趣的可以去看看，我们的项目采用springboot框架，所以要修改一些东西，比如修改为使用@Bean的方式来启动配置</p></blockquote><h5 id="1、pom配置"><a href="#1、pom配置" class="headerlink" title="1、pom配置"></a>1、pom配置</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--框架核心jar包--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.kuhn-he&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;elastic-job-lite-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.1.5&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--添加数据相关的驱动主要是为了记录任务相关的一些数据，日志--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.1.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h5 id="2、application-properties配置"><a href="#2、application-properties配置" class="headerlink" title="2、application.properties配置"></a>2、application.properties配置</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># zookeeper集群</span><br><span class="line">elaticjob.zookeeper.server-lists=127.0.0.1:2181</span><br><span class="line">elaticjob.zookeeper.namespace=my-project</span><br><span class="line"></span><br><span class="line"># 主要是为了存储任务执行的日志</span><br><span class="line">spring.datasource.druid.log.url=jdbc:mysql://localhost:3306/event_log</span><br><span class="line">spring.datasource.druid.log.username=root</span><br><span class="line">spring.datasource.druid.log.password=root</span><br><span class="line">spring.datasource.druid.log.driver-class-name=com.mysql.jdbc.Driver</span><br><span class="line"></span><br><span class="line">#  自动创建更新验证数据库结构</span><br><span class="line">spring.jpa.hibernate.ddl-auto=update</span><br><span class="line">spring.jpa.database=mysql</span><br><span class="line">spring.jpa.show-sql=true</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="3、使用bean方式配置项目"><a href="#3、使用bean方式配置项目" class="headerlink" title="3、使用bean方式配置项目"></a>3、使用bean方式配置项目</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">package cn.buildworld.elasticjob.config;</span><br><span class="line"></span><br><span class="line">import cn.buildworld.elasticjob.listener.ElasticJobListener;</span><br><span class="line">import com.dangdang.ddframe.job.reg.zookeeper.ZookeeperConfiguration;</span><br><span class="line">import com.dangdang.ddframe.job.reg.zookeeper.ZookeeperRegistryCenter;</span><br><span class="line">import org.springframework.beans.factory.annotation.Value;</span><br><span class="line">import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;</span><br><span class="line">import org.springframework.context.annotation.Bean;</span><br><span class="line">import org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @Author MiChong</span><br><span class="line"> * @Email: 1564666023@qq.com</span><br><span class="line"> * @Create 2018-05-07 18:16</span><br><span class="line"> * @Version: V1.0</span><br><span class="line"> */</span><br><span class="line">@Configuration</span><br><span class="line">@ConditionalOnExpression(&quot;&#x27;$&#123;elastic.zookeeper.server-lists&#125;&#x27;.length() &gt;0&quot;)</span><br><span class="line">public class ElasticConfig &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 初始化配置</span><br><span class="line">     * @param serverList</span><br><span class="line">     * @param namespace</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Bean(initMethod = &quot;init&quot;)</span><br><span class="line">    public ZookeeperRegistryCenter regCenter(@Value(&quot;$&#123;elaticjob.zookeeper.server-lists&#125;&quot;) String serverList</span><br><span class="line">            , @Value(&quot;$&#123;elaticjob.zookeeper.namespace&#125;&quot;) String namespace) &#123;</span><br><span class="line"></span><br><span class="line">        return new ZookeeperRegistryCenter(new ZookeeperConfiguration(serverList, namespace));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    /**</span><br><span class="line">     * 设置活动监听，前提是已经设置好了监听，见下一个目录</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    @Bean</span><br><span class="line">    public ElasticJobListener elasticJobListener() &#123;</span><br><span class="line">        return new ElasticJobListener(100, 100);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="4、任务监听器"><a href="#4、任务监听器" class="headerlink" title="4、任务监听器"></a>4、任务监听器</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class ElasticJobListener extends AbstractDistributeOnceElasticJobListener &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 设置间隔时间</span><br><span class="line">     * @param startedTimeoutMilliseconds</span><br><span class="line">     * @param completedTimeoutMilliseconds</span><br><span class="line">     */</span><br><span class="line">    public ElasticJobListener(long startedTimeoutMilliseconds, long completedTimeoutMilliseconds) &#123;</span><br><span class="line">        super(startedTimeoutMilliseconds, completedTimeoutMilliseconds);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 任务开始</span><br><span class="line">     * @param shardingContexts</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void doBeforeJobExecutedAtLastStarted(ShardingContexts shardingContexts) &#123;</span><br><span class="line">        System.out.println(&quot;任务开始&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 任务结束</span><br><span class="line">     * @param shardingContexts</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void doAfterJobExecutedAtLastCompleted(ShardingContexts shardingContexts) &#123;</span><br><span class="line">        System.err.println(&quot;任务结束&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="5、数据库配置（任务第一种方式使用到）"><a href="#5、数据库配置（任务第一种方式使用到）" class="headerlink" title="5、数据库配置（任务第一种方式使用到）"></a>5、数据库配置（任务第一种方式使用到）</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class DataSourceConfig &#123;</span><br><span class="line"></span><br><span class="line">    @Bean(&quot;datasource&quot;)</span><br><span class="line">    @ConfigurationProperties(&quot;spring.datasource.druid.log&quot;)</span><br><span class="line">    public DataSource dataSourceTow()&#123;</span><br><span class="line">        return DruidDataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="6、设置任务（三种方式）"><a href="#6、设置任务（三种方式）" class="headerlink" title="6、设置任务（三种方式）"></a>6、设置任务（三种方式）</h5><blockquote><p>Part1 通过在注解上面设置任务的cron,name等</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">@ElasticSimpleJob(cron = &quot;0/2 * * * * ?&quot;,</span><br><span class="line">        jobName = &quot;firstJob&quot;,</span><br><span class="line">        shardingTotalCount = 2,</span><br><span class="line">        jobParameter = &quot;测试参数&quot;,</span><br><span class="line">        shardingItemParameters = &quot;0=A,1=B&quot;,</span><br><span class="line">        dataSource = &quot;datasource&quot;)</span><br><span class="line">@Component</span><br><span class="line">public class MyJob implements SimpleJob &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void execute(ShardingContext shardingContext) &#123;</span><br><span class="line">        System.out.println(String.format(&quot;------Thread ID: %s, 任务总片数: %s, &quot; +</span><br><span class="line">                        &quot;当前分片项: %s,当前参数: %s,&quot; +</span><br><span class="line">                        &quot;当前任务名称: %s,当前任务参数: %s,&quot;+</span><br><span class="line">                        &quot;当前任务的id: %s&quot;</span><br><span class="line">                ,</span><br><span class="line">                //获取当前线程的id</span><br><span class="line">                Thread.currentThread().getId(),</span><br><span class="line">                //获取任务总片数</span><br><span class="line">                shardingContext.getShardingTotalCount(),</span><br><span class="line">                //获取当前分片项</span><br><span class="line">                shardingContext.getShardingItem(),</span><br><span class="line">                //获取当前的参数</span><br><span class="line">                shardingContext.getShardingParameter(),</span><br><span class="line">                //获取当前的任务名称</span><br><span class="line">                shardingContext.getJobName(),</span><br><span class="line">                //获取当前任务参数</span><br><span class="line">                shardingContext.getJobParameter(),</span><br><span class="line">                //获取任务的id</span><br><span class="line">                shardingContext.getTaskId()</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Part2 通过控制器动态添加任务</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class TestController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ZookeeperRegistryCenter zookeeperRegistryCenter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 动态添加任务逻辑</span><br><span class="line">     */</span><br><span class="line">    @RequestMapping(&quot;/test&quot;)</span><br><span class="line">    public void test() &#123;</span><br><span class="line">        int shardingTotalCount = 2;</span><br><span class="line">        String jobName = UUID.randomUUID().toString() + &quot;-test123&quot;;</span><br><span class="line"></span><br><span class="line">        JobCoreConfiguration jobCoreConfiguration = JobCoreConfiguration</span><br><span class="line">                .newBuilder(jobName, &quot;* * * * * ?&quot;, shardingTotalCount)</span><br><span class="line">                .shardingItemParameters(&quot;0=A,1=B&quot;)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        SimpleJobConfiguration simpleJobConfiguration =</span><br><span class="line">                new SimpleJobConfiguration(jobCoreConfiguration, MyJob2.class.getCanonicalName());</span><br><span class="line"></span><br><span class="line">        JobScheduler jobScheduler = new JobScheduler(zookeeperRegistryCenter, LiteJobConfiguration.newBuilder(simpleJobConfiguration).build());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            jobScheduler.init();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            throw new RuntimeException(&quot;定时任务创建失败&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Part3 通过handler包装生成任务的方法，简化控制器的代码量</p></blockquote><p>ElasticJobHandler.java</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class ElasticJobHandler &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ZookeeperRegistryCenter zookeeperRegistryCenter;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private DataSourceConfig dataSourceConfig;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private ElasticJobListener elasticJobListener;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param jobName</span><br><span class="line">     * @param jobClass</span><br><span class="line">     * @param shardingTotalCount</span><br><span class="line">     * @param cron</span><br><span class="line">     * @param id                 数据ID</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    private static LiteJobConfiguration.Builder simpleJobConfigBuilder(String jobName,</span><br><span class="line">                                                                       Class&lt;? extends SimpleJob&gt; jobClass,</span><br><span class="line">                                                                       int shardingTotalCount,</span><br><span class="line">                                                                       String cron,</span><br><span class="line">                                                                       String id,String parameters) &#123;</span><br><span class="line">        return LiteJobConfiguration.newBuilder(new SimpleJobConfiguration(</span><br><span class="line">                JobCoreConfiguration</span><br><span class="line">                        .newBuilder(jobName, cron, shardingTotalCount)</span><br><span class="line">                        .shardingItemParameters(parameters)</span><br><span class="line">                        .jobParameter(id).</span><br><span class="line">                        build(),</span><br><span class="line">                jobClass.getCanonicalName()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 添加一个定时任务</span><br><span class="line">     *</span><br><span class="line">     * @param jobName            任务名</span><br><span class="line">     * @param cron               表达式</span><br><span class="line">     * @param shardingTotalCount 分片数</span><br><span class="line">     * @param parameters         当前参数</span><br><span class="line">     */</span><br><span class="line">    public void addJob(String jobName, String cron, Integer shardingTotalCount, String id,String parameters) &#123;</span><br><span class="line">        LiteJobConfiguration jobConfig = simpleJobConfigBuilder(jobName, MyJob2.class, shardingTotalCount, cron, id,parameters)</span><br><span class="line">                .overwrite(true).build();</span><br><span class="line"></span><br><span class="line">        new SpringJobScheduler(new MyJob2(), zookeeperRegistryCenter, jobConfig, elasticJobListener).init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>控制器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@ResponseBody</span><br><span class="line">    @RequestMapping(&quot;/add&quot;)</span><br><span class="line">    public Object add()&#123;</span><br><span class="line"></span><br><span class="line">        Date startTime = new Date();</span><br><span class="line">        startTime.setTime(startTime.getTime()+3000);</span><br><span class="line"></span><br><span class="line">        String cron = DateUtil.getCron(startTime);</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            elasticJobHandler.addJob(&quot;myjob:&quot;+cron,cron,2,&quot;66666&quot;,&quot;0=A,1=B&quot;);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return &quot;false&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        return &quot;success&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>时间工具类（主要是date转换为cron表达式）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">public class DateUtil &#123;</span><br><span class="line">    /**</span><br><span class="line">     * 日期转化为cron表达式</span><br><span class="line">     * @param date</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String getCron(Date  date)&#123;</span><br><span class="line">        String dateFormat=&quot;ss mm HH dd MM ? yyyy&quot;;</span><br><span class="line">        return  DateUtil.fmtDateToStr(date, dateFormat);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * cron表达式转为日期</span><br><span class="line">     * @param cron</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static Date getCronToDate(String cron) &#123;</span><br><span class="line">        String dateFormat=&quot;ss mm HH dd MM ? yyyy&quot;;</span><br><span class="line">        SimpleDateFormat sdf = new SimpleDateFormat(dateFormat);</span><br><span class="line">        Date date = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            date = sdf.parse(cron);</span><br><span class="line">        &#125; catch (ParseException e) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        return date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * Description:格式化日期,String字符串转化为Date</span><br><span class="line">     *</span><br><span class="line">     * @param date</span><br><span class="line">     * @param dtFormat</span><br><span class="line">     *            例如:yyyy-MM-dd HH:mm:ss yyyyMMdd</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String fmtDateToStr(Date date, String dtFormat) &#123;</span><br><span class="line">        if (date == null)</span><br><span class="line">            return &quot;&quot;;</span><br><span class="line">        try &#123;</span><br><span class="line">            SimpleDateFormat dateFormat = new SimpleDateFormat(dtFormat);</span><br><span class="line">            return dateFormat.format(date);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            return &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合常用技术</title>
      <link href="/2018/05/17/SpringBoot%E6%95%B4%E5%90%88%E5%B8%B8%E7%94%A8%E6%8A%80%E6%9C%AF/"/>
      <url>/2018/05/17/SpringBoot%E6%95%B4%E5%90%88%E5%B8%B8%E7%94%A8%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="https://gitee.com/mi_chong/spring-boot-model">模板地址</a></p><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1526542764168&di=307b509c8c315a84383917119b23eba5&imgtype=0&src=http://therealdanvega.com/wp-content/uploads/2015/11/spring-boot-logo.png"></p><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>​    <code>Spring Boot是目前大火的Java后端框架，遵循着“约定大于配置”的规则，可以快速开发后台，摆脱SSM框架的各种xml配置，开箱即用，快速部署。依靠着spring的强大社区，框架中集成了各种优秀的第三方框架。</code></p><h4 id="一、逆向生成model、mapper"><a href="#一、逆向生成model、mapper" class="headerlink" title="一、逆向生成model、mapper"></a>一、逆向生成model、mapper</h4><h5 id="maven的配置"><a href="#maven的配置" class="headerlink" title="maven的配置"></a>maven的配置</h5><h5 id="1、首先引入依赖"><a href="#1、首先引入依赖" class="headerlink" title="1、首先引入依赖"></a>1、首先引入依赖</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--整合mybatis--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.3.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--mapper--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;tk.mybatis&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mapper-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;2.0.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--pagehelper--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.github.pagehelper&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;pagehelper-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.2.3&lt;/version&gt;</span><br><span class="line">&lt;exclusions&gt;</span><br><span class="line">&lt;exclusion&gt;</span><br><span class="line">&lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;/exclusion&gt;</span><br><span class="line">&lt;/exclusions&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.1.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h5 id="2、build中添加插件"><a href="#2、build中添加插件" class="headerlink" title="2、build中添加插件"></a>2、build中添加插件</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">         &lt;!--mybatis逆向生成插件--&gt;</span><br><span class="line">&lt;plugin&gt;</span><br><span class="line">&lt;groupId&gt;org.mybatis.generator&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mybatis-generator-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.3.2&lt;/version&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line"></span><br><span class="line">     &lt;configurationFile&gt;$&#123;basedir&#125;/src/main/resources/generator/generatorConfig.xml&lt;/configurationFile&gt;</span><br><span class="line">&lt;overwrite&gt;true&lt;/overwrite&gt;</span><br><span class="line">&lt;verbose&gt;true&lt;/verbose&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;mysql.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;tk.mybatis&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;mapper-generator&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.0.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;/plugin&gt;</span><br></pre></td></tr></table></figure><h5 id="3、自定义一个MyMapper"><a href="#3、自定义一个MyMapper" class="headerlink" title="3、自定义一个MyMapper"></a>3、自定义一个MyMapper</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">import tk.mybatis.mapper.common.Mapper;</span><br><span class="line">import tk.mybatis.mapper.common.MySqlMapper;</span><br><span class="line">import tk.mybatis.mapper.common.base.delete.DeleteByPrimaryKeyMapper;</span><br><span class="line">import tk.mybatis.mapper.common.condition.SelectByConditionMapper;</span><br><span class="line">import tk.mybatis.mapper.common.ids.DeleteByIdsMapper;</span><br><span class="line">import tk.mybatis.mapper.common.ids.SelectByIdsMapper;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 继承自己的MyMapper</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">public interface MyMapper&lt;T&gt; extends</span><br><span class="line">        Mapper&lt;T&gt;,</span><br><span class="line">        MySqlMapper&lt;T&gt;,</span><br><span class="line">        SelectByIdsMapper&lt;T&gt;,</span><br><span class="line">        SelectByConditionMapper&lt;T&gt;,</span><br><span class="line">        DeleteByIdsMapper&lt;T&gt;,</span><br><span class="line">        DeleteByPrimaryKeyMapper&lt;T&gt; &#123;</span><br><span class="line">    //TODO</span><br><span class="line">    //FIXME 特别注意，该接口不能被扫描到，否则会出错</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="4、编写generator配置文件"><a href="#4、编写generator配置文件" class="headerlink" title="4、编写generator配置文件"></a>4、编写generator配置文件</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE generatorConfiguration</span><br><span class="line">        PUBLIC &quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span><br><span class="line">        &quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;generatorConfiguration&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--配置环境的文件，数据库的信息--&gt;</span><br><span class="line">    &lt;properties resource=&quot;application-dev.properties&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;context id=&quot;Mysql&quot; targetRuntime=&quot;MyBatis3Simple&quot; defaultModelType=&quot;flat&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;beginningDelimiter&quot; value=&quot;`&quot;/&gt;</span><br><span class="line">        &lt;property name=&quot;endingDelimiter&quot; value=&quot;`&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--继承自己的MyMapper--&gt;</span><br><span class="line">        &lt;plugin type=&quot;tk.mybatis.mapper.generator.MapperPlugin&quot;&gt;</span><br><span class="line">            &lt;property name=&quot;mappers&quot; value=&quot;cn.buildworld.sbtest.util.MyMapper&quot;/&gt;</span><br><span class="line">        &lt;/plugin&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--数据库的信息--&gt;</span><br><span class="line">        &lt;jdbcConnection driverClass=&quot;$&#123;spring.datasource.driver-class-name&#125;&quot;</span><br><span class="line">                        connectionURL=&quot;$&#123;spring.datasource.url&#125;&quot;</span><br><span class="line">                        userId=&quot;$&#123;spring.datasource.username&#125;&quot;</span><br><span class="line">                        password=&quot;$&#123;spring.datasource.password&#125;&quot;&gt;</span><br><span class="line">        &lt;/jdbcConnection&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--实体类生成的位置--&gt;</span><br><span class="line">        &lt;javaModelGenerator targetPackage=&quot;cn.buildworld.sbtest.model&quot; targetProject=&quot;src/main/java&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--dao接口生成的位置--&gt;</span><br><span class="line">        &lt;sqlMapGenerator targetPackage=&quot;mapper&quot; targetProject=&quot;src/main/resources&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--XML文件生成的位置--&gt;</span><br><span class="line">        &lt;javaClientGenerator targetPackage=&quot;cn.buildworld.sbtest.mapper&quot; targetProject=&quot;src/main/java&quot;</span><br><span class="line">                             type=&quot;XMLMAPPER&quot;/&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--数据库表的信息，%代表生成数据库中所有的表--&gt;</span><br><span class="line">        &lt;table tableName=&quot;%&quot;&gt;</span><br><span class="line">            &lt;!--mysql 配置--&gt;</span><br><span class="line">            &lt;generatedKey column=&quot;id&quot; sqlStatement=&quot;Mysql&quot; identity=&quot;true&quot;/&gt;</span><br><span class="line">            &lt;!--oracle 配置--&gt;</span><br><span class="line">            &lt;!--&lt;generatedKey column=&quot;id&quot; sqlStatement=&quot;select SEQ_&#123;1&#125;.nextval from dual&quot; identity=&quot;false&quot; type=&quot;pre&quot;/&gt;--&gt;</span><br><span class="line">        &lt;/table&gt;</span><br><span class="line">    &lt;/context&gt;</span><br><span class="line">&lt;/generatorConfiguration&gt;</span><br></pre></td></tr></table></figure><h4 id="二、基于mybatis的CRUD"><a href="#二、基于mybatis的CRUD" class="headerlink" title="二、基于mybatis的CRUD"></a>二、基于mybatis的CRUD</h4><h5 id="1、在Application启动文件中添加注解"><a href="#1、在Application启动文件中添加注解" class="headerlink" title="1、在Application启动文件中添加注解"></a>1、在Application启动文件中添加注解</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import tk.mybatis.spring.annotation.MapperScan;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 扫描mapper包路径</span><br><span class="line"> */</span><br><span class="line">@MapperScan(basePackages = &quot;cn.buildworld.sbtest.mapper&quot;)</span><br><span class="line">public class SbtestApplication &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(SbtestApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="2、PageHelper分页插件的使用"><a href="#2、PageHelper分页插件的使用" class="headerlink" title="2、PageHelper分页插件的使用"></a>2、PageHelper分页插件的使用</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Autowired</span><br><span class="line">   private HseCustomerService hseCustomerService;</span><br><span class="line">   @GetMapping(&quot;list&quot;)</span><br><span class="line">   public Object getList(@RequestParam(defaultValue = &quot;0&quot;)Integer fromId,</span><br><span class="line">                         @RequestParam(defaultValue = &quot;2&quot;)Integer limit )&#123;</span><br><span class="line"></span><br><span class="line">       //初始化page插件，传入分页参数</span><br><span class="line">       PageHelper.startPage(fromId,limit);</span><br><span class="line">       List&lt;HseCustomer&gt; list = hseCustomerService.getList();</span><br><span class="line"></span><br><span class="line">       //包装想要返回的结果，包含多种信息</span><br><span class="line">       PageInfo pageInfo = new PageInfo(list);</span><br><span class="line"></span><br><span class="line">       return pageInfo;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h6 id="3、在service实现类中使用事务"><a href="#3、在service实现类中使用事务" class="headerlink" title="3、在service实现类中使用事务"></a>3、在service实现类中使用事务</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">   //事务--查询</span><br><span class="line">   @Transactional(propagation = Propagation.SUPPORTS)</span><br><span class="line">   public List&lt;StudentInfo&gt; getList() &#123;</span><br><span class="line"></span><br><span class="line">       return studentInfoMapper.selectByIds(&quot;123&quot;);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   //事务--修改</span><br><span class="line">   @Transactional(propagation = Propagation.REQUIRED)</span><br><span class="line">   </span><br></pre></td></tr></table></figure><h4 id="三、整合缓存Redis"><a href="#三、整合缓存Redis" class="headerlink" title="三、整合缓存Redis"></a>三、整合缓存Redis</h4><h5 id="1、添加依赖"><a href="#1、添加依赖" class="headerlink" title="1、添加依赖"></a>1、添加依赖</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">      &lt;!--引入redis依赖--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h5 id="2、配置文件中添加配置（application-properties）"><a href="#2、配置文件中添加配置（application-properties）" class="headerlink" title="2、配置文件中添加配置（application.properties）"></a>2、配置文件中添加配置（application.properties）</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">###########################</span><br><span class="line">#                         #</span><br><span class="line">#         Redis配置        #</span><br><span class="line">#                         #</span><br><span class="line">###########################</span><br><span class="line"># Redis数据库索引（默认为0）</span><br><span class="line">spring.redis.database=1</span><br><span class="line"># Redis服务器地址</span><br><span class="line">spring.redis.host=119.29.181.95</span><br><span class="line"># Redis服务器连接端口</span><br><span class="line">spring.redis.port=6379</span><br><span class="line"># Redis服务器连接密码（默认为空）</span><br><span class="line">spring.redis.password=</span><br><span class="line"># 连接池最大连接数（使用负值表示没有限制）</span><br><span class="line">spring.redis.pool.max-active=1000</span><br><span class="line"># 连接池最大阻塞时间（使用负值表示没有限制）</span><br><span class="line">spring.redis.pool.max-wait=-1</span><br><span class="line"># 连接池中的最大空闲连接</span><br><span class="line">spring.redis.pool.max-idle=10</span><br><span class="line"># 连接池中的最小空闲连接</span><br><span class="line">spring.redis.pool.min-idle=2</span><br><span class="line"># 连接超时时间</span><br><span class="line">spring.redis.timeout=0</span><br></pre></td></tr></table></figure><h5 id="3、使用redis"><a href="#3、使用redis" class="headerlink" title="3、使用redis"></a>3、使用redis</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * redis测试</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">@Autowired</span><br><span class="line">//spring-boot自带的模板</span><br><span class="line">private StringRedisTemplate redisTemplate;</span><br><span class="line">@GetMapping(&quot;redis&quot;)</span><br><span class="line">public Object getRedis()&#123;</span><br><span class="line"></span><br><span class="line">    //往redis数据库存入数据</span><br><span class="line">    redisTemplate.opsForValue().set(&quot;name&quot;,&quot;michong&quot;);</span><br><span class="line"></span><br><span class="line">    //读出redis中的数据</span><br><span class="line">    return redisTemplate.opsForValue().get(&quot;name&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="四、整合定时器"><a href="#四、整合定时器" class="headerlink" title="四、整合定时器"></a>四、整合定时器</h4><h5 id="1、在启动项加上注解"><a href="#1、在启动项加上注解" class="headerlink" title="1、在启动项加上注解"></a>1、在启动项加上注解</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 开启定时任务</span><br><span class="line"> */</span><br><span class="line">@EnableScheduling</span><br><span class="line">public class SbtestApplication &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(SbtestApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2、简单使用定时器"><a href="#2、简单使用定时器" class="headerlink" title="2、简单使用定时器"></a>2、简单使用定时器</h5><blockquote><p>注意加上@Component和@Scheduled注解</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 定时任务</span><br><span class="line"> *</span><br><span class="line"> * @Author MiChong</span><br><span class="line"> * @Email: 1564666023@qq.com</span><br><span class="line"> * @Create 2018-03-28 9:02</span><br><span class="line"> * @Version: V1.0</span><br><span class="line"> */</span><br><span class="line">@Component</span><br><span class="line">public class TimeTesk &#123;</span><br><span class="line"></span><br><span class="line">    private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat(&quot;HH:mm:ss&quot;);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     *    定义三秒执行的任务</span><br><span class="line">     */</span><br><span class="line">    @Scheduled(fixedRate = 3000)</span><br><span class="line">    public void ShowTime()&#123;</span><br><span class="line">        System.out.println(&quot;现在时间：&quot;+DATE_FORMAT.format(new Date()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3、使用cron表达式执行定时任务"><a href="#3、使用cron表达式执行定时任务" class="headerlink" title="3、使用cron表达式执行定时任务"></a>3、使用cron表达式执行定时任务</h5><p><a href="http://cron.qqe2.com/">表达式地址</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class TimeTesk &#123;</span><br><span class="line"></span><br><span class="line">    private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat(&quot;HH:mm:ss&quot;);</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 从0开始，每隔三秒执行一次操作</span><br><span class="line">     */</span><br><span class="line">    @Scheduled(cron = &quot;0/3 * * * * ? &quot;)</span><br><span class="line">    public void ShowTime()&#123;</span><br><span class="line">        System.out.println(&quot;现在时间：&quot;+DATE_FORMAT.format(new Date()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="五、整合异步任务"><a href="#五、整合异步任务" class="headerlink" title="五、整合异步任务"></a>五、整合异步任务</h4><h5 id="1、启动项添加注解"><a href="#1、启动项添加注解" class="headerlink" title="1、启动项添加注解"></a>1、启动项添加注解</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 开启异步任务</span><br><span class="line"> */</span><br><span class="line">@EnableAsync</span><br><span class="line">public class SbtestApplication &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(SbtestApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2、使用"><a href="#2、使用" class="headerlink" title="2、使用"></a>2、使用</h5><blockquote><p>在使用类上面加上@Component，在类中的方法上面加上@Async</p></blockquote><h4 id="六、拦截器的使用"><a href="#六、拦截器的使用" class="headerlink" title="六、拦截器的使用"></a>六、拦截器的使用</h4><h5 id="1、首先创建一个configer类"><a href="#1、首先创建一个configer类" class="headerlink" title="1、首先创建一个configer类"></a>1、首先创建一个configer类</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">public class WebMvcConfiger extends WebMvcConfigurerAdapter &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 重写父类的方法，在此处对拦截器进行设置</span><br><span class="line">     * @param registry</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void addInterceptors(InterceptorRegistry registry) &#123;</span><br><span class="line">        /**</span><br><span class="line">         * 拦截器按照顺序执行,如果将one改成 * 则表示拦截所有的请求</span><br><span class="line">         */</span><br><span class="line">        registry.addInterceptor(new TwoInterCeptor()).addPathPatterns(&quot;/one/**&quot;)</span><br><span class="line">                .addPathPatterns(&quot;/two/**&quot;);</span><br><span class="line">        registry.addInterceptor(new OneInterCeptor()).addPathPatterns(&quot;/two/**&quot;);</span><br><span class="line">        super.addInterceptors(registry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2、新建拦截器"><a href="#2、新建拦截器" class="headerlink" title="2、新建拦截器"></a>2、新建拦截器</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">public class OneInterCeptor implements HandlerInterceptor &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 在请求处理之前进行调用（Controller方法调用之前）</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public boolean preHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o) throws Exception &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 请求处理之后进行调用，但是在视图被渲染之前（Controller方法调用之后）</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void postHandle(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 在整个请求结束之后被调用，也就是在DispatcherServlet 渲染了对应的视图之后执行</span><br><span class="line">     * （主要是用于进行资源清理工作）</span><br><span class="line">     */</span><br><span class="line">    @Override</span><br><span class="line">    public void afterCompletion(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e) throws Exception &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public void returnErrorResponse(HttpServletResponse response)</span><br><span class="line">            throws IOException, UnsupportedEncodingException &#123;</span><br><span class="line">        OutputStream out=null;</span><br><span class="line">        try&#123;</span><br><span class="line">            response.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">            response.setContentType(&quot;text/json&quot;);</span><br><span class="line">            out = response.getOutputStream();</span><br><span class="line">            out.flush();</span><br><span class="line">        &#125; finally&#123;</span><br><span class="line">            if(out!=null)&#123;</span><br><span class="line">                out.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Quartz实现定时任务（单任务、多任务）</title>
      <link href="/2018/05/07/SpringBoot%E6%95%B4%E5%90%88Quartz%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%EF%BC%88%E5%8D%95%E4%BB%BB%E5%8A%A1%E3%80%81%E5%A4%9A%E4%BB%BB%E5%8A%A1%EF%BC%89/"/>
      <url>/2018/05/07/SpringBoot%E6%95%B4%E5%90%88Quartz%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%EF%BC%88%E5%8D%95%E4%BB%BB%E5%8A%A1%E3%80%81%E5%A4%9A%E4%BB%BB%E5%8A%A1%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><blockquote><p>Quartz是OpenSymphony开源组织在Job scheduling领域又一个开源项目，它可以与J2EE与J2SE应用程序相结合也可以单独使用。Quartz可以用来创建简单或为运行十个，百个，甚至是好几万个Jobs这样复杂的程序。Jobs可以做成标准的Java组件或 EJBs</p></blockquote><h4 id="一、添加依赖"><a href="#一、添加依赖" class="headerlink" title="一、添加依赖"></a>一、添加依赖</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.quartz-scheduler&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;quartz&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.2.1&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;&lt;!-- 该依赖必加，里面有sping对schedule的支持 --&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-context-support&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!--必须添加，要不然会出错，项目无法启动--&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;4.3.16.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><h4 id="二、相关配置"><a href="#二、相关配置" class="headerlink" title="二、相关配置"></a>二、相关配置</h4><blockquote><p>由于springboot是无xml配置，所以此处我们采用bean注解的方式实现quartz的配置</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzConfigration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean(name = &quot;jobDetail&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MethodInvokingJobDetailFactoryBean <span class="title">detailFactoryBean</span><span class="params">(SchedulerTask task)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ScheduleTask为需要执行的任务</span></span><br><span class="line">        MethodInvokingJobDetailFactoryBean jobDetail = <span class="keyword">new</span> MethodInvokingJobDetailFactoryBean();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         *  是否并发执行</span></span><br><span class="line"><span class="comment">         *  例如每5s执行一次任务，但是当前任务还没有执行完，就已经过了5s了，</span></span><br><span class="line"><span class="comment">         *  如果此处为true，则下一个任务会bing执行，如果此处为false，则下一个任务会等待上一个任务执行完后，再开始执行</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        jobDetail.setConcurrent(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        jobDetail.setName(<span class="string">&quot;scheduler&quot;</span>);<span class="comment">// 设置任务的名字</span></span><br><span class="line">        jobDetail.setGroup(<span class="string">&quot;scheduler_group&quot;</span>);<span class="comment">// 设置任务的分组，这些属性都可以存储在数据库中，在多任务的时候使用</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 这两行代码表示执行task对象中的scheduleTest方法。定时执行的逻辑都在scheduleTest。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        jobDetail.setTargetObject(task);</span><br><span class="line"></span><br><span class="line">        jobDetail.setTargetMethod(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> jobDetail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;jobTrigger&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CronTriggerFactoryBean <span class="title">cronJobTrigger</span><span class="params">(MethodInvokingJobDetailFactoryBean jobDetail)</span> </span>&#123;</span><br><span class="line">        CronTriggerFactoryBean tigger = <span class="keyword">new</span> CronTriggerFactoryBean();</span><br><span class="line">        tigger.setJobDetail(jobDetail.getObject());</span><br><span class="line">        tigger.setCronExpression(<span class="string">&quot;0/2 * * * * ?&quot;</span>);<span class="comment">// 表示每隔2秒钟执行一次</span></span><br><span class="line">        <span class="comment">//tigger.set</span></span><br><span class="line">        tigger.setName(<span class="string">&quot;myTigger&quot;</span>);<span class="comment">// trigger的name</span></span><br><span class="line">        <span class="keyword">return</span> tigger;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(name = &quot;scheduler&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SchedulerFactoryBean <span class="title">schedulerFactory</span><span class="params">(Trigger cronJobTrigger)</span> </span>&#123;</span><br><span class="line">        SchedulerFactoryBean bean = <span class="keyword">new</span> SchedulerFactoryBean();</span><br><span class="line">        <span class="comment">//设置是否任意一个已定义的Job会覆盖现在的Job。默认为false，即已定义的Job不会覆盖现有的Job。</span></span><br><span class="line">        bean.setOverwriteExistingJobs(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 延时启动，应用启动5秒后  ，定时器才开始启动</span></span><br><span class="line">        bean.setStartupDelay(<span class="number">5</span>);</span><br><span class="line">        <span class="comment">// 注册定时触发器</span></span><br><span class="line">        bean.setTriggers(cronJobTrigger);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//多任务时的Scheduler，动态设置Trigger。一个SchedulerFactoryBean可能会有多个Trigger</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;multitaskScheduler&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SchedulerFactoryBean <span class="title">schedulerFactoryBean</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SchedulerFactoryBean schedulerFactoryBean = <span class="keyword">new</span> SchedulerFactoryBean();</span><br><span class="line">        <span class="keyword">return</span> schedulerFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="三、应用场景"><a href="#三、应用场景" class="headerlink" title="三、应用场景"></a>三、应用场景</h4><h5 id="1、单任务执行，并且通过控制器的接口实现时间间隔的动态修改"><a href="#1、单任务执行，并且通过控制器的接口实现时间间隔的动态修改" class="headerlink" title="1、单任务执行，并且通过控制器的接口实现时间间隔的动态修改"></a>1、单任务执行，并且通过控制器的接口实现时间间隔的动态修改</h5><h6 id="1）新建一个任务SchedulerTask-java"><a href="#1）新建一个任务SchedulerTask-java" class="headerlink" title="1）新建一个任务SchedulerTask.java"></a>1）新建一个任务SchedulerTask.java</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--三个注释都要加上--&gt;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulerTask</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;活动开始！！！&quot;</span>+<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="2）控制器执行"><a href="#2）控制器执行" class="headerlink" title="2）控制器执行"></a>2）控制器执行</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;jobDetail&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> JobDetail jobDetail;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;scheduler&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Scheduler scheduler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;jobTrigger&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> CronTrigger cronTrigger;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;second&#125;/quart&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">quartzTest</span><span class="params">(<span class="meta">@PathVariable(&quot;second&quot;)</span>Integer second)</span> <span class="keyword">throws</span> SchedulerException </span>&#123;</span><br><span class="line">        CronTrigger cron  = (CronTrigger) scheduler.getTrigger(cronTrigger.getKey());</span><br><span class="line">        String currentCron = cron.getCronExpression();<span class="comment">// 当前Trigger使用的</span></span><br><span class="line">        System.err.println(<span class="string">&quot;当前trigger使用的-&quot;</span>+currentCron);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改每隔?秒执行任务</span></span><br><span class="line">        CronScheduleBuilder scheduleBuilder = CronScheduleBuilder.cronSchedule(<span class="string">&quot;0/&quot;</span>+second+<span class="string">&quot; * * * * ?&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按新的cronExpression表达式重新构建trigger</span></span><br><span class="line">        cron = cron.getTriggerBuilder().withIdentity(cronTrigger.getKey())</span><br><span class="line">                .withSchedule(scheduleBuilder).build();</span><br><span class="line"></span><br><span class="line">        scheduler.rescheduleJob(cronTrigger.getKey(),cron);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;-这是quartz测试！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2、多任务场景"><a href="#2、多任务场景" class="headerlink" title="2、多任务场景"></a>2、多任务场景</h5><h5 id="Part1"><a href="#Part1" class="headerlink" title="==Part1=="></a>==Part1==</h5><blockquote><p>:新建多个Tast.java，也就是一开始就设定好了任务，我们假设为 伪多任务</p></blockquote><h6 id="1）新建多个任务"><a href="#1）新建多个任务" class="headerlink" title="1）新建多个任务"></a>1）新建多个任务</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulerJob1</span> <span class="keyword">implements</span> <span class="title">Job</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;这是第一个任务&quot;</span>+<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulerJob2</span> <span class="keyword">implements</span> <span class="title">Job</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line">        System.err.println(<span class="string">&quot;这是第二个任务&quot;</span>+<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="2）控制器"><a href="#2）控制器" class="headerlink" title="2）控制器"></a>2）控制器</h6><blockquote><p>通过下面的代码就可以实现两个任务交替执行，但是我们一般的应用场景是不确定的任务和执行时间，请看下一个解决方案</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzController2</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource(name = &quot;multitaskScheduler&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Scheduler scheduler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;task1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">task1</span><span class="params">()</span> <span class="keyword">throws</span> SchedulerException </span>&#123;</span><br><span class="line">        <span class="comment">//配置定时任务对应的Job，这里执行的是ScheduledJob类中定时的方法</span></span><br><span class="line">        JobDetail jobDetail = JobBuilder.newJob(SchedulerJob1.class).withIdentity(<span class="string">&quot;job1&quot;</span>, <span class="string">&quot;group1&quot;</span>).build();</span><br><span class="line">        CronScheduleBuilder scheduleBuilder = CronScheduleBuilder.cronSchedule(<span class="string">&quot;0/3 * * * * ?&quot;</span>);</span><br><span class="line">        <span class="comment">// 每3s执行一次</span></span><br><span class="line">        CronTrigger cronTrigger = TriggerBuilder.newTrigger().withIdentity(<span class="string">&quot;trigger1&quot;</span>, <span class="string">&quot;group1&quot;</span>).withSchedule(scheduleBuilder).build();</span><br><span class="line">        scheduler.scheduleJob(jobDetail, cronTrigger);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;任务1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;task2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">task1</span><span class="params">()</span> <span class="keyword">throws</span> SchedulerException </span>&#123;</span><br><span class="line">        <span class="comment">//配置定时任务对应的Job，这里执行的是ScheduledJob类中定时的方法</span></span><br><span class="line">        JobDetail jobDetail = JobBuilder.newJob(SchedulerJob2.class).withIdentity(<span class="string">&quot;job2&quot;</span>, <span class="string">&quot;group1&quot;</span>).build();</span><br><span class="line">        CronScheduleBuilder scheduleBuilder = CronScheduleBuilder.cronSchedule(<span class="string">&quot;0/6 * * * * ?&quot;</span>);</span><br><span class="line">        <span class="comment">// 每3s执行一次</span></span><br><span class="line">        CronTrigger cronTrigger = TriggerBuilder.newTrigger().withIdentity(<span class="string">&quot;trigger2&quot;</span>, <span class="string">&quot;group1&quot;</span>).withSchedule(scheduleBuilder).build();</span><br><span class="line">        scheduler.scheduleJob(jobDetail, cronTrigger);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;任务1&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Part2"><a href="#Part2" class="headerlink" title="==Part2:=="></a>==Part2:==</h5><blockquote><p>有时候我们有新建活动之类的场景，这种场景就是活动数目不确定，活动开始时间不确定，所以我们需要用其他的方案来解决！</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">思路：</span><br><span class="line">主要是通过逻辑代码实现任务开始时间的修改，但是必须要修改任务名称和触发器（trigger）名称的修改，确保多个任务之间名称不一致，否则会报错！</span><br><span class="line"></span><br><span class="line">根据任务我们也可以定制使用数据库轮询的方式，确保任务的开启！</span><br><span class="line">主要是为了解决服务器关起和其它因素导致任务终止！</span><br></pre></td></tr></table></figure><h6 id="1）任务类"><a href="#1）任务类" class="headerlink" title="1）任务类"></a>1）任务类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SchedulerJob2</span> <span class="keyword">implements</span> <span class="title">Job</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(JobExecutionContext jobExecutionContext)</span> <span class="keyword">throws</span> JobExecutionException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里可以获取控制器绑定的值，实际应用中可以设置为某个活动的id,以便进行数据库操作</span></span><br><span class="line">        Object jobName = jobExecutionContext.getJobDetail().getKey();</span><br><span class="line">        System.err.println(<span class="string">&quot;这是&quot;</span>+jobName+<span class="string">&quot;任务&quot;</span>+<span class="keyword">new</span> Date());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="2）控制器类"><a href="#2）控制器类" class="headerlink" title="2）控制器类"></a>2）控制器类</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;task2/&#123;jobName&#125;&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">task2</span><span class="params">(<span class="meta">@PathVariable(value = &quot;jobName&quot;)</span> String jobName)</span> <span class="keyword">throws</span> SchedulerException </span>&#123;</span><br><span class="line">       <span class="comment">//配置定时任务对应的Job，这里执行的是ScheduledJob类中定时的方法</span></span><br><span class="line">       JobDetail jobDetail = JobBuilder</span><br><span class="line">               .newJob(SchedulerJob2.class)</span><br><span class="line">               .usingJobData(<span class="string">&quot;jobName&quot;</span>,jobName)</span><br><span class="line">               .withIdentity(jobName, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">               .build();</span><br><span class="line"></span><br><span class="line">       CronScheduleBuilder scheduleBuilder = CronScheduleBuilder.cronSchedule(<span class="string">&quot;0/2 * * * * ?&quot;</span>);</span><br><span class="line">       <span class="comment">// 每3s执行一次</span></span><br><span class="line">       CronTrigger cronTrigger = TriggerBuilder.newTrigger()</span><br><span class="line">               .withIdentity(<span class="string">&quot;trigger2&quot;</span>+jobName, <span class="string">&quot;group1&quot;</span>)</span><br><span class="line">               .withSchedule(scheduleBuilder)</span><br><span class="line">               .build();</span><br><span class="line"></span><br><span class="line">       scheduler.scheduleJob(jobDetail,cronTrigger);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> jobName;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="3）获取所有的在线job"><a href="#3）获取所有的在线job" class="headerlink" title="3）获取所有的在线job"></a>3）获取所有的在线job</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;jobs&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">Jobs</span><span class="params">()</span> <span class="keyword">throws</span> SchedulerException </span>&#123;</span><br><span class="line"></span><br><span class="line">       Set&lt;TriggerKey&gt; triggerKeys = scheduler.getTriggerKeys(GroupMatcher.anyTriggerGroup());</span><br><span class="line"></span><br><span class="line">       <span class="comment">//获取所有的job集合</span></span><br><span class="line">       Set&lt;JobKey&gt; jobKeys = scheduler.getJobKeys(GroupMatcher.anyJobGroup());</span><br><span class="line"></span><br><span class="line">       <span class="comment">//可以在这进行线上任务和数据库任务匹配操作，确保该进行的活动进行活动</span></span><br><span class="line">       </span><br><span class="line">       <span class="keyword">return</span> jobKeys;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>job集合</p><p><img src="https://ws1.sinaimg.cn/large/005EneYkgy1fr2q86loa8j3056067dfn.jpg">`</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> Quartz </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Cloud构建微服务架构：服务注册与发现（Eureka、Consul)</title>
      <link href="/2018/04/21/Spring%20Cloud%E6%9E%84%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0%EF%BC%88Eureka%E3%80%81Consul)%20/"/>
      <url>/2018/04/21/Spring%20Cloud%E6%9E%84%E5%BB%BA%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84%EF%BC%9A%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0%EF%BC%88Eureka%E3%80%81Consul)%20/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="一、Spring-Cloud-Eureka"><a href="#一、Spring-Cloud-Eureka" class="headerlink" title="一、Spring Cloud Eureka"></a>一、Spring Cloud Eureka</h4><blockquote><p>Spring Cloud Eureka是Spring Cloud Netflix项目下的服务治理模块。而Spring Cloud Netflix项目是Spring Cloud的子项目之一，主要内容是对Netflix公司一系列开源产品的包装，它为Spring Boot应用提供了自配置的Netflix OSS整合。通过一些简单的注解，开发者就可以快速的在应用中配置一下常用模块并构建庞大的分布式系统。它主要提供的模块包括：服务发现（Eureka），断路器（Hystrix），智能路由（Zuul），客户端负载均衡（Ribbon）等。</p></blockquote><h5 id="1、创建“服务注册中心”"><a href="#1、创建“服务注册中心”" class="headerlink" title="1、创建“服务注册中心”-"></a>1、创建“服务注册中心”-</h5><p>添加依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.5.4.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;relativePath/&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;Dalston.SR1&lt;/version&gt;</span><br><span class="line">           &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">           &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>比较繁琐，可以直接通过idea添加<br><img src="https://ws1.sinaimg.cn/large/005EneYkgy1fqi3remmeej30rj07vjry.jpg"></p></blockquote><h5 id="2、通过注解开启服务"><a href="#2、通过注解开启服务" class="headerlink" title="2、通过注解开启服务"></a>2、通过注解开启服务</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableEurekaServer</span><br><span class="line">public class EurekaServerApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(EurekaServerApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3、修改配置文件"><a href="#3、修改配置文件" class="headerlink" title="3、修改配置文件"></a>3、修改配置文件</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">server.port=110</span><br><span class="line"></span><br><span class="line">eureka.instance.hostname=localhost</span><br><span class="line">eureka.client.register-with-eureka=false</span><br><span class="line">eureka.client.fetch-registry=false</span><br><span class="line">eureka.client.service-url.defaultZone=http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br></pre></td></tr></table></figure><h5 id="4、创建“服务提供方”（client）"><a href="#4、创建“服务提供方”（client）" class="headerlink" title="4、创建“服务提供方”（client）"></a>4、创建“服务提供方”（client）</h5><h6 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt; </span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.5.4.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">           &lt;version&gt;Dalston.SR1&lt;/version&gt;</span><br><span class="line">           &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">           &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br></pre></td></tr></table></figure><h6 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=eureka-client</span><br><span class="line">server.port=2001</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://localhost:110/eureka/</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="在application中添加注解"><a href="#在application中添加注解" class="headerlink" title="在application中添加注解"></a>在application中添加注解</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">@EnableDiscoveryClient</span><br><span class="line">public class ServiceConsumerApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(ServiceConsumerApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Bean</span><br><span class="line">public RestTemplate restTemplate(RestTemplateBuilder builder) &#123;</span><br><span class="line">// Do any additional configuration here</span><br><span class="line">return builder.build();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="在控制器中使用"><a href="#在控制器中使用" class="headerlink" title="在控制器中使用"></a>在控制器中使用</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class DcController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    DiscoveryClient discoveryClient;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/dc&quot;)</span><br><span class="line">    public String dc() &#123;</span><br><span class="line">        String services = &quot;Services: &quot; + discoveryClient.getServices();</span><br><span class="line">        System.out.println(services);</span><br><span class="line">        return services;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打开连接<a href="http://localhost:110/">http://localhost:110</a></p><p><img src="https://ws1.sinaimg.cn/large/005EneYkgy1fqi7jqltmzj31gl0okgnp.jpg"></p><h5 id="5、创建eureka消费者"><a href="#5、创建eureka消费者" class="headerlink" title="5、创建eureka消费者"></a>5、创建eureka消费者</h5><blockquote><p>eureka消费者和提供者结构配置一样</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--消费提供者提供的接口--&gt;</span><br><span class="line">@RestController</span><br><span class="line">public class IndexController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    LoadBalancerClient loadBalancerClient;</span><br><span class="line">    @Autowired</span><br><span class="line">    RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    @GetMapping(&quot;/consumer&quot;)</span><br><span class="line">    public String dc() &#123;</span><br><span class="line">        ServiceInstance serviceInstance = loadBalancerClient.choose(&quot;eureka-client&quot;);</span><br><span class="line">        String url = &quot;http://&quot; + serviceInstance.getHost() + &quot;:&quot; + serviceInstance.getPort() + &quot;/dc&quot;;</span><br><span class="line">        System.out.println(url);</span><br><span class="line"></span><br><span class="line">        ServiceInstance instance = loadBalancerClient.choose(&quot;eureka-consumer&quot;);</span><br><span class="line">        System.out.println(instance.getHost()+&quot;:&quot;+instance.getPort());</span><br><span class="line">        return restTemplate.getForObject(url, String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二、Spring-Cloud-Consul"><a href="#二、Spring-Cloud-Consul" class="headerlink" title="二、Spring Cloud Consul"></a>二、Spring Cloud Consul</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Spring Cloud Consul项目是针对Consul的服务治理实现。Consul是一个分布式高可用的系统</span><br><span class="line">，它包含多个组件，但是作为一个整体，在微服务架构中为我们的基础设施提供服务发现和服务配置的工具。</span><br><span class="line">它包含了下面几个特性：</span><br><span class="line"></span><br><span class="line">服务发现</span><br><span class="line">健康检查</span><br><span class="line">Key/Value存储</span><br><span class="line">多数据中心</span><br></pre></td></tr></table></figure><h5 id="1、添加依赖"><a href="#1、添加依赖" class="headerlink" title="1、添加依赖"></a>1、添加依赖</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-consul-config&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-consul-discovery&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;$&#123;spring-cloud.version&#125;&lt;/version&gt;</span><br><span class="line">&lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">&lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br></pre></td></tr></table></figure><h5 id="2、properties添加配置"><a href="#2、properties添加配置" class="headerlink" title="2、properties添加配置"></a>2、properties添加配置</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.cloud.consul.host=localhost</span><br><span class="line">spring.cloud.consul.port=8500</span><br></pre></td></tr></table></figure><h5 id="3、开启服务"><a href="#3、开启服务" class="headerlink" title="3、开启服务"></a>3、开启服务</h5><blockquote><p>需要本地开启consul服务，去官网下载服务端软件</p></blockquote><p><a href="https://www.consul.io/">https://www.consul.io/</a></p><p><img src="https://ws1.sinaimg.cn/large/005EneYkgy1fqiw3huac5j317l0gfn08.jpg"></p><blockquote><p>从官网下载对应版本的服务端软件，Windows系统在当前的软件的目录下面打开cmd，并且输入consul agent -dev,即可开启服务</p></blockquote><h5 id="4、开启spring-boot项目"><a href="#4、开启spring-boot项目" class="headerlink" title="4、开启spring boot项目"></a>4、开启spring boot项目</h5><p><a href="http://localhost//8500">输入http://localhost://8500</a>即可打开UI界面</p><p><img src="https://ws1.sinaimg.cn/large/005EneYkgy1fqi9an22ntj315c0l40u3.jpg" alt="image"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> SpringCloud </tag>
            
            <tag> 微服务架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringSession(Springboot版本)</title>
      <link href="/2018/04/19/SpringSession(Springboot%E7%89%88%E6%9C%AC)/"/>
      <url>/2018/04/19/SpringSession(Springboot%E7%89%88%E6%9C%AC)/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="特性："><a href="#特性：" class="headerlink" title="特性："></a>特性：</h4><ul><li>使用GemFire来构建C/S架构的httpSession（不关注）</li><li>使用第三方仓储来实现集群session管理，也就是常说的分布式session容器，替换应用容器（如tomcat的session容器）。仓储的实现，Spring Session提供了三个实现（redis，mongodb，jdbc），其中redis使我们最常用的。程序的实现，使用AOP技术，几乎可以做到透明化地替换。（核心）</li><li>可以非常方便的扩展Cookie和自定义Session相关的Listener，Filter。</li><li>可以很方便的与Spring Security集成，增加诸如findSessionsByUserName，rememberMe，限制同一个账号可以同时在线的Session数（如设置成1，即可达到把前一次登录顶掉的效果）等等</li></ul><blockquote><p>本文的例子使用springsession结合redis实现session的缓存，解决单点登录的分布式session存储问题</p></blockquote><h4 id="1、添加依赖"><a href="#1、添加依赖" class="headerlink" title="1、添加依赖"></a>1、添加依赖</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.session&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-session-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="2、添加一个配置"><a href="#2、添加一个配置" class="headerlink" title="2、添加一个配置"></a>2、添加一个配置</h4><blockquote><p>配置类开启Redis Http Session，基本是0配置，只需要让主配置扫描到@EnableRedisHttpSession即可</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableRedisHttpSession</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpSessionConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、配置文件"><a href="#3、配置文件" class="headerlink" title="3、配置文件"></a>3、配置文件</h4><blockquote><p>配置文件application.yml，配置连接的redis信息</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  redis:</span><br><span class="line">    host: localhost</span><br><span class="line">    port: 6379</span><br><span class="line">    database: 0</span><br></pre></td></tr></table></figure><p><em><strong>注意：测试使用redis3会报异常，建议使用4及4以上</strong></em></p><h4 id="4、编写测试controller"><a href="#4、编写测试controller" class="headerlink" title="4、编写测试controller"></a>4、编写测试controller</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> FindByIndexNameSessionRepository&lt;? extends ExpiringSession&gt; sessionRepository;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;cookie/&#123;browser&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">cookie</span><span class="params">(<span class="meta">@PathVariable(&quot;browser&quot;)</span> String browser, HttpServletRequest request, HttpSession session)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//取出session中的browser</span></span><br><span class="line">        Object sessionBrowser = session.getAttribute(<span class="string">&quot;browser&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (sessionBrowser == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;不存在session，设置browser=&quot;</span> + browser);</span><br><span class="line">            session.setAttribute(<span class="string">&quot;browser&quot;</span>, browser);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;存在session，browser=&quot;</span> + sessionBrowser.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="keyword">if</span> (cookies != <span class="keyword">null</span> &amp;&amp; cookies.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">                System.out.println(cookie.getName() + <span class="string">&quot; : &quot;</span> + cookie.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5、结果"><a href="#5、结果" class="headerlink" title="5、结果"></a>5、结果</h4><p><img src="https://ws1.sinaimg.cn/large/005EneYkgy1fqhsfzkf9oj30j603ot8u.jpg"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">​1 spring:session是默认的Redis HttpSession前缀（redis中，我们常用’:’作为分割符）。</span><br><span class="line"></span><br><span class="line">2 每一个session都会有三个相关的key，第三个key最为重要，它是一个HASH数据结构，</span><br><span class="line">将内存中的session信息序列化到了redis中。如上文的browser，就被记录为sessionAttr:browser=chrome,</span><br><span class="line">还有一些meta信息，如创建时间，最后访问时间等。</span><br><span class="line"></span><br><span class="line">3 另外两个key，expirations:1504446540000和sessions:expires:7079…我发现大多数的文章都没有对其分析，</span><br><span class="line">前者是一个SET类型，后者是一个STRING类型，可能会有读者发出这样的疑问，redis自身就有过期时间的设置方式TTL，</span><br><span class="line">为什么要额外添加两个key来维持session过期的特性呢？这需要对redis有一定深入的了解才能想到这层设计。</span><br><span class="line">当然这不是本节的重点，简单提一下：redis清除过期key的行为是一个异步行为且是一个低优先级的行为，</span><br><span class="line">用文档中的原话来说便是，可能会导致session不被清除。于是引入了专门的expiresKey，来专门负责session的清除，</span><br><span class="line">包括我们自己在使用redis时也需要关注这一点。在开发层面，我们仅仅需要关注第三个key就行了。</span><br></pre></td></tr></table></figure><h4 id="6、使用自定义CookieSerializer"><a href="#6、使用自定义CookieSerializer" class="headerlink" title="6、使用自定义CookieSerializer"></a>6、使用自定义CookieSerializer</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CookieSerializer <span class="title">cookieSerializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    DefaultCookieSerializer serializer = <span class="keyword">new</span> DefaultCookieSerializer();</span><br><span class="line">    serializer.setCookieName(<span class="string">&quot;JSESSIONID&quot;</span>);</span><br><span class="line">    serializer.setCookiePath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">    serializer.setDomainNamePattern(<span class="string">&quot;^.+?\\.(\\w+\\.[a-z]+)$&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> serializer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用上述配置后，我们可以将Spring Session默认的Cookie Key从SESSION替换为原生的JSESSIONID。而CookiePath设置为根路径且配置了相关的正则表达式，可以达到同父域下的单点登录的效果，在未涉及跨域的单点登录系统中，这是一个非常优雅的解决方案。如果我们的当前域名是moe.cnkirito.moe，该正则会将Cookie设置在父域cnkirito.moe中，如果有另一个相同父域的子域名blog.cnkirito.moe也会识别这个Cookie，便可以很方便的实现同父域下的单点登录。</p></blockquote><h4 id="7、根据用户名查找用户归属的SESSION"><a href="#7、根据用户名查找用户归属的SESSION" class="headerlink" title="7、根据用户名查找用户归属的SESSION"></a>7、根据用户名查找用户归属的SESSION</h4><blockquote><p>这个特性听起来非常有意思，你可以在一些有趣的场景下使用它，如知道用户名后即可删除其SESSION。一直以来我们都是通过线程绑定的方式，让用户操作自己的SESSION，包括获取用户名等操作。但如今它提供了一个反向的操作，根据用户名获取SESSION，恰巧，在一些项目中真的可以使用到这个特性，最起码，当别人问起你，或者讨论到和SESSION相关的知识时，你可以明晰一点，这是可以做到的。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    FindByIndexNameSessionRepository&lt;? extends ExpiringSession&gt; sessionRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/test/findByUsername&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map <span class="title">findByUsername</span><span class="params">(<span class="meta">@RequestParam</span> String username)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, ? extends ExpiringSession&gt; usersSessions = sessionRepository.findByIndexNameAndIndexValue(FindByIndexNameSessionRepository.PRINCIPAL_NAME_INDEX_NAME, username);</span><br><span class="line">        <span class="keyword">return</span> usersSessions;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
            <tag> SpringSession </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JWT登录信息加密</title>
      <link href="/2018/04/11/JWT%E7%99%BB%E5%BD%95%E4%BF%A1%E6%81%AF%E5%8A%A0%E5%AF%86/"/>
      <url>/2018/04/11/JWT%E7%99%BB%E5%BD%95%E4%BF%A1%E6%81%AF%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="1、背景"><a href="#1、背景" class="headerlink" title="1、背景"></a>1、背景</h4><p>对于传统的单点登录系统，使用cookie和session的方式存储用户登录信息，但是对于安全性要求较高的企业–金融企业，就需要对用户的信息进行加密存储，防止客户信息泄露。</p><p><img src="https://ws1.sinaimg.cn/large/005EneYkgy1fq8uglu1ekj30yl0cijst.jpg"></p><h4 id="2、JWT构成"><a href="#2、JWT构成" class="headerlink" title="2、JWT构成"></a>2、JWT构成</h4><h6 id="JWT—-JSON-Web-Token"><a href="#JWT—-JSON-Web-Token" class="headerlink" title="JWT—-JSON Web Token"></a>JWT—-JSON Web Token</h6><p><img src="https://ws1.sinaimg.cn/large/005EneYkgy1fq8uj6ep36j30vv0gpwgw.jpg"></p><blockquote><p>第一部分我们称它为头部（header)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">完整的头部就像下面这样的JSON：</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&quot;typ&quot;: &quot;JWT&quot;,  //声明类型，这里是jwt</span><br><span class="line"></span><br><span class="line">&quot;alg&quot;: &quot;HS256&quot; //声明加密的算法 通常直接使用 HMAC SHA256</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>第二部分我们称其为载荷（payload)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">载荷就是存放有效信息的地方。</span><br><span class="line">这个名字像是特指飞机上承载的货品，这些有效信息包含三个部分</span><br><span class="line"></span><br><span class="line">标准中注册的声明</span><br><span class="line"></span><br><span class="line">公共的声明</span><br><span class="line"></span><br><span class="line">私有的声明</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">标准中注册的声明 (建议但不强制使用) ：</span><br><span class="line"></span><br><span class="line">iss: jwt签发者</span><br><span class="line"></span><br><span class="line">sub: jwt所面向的用户</span><br><span class="line"></span><br><span class="line">aud: 接收jwt的一方</span><br><span class="line"></span><br><span class="line">exp: jwt的过期时间，这个过期时间必须要大于签发时间</span><br><span class="line"></span><br><span class="line">nbf: 定义在什么时间之前，该jwt都是不可用的.</span><br><span class="line"></span><br><span class="line">iat: jwt的签发时间</span><br><span class="line"></span><br><span class="line">jti: jwt的唯一身份标识，主要用来作为一次性token,从而回避重放攻击。</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">公共的声明 ：</span><br><span class="line"></span><br><span class="line">公共的声明可以添加任何的信息，一般添加用户的相关信息或其他业务需要的必要信息.但不建议添加敏感信息，因为该部分在客户端可解密.</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">私有的声明 ：</span><br><span class="line"></span><br><span class="line">私有声明是提供者和消费者所共同定义的声明，一般不建议存放敏感信息，因为base64是对称解密的，意味着该部分信息可以归类为明文信息。</span><br><span class="line"></span><br><span class="line">定义一个payload：</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&quot;name&quot;:&quot;MiChong&quot;,</span><br><span class="line"></span><br><span class="line">&quot;age&quot;:&quot;23&quot;,</span><br><span class="line"></span><br><span class="line">&quot;org&quot;:&quot;天王盖地虎&quot;</span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><blockquote><p>第三部分是签证（signature)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">jwt的第三部分是一个签证信息，这个签证信息由三部分组成：</span><br><span class="line"></span><br><span class="line">header (base64后的)</span><br><span class="line"></span><br><span class="line">payload (base64后的)</span><br><span class="line"></span><br><span class="line">secret</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3、Java实现"><a href="#3、Java实现" class="headerlink" title="3、Java实现"></a>3、Java实现</h4><h6 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.auth0&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;java-jwt&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.3.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="加密解密实现"><a href="#加密解密实现" class="headerlink" title="加密解密实现"></a>加密解密实现</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> cn.buildworld.daliy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWT;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWTVerifier;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.algorithms.Algorithm;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.Claim;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.DecodedJWT;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jwt加密解密工具</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> MiChong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span>: 1564666023@qq.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Create</span> 2018-04-11 16:16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: V1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtToken</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 公共密钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SECRET = <span class="string">&quot;michong&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnsupportedEncodingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createToken</span><span class="params">()</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//签发时间</span></span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//过期时间- 1分钟过期</span></span><br><span class="line">        Calendar nowTime = Calendar.getInstance();</span><br><span class="line">        nowTime.add(Calendar.MINUTE,<span class="number">1</span>);</span><br><span class="line">        Date expiresDate = nowTime.getTime();</span><br><span class="line"></span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;alg&quot;</span>,<span class="string">&quot;HS256&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;typ&quot;</span>,<span class="string">&quot;JWT&quot;</span>);</span><br><span class="line">        String token = JWT.create()</span><br><span class="line">                .withClaim(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;michong&quot;</span>)</span><br><span class="line">                <span class="comment">//设置过期时间</span></span><br><span class="line">                .withExpiresAt(expiresDate)</span><br><span class="line">                <span class="comment">//设置签发时间</span></span><br><span class="line">                .withIssuedAt(date)</span><br><span class="line">                .sign(Algorithm.HMAC256(SECRET));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> UnsupportedEncodingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String,Claim&gt; <span class="title">verifyToken</span><span class="params">(String token)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line"></span><br><span class="line">        JWTVerifier verifier = JWT.require(Algorithm.HMAC256(SECRET))</span><br><span class="line">        .build();</span><br><span class="line"></span><br><span class="line">        DecodedJWT jwt = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//解密</span></span><br><span class="line">            jwt = verifier.verify(token);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;token已经失效&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> jwt.getClaims();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="四、测试"><a href="#四、测试" class="headerlink" title="四、测试"></a>四、测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Auth0WithJWT</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String token = JwtToken.createToken();</span><br><span class="line">        System.out.println(token);</span><br><span class="line">        </span><br><span class="line">        Map&lt;String, Claim&gt; stringClaimMap = JwtToken.verifyToken(token);</span><br><span class="line">        System.out.println(stringClaimMap.get(<span class="string">&quot;name&quot;</span>).asString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h6><p><img src="https://ws1.sinaimg.cn/large/005EneYkgy1fq8vbms62jj30jf052mxe.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot之API--Swagger2接口文档管理</title>
      <link href="/2018/03/29/SpringBoot%E4%B9%8BAPI--Swagger2%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E7%AE%A1%E7%90%86/"/>
      <url>/2018/03/29/SpringBoot%E4%B9%8BAPI--Swagger2%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="1、添加依赖"><a href="#1、添加依赖" class="headerlink" title="1、添加依赖"></a>1、添加依赖</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">&lt;!--Swagger2--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="2、创建Swagger2配置类，和application处于同一级"><a href="#2、创建Swagger2配置类，和application处于同一级" class="headerlink" title="2、创建Swagger2配置类，和application处于同一级"></a>2、创建Swagger2配置类，和application处于同一级</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.RequestHandlerSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * API接口文档配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> MiChong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span>: 1564666023@qq.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Create</span> 2018-03-29 16:32</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: V1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Swagger2</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;cn.buildworld.sbtest.web&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">&quot;Spring Boot中使用Swagger2构建RESTful APIs&quot;</span>)</span><br><span class="line">                .contact(<span class="string">&quot;MiChong&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>如上代码所示，通过@Configuration注解，让Spring来加载该类配置。再通过@EnableSwagger2注解来启用Swagger2。<br>再通过createRestApi函数创建Docket的Bean之后，apiInfo()用来创建该Api的基本信息（这些基本信息会展现在文档页面中）。select()函数返回一个ApiSelectorBuilder实例用来控制哪些接口暴露给Swagger来展现，本例采用指定扫描的包路径来定义，Swagger会扫描该包下所有Controller定义的API，并产生文档内容（除了被@ApiIgnore指定的请求）。</p></blockquote><h5 id="3、添加文档内容"><a href="#3、添加文档内容" class="headerlink" title="3、添加文档内容"></a>3、添加文档内容</h5><blockquote><p>在完成了上述配置后，其实已经可以生产文档内容，但是这样的文档主要针对请求本身，而描述主要来源于函数等命名产生，对用户并不友好，我们通常需要自己增加一些说明来丰富文档内容。如下所示，我们通过@ApiOperation注解来给API增加说明、通过@ApiImplicitParams、@ApiImplicitParam注解来给参数增加说明。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HseCustomerService hseCustomerService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = &quot;客户列表&quot;)</span></span><br><span class="line">    <span class="meta">@ApiImplicitParams(&#123;</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;fromId&quot;,value = &quot;起始位置&quot;,required = false,dataType = &quot;Integer&quot;),</span></span><br><span class="line"><span class="meta">            @ApiImplicitParam(name = &quot;limit&quot;,value = &quot;每页显示条数&quot;,required = false,dataType = &quot;Integer&quot;)</span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;list&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getList</span><span class="params">(<span class="meta">@RequestParam(defaultValue = &quot;0&quot;)</span>Integer fromId,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="meta">@RequestParam(defaultValue = &quot;2&quot;)</span>Integer limit )</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化page插件，传入分页参数</span></span><br><span class="line">        PageHelper.startPage(fromId,limit);</span><br><span class="line">        List&lt;HseCustomer&gt; list = hseCustomerService.getList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//包装想要返回的结果，包含多种信息</span></span><br><span class="line">        PageInfo pageInfo = <span class="keyword">new</span> PageInfo(list);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pageInfo;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="4、最后显示效果"><a href="#4、最后显示效果" class="headerlink" title="4、最后显示效果"></a>4、最后显示效果</h5><p>本地的访问地址：<br><a href="http://localhost:9091/swagger-ui.html">http://localhost:9091/swagger-ui.html</a><br><img src="https://ws1.sinaimg.cn/large/005EneYkgy1fptt65qlusj30so0piq4o.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot整合Dubbo</title>
      <link href="/2018/03/29/SpringBoot%E6%95%B4%E5%90%88Dubbo/"/>
      <url>/2018/03/29/SpringBoot%E6%95%B4%E5%90%88Dubbo/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="https://github.com/alibaba/dubbo-spring-boot-starter">官方Github地址</a></p><h4 id="一、服务端开发"><a href="#一、服务端开发" class="headerlink" title="一、服务端开发"></a>一、服务端开发</h4><h6 id="1、添加依赖"><a href="#1、添加依赖" class="headerlink" title="1、添加依赖"></a>1、添加依赖</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.spring.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;dubbo-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.0.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><h6 id="2、在application-properties添加dubbo的相关配置信息"><a href="#2、在application-properties添加dubbo的相关配置信息" class="headerlink" title="2、在application.properties添加dubbo的相关配置信息"></a>2、在application.properties添加dubbo的相关配置信息</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># Spring boot application</span><br><span class="line">spring.application.name = dubbo-provider-demo</span><br><span class="line">server.port = 9090</span><br><span class="line">management.port = 9091</span><br><span class="line"></span><br><span class="line"># Base packages to scan Dubbo Components (e.g., @Service, @Reference)</span><br><span class="line">dubbo.scan.basePackages  = com.alibaba.boot.dubbo.demo.provider.service</span><br><span class="line"></span><br><span class="line"># Dubbo Config properties</span><br><span class="line">## ApplicationConfig Bean</span><br><span class="line">dubbo.application.id = dubbo-provider-demo</span><br><span class="line">dubbo.application.name = dubbo-provider-demo</span><br><span class="line"></span><br><span class="line">## ProtocolConfig Bean</span><br><span class="line">dubbo.protocol.id = dubbo</span><br><span class="line">dubbo.protocol.name = dubbo</span><br><span class="line">dubbo.protocol.port = 12345</span><br><span class="line"></span><br><span class="line">## RegistryConfig Bean</span><br><span class="line">dubbo.registry.id = my-registry</span><br><span class="line">dubbo.registry.address = N/A</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="3、接下来在Spring-Boot-Application的上添加-EnableDubboConfiguration，表示要开启dubbo功能-dubbo-provider服务可以使用或者不使用web容器"><a href="#3、接下来在Spring-Boot-Application的上添加-EnableDubboConfiguration，表示要开启dubbo功能-dubbo-provider服务可以使用或者不使用web容器" class="headerlink" title="3、接下来在Spring Boot Application的上添加@EnableDubboConfiguration，表示要开启dubbo功能. (dubbo provider服务可以使用或者不使用web容器)"></a>3、接下来在Spring Boot Application的上添加@EnableDubboConfiguration，表示要开启dubbo功能. (dubbo provider服务可以使用或者不使用web容器)</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDubboConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboProviderLauncher</span> </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="4、编写你的dubbo服务，只需要添加要发布的服务实现上添加-Service（import-com-alibaba-dubbo-config-annotation-Service）注解，其中interfaceClass是要发布服务的接口"><a href="#4、编写你的dubbo服务，只需要添加要发布的服务实现上添加-Service（import-com-alibaba-dubbo-config-annotation-Service）注解，其中interfaceClass是要发布服务的接口" class="headerlink" title="4、编写你的dubbo服务，只需要添加要发布的服务实现上添加@Service（import com.alibaba.dubbo.config.annotation.Service）注解，其中interfaceClass是要发布服务的接口."></a>4、编写你的dubbo服务，只需要添加要发布的服务实现上添加@Service（import com.alibaba.dubbo.config.annotation.Service）注解，其中interfaceClass是要发布服务的接口.</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(interfaceClass = IHelloService.class)</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServiceImpl</span> <span class="keyword">implements</span> <span class="title">IHelloService</span> </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>==注意：实体类必须实现Serializable接口==</p><h4 id="二、消费端的消费服务"><a href="#二、消费端的消费服务" class="headerlink" title="二、消费端的消费服务"></a>二、消费端的消费服务</h4><h6 id="1、添加依赖-1"><a href="#1、添加依赖-1" class="headerlink" title="1、添加依赖"></a>1、添加依赖</h6><blockquote><p>同上</p></blockquote><h6 id="2、配置文件"><a href="#2、配置文件" class="headerlink" title="2、配置文件"></a>2、配置文件</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># Spring boot application</span><br><span class="line">spring.application.name = dubbo-provider-demo</span><br><span class="line"></span><br><span class="line"># Dubbo Config properties</span><br><span class="line">## ApplicationConfig Bean</span><br><span class="line">dubbo.application.id = dubbo-consumer-demo</span><br><span class="line">dubbo.application.name = dubbo-consumer-demo</span><br><span class="line"></span><br><span class="line">## ProtocolConfig Bean</span><br><span class="line">dubbo.protocol.id = dubbo</span><br><span class="line">dubbo.protocol.name = dubbo</span><br><span class="line">dubbo.protocol.port = 12345</span><br></pre></td></tr></table></figure><h6 id="3、add-EnableDubboConfiguration-on-Spring-Boot-Application"><a href="#3、add-EnableDubboConfiguration-on-Spring-Boot-Application" class="headerlink" title="3、add @EnableDubboConfiguration on Spring Boot Application"></a>3、add @EnableDubboConfiguration on Spring Boot Application</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDubboConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboConsumerLauncher</span> </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="4、使用"><a href="#4、使用" class="headerlink" title="4、使用"></a>4、使用</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference(url = &quot;dubbo://127.0.0.1:20880&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> HseCustomerService customerService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;list2&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getList</span><span class="params">(<span class="meta">@RequestParam(defaultValue = &quot;0&quot;)</span>Integer fromId,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="meta">@RequestParam(defaultValue = &quot;2&quot;)</span>Integer limit )</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化page插件，传入分页参数</span></span><br><span class="line">        PageHelper.startPage(fromId,limit);</span><br><span class="line">        List&lt;HseCustomer&gt; list = customerService.getList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//包装想要返回的结果，包含多种信息</span></span><br><span class="line">        PageInfo pageInfo = <span class="keyword">new</span> PageInfo(list);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pageInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="5、成功效果"><a href="#5、成功效果" class="headerlink" title="5、成功效果"></a>5、成功效果</h6><p><img src="https://ws1.sinaimg.cn/large/005EneYkgy1fptt8cwrzxj30ol09bt90.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot统计实时在线人数</title>
      <link href="/2018/03/06/SpringBoot%E7%BB%9F%E8%AE%A1%E5%AE%9E%E6%97%B6%E5%9C%A8%E7%BA%BF%E4%BA%BA%E6%95%B0/"/>
      <url>/2018/03/06/SpringBoot%E7%BB%9F%E8%AE%A1%E5%AE%9E%E6%97%B6%E5%9C%A8%E7%BA%BF%E4%BA%BA%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h4 id="1、配置pom文件依赖"><a href="#1、配置pom文件依赖" class="headerlink" title="1、配置pom文件依赖"></a>1、配置pom文件依赖</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--统计实时人数--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;1.5.10.RELEASE&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="2、新建一个WebSocketConfig"><a href="#2、新建一个WebSocketConfig" class="headerlink" title="2、新建一个WebSocketConfig"></a>2、新建一个WebSocketConfig</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServerEndpointExporter <span class="title">serverEndpointExporter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServerEndpointExporter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、在控制器的包下新建一个MySocket"><a href="#3、在控制器的包下新建一个MySocket" class="headerlink" title="3、在控制器的包下新建一个MySocket"></a>3、在控制器的包下新建一个MySocket</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.buildworld.faceweb.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnClose;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnMessage;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.OnOpen;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.Session;</span><br><span class="line"><span class="keyword">import</span> javax.websocket.server.ServerEndpoint;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CopyOnWriteArraySet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 检测实时在线人数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> MiChong</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span>: 1564666023@qq.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Create</span> 2018-03-06 16:43</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: V1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ServerEndpoint(&quot;/websocket&quot;)</span>  <span class="comment">//该注解表示该类被声明为一个webSocket终端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySocket</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始在线人数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> online_num = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 线程安全的socket集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CopyOnWriteArraySet&lt;MySocket&gt; webSocketSet = <span class="keyword">new</span> CopyOnWriteArraySet&lt;MySocket&gt;();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 会话</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Session session;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnOpen</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(Session session)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.session = session;</span><br><span class="line">        webSocketSet.add(<span class="keyword">this</span>);</span><br><span class="line">        addOnlineCount();</span><br><span class="line">        System.out.println(<span class="string">&quot;有链接加入，当前人数为:&quot;</span>+getOnline_num());</span><br><span class="line">        <span class="keyword">this</span>.session.getAsyncRemote().sendText(<span class="string">&quot;有链接加入，当前人数为:&quot;</span>+getOnline_num());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnClose</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">()</span></span>&#123;</span><br><span class="line">        webSocketSet.remove(<span class="keyword">this</span>);</span><br><span class="line">        subOnlineCount();</span><br><span class="line">        System.out.println(<span class="string">&quot;有链接关闭,当前人数为:&quot;</span>+getOnline_num());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@OnMessage</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String message,Session session)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;来自客户端的消息:&quot;</span>+message);</span><br><span class="line">        <span class="keyword">for</span>(MySocket item:webSocketSet)&#123;</span><br><span class="line">            <span class="keyword">this</span>.session.getAsyncRemote().sendText(message);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">getOnline_num</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MySocket.online_num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">subOnlineCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MySocket.online_num--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">int</span> <span class="title">addOnlineCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MySocket.online_num++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、前端显示结果"><a href="#4、前端显示结果" class="headerlink" title="4、前端显示结果"></a>4、前端显示结果</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My WebSocket<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">Welcome<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;text&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;send()&quot;</span>&gt;</span>Send<span class="tag">&lt;/<span class="name">button</span>&gt;</span>    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;closeWebSocket()&quot;</span>&gt;</span>Close<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> websocket = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//判断当前浏览器是否支持WebSocket</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span>(<span class="string">&#x27;WebSocket&#x27;</span> <span class="keyword">in</span> <span class="built_in">window</span>)&#123;</span></span><br><span class="line"><span class="javascript">        onlinenum = <span class="keyword">new</span> WebSocket(<span class="string">&quot;ws://localhost:9090/face/websocket&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">&#x27;Not support websocket&#x27;</span>)</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//连接发生错误的回调方法</span></span></span><br><span class="line"><span class="javascript">    onlinenum.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        setMessageInnerHTML(<span class="string">&quot;error&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//连接成功建立的回调方法</span></span></span><br><span class="line"><span class="javascript">    onlinenum.onopen = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        setMessageInnerHTML(<span class="string">&quot;open&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//接收到消息的回调方法</span></span></span><br><span class="line"><span class="javascript">    onlinenum.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        setMessageInnerHTML(event.data);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//连接关闭的回调方法</span></span></span><br><span class="line"><span class="javascript">    onlinenum.onclose = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        setMessageInnerHTML(<span class="string">&quot;close&quot;</span>);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//监听窗口关闭事件，当窗口关闭时，主动去关闭websocket连接，防止连接还没断开就关闭窗口，server端会抛异常。</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onbeforeunload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        onlinenum.close();</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//将消息显示在网页上</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">setMessageInnerHTML</span>(<span class="params">innerHTML</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;message&#x27;</span>).innerHTML += innerHTML + <span class="string">&#x27;&lt;br/&gt;&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//关闭连接</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">closeWebSocket</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        onlinenum.close();</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//发送消息</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">send</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> message = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;text&#x27;</span>).value;</span></span><br><span class="line"><span class="javascript">        onlinenum.send(message);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h5><p><img src="http://img.blog.csdn.net/20180306181809300?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NzM2ODk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人工智能之Python人脸识别技术--face_recognition模块</title>
      <link href="/2018/02/25/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B9%8BPython%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF--face_recognition%E6%A8%A1%E5%9D%97/"/>
      <url>/2018/02/25/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B9%8BPython%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB%E6%8A%80%E6%9C%AF--face_recognition%E6%A8%A1%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><a href="https://github.com/MiChongGET/face_collection">Github项目地址：https://github.com/MiChongGET/face_collection</a></p><h4 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h4><p>######１．系统环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ubuntu 17.04</span><br><span class="line">Python 2.7.14</span><br><span class="line">pycharm 开发工具</span><br></pre></td></tr></table></figure><h6 id="2-开发环境，安装各种系统包"><a href="#2-开发环境，安装各种系统包" class="headerlink" title="2.开发环境，安装各种系统包"></a>2.开发环境，安装各种系统包</h6><ul><li>人脸检测基于dlib，dlib依赖Boost和cmake</li><li> 在windows中如果要使用dlib还是比较麻烦的，如果想省时间可以在anaconda中安装<blockquote><p>conda install -c conda-forge dlib=19.4</p></blockquote></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install build-essential cmake</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install libgtk-3-dev</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install libboost-all-dev</span></span><br></pre></td></tr></table></figure><ul><li>其他重要的包<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install numpy</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install scipy</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install opencv-python</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install dlib</span></span><br></pre></td></tr></table></figure></li><li>安装 face_recognition</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装 face_recognition</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install face_recognition</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装face_recognition过程中会自动安装 numpy、scipy 等</span> </span><br></pre></td></tr></table></figure><hr><h4 id="二、使用教程"><a href="#二、使用教程" class="headerlink" title="二、使用教程"></a>二、使用教程</h4><h5 id="1、facial-features文件夹"><a href="#1、facial-features文件夹" class="headerlink" title="1、facial_features文件夹"></a>1、facial_features文件夹</h5><blockquote><p>此demo主要展示了识别指定图片中人脸的特征数据，下面就是人脸的八个特征，我们就是要获取特征数据</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#x27;chin&#x27;,</span><br><span class="line">&#x27;left_eyebrow&#x27;,</span><br><span class="line">&#x27;right_eyebrow&#x27;,</span><br><span class="line">&#x27;nose_bridge&#x27;,</span><br><span class="line">&#x27;nose_tip&#x27;,</span><br><span class="line">&#x27;left_eye&#x27;,</span><br><span class="line">&#x27;right_eye&#x27;,</span><br><span class="line">&#x27;top_lip&#x27;,</span><br><span class="line">&#x27;bottom_lip&#x27;</span><br></pre></td></tr></table></figure><h5 id="运行结果："><a href="#运行结果：" class="headerlink" title="运行结果："></a>运行结果：</h5><h6 id="自动识别图片中的人脸，并且识别它的特征"><a href="#自动识别图片中的人脸，并且识别它的特征" class="headerlink" title="自动识别图片中的人脸，并且识别它的特征"></a>自动识别图片中的人脸，并且识别它的特征</h6><h6 id="原图："><a href="#原图：" class="headerlink" title="原图："></a>原图：</h6><p><img src="https://ws1.sinaimg.cn/large/005EneYkly1fot3482971j30xc1n7tby.jpg"><br><img src="https://ws1.sinaimg.cn/large/005EneYkly1fostfh1gbuj30dl0kfqc5.jpg"></p><h6 id="特征数据，数据就是运行出来的矩阵，也就是一个二维数组"><a href="#特征数据，数据就是运行出来的矩阵，也就是一个二维数组" class="headerlink" title="特征数据，数据就是运行出来的矩阵，也就是一个二维数组"></a>特征数据，数据就是运行出来的矩阵，也就是一个二维数组</h6><p><img src="https://ws1.sinaimg.cn/large/005EneYkly1fostgvzjatj31dw06daca.jpg"></p><h6 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># 自动识别人脸特征</span></span><br><span class="line"><span class="comment"># filename : find_facial_features_in_picture.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入pil模块 ，可用命令安装 apt-get install python-Imaging</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw</span><br><span class="line"><span class="comment"># 导入face_recogntion模块，可用命令安装 pip install face_recognition</span></span><br><span class="line"><span class="keyword">import</span> face_recognition</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将jpg文件加载到numpy 数组中</span></span><br><span class="line">image = face_recognition.load_image_file(<span class="string">&quot;chenduling.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查找图像中所有面部的所有面部特征</span></span><br><span class="line">face_landmarks_list = face_recognition.face_landmarks(image)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;I found &#123;&#125; face(s) in this photograph.&quot;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(face_landmarks_list)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> face_landmarks <span class="keyword">in</span> face_landmarks_list:</span><br><span class="line"></span><br><span class="line">   <span class="comment">#打印此图像中每个面部特征的位置</span></span><br><span class="line">    facial_features = [</span><br><span class="line">        <span class="string">&#x27;chin&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;left_eyebrow&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;right_eyebrow&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;nose_bridge&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;nose_tip&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;left_eye&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;right_eye&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;top_lip&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;bottom_lip&#x27;</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> facial_feature <span class="keyword">in</span> facial_features:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;The &#123;&#125; in this face has the following points: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(facial_feature, face_landmarks[facial_feature]))</span><br><span class="line"></span><br><span class="line">   <span class="comment">#让我们在图像中描绘出每个人脸特征！</span></span><br><span class="line">    pil_image = Image.fromarray(image)</span><br><span class="line">    d = ImageDraw.Draw(pil_image)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> facial_feature <span class="keyword">in</span> facial_features:</span><br><span class="line">        d.line(face_landmarks[facial_feature], width=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    pil_image.show() </span><br></pre></td></tr></table></figure><h4 id="2、find-face文件夹"><a href="#2、find-face文件夹" class="headerlink" title="2、find_face文件夹"></a>2、find_face文件夹</h4><blockquote><p>不仅能识别出来所有的人脸，而且可以将其截图挨个显示出来,打印在前台窗口</p></blockquote><h6 id="原始的图片"><a href="#原始的图片" class="headerlink" title="原始的图片"></a>原始的图片</h6><p><img src="https://ws1.sinaimg.cn/large/005EneYkly1fosvje9oc4j30gl0hctn9.jpg" alt="这里写图片描述"></p><h6 id="识别的图片"><a href="#识别的图片" class="headerlink" title="识别的图片"></a>识别的图片</h6><p><img src="https://ws1.sinaimg.cn/large/005EneYkly1fostk4lgq4j31ew0m1az4.jpg" alt="这里写图片描述"></p><h5 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#  识别图片中的所有人脸并显示出来</span></span><br><span class="line"><span class="comment"># filename : find_faces_in_picture.py</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入pil模块 ，可用命令安装 apt-get install python-Imaging</span></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="comment"># 导入face_recogntion模块，可用命令安装 pip install face_recognition</span></span><br><span class="line"><span class="keyword">import</span> face_recognition</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将jpg文件加载到numpy 数组中</span></span><br><span class="line">image = face_recognition.load_image_file(<span class="string">&quot;yiqi.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用默认的给予HOG模型查找图像中所有人脸</span></span><br><span class="line"><span class="comment"># 这个方法已经相当准确了，但还是不如CNN模型那么准确，因为没有使用GPU加速</span></span><br><span class="line"><span class="comment"># 另请参见: find_faces_in_picture_cnn.py</span></span><br><span class="line">face_locations = face_recognition.face_locations(image)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用CNN模型</span></span><br><span class="line"><span class="comment"># face_locations = face_recognition.face_locations(image, number_of_times_to_upsample=0, model=&quot;cnn&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印：我从图片中找到了 多少 张人脸</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;I found &#123;&#125; face(s) in this photograph.&quot;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(face_locations)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 循环找到的所有人脸</span></span><br><span class="line"><span class="keyword">for</span> face_location <span class="keyword">in</span> face_locations:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 打印每张脸的位置信息</span></span><br><span class="line">        top, right, bottom, left = face_location</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;A face is located at pixel location Top: &#123;&#125;, Left: &#123;&#125;, Bottom: &#123;&#125;, Right: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(top, left, bottom, right)) </span><br><span class="line"><span class="comment"># 指定人脸的位置信息，然后显示人脸图片</span></span><br><span class="line">        face_image = image[top:bottom, left:right]</span><br><span class="line">        pil_image = Image.fromarray(face_image)</span><br><span class="line">        pil_image.show() </span><br></pre></td></tr></table></figure><h4 id="３、know-face文件夹"><a href="#３、know-face文件夹" class="headerlink" title="３、know_face文件夹"></a>３、know_face文件夹</h4><blockquote><p>通过设定的人脸图片识别未知图片中的人脸</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># 识别人脸鉴定是哪个人</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入face_recogntion模块，可用命令安装 pip install face_recognition</span></span><br><span class="line"><span class="keyword">import</span> face_recognition</span><br><span class="line"></span><br><span class="line"><span class="comment">#将jpg文件加载到numpy数组中</span></span><br><span class="line">chen_image = face_recognition.load_image_file(<span class="string">&quot;chenduling.jpg&quot;</span>)</span><br><span class="line"><span class="comment">#要识别的图片</span></span><br><span class="line">unknown_image = face_recognition.load_image_file(<span class="string">&quot;sunyizheng.jpg&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取每个图像文件中每个面部的面部编码</span></span><br><span class="line"><span class="comment">#由于每个图像中可能有多个面，所以返回一个编码列表。</span></span><br><span class="line"><span class="comment">#但是由于我知道每个图像只有一个脸，我只关心每个图像中的第一个编码，所以我取索引0。</span></span><br><span class="line">chen_face_encoding = face_recognition.face_encodings(chen_image)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;chen_face_encoding:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(chen_face_encoding))</span><br><span class="line">unknown_face_encoding = face_recognition.face_encodings(unknown_image)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;unknown_face_encoding :&#123;&#125;&quot;</span>.<span class="built_in">format</span>(unknown_face_encoding))</span><br><span class="line"></span><br><span class="line">known_faces = [</span><br><span class="line">    chen_face_encoding</span><br><span class="line">]</span><br><span class="line"><span class="comment">#结果是True/false的数组，未知面孔known_faces阵列中的任何人相匹配的结果</span></span><br><span class="line">results = face_recognition.compare_faces(known_faces, unknown_face_encoding)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;result :&#123;&#125;&quot;</span>.<span class="built_in">format</span>(results))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;这个未知面孔是 陈都灵 吗? &#123;&#125;&quot;</span>.<span class="built_in">format</span>(results[<span class="number">0</span>]))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;这个未知面孔是 我们从未见过的新面孔吗? &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="keyword">not</span> <span class="literal">True</span> <span class="keyword">in</span> results)) </span><br></pre></td></tr></table></figure><h5 id="4、video文件夹"><a href="#4、video文件夹" class="headerlink" title="4、video文件夹"></a>4、video文件夹</h5><blockquote><p>通过调用电脑摄像头动态获取视频内的人脸，将其和我们指定的图片集进行匹配，可以告知我们视频内的人脸是否是我们设定好的</p></blockquote><h6 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h6><p><img src="https://ws1.sinaimg.cn/large/005EneYkly1fostuqbk69j31dh0lih0x.jpg"></p><h6 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># 摄像头头像识别</span></span><br><span class="line"><span class="keyword">import</span> face_recognition</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">video_capture = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地图像</span></span><br><span class="line">chenduling_image = face_recognition.load_image_file(<span class="string">&quot;chenduling.jpg&quot;</span>)</span><br><span class="line">chenduling_face_encoding = face_recognition.face_encodings(chenduling_image)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地图像二</span></span><br><span class="line">sunyizheng_image = face_recognition.load_image_file(<span class="string">&quot;sunyizheng.jpg&quot;</span>)</span><br><span class="line">sunyizheng_face_encoding = face_recognition.face_encodings(sunyizheng_image)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 本地图片三</span></span><br><span class="line">zhangzetian_image = face_recognition.load_image_file(<span class="string">&quot;zhangzetian.jpg&quot;</span>)</span><br><span class="line">zhangzetian_face_encoding = face_recognition.face_encodings(zhangzetian_image)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create arrays of known face encodings and their names</span></span><br><span class="line"><span class="comment"># 脸部特征数据的集合</span></span><br><span class="line">known_face_encodings = [</span><br><span class="line">    chenduling_face_encoding,</span><br><span class="line">    sunyizheng_face_encoding,</span><br><span class="line">    zhangzetian_face_encoding</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 人物名称的集合</span></span><br><span class="line">known_face_names = [</span><br><span class="line">    <span class="string">&quot;michong&quot;</span>,</span><br><span class="line">    <span class="string">&quot;sunyizheng&quot;</span>,</span><br><span class="line">    <span class="string">&quot;chenduling&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">face_locations = []</span><br><span class="line">face_encodings = []</span><br><span class="line">face_names = []</span><br><span class="line">process_this_frame = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="comment"># 读取摄像头画面</span></span><br><span class="line">    ret, frame = video_capture.read()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 改变摄像头图像的大小，图像小，所做的计算就少</span></span><br><span class="line">    small_frame = cv2.resize(frame, (<span class="number">0</span>, <span class="number">0</span>), fx=<span class="number">0.25</span>, fy=<span class="number">0.25</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># opencv的图像是BGR格式的，而我们需要是的RGB格式的，因此需要进行一个转换。</span></span><br><span class="line">    rgb_small_frame = small_frame[:, :, ::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Only process every other frame of video to save time</span></span><br><span class="line">    <span class="keyword">if</span> process_this_frame:</span><br><span class="line">        <span class="comment"># 根据encoding来判断是不是同一个人，是就输出true，不是为flase</span></span><br><span class="line">        face_locations = face_recognition.face_locations(rgb_small_frame)</span><br><span class="line">        face_encodings = face_recognition.face_encodings(rgb_small_frame, face_locations)</span><br><span class="line"></span><br><span class="line">        face_names = []</span><br><span class="line">        <span class="keyword">for</span> face_encoding <span class="keyword">in</span> face_encodings:</span><br><span class="line">            <span class="comment"># 默认为unknown</span></span><br><span class="line">            matches = face_recognition.compare_faces(known_face_encodings, face_encoding)</span><br><span class="line">            name = <span class="string">&quot;Unknown&quot;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment"># if match[0]:</span></span><br><span class="line">            <span class="comment">#     name = &quot;michong&quot;</span></span><br><span class="line">            <span class="comment"># If a match was found in known_face_encodings, just use the first one.</span></span><br><span class="line">            <span class="keyword">if</span> <span class="literal">True</span> <span class="keyword">in</span> matches:</span><br><span class="line">                first_match_index = matches.index(<span class="literal">True</span>)</span><br><span class="line">                name = known_face_names[first_match_index]</span><br><span class="line">            face_names.append(name)</span><br><span class="line"></span><br><span class="line">    process_this_frame = <span class="keyword">not</span> process_this_frame</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将捕捉到的人脸显示出来</span></span><br><span class="line">    <span class="keyword">for</span> (top, right, bottom, left), name <span class="keyword">in</span> <span class="built_in">zip</span>(face_locations, face_names):</span><br><span class="line">        <span class="comment"># Scale back up face locations since the frame we detected in was scaled to 1/4 size</span></span><br><span class="line">        top *= <span class="number">4</span></span><br><span class="line">        right *= <span class="number">4</span></span><br><span class="line">        bottom *= <span class="number">4</span></span><br><span class="line">        left *= <span class="number">4</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 矩形框</span></span><br><span class="line">        cv2.rectangle(frame, (left, top), (right, bottom), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#加上标签</span></span><br><span class="line">        cv2.rectangle(frame, (left, bottom - <span class="number">35</span>), (right, bottom), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), cv2.FILLED)</span><br><span class="line">        font = cv2.FONT_HERSHEY_DUPLEX</span><br><span class="line">        cv2.putText(frame, name, (left + <span class="number">6</span>, bottom - <span class="number">6</span>), font, <span class="number">1.0</span>, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Display</span></span><br><span class="line">    cv2.imshow(<span class="string">&#x27;monitor&#x27;</span>, frame)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 按Q退出</span></span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">video_capture.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h5 id="5、boss文件夹"><a href="#5、boss文件夹" class="headerlink" title="5、boss文件夹"></a>5、boss文件夹</h5><blockquote><p>github开源项目,主要是结合摄像头程序+极光推送，实现识别摄像头中的人脸。并且通过极光推送平台给移动端发送消息！<br><a href="https://github.com/MiChongGET/face_collection/tree/master/boss">https://github.com/MiChongGET/face_collection/tree/master/boss</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 人脸识别 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis的使用--（二）与Spring的整合</title>
      <link href="/2018/01/31/Redis%E7%9A%84%E4%BD%BF%E7%94%A8--%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B8%8ESpring%E7%9A%84%E6%95%B4%E5%90%88/"/>
      <url>/2018/01/31/Redis%E7%9A%84%E4%BD%BF%E7%94%A8--%EF%BC%88%E4%BA%8C%EF%BC%89%E4%B8%8ESpring%E7%9A%84%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="主题词：使用Jedis、项目整合Redis"><a href="#主题词：使用Jedis、项目整合Redis" class="headerlink" title="主题词：使用Jedis、项目整合Redis"></a>主题词：使用Jedis、项目整合Redis</h5><ul><li><p>项目中整合jedis和spring框架：</p><ul><li>设计一个相关接口(把String和Hash类型常用方法进行封装)</li><li>完成两个相关实现类(jedisPool的实现和jedisCluster的实现：属性注入)</li><li>完成spring-jedis.xml(将jedisPool的实现和jedisCluster的实现进行注入操作)</li><li>具体内容参看代码实现</li></ul></li><li><p>需求：在tt-common工程的src/test/java中完成Jedis的简单使用</p></li></ul><ol><li>在tt-common工程引入jedis的依赖</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis客户端--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>Jedis的三种使用方法</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJedis1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Jedis jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;10.31.152.30&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">        jedis.set(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;value&quot;</span>);</span><br><span class="line">        System.out.println(jedis.get(<span class="string">&quot;key&quot;</span>));</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJedis2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取jedis池</span></span><br><span class="line">        JedisPool jedisPool = <span class="keyword">new</span> JedisPool(<span class="string">&quot;10.31.152.30&quot;</span>,<span class="number">6379</span>);</span><br><span class="line">        <span class="comment">//获取Jedis对象</span></span><br><span class="line">        Jedis jedis = jedisPool.getResource();</span><br><span class="line">        jedis.set(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;value1&quot;</span>);</span><br><span class="line">        System.out.println(jedis.get(<span class="string">&quot;key1&quot;</span>));</span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        jedis.close();</span><br><span class="line">        jedisPool.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJedis3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建集群节点集合</span></span><br><span class="line">        Set&lt;HostAndPort&gt; nodes = <span class="keyword">new</span> HashSet&lt;HostAndPort&gt;();</span><br><span class="line">        <span class="comment">//将6个节点加入到集合中</span></span><br><span class="line">        nodes.add(<span class="keyword">new</span> HostAndPort(<span class="string">&quot;10.31.152.30&quot;</span>,<span class="number">7001</span>));</span><br><span class="line">        nodes.add(<span class="keyword">new</span> HostAndPort(<span class="string">&quot;10.31.152.30&quot;</span>,<span class="number">7002</span>));</span><br><span class="line">        nodes.add(<span class="keyword">new</span> HostAndPort(<span class="string">&quot;10.31.152.30&quot;</span>,<span class="number">7003</span>));</span><br><span class="line">        nodes.add(<span class="keyword">new</span> HostAndPort(<span class="string">&quot;10.31.152.30&quot;</span>,<span class="number">7004</span>));</span><br><span class="line">        nodes.add(<span class="keyword">new</span> HostAndPort(<span class="string">&quot;10.31.152.30&quot;</span>,<span class="number">7005</span>));</span><br><span class="line">        nodes.add(<span class="keyword">new</span> HostAndPort(<span class="string">&quot;10.31.152.30&quot;</span>,<span class="number">7006</span>));</span><br><span class="line">        <span class="comment">//创建集群对象</span></span><br><span class="line">        JedisCluster jedisCluster = <span class="keyword">new</span> JedisCluster(nodes);</span><br><span class="line">        <span class="comment">//存入数据</span></span><br><span class="line">        jedisCluster.set(<span class="string">&quot;key2&quot;</span>,<span class="string">&quot;value2&quot;</span>);</span><br><span class="line">        System.out.println(jedisCluster.get(<span class="string">&quot;key2&quot;</span>));</span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        jedisCluster.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>完成上述三种方法的使用后，将三种方法的工具类添加tt-common中</li></ol><ul><li>在tt-common中添加com.dhc.common.jedis包</li><li>添加三个工具类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JedisClient.java</span><br><span class="line">JedisClientCluster.java</span><br><span class="line">JedisClientPool.java</span><br><span class="line"></span><br><span class="line">JsonUtils.java</span><br></pre></td></tr></table></figure><hr><ul><li>需求：Spring项目整合Redis</li></ul><ol><li>创建spring-jedis.xml文件</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 连接池版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jedisPoolConfig&quot;</span> <span class="attr">class</span>=<span class="string">&quot;redis.clients.jedis.JedisPoolConfig&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 最大连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxTotal&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 最大空闲连接数 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 每次释放连接的最大数目 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;numTestsPerEvictionRun&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1024&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 释放连接的扫描间隔（毫秒） --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;timeBetweenEvictionRunsMillis&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30000&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接最小空闲时间 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minEvictableIdleTimeMillis&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1800000&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接空闲多久后释放, 当空闲时间&gt;该值 且 空闲连接&gt;最大空闲连接数 时直接释放 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;softMinEvictableIdleTimeMillis&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10000&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 获取连接时的最大等待毫秒数,小于零:阻塞不确定的时间,默认-1 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxWaitMillis&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1500&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在获取连接的时候检查有效性, 默认false --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;testOnBorrow&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在空闲时检查有效性, 默认false --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;testWhileIdle&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接耗尽时是否阻塞, false报异常,ture阻塞直到超时, 默认true --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;blockWhenExhausted&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jedisPool&quot;</span> <span class="attr">class</span>=<span class="string">&quot;redis.clients.jedis.JedisPool&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;poolConfig&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;jedisPoolConfig&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;host&quot;</span> <span class="attr">value</span>=<span class="string">&quot;192.168.31.117&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;port&quot;</span> <span class="attr">value</span>=<span class="string">&quot;6379&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jedisClientPool&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dhc.common.jedis.JedisClientPool&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jedisPool&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;jedisPool&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--集群版本--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jedisCluster&quot;</span> <span class="attr">class</span>=<span class="string">&quot;redis.clients.jedis.JedisCluster&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;nodes&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;redis.clients.jedis.HostAndPort&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;host&quot;</span> <span class="attr">value</span>=<span class="string">&quot;192.168.31.117&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;port&quot;</span> <span class="attr">value</span>=<span class="string">&quot;7001&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;redis.clients.jedis.HostAndPort&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;host&quot;</span> <span class="attr">value</span>=<span class="string">&quot;192.168.31.117&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;port&quot;</span> <span class="attr">value</span>=<span class="string">&quot;7002&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;redis.clients.jedis.HostAndPort&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;host&quot;</span> <span class="attr">value</span>=<span class="string">&quot;192.168.31.117&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;port&quot;</span> <span class="attr">value</span>=<span class="string">&quot;7003&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;redis.clients.jedis.HostAndPort&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;host&quot;</span> <span class="attr">value</span>=<span class="string">&quot;192.168.31.117&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;port&quot;</span> <span class="attr">value</span>=<span class="string">&quot;7004&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;redis.clients.jedis.HostAndPort&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;host&quot;</span> <span class="attr">value</span>=<span class="string">&quot;192.168.31.117&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;port&quot;</span> <span class="attr">value</span>=<span class="string">&quot;7005&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;redis.clients.jedis.HostAndPort&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;host&quot;</span> <span class="attr">value</span>=<span class="string">&quot;192.168.31.117&quot;</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;port&quot;</span> <span class="attr">value</span>=<span class="string">&quot;7006&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;poolConfig&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;jedisPoolConfig&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jedisClientCluster&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.dhc.common.jedis.JedisClientCluster&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jedisCluster&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;jedisCluster&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li>使用时将类型注入可以选择其中一个版本</li></ol><ul><li><p>单机版的注入时，将spring-jedis.xml中的集群版本注释，注入接口JedisClient.java</p></li><li><p>集群版本注入时，将spring-jedis.xml中的单机版本注释，注入接口JedisClient.java</p></li><li><p>作业：完成首页门户的轮播图效果（redis集群）</p></li></ul><hr><ul><li><p>需求：解决<strong>查询缓存</strong>问题与<strong>同步缓存</strong>问题</p></li><li><p>读数据规则（查询缓存问题）：先判断缓存中是否有要的数据</p><ul><li>若有，则直接加载</li><li>若无，则去DB加载，并存入缓存中</li><li>实际代码举例</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;TbContent&gt; <span class="title">getContentListByCid</span><span class="params">(Long cid)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//查询缓存，如果存在直接加载</span></span><br><span class="line">        String json = jedisClient.hget(<span class="string">&quot;CONTENT_LIST&quot;</span>,Long.toString(cid));</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isNotBlank(json))&#123;</span><br><span class="line">            List&lt;TbContent&gt; list = JsonUtils.jsonToList(json,TbContent.class);</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果缓存中没有</span></span><br><span class="line">    TbContentExample example = <span class="keyword">new</span> TbContentExample();</span><br><span class="line">    TbContentExample.Criteria criteria = example.createCriteria();</span><br><span class="line">    criteria.andCategoryIdEqualTo(cid);</span><br><span class="line">    List&lt;TbContent&gt; clist = contentMapper.selectByExample(example);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//将查询出的数据存放到缓存中</span></span><br><span class="line">        jedisClient.hset(<span class="string">&quot;CONTENT_LIST&quot;</span>,Long.toString(cid),JsonUtils.objectToJson(clist));</span><br><span class="line">        <span class="keyword">return</span> clist;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>改数据规则（缓存同步问题）：<ul><li>直接失效缓存数据，再修改DB内容</li><li>避免突发情况：避免DB修改成功，但由于网络或者其他问题导致缓存数据没有清理，造成了脏数据</li><li>实际代码举例</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addContent</span><span class="params">(TbContent content)</span></span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">//缓存同步，删除缓存中对应的数据</span></span><br><span class="line">        jedisClient.hdel(<span class="string">&quot;CONTENT_LIST&quot;</span>,content.getId().toString());</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    content.setCreated(<span class="keyword">new</span> Date());</span><br><span class="line">    content.setUpdated(<span class="keyword">new</span> Date());</span><br><span class="line">    <span class="keyword">int</span> count = contentMapper.insert(content);</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 集群 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis的使用--（一）集群的搭建</title>
      <link href="/2018/01/31/Redis%E7%9A%84%E4%BD%BF%E7%94%A8--%EF%BC%88%E4%B8%80%EF%BC%89%E9%9B%86%E7%BE%A4%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
      <url>/2018/01/31/Redis%E7%9A%84%E4%BD%BF%E7%94%A8--%EF%BC%88%E4%B8%80%EF%BC%89%E9%9B%86%E7%BE%A4%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h5 id="主题词：负载均衡高可用、redis集群"><a href="#主题词：负载均衡高可用、redis集群" class="headerlink" title="主题词：负载均衡高可用、redis集群"></a>主题词：负载均衡高可用、redis集群</h5><ul><li>需求：负载均衡高可用的概念</li></ul><ol><li>什么是负载均衡高可用</li></ol><blockquote><p>Nginx一般用作负载均衡服务器，可见处于网络中非常重要的位置，一旦Nginx服务器宕机无法提供服务，那么将影响严重。所以需要负载均衡高可用。</p></blockquote><blockquote><p>高可用——主从备份</p></blockquote><ol start="2"><li>keepalived+nginx实现主从备份</li></ol><blockquote><p>Keepalived的作用是检测服务器的状态，如果有一台web服务器宕机，或工作出现故障，Keepalived将检测到，并将有故障的服务器从系统中剔除，同时使用其他服务器代替该服务器的工作，当服务器工作正常后Keepalived自动将服务器加入到服务器群中，这些工作全部自动完成，不需要人工干涉，需要人工做的只是修复故障的服务器。</p></blockquote><ol start="3"><li>keepalived工作原理</li></ol><blockquote><p>keepalived是以VRRP协议为实现基础的，VRRP全称Virtual Router Redundancy Protocol，即虚拟路由冗余协议。</p></blockquote><blockquote><p>虚拟路由冗余协议，可以认为是实现路由器高可用的协议，即将N台提供相同功能的路由器组成一个路由器组，这个组里面有一个master和多个backup，master上面有一个对外提供服务的vip（该路由器所在局域网内其他机器的默认路由为该vip），master会发组播，当backup收不到vrrp包时就认为master宕掉了，这时就需要根据VRRP的优先级来选举一个backup当master。这样的话就可以保证路由器的高可用了。</p></blockquote><blockquote><p>keepalived主要有三个模块，分别是core、check和vrrp。core模块为keepalived的核心，负责主进程的启动、维护以及全局配置文件的加载和解析。check负责健康检查，包括常见的各种检查方式。vrrp模块是来实现VRRP协议的。</p></blockquote><ol start="4"><li>搭建过程可参考《keepalived权威指南中文.pdf》</li></ol><ul><li>需求：完成redis集群的搭建</li></ul><ol><li><p>了解集群和主从的区别</p></li><li><p>redis集群基本概念</p></li></ol><blockquote><p>redis集群的详细贴子：<a href="http://blog.csdn.net/sanwenyublog/article/details/52942236">http://blog.csdn.net/sanwenyublog/article/details/52942236</a></p></blockquote><blockquote><p>redis集群中至少应该有三个节点。要保证集群的高可用，每个节点需要有一个备份机。因此redis集群至少需要六台服务器</p></blockquote><blockquote><p>这里搭建的是伪分布模式，可以使用一台服务器运行6个redis实例，修改redis的端口号为7001-7006</p></blockquote><blockquote><p>相关算法：<a href="http://blog.csdn.net/u014490157/article/details/52244378">http://blog.csdn.net/u014490157/article/details/52244378</a></p></blockquote><ol start="3"><li>redis集群的搭建</li></ol><ul><li>安装ruby环境</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install ruby</span><br><span class="line">yum install rubygems</span><br></pre></td></tr></table></figure><ul><li>安装ruby脚本运行使用的包</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 离线安装</span><br><span class="line">gem install redis-3.0.7.gem</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 在线安装</span><br><span class="line">gem install redis -v 3.0.7</span><br></pre></td></tr></table></figure><ul><li>创建6台服务器，将6台的端口号修改7001——7006</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、将端口修改为7001-7006</span><br><span class="line">2、将集群前面#注释去除 cluster-enabled yes</span><br><span class="line">3、如果是云服务器，例如端口是7001，则将7001和17001加入安全组</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>清除每一个节点的缓存数据</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">bin/redis-cli -p 7002 -c</span><br><span class="line">127.0.0.1:7002&gt; flushall</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:7002&gt; cluster reset</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:7002&gt; quit</span><br><span class="line">[root@VM_241_143_centos redis02]# cd ..</span><br><span class="line">[root@VM_241_143_centos redis-cluster]# cd redis03</span><br><span class="line">[root@VM_241_143_centos redis03]# bin/redis-cli -p 7003 -c</span><br><span class="line">127.0.0.1:7003&gt; flushall</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:7003&gt; cluster reset</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:7003&gt; quit</span><br></pre></td></tr></table></figure><ul><li>自定义shell脚本启动6台服务器</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cd /usr/local/redis-cluster/redis01</span><br><span class="line">bin/redis-server redis.conf</span><br><span class="line">cd ../redis02</span><br><span class="line">bin/redis-server redis.conf</span><br><span class="line">cd ../redis03</span><br><span class="line">bin/redis-server redis.conf</span><br><span class="line">cd ../redis04</span><br><span class="line">bin/redis-server redis.conf</span><br><span class="line">cd ../redis05</span><br><span class="line">bin/redis-server redis.conf</span><br><span class="line">cd ../redis06</span><br><span class="line">bin/redis-server redis.conf</span><br></pre></td></tr></table></figure><ul><li><p>自定义shell脚本关闭6台服务器交给大家来做</p></li><li><p>运行如下代码搭建集群环境</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-trib.rb create --replicas 1 10.31.152.30:7001 10.31.152.30:7002 10.31.152.30:7003 10.31.152.30:7004 10.31.152.30:7005 10.31.152.30:7006</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-trib.rb create --replicas 1 10.31.166.22:9001 10.31.166.22:9002 10.31.166.22:9003 10.31.166.22:9004 10.31.166.22:9005 10.31.166.22:9006</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./redis-trib.rb create --replicas 1 119.29.181.95:7001 119.29.181.95:7002 119.29.181.95:7003 119.29.181.95:7004 119.29.181.95:7005 119.29.181.95:7006</span><br></pre></td></tr></table></figure><ul><li>集群创建成功的两张截图</li></ul><p><img src="https://i.loli.net/2017/09/14/59ba40edb0422.jpg" alt="image"><br><img src="https://i.loli.net/2017/09/14/59ba40edc85f6.jpg" alt="image"></p><ul><li>客户端如何连接集群中的机器</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># -p 端口号</span><br><span class="line"># -c 开启reidis cluster模式,连接redis cluster节点时候使用</span><br><span class="line">bin/redis-cli -p 7004 -c</span><br></pre></td></tr></table></figure><ul><li>往集群节点存入数据进行测试，查看数据到底存入到哪个节点</li></ul><blockquote><p>redis集群中内置了16384个哈希槽，当需要往集群中存放键值对的时候，redis先对key使用CRC16算法算出一个结果，然后拿这个结果对16384求余，这样每个key都会对应一个编号为0-16383之间的哈希槽，redis会根据节点数量大致均等的将哈希槽映射到不同的节点上</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 集群 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>淮师2017校园新闻爬取&amp;&amp;WordCloud年度词云分析</title>
      <link href="/2017/12/07/%E6%B7%AE%E5%B8%882017%E6%A0%A1%E5%9B%AD%E6%96%B0%E9%97%BB%E7%88%AC%E5%8F%96-WordCloud%E5%B9%B4%E5%BA%A6%E8%AF%8D%E4%BA%91%E5%88%86%E6%9E%90/"/>
      <url>/2017/12/07/%E6%B7%AE%E5%B8%882017%E6%A0%A1%E5%9B%AD%E6%96%B0%E9%97%BB%E7%88%AC%E5%8F%96-WordCloud%E5%B9%B4%E5%BA%A6%E8%AF%8D%E4%BA%91%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>前言：最近一直想做数据采集这块，想到年底了，来个年终总结什么的。所以就想到了爬取学校2017年的校内新闻。基于采集的五百多篇新闻结合Python的WordCloud做出来个词云，可视化新闻图片，根据关键词出现次数自动设置大小。效果图如下:</p></blockquote><p><img src="https://file.buildworld.cn/img/20171207202848015"></p><h2 id="一、爬虫模块："><a href="#一、爬虫模块：" class="headerlink" title="一、爬虫模块："></a>一、爬虫模块：</h2><blockquote><p>爬虫模块使用了Java的开源爬虫框架jsoup。通过对页面的批量获取以及对网页进行分析从而得到新闻内容。<br>因为学校的网站过于简单，没有使用现在流行的json接口，也没有严格的反爬虫验证，所以爬取新闻没什么技术难度，那就不需要去找接口了，比网易那个简单多了，有兴趣可以看看我那篇博客 网易云音乐API获取分析。</p></blockquote><p><img src="https://ae01.alicdn.com/kf/H6c12bdfea3544428a196f5ede7a26c80Q.jpg"><br><img src="https://ae01.alicdn.com/kf/Hcf71889edc1e48398f73c37b599dc699g.jpg"></p><blockquote><p>从上面的图片可以看出，新闻列表是写在table中的，每一个标题就是对应一个链接，也就是新闻正文部分。所以我们第一步就是要先通过新闻列表获取新闻详情。<br>首先批量获取新闻的URL。使用get方式请求链接获取网页内容，返回来是一个完整的网页内容。我们该如何通过从一个复杂的网页获取我们想要的内容呢？引出jsoup框架，一代神器！使用jsoup框架的时候你感觉你在使用正则表达式，但是比正则容易多了。jsoup的官网：<a href="http://www.open-open.com/jsoup/%E3%80%82">http://www.open-open.com/jsoup/。</a></p></blockquote><h3 id="1、获取新闻链接"><a href="#1、获取新闻链接" class="headerlink" title="1、获取新闻链接"></a>1、获取新闻链接</h3><p><strong>先贴上代码看看：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getArticleList</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;<span class="number">38</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">String list = HttpUtils.doGet(<span class="string">&quot;http://www.hnnu.edu.cn/s/21/t/148/p/11/i/&quot;</span>+i+<span class="string">&quot;/list.htm&quot;</span>);</span><br><span class="line">Document doc = Jsoup.parse(list);</span><br><span class="line">Elements div_content = doc.select(<span class="string">&quot;a[href][target][style]&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (Element element : div_content) &#123;</span><br><span class="line">String href = element.attr(<span class="string">&quot;href&quot;</span>);</span><br><span class="line">getArticle(href);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>1）分析链接，通过查阅可以看出2017年的新闻总共占了37页，通过for循环就可以获取2017年的列表页。</li><li>2）通过工具类获取网页内容。</li><li>3）先获取document对象，再输入指定的过滤规则就可以得到a标签，但是我们需要获得a标签里面的href属性。</li><li>4）使用Element的attr方法获得标签里面的属性</li></ul><h3 id="2、爬取新闻内容"><a href="#2、爬取新闻内容" class="headerlink" title="2、爬取新闻内容"></a>2、爬取新闻内容</h3><p><img src="https://ae01.alicdn.com/kf/H11060439a90c4f2787c1c4b9a6e9e6ffX.jpg"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getArticle</span><span class="params">(String url )</span></span>&#123;</span><br><span class="line"><span class="comment">//先获取新闻列表</span></span><br><span class="line">count++;</span><br><span class="line">System.out.println(<span class="string">&quot;第&quot;</span>+count+<span class="string">&quot;篇文章&quot;</span>);</span><br><span class="line">String getUrl = <span class="string">&quot;http://www.hnnu.edu.cn&quot;</span>+url;</span><br><span class="line">String list = HttpUtils.doGet(getUrl);</span><br><span class="line">Document doc = Jsoup.parse(list);</span><br><span class="line">Elements div_content = doc.select(<span class="string">&quot;span[style]&quot;</span>);</span><br><span class="line"><span class="comment">//将爬取的新闻转化为集合</span></span><br><span class="line">List&lt;String&gt; eachText = div_content.eachText();</span><br><span class="line">StringBuffer content = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; eachText.size(); i++) &#123;</span><br><span class="line"><span class="comment">//去除作者等信息</span></span><br><span class="line"><span class="keyword">if</span>(i&gt;<span class="number">2</span>)&#123;</span><br><span class="line">content.append(eachText.get(i));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//System.out.println(content.toString());</span></span><br><span class="line"><span class="comment">//以Mybatis方式插入数据库</span></span><br><span class="line">ArticleService as = <span class="keyword">new</span> ArticleService();</span><br><span class="line">Article article = <span class="keyword">new</span> Article(content.toString(), getUrl);</span><br><span class="line">System.out.println(article);</span><br><span class="line"></span><br><span class="line">as.insert(article);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>1）先请求获取新闻详情网页</li><li>2）发现新闻的内容都是写在了span标签里面，通过指定获取span标签的内容</li><li>3）再使用span[style]近一步过滤内容</li><li>4）为了后面的数据分析的准确度，所以此处去除作者之类的内容</li><li>5）使用MyBatis框架将数据写到数据库中。如下图：</li></ul><h2 id="二、词云模块："><a href="#二、词云模块：" class="headerlink" title="二、词云模块："></a>二、词云模块：</h2><p><strong>词云模块使用了Python语言。</strong></p><ul><li>1、首先安装WorlCloud模块。当然不是一次就能安装成功的，遇到了很多坑！放弃Python2使用了Python3，无奈，Python2安装插件安装了一晚上加一上午，还没搞定！果断换了Python3。抛出链接，自己总结了一下<a href="http://blog.csdn.net/qq_31673689/article/details/78745155%E3%80%82">http://blog.csdn.net/qq_31673689/article/details/78745155。</a></li><li>2、使用Python的PyMysql框架读取数据库，关于pymysql的安装和使用请看我的另一篇博客：<a href="http://blog.csdn.net/qq_31673689/article/details/78745207">http://blog.csdn.net/qq_31673689/article/details/78745207</a></li><li>3、将新闻内容取出写入到本地的一个TXT文件中，贴出代码：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> pymysql.cursors</span><br><span class="line"><span class="comment">#数据库连接设置</span></span><br><span class="line">connection = pymysql.connect(host=<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">                             port=<span class="number">3306</span>,</span><br><span class="line">                             user=<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">                             password=<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">                             db=<span class="string">&#x27;mybatisdemo&#x27;</span>,</span><br><span class="line">                             charset=<span class="string">&#x27;utf8mb4&#x27;</span>,</span><br><span class="line">                             cursorclass=pymysql.cursors.DictCursor)</span><br><span class="line">cursor = connection.cursor()</span><br><span class="line">sql = <span class="string">&quot;select * from article&quot;</span></span><br><span class="line"><span class="comment">#执行sql查询</span></span><br><span class="line">cursor.execute(sql)</span><br><span class="line"><span class="comment">#查询所有，得到结果集</span></span><br><span class="line">result = cursor.fetchall()</span><br><span class="line"><span class="comment">#循环遍历获取结果</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#以追加的方式打开文件,设置为utf-8</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;D:\\PythonStudio\\WORK\\Demo1\\test.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> result:</span><br><span class="line">    <span class="built_in">id</span> = data[<span class="string">&quot;id&quot;</span>]</span><br><span class="line">    <span class="comment">#获取新闻内容</span></span><br><span class="line">    content = data[<span class="string">&quot;content&quot;</span>]</span><br><span class="line">    url = data[<span class="string">&quot;url&quot;</span>]</span><br><span class="line">    f.write(content)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">id</span>,content,url)</span><br><span class="line"> </span><br><span class="line">connection.close()</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><ul><li>4、使用WordCloud模块对TXT文件读取自动分析，并自动生成结果图片<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wordcloud <span class="keyword">import</span> WordCloud,STOPWORDS,ImageColorGenerator</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> scipy.misc <span class="keyword">import</span> imread</span><br><span class="line"> </span><br><span class="line">d = path.dirname(__file__)</span><br><span class="line"><span class="comment">#两种读取背景图片方式，注意路径不能使用\</span></span><br><span class="line">pic = np.array(Image.<span class="built_in">open</span>(<span class="string">&#x27;D:/PythonStudio/WORK/Demo1/Ciyun/github4.png&#x27;</span>))</span><br><span class="line">bg_pic = imread(path.join(d,<span class="string">&#x27;github.png&#x27;</span>))</span><br><span class="line"> </span><br><span class="line"><span class="comment">#读取收集文章的TXT文件需要使用utf-8</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">u&#x27;D:/PythonStudio/WORK/Demo1/test.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>).read()</span><br><span class="line"><span class="comment"># 你可以通过font_path参数来设置字体集</span></span><br><span class="line"><span class="comment"># width,height,margin可以设置图片属性</span></span><br><span class="line">wordcloud = WordCloud(font_path = <span class="string">r&#x27;C:\\Windows\\Fonts\\STFANGSO.ttf&#x27;</span>,</span><br><span class="line">                      background_color=<span class="string">&quot;white&quot;</span>,</span><br><span class="line">                      max_words=<span class="number">1000</span>,</span><br><span class="line">                      max_font_size=<span class="number">100</span>,</span><br><span class="line">                      random_state=<span class="number">50</span>,</span><br><span class="line">                      scale=<span class="number">5</span>,</span><br><span class="line">                      mask=pic).generate(f)</span><br><span class="line"><span class="comment">#显示结果</span></span><br><span class="line">plt.imshow(wordcloud)</span><br><span class="line">plt.axis(<span class="string">&quot;off&quot;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment">#保存到本地图片中</span></span><br><span class="line">wordcloud.to_file(<span class="string">&#x27;test.png&#x27;</span>)</span><br></pre></td></tr></table></figure><img src="https://ae01.alicdn.com/kf/H6c21b61389d848f8a10d10d52ccdc5ddZ.jpg"></li></ul><p><img src="https://ae01.alicdn.com/kf/H5ee1d6be6ddc4631a6077c275ba2f93bV.jpg"></p><blockquote><p>总结：本次小项目使用到了Java和Python两种语言，（其实Python也适合爬虫，但是现在Java比较顺手，所以将就了就使用了Java）新闻爬取模块没什么难点，就是细心一点分析一下网页就行了。Python的模块就比较坑了！各种不兼容，插件安装不上去！最后还是靠着耐心解决了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 校园 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> WordCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网易云音乐API获取分析</title>
      <link href="/2017/11/23/%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90API%E8%8E%B7%E5%8F%96%E5%88%86%E6%9E%90/"/>
      <url>/2017/11/23/%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90API%E8%8E%B7%E5%8F%96%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><blockquote><p>项目地址：<a href="https://github.com/MiChongGET/CloudMusicApi">https://github.com/MiChongGET/CloudMusicApi</a>  ,喜欢的朋友star一下</p></blockquote><h2 id="一、网易云音乐歌曲评论数据获取分析"><a href="#一、网易云音乐歌曲评论数据获取分析" class="headerlink" title="一、网易云音乐歌曲评论数据获取分析"></a>一、网易云音乐歌曲评论数据获取分析</h2><blockquote><p>本来是想着用jsoup来爬取网易的评论，结果一分析发现获取的网页中找不到评论数据。研究了半天，无果。于是百度看看。<br>果然是大厂，在安全方面肯定做的比较多，原因是在传递参数的时候对参数进行加密，所以在我们直接访问网址的时候，如果传递的参数没有经过加密，前端页面就获取不到数据。看看知乎的大神们的解法：<a href="https://www.zhihu.com/question/36081767">https://www.zhihu.com/question/36081767</a></p></blockquote><p><strong>下面是我的分析</strong><br><img src="https://ae01.alicdn.com/kf/H949d927783084247bc52252237ed04d3W.jpg"></p><blockquote><p>我们先对页面分析：</p></blockquote><ul><li>1、首先通过URL得知歌曲的固定id</li><li>2、这是我们需要查看的歌曲</li><li>3、通过开发者工具可以找到评论的API接口</li><li>4、我们可以看到response给我们的是json数据，我们所需要的评论数据就是包含在json数据中。</li></ul><blockquote><p>现在问题来了，API接口知道了，直接访问行不行呢？答案是，肯定不行啊！最起码我们要把歌曲的id传过去，才可以找到指定的评论啊。<br>通过分析可以知道，参数没有放在URL中，所以参数肯定是post过去的。要不怎么说是大厂呢，就算是你把参数放在请求头也是不行的！如果我是产品经理肯定要程序员去加密传输数据，我大厂的数据岂是你能随便获取的！<br>继续分析：<br><img src="https://ae01.alicdn.com/kf/He7f85dc58e9540fd90eeb064f09b3a8cU.jpg"></p></blockquote><p><strong>通过在header中我们可以发现完整的请求地址，以及包头的一些参数配置。</strong><br><strong>重点来了：</strong><br><img src="https://ae01.alicdn.com/kf/Hd690b10a961243fc9c1ec341474a15a7u.jpg"></p><blockquote><p>在data中我们发现了两个参数，对，就是加密之后的参数，肯定看不懂啦。这都是加密之后的密文。这里肯定是我们要传递的参数，包括歌曲的id什么的，但是加密算法我们怎么能知道呢？<br>走到这一步我们似乎前一脚已经踏进去了，还没有落地，发现脚下埋着地雷！<br>不急不急，再神秘的算法也是人写的嘛！总会有破解的方法。</p></blockquote><h2 id="二、post数据加密破解"><a href="#二、post数据加密破解" class="headerlink" title="二、post数据加密破解"></a>二、post数据加密破解</h2><blockquote><p>为了安全问题，一般程序员或多或少会对数据进行加密。一般加解密的程序只有开发者自己清楚。<br>总是有那么些大牛平时没事干就喜欢琢磨这些事情，通过破解这些程序来证明自己。还有的是为了喜欢的女孩，比如下面这位：（这是一个悲伤的故事！）</p></blockquote><p><img src="https://ae01.alicdn.com/kf/Hcf5b10bcaf1f41c3b729d9edd2bd71514.jpg"></p><blockquote><p>这位同学的代码分析能力很强，他提供的方法属于另辟蹊径。其他的大牛都是通过分析js加密算法，然后自己写出来，实现对传输参数的加密，大部分都是使用Python，这位作者使用的是纯Java写的加密程序。通过java内置的ScriptEngine调用js引擎，实现对js中的方法调用，这个我也是第一次听说，在JavaSE6中提供的功能。什么是ScriptEngine,请看博客：<a href="https://www.cnblogs.com/zouhao/p/3644788.html%E6%88%96%E8%80%85">https://www.cnblogs.com/zouhao/p/3644788.html或者</a><br><a href="http://blog.csdn.net/u012660667/article/details/49821811">http://blog.csdn.net/u012660667/article/details/49821811</a><br>作者通过对core.js的核心文件分析，将两万行的代码删减成一千多行，不得不说作者很有耐心啊！最后就简单了，直接在java代码中调用js的方法就可以对参数进行加密了。</p></blockquote><h3 id="现在对代码进行分析："><a href="#现在对代码进行分析：" class="headerlink" title="现在对代码进行分析："></a>现在对代码进行分析：</h3><h4 id="1、首先分析JSSecret-java"><a href="#1、首先分析JSSecret-java" class="headerlink" title="1、首先分析JSSecret.java"></a>1、首先分析JSSecret.java</h4><p><img src="https://ae01.alicdn.com/kf/Ha0cc72dcfb0d4bf3aa64dc065ed99789b.jpg"></p><p><strong>一开始是static中实现起始加载的功能</strong></p><ul><li><p>1）首先使用Java的NIO实现对文件的读取，Path和Files，对于以往的各种IO流大家是不是写吐了</p></li><li><p>2）第二步使用ScriptEngineManager，详情看下面的官方API,使用getEngineByName()方法指定参数，可以获取指定脚本的ScriptEngine的对象。<br><img src="https://ae01.alicdn.com/kf/H82d6513d66754d40956051a66eebe17aP.jpg"><br><img src="https://ae01.alicdn.com/kf/H574f41bf2d1d49cd99ebb0559811f8ffH.jpg"></p></li><li><p>3）第三步创建ScriptEngine对象<br><img src="https://ae01.alicdn.com/kf/H4ec65b2bd74e40caa5473b9a80bc992dC.jpg"><br><img src="https://ae01.alicdn.com/kf/H25635ff4712945af855700c453f0e4f1f.jpg"></p><blockquote><p>也就是说当我们将js代码放入到eval中当做参数就可以执行相应的js代码。</p></blockquote></li><li><p>2）Invocable</p><blockquote><p>这一步我们就要调用js中的方法，上一步我们获取到了js的对象，我们来看看什么是Invocable：</p></blockquote></li></ul><p><img src="https://ae01.alicdn.com/kf/Hbe6810a382794f07b27c1b453105b67dL.jpg"><br><img src="https://ae01.alicdn.com/kf/H1021c06dbf4a439f86a1fe39ab093225g.jpg"></p><h4 id="2、js中实现参数加密："><a href="#2、js中实现参数加密：" class="headerlink" title="2、js中实现参数加密："></a>2、js中实现参数加密：</h4><p><img src="https://ae01.alicdn.com/kf/H95cddf20f4cb41f4bbbb277c04ac926bD.jpg"></p><p><strong>Core.js中部分代码：</strong><br><img src="https://ae01.alicdn.com/kf/Ha97758b534de48fc8eea28284d806f7aq.jpg"></p><p><strong>让我们来看看网易的js代码</strong><br><img src="https://ae01.alicdn.com/kf/H96b7b872a4c7476fb8b319d43d5c93dbx.jpg"></p><blockquote><p>这些都是什么鬼，你没看错，找不到变量名称吧，一般写程序都是按照功能给变量起特定的名字，但是网易的全是abcdefg什么的，这里应该是使用了代码混淆！</p></blockquote><ul><li>1）第一步可以看到。此处执行了core.js中myFunc()方法，将传入的参数paras进行加密。那么paras参数是什么呢？通过程序运行可以看出paras参数是一个json数据集，包含了四个参数，实际测试随着接口的不同参数是可以改变的，csrf_token亲测给不给数据没关系的。主要是offset和limit，懂数据库的同学应该懂得，起始位置和返回数据的数目。Uid可以根据具体的需求来改，参数名称可以从URL中获取到。<br><img src="https://ae01.alicdn.com/kf/H811dfb796966454695c8d52a61293a04p.jpg"></li></ul><p>大家再看看<code>ScriptObjectMirror</code>这个东西，这又是什么鬼？在java6的API找了一圈，结果没找到，java7才支持的，可见作者的见识很广。但是奇怪的是从1.7找到1.8也找不到这个东西！<br><img src="https://ae01.alicdn.com/kf/H00bf6d1a8e504e11bbef78a2c6e69e30n.jpg"></p><blockquote><p>没办去去Oracle的官网去看API了，是不是这玩意太偏了，一般用不到。链接如下：<br><a href="https://docs.oracle.com/javase/9/docs/api/jdk/nashorn/api/scripting/ScriptObjectMirror.html">https://docs.oracle.com/javase/9/docs/api/jdk/nashorn/api/scripting/ScriptObjectMirror.html</a><br>你没看错，这是JDK9，也就是Java9的API，我能怎么办，我也很无奈啊！先看官方解释：<br><img src="https://ae01.alicdn.com/kf/Hf8b422a9639842bc96a52cf01c3e3798Y.jpg"></p></blockquote><blockquote><p>大家看一看，这不就是和Map非常相似嘛，get(参数)方法中的参数就是key，返回值就是value，下面我们来验证一下：这应该是set集合，以<code>Map.Entry&lt;String,Object&gt;</code>为泛型类型，通过foreach我们就可以获取so存储的全部的值。它的两个key分别是encText和encSeckey，它们的值就是js加密过后的值。</p></blockquote><p><img src="https://ae01.alicdn.com/kf/H05f1c9c3f8ae48c8a471878a06b0c38ak.jpg"><br><img src="https://ae01.alicdn.com/kf/Hf4caa6565590402fb18b39b5ac9c9d15h.jpg"><br><strong>源码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">publicObject <span class="title">get</span><span class="params">(finalObject key)</span> </span>&#123;</span><br><span class="line">    checkKey(key);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.inGlobal(newCallable() &#123;</span><br><span class="line">       <span class="function">publicObject <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           returnScriptObjectMirror.translateUndefined(ScriptObjectMirror.<span class="keyword">this</span>.wrapLikeMe(ScriptObjectMirror.<span class="keyword">this</span>.sobj.get(key)));</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2）第二步就是在Map中设置这两个值，最后整个方法返回一个map对象。</p><h2 id="三、数据请求测试"><a href="#三、数据请求测试" class="headerlink" title="三、数据请求测试"></a>三、数据请求测试</h2><p><strong>分析测试类：</strong><br><img src="https://ae01.alicdn.com/kf/Hd998d73790914f21bd77ca3a57aacf719.jpg"></p><ul><li>1）将请求参数封装到json中。<br><img src="https://ae01.alicdn.com/kf/H293a95ab59b244d8b1d8401679d9fa6bo.jpg"></li><li>2）封装请求头。</li><li>3）请求头中主要修改的是url和data的参数，也就是请求地址和携带的参数。</li><li>4）最后通过API接口返回完整的json数据<br><img src="https://ae01.alicdn.com/kf/H02f13edd3dfe484c92e21db8ca9c8aadS.jpg"></li></ul><h2 id="四、爆出其它的API接口："><a href="#四、爆出其它的API接口：" class="headerlink" title="四、爆出其它的API接口："></a>四、爆出其它的API接口：</h2><blockquote><p>通过分析各种页面，发现参数加密方式都是一致的，所以这就很简单了，其它的接口也都出来了。下面做个总结：</p></blockquote><h3 id="1、搜索API："><a href="#1、搜索API：" class="headerlink" title="1、搜索API："></a>1、搜索API：</h3><p> <br>原来的网页地址：<br><a href="http://music.163.com/#/search/m/?id=28193075&amp;s=%E5%9C%A8%E4%BA%BA%E9%97%B4&amp;type=1">http://music.163.com/#/search/m/?id=28193075&amp;s=%E5%9C%A8%E4%BA%BA%E9%97%B4&amp;type=1</a><br> <br>(%E5%9C%A8%E4%BA%BA%E9%97%B4)这个就是我们在搜索框中输入内容<br> <br>搜索建议：<br><a href="http://music.163.com/weapi/search/suggest/web?csrf_token=">http://music.163.com/weapi/search/suggest/web?csrf_token=</a><br> <br>按类型搜索：<br><a href="http://music.163.com/weapi/cloudsearch/get/web?csrf_token=">http://music.163.com/weapi/cloudsearch/get/web?csrf_token=</a><br> <br> <br>在原地址上面传递的参数可以分析：<br>type类型的不同，搜索的类型不同<br>type=1             单曲</p><p>type=10           专辑</p><p>type=100         歌手</p><p>type=1000      歌单</p><p>type=1002      用户</p><p>type=1004       MV</p><p>type=1006      歌词</p><p>type=1009      主播电台   </p><h4 id="2、查看粉丝"><a href="#2、查看粉丝" class="headerlink" title="2、查看粉丝"></a>2、查看粉丝</h4><p>请求头：<br>Referer:<a href="http://music.163.com/user/fans?id=97526496">http://music.163.com/user/fans?id=97526496</a><br> <br>获取指定用户的粉丝：<br><a href="http://music.163.com/weapi/user/getfolloweds?csrf_token=">http://music.163.com/weapi/user/getfolloweds?csrf_token=</a>  </p><h4 id="3、动态："><a href="#3、动态：" class="headerlink" title="3、动态："></a>3、动态：</h4><p><a href="http://music.163.com/user/event?id=97526496">http://music.163.com/user/event?id=97526496</a><br><a href="http://music.163.com/weapi/event/get/97526496?csrf_token=">http://music.163.com/weapi/event/get/97526496?csrf_token=</a>  </p><h4 id="4、播放"><a href="#4、播放" class="headerlink" title="4、播放"></a>4、播放</h4><p><a href="http://music.163.com/weapi/song/enhance/player/url">http://music.163.com/weapi/song/enhance/player/url</a><br>直接播放地址：id可以改为任何存在的歌曲的ID<br><a href="http://music.163.com/outchain/player?type=2&amp;id=516392300&amp;auto=1&amp;height=66&amp;bg=e8e8e8">http://music.163.com/outchain/player?type=2&amp;id=516392300&amp;auto=1&amp;height=66&amp;bg=e8e8e8</a> </p><h4 id="5、评论（热门评论和全部评论）"><a href="#5、评论（热门评论和全部评论）" class="headerlink" title="5、评论（热门评论和全部评论）"></a>5、评论（热门评论和全部评论）</h4><p>516392300这就是歌曲的id<br><a href="http://music.163.com/weapi/v1/resource/comments/R_SO_4_516392300?csrf_token=1ac15bcb947b3900d9e8e6039d121a81">http://music.163.com/weapi/v1/resource/comments/R_SO_4_516392300?csrf_token=1ac15bcb947b3900d9e8e6039d121a81</a></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
