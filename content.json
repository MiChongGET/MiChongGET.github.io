{"meta":{"title":"MiChong Blog","subtitle":null,"description":"A Little Bit!","author":"MiChong","url":"https://MiChongGET.github.io"},"pages":[{"title":"about","date":"2018-05-16T11:41:05.000Z","updated":"2018-05-16T11:41:05.692Z","comments":true,"path":"about/index.html","permalink":"https://MiChongGET.github.io/about/index.html","excerpt":"","text":""},{"title":"分类","date":"2018-05-16T05:46:52.000Z","updated":"2018-05-16T12:36:14.552Z","comments":false,"path":"categories/index.html","permalink":"https://MiChongGET.github.io/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-05-16T05:45:54.000Z","updated":"2018-05-16T12:35:42.299Z","comments":false,"path":"tags/index.html","permalink":"https://MiChongGET.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"springboot整合定时框架-Elastic-job-lite","slug":"springboot整合定时框架-Elastic-job-lite","date":"2018-05-17T01:34:13.598Z","updated":"2018-05-17T01:37:40.623Z","comments":true,"path":"2018/05/17/springboot整合定时框架-Elastic-job-lite/","link":"","permalink":"https://MiChongGET.github.io/2018/05/17/springboot整合定时框架-Elastic-job-lite/","excerpt":"","text":"一、前言本文Github地址 官网地址 当当网张亮主导开发的分布式任务调度框架，结合zookeeper技术解决quartz框架在分布式系统中重复的定时任务导致的不可预见的错误！ 123Elastic-Job是一个分布式调度解决方案，由两个相互独立的子项目Elastic-Job-Lite和Elastic-Job-Cloud组成。Elastic-Job-Lite定位为轻量级无中心化解决方案，使用jar包的形式提供分布式任务的协调服务；Elastic-Job-Cloud采用自研Mesos Framework的解决方案，额外提供资源治理、应用分发以及进程隔离等功能。 架构图 二、SpringBoot整合 官网给的例子是基于spring xml来的，有兴趣的可以去看看，我们的项目采用springboot框架，所以要修改一些东西，比如修改为使用@Bean的方式来启动配置 1、pom配置1234567891011121314151617181920212223&lt;!--框架核心jar包--&gt;&lt;dependency&gt; &lt;groupId&gt;com.github.kuhn-he&lt;/groupId&gt; &lt;artifactId&gt;elastic-job-lite-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;2.1.5&lt;/version&gt;&lt;/dependency&gt;&lt;!--添加数据相关的驱动主要是为了记录任务相关的一些数据，日志--&gt;&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;druid-spring-boot-starter&lt;/artifactId&gt; &lt;version&gt;1.1.2&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&lt;/dependency&gt;&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;&lt;/dependency&gt; 2、application.properties配置1234567891011121314# zookeeper集群elaticjob.zookeeper.server-lists=127.0.0.1:2181elaticjob.zookeeper.namespace=my-project# 主要是为了存储任务执行的日志spring.datasource.druid.log.url=jdbc:mysql://localhost:3306/event_logspring.datasource.druid.log.username=rootspring.datasource.druid.log.password=rootspring.datasource.druid.log.driver-class-name=com.mysql.jdbc.Driver# 自动创建更新验证数据库结构spring.jpa.hibernate.ddl-auto=updatespring.jpa.database=mysqlspring.jpa.show-sql=true 3、使用bean方式配置项目123456789101112131415161718192021222324252627282930313233343536373839404142package cn.buildworld.elasticjob.config;import cn.buildworld.elasticjob.listener.ElasticJobListener;import com.dangdang.ddframe.job.reg.zookeeper.ZookeeperConfiguration;import com.dangdang.ddframe.job.reg.zookeeper.ZookeeperRegistryCenter;import org.springframework.beans.factory.annotation.Value;import org.springframework.boot.autoconfigure.condition.ConditionalOnExpression;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;/** * @Author MiChong * @Email: 1564666023@qq.com * @Create 2018-05-07 18:16 * @Version: V1.0 */@Configuration@ConditionalOnExpression(&quot;&apos;$&#123;elastic.zookeeper.server-lists&#125;&apos;.length() &gt;0&quot;)public class ElasticConfig &#123; /** * 初始化配置 * @param serverList * @param namespace * @return */ @Bean(initMethod = &quot;init&quot;) public ZookeeperRegistryCenter regCenter(@Value(&quot;$&#123;elaticjob.zookeeper.server-lists&#125;&quot;) String serverList , @Value(&quot;$&#123;elaticjob.zookeeper.namespace&#125;&quot;) String namespace) &#123; return new ZookeeperRegistryCenter(new ZookeeperConfiguration(serverList, namespace)); &#125; /** * 设置活动监听，前提是已经设置好了监听，见下一个目录 * @return */ @Bean public ElasticJobListener elasticJobListener() &#123; return new ElasticJobListener(100, 100); &#125;&#125; 4、任务监听器12345678910111213141516171819202122232425262728293031@Componentpublic class ElasticJobListener extends AbstractDistributeOnceElasticJobListener &#123; /** * 设置间隔时间 * @param startedTimeoutMilliseconds * @param completedTimeoutMilliseconds */ public ElasticJobListener(long startedTimeoutMilliseconds, long completedTimeoutMilliseconds) &#123; super(startedTimeoutMilliseconds, completedTimeoutMilliseconds); &#125; /** * 任务开始 * @param shardingContexts */ @Override public void doBeforeJobExecutedAtLastStarted(ShardingContexts shardingContexts) &#123; System.out.println(&quot;任务开始&quot;); &#125; /** * 任务结束 * @param shardingContexts */ @Override public void doAfterJobExecutedAtLastCompleted(ShardingContexts shardingContexts) &#123; System.err.println(&quot;任务结束&quot;); &#125;&#125; 5、数据库配置（任务第一种方式使用到）123456789@Configurationpublic class DataSourceConfig &#123; @Bean(&quot;datasource&quot;) @ConfigurationProperties(&quot;spring.datasource.druid.log&quot;) public DataSource dataSourceTow()&#123; return DruidDataSourceBuilder.create().build(); &#125;&#125; 6、设置任务（三种方式） Part1 通过在注解上面设置任务的cron,name等 123456789101112131415161718192021222324252627282930313233@ElasticSimpleJob(cron = &quot;0/2 * * * * ?&quot;, jobName = &quot;firstJob&quot;, shardingTotalCount = 2, jobParameter = &quot;测试参数&quot;, shardingItemParameters = &quot;0=A,1=B&quot;, dataSource = &quot;datasource&quot;)@Componentpublic class MyJob implements SimpleJob &#123; @Override public void execute(ShardingContext shardingContext) &#123; System.out.println(String.format(&quot;------Thread ID: %s, 任务总片数: %s, &quot; + &quot;当前分片项: %s,当前参数: %s,&quot; + &quot;当前任务名称: %s,当前任务参数: %s,&quot;+ &quot;当前任务的id: %s&quot; , //获取当前线程的id Thread.currentThread().getId(), //获取任务总片数 shardingContext.getShardingTotalCount(), //获取当前分片项 shardingContext.getShardingItem(), //获取当前的参数 shardingContext.getShardingParameter(), //获取当前的任务名称 shardingContext.getJobName(), //获取当前任务参数 shardingContext.getJobParameter(), //获取任务的id shardingContext.getTaskId() )); &#125;&#125; Part2 通过控制器动态添加任务 1234567891011121314151617181920212223242526272829303132333435@RestControllerpublic class TestController &#123; @Autowired private ZookeeperRegistryCenter zookeeperRegistryCenter; /** * 动态添加任务逻辑 */ @RequestMapping(&quot;/test&quot;) public void test() &#123; int shardingTotalCount = 2; String jobName = UUID.randomUUID().toString() + &quot;-test123&quot;; JobCoreConfiguration jobCoreConfiguration = JobCoreConfiguration .newBuilder(jobName, &quot;* * * * * ?&quot;, shardingTotalCount) .shardingItemParameters(&quot;0=A,1=B&quot;) .build(); SimpleJobConfiguration simpleJobConfiguration = new SimpleJobConfiguration(jobCoreConfiguration, MyJob2.class.getCanonicalName()); JobScheduler jobScheduler = new JobScheduler(zookeeperRegistryCenter, LiteJobConfiguration.newBuilder(simpleJobConfiguration).build()); try &#123; jobScheduler.init(); &#125; catch (Exception e) &#123; e.printStackTrace(); throw new RuntimeException(&quot;定时任务创建失败&quot;); &#125; &#125;&#125; Part3 通过handler包装生成任务的方法，简化控制器的代码量 ElasticJobHandler.java 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849@Componentpublic class ElasticJobHandler &#123; @Autowired private ZookeeperRegistryCenter zookeeperRegistryCenter; @Autowired private DataSourceConfig dataSourceConfig; @Autowired private ElasticJobListener elasticJobListener; /** * @param jobName * @param jobClass * @param shardingTotalCount * @param cron * @param id 数据ID * @return */ private static LiteJobConfiguration.Builder simpleJobConfigBuilder(String jobName, Class&lt;? extends SimpleJob&gt; jobClass, int shardingTotalCount, String cron, String id,String parameters) &#123; return LiteJobConfiguration.newBuilder(new SimpleJobConfiguration( JobCoreConfiguration .newBuilder(jobName, cron, shardingTotalCount) .shardingItemParameters(parameters) .jobParameter(id). build(), jobClass.getCanonicalName())); &#125; /** * 添加一个定时任务 * * @param jobName 任务名 * @param cron 表达式 * @param shardingTotalCount 分片数 * @param parameters 当前参数 */ public void addJob(String jobName, String cron, Integer shardingTotalCount, String id,String parameters) &#123; LiteJobConfiguration jobConfig = simpleJobConfigBuilder(jobName, MyJob2.class, shardingTotalCount, cron, id,parameters) .overwrite(true).build(); new SpringJobScheduler(new MyJob2(), zookeeperRegistryCenter, jobConfig, elasticJobListener).init(); &#125;&#125; 控制器 1234567891011121314151617@ResponseBody @RequestMapping(&quot;/add&quot;) public Object add()&#123; Date startTime = new Date(); startTime.setTime(startTime.getTime()+3000); String cron = DateUtil.getCron(startTime); try &#123; elasticJobHandler.addJob(&quot;myjob:&quot;+cron,cron,2,&quot;66666&quot;,&quot;0=A,1=B&quot;); &#125; catch (Exception e) &#123; e.printStackTrace(); return &quot;false&quot;; &#125; return &quot;success&quot;; &#125; 时间工具类（主要是date转换为cron表达式） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748public class DateUtil &#123; /** * 日期转化为cron表达式 * @param date * @return */ public static String getCron(Date date)&#123; String dateFormat=&quot;ss mm HH dd MM ? yyyy&quot;; return DateUtil.fmtDateToStr(date, dateFormat); &#125; /** * cron表达式转为日期 * @param cron * @return */ public static Date getCronToDate(String cron) &#123; String dateFormat=&quot;ss mm HH dd MM ? yyyy&quot;; SimpleDateFormat sdf = new SimpleDateFormat(dateFormat); Date date = null; try &#123; date = sdf.parse(cron); &#125; catch (ParseException e) &#123; return null; &#125; return date; &#125; /** * Description:格式化日期,String字符串转化为Date * * @param date * @param dtFormat * 例如:yyyy-MM-dd HH:mm:ss yyyyMMdd * @return */ public static String fmtDateToStr(Date date, String dtFormat) &#123; if (date == null) return &quot;&quot;; try &#123; SimpleDateFormat dateFormat = new SimpleDateFormat(dtFormat); return dateFormat.format(date); &#125; catch (Exception e) &#123; e.printStackTrace(); return &quot;&quot;; &#125; &#125;&#125;","categories":[{"name":"后端","slug":"后端","permalink":"https://MiChongGET.github.io/categories/后端/"}],"tags":[{"name":"Java","slug":"Java","permalink":"https://MiChongGET.github.io/tags/Java/"},{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://MiChongGET.github.io/tags/SpringBoot/"}]}]}